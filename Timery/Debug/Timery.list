
Timery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c98  08004c98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c98  08004c98  00014c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ca0  08004ca0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca0  08004ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ca4  08004ca4  00014ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000000c  08004cb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08004cb4  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001474a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026fd  00000000  00000000  00034786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00036e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  00038008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027874  00000000  00000000  00039080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001444e  00000000  00000000  000608f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4c38  00000000  00000000  00074d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016997a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004980  00000000  00000000  001699d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c38 	.word	0x08004c38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004c38 	.word	0x08004c38

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 030c 	add.w	r3, r7, #12
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_GPIO_Init+0x78>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a17      	ldr	r2, [pc, #92]	; (8000538 <MX_GPIO_Init+0x78>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <MX_GPIO_Init+0x78>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <MX_GPIO_Init+0x78>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a11      	ldr	r2, [pc, #68]	; (8000538 <MX_GPIO_Init+0x78>)
 80004f4:	f043 0302 	orr.w	r3, r3, #2
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_GPIO_Init+0x78>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0302 	and.w	r3, r3, #2
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2120      	movs	r1, #32
 800050a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050e:	f000 ff6b 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000512:	2320      	movs	r3, #32
 8000514:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	2301      	movs	r3, #1
 8000518:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	4619      	mov	r1, r3
 8000528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052c:	f000 fdb2 	bl	8001094 <HAL_GPIO_Init>

}
 8000530:	bf00      	nop
 8000532:	3720      	adds	r7, #32
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000

0800053c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000542:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <MX_I2C1_Init+0x78>)
 8000544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <MX_I2C1_Init+0x7c>)
 800054a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <MX_I2C1_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000554:	2201      	movs	r2, #1
 8000556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_I2C1_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_I2C1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000576:	480e      	ldr	r0, [pc, #56]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000578:	f000 ff68 	bl	800144c <HAL_I2C_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000582:	f000 f917 	bl	80007b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000586:	2100      	movs	r1, #0
 8000588:	4809      	ldr	r0, [pc, #36]	; (80005b0 <MX_I2C1_Init+0x74>)
 800058a:	f000 ffee 	bl	800156a <HAL_I2CEx_ConfigAnalogFilter>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000594:	f000 f90e 	bl	80007b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000598:	2100      	movs	r1, #0
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_I2C1_Init+0x74>)
 800059c:	f001 f830 	bl	8001600 <HAL_I2CEx_ConfigDigitalFilter>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005a6:	f000 f905 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000028 	.word	0x20000028
 80005b4:	40005400 	.word	0x40005400
 80005b8:	10909cec 	.word	0x10909cec

080005bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0ac      	sub	sp, #176	; 0xb0
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2288      	movs	r2, #136	; 0x88
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 fb23 	bl	8004c28 <memset>
  if(i2cHandle->Instance==I2C1)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a21      	ldr	r2, [pc, #132]	; (800066c <HAL_I2C_MspInit+0xb0>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d13a      	bne.n	8000662 <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005ec:	2340      	movs	r3, #64	; 0x40
 80005ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fe9d 	bl	8002338 <HAL_RCCEx_PeriphCLKConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000604:	f000 f8d6 	bl	80007b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <HAL_I2C_MspInit+0xb4>)
 800060a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060c:	4a18      	ldr	r2, [pc, #96]	; (8000670 <HAL_I2C_MspInit+0xb4>)
 800060e:	f043 0302 	orr.w	r3, r3, #2
 8000612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <HAL_I2C_MspInit+0xb4>)
 8000616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000618:	f003 0302 	and.w	r3, r3, #2
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000620:	23c0      	movs	r3, #192	; 0xc0
 8000622:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000626:	2312      	movs	r3, #18
 8000628:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000638:	2304      	movs	r3, #4
 800063a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000642:	4619      	mov	r1, r3
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <HAL_I2C_MspInit+0xb8>)
 8000646:	f000 fd25 	bl	8001094 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <HAL_I2C_MspInit+0xb4>)
 800064c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800064e:	4a08      	ldr	r2, [pc, #32]	; (8000670 <HAL_I2C_MspInit+0xb4>)
 8000650:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000654:	6593      	str	r3, [r2, #88]	; 0x58
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_I2C_MspInit+0xb4>)
 8000658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800065a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000662:	bf00      	nop
 8000664:	37b0      	adds	r7, #176	; 0xb0
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40005400 	.word	0x40005400
 8000670:	40021000 	.word	0x40021000
 8000674:	48000400 	.word	0x48000400

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b092      	sub	sp, #72	; 0x48
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fb82 	bl	8000d86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f831 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f7ff ff1b 	bl	80004c0 <MX_GPIO_Init>
  MX_TIM16_Init();
 800068a:	f000 f9ef 	bl	8000a6c <MX_TIM16_Init>
  MX_I2C1_Init();
 800068e:	f7ff ff55 	bl	800053c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000692:	f000 f91f 	bl	80008d4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000696:	f000 fac1 	bl	8000c1c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800069a:	f000 f96f 	bl	800097c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 800069e:	480f      	ldr	r0, [pc, #60]	; (80006dc <main+0x64>)
 80006a0:	f002 fb5e 	bl	8002d60 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80006a4:	213c      	movs	r1, #60	; 0x3c
 80006a6:	480e      	ldr	r0, [pc, #56]	; (80006e0 <main+0x68>)
 80006a8:	f002 fdd8 	bl	800325c <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006ac:	2100      	movs	r1, #0
 80006ae:	480d      	ldr	r0, [pc, #52]	; (80006e4 <main+0x6c>)
 80006b0:	f002 fc28 	bl	8002f04 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_ms = HAL_GetTick();
 80006b4:	f000 fbd0 	bl	8000e58 <HAL_GetTick>
 80006b8:	6478      	str	r0, [r7, #68]	; 0x44

  while (1)
  {
	  uint32_t now = HAL_GetTick();
 80006ba:	f000 fbcd 	bl	8000e58 <HAL_GetTick>
 80006be:	6438      	str	r0, [r7, #64]	; 0x40


	  if(now - last_ms >= 500)
 80006c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80006c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006ca:	d3f6      	bcc.n	80006ba <main+0x42>
	  {

		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006cc:	2120      	movs	r1, #32
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d2:	f000 fea1 	bl	8001418 <HAL_GPIO_TogglePin>
		  last_ms = now;
 80006d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006d8:	647b      	str	r3, [r7, #68]	; 0x44
  {
 80006da:	e7ee      	b.n	80006ba <main+0x42>
 80006dc:	2000010c 	.word	0x2000010c
 80006e0:	200000c0 	.word	0x200000c0
 80006e4:	20000074 	.word	0x20000074

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b096      	sub	sp, #88	; 0x58
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	2244      	movs	r2, #68	; 0x44
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f004 fa96 	bl	8004c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	463b      	mov	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800070a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800070e:	f000 ffd1 	bl	80016b4 <HAL_PWREx_ControlVoltageScaling>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000718:	f000 f84c 	bl	80007b4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800071c:	2310      	movs	r3, #16
 800071e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000728:	2360      	movs	r3, #96	; 0x60
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000730:	2301      	movs	r3, #1
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000738:	2328      	movs	r3, #40	; 0x28
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800073c:	2307      	movs	r3, #7
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4618      	mov	r0, r3
 800074e:	f001 f807 	bl	8001760 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000758:	f000 f82c 	bl	80007b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2303      	movs	r3, #3
 8000762:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	2104      	movs	r1, #4
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fbd9 	bl	8001f2c <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000780:	f000 f818 	bl	80007b4 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3758      	adds	r7, #88	; 0x58
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d104      	bne.n	80007a8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800079e:	2120      	movs	r1, #32
 80007a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a4:	f000 fe38 	bl	8001418 <HAL_GPIO_TogglePin>
	}
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40014400 	.word	0x40014400

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	e7fe      	b.n	80007bc <Error_Handler+0x8>
	...

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <HAL_MspInit+0x44>)
 80007c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ca:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <HAL_MspInit+0x44>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6613      	str	r3, [r2, #96]	; 0x60
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <HAL_MspInit+0x44>)
 80007d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_MspInit+0x44>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_MspInit+0x44>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	6593      	str	r3, [r2, #88]	; 0x58
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_MspInit+0x44>)
 80007ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000854:	f000 faec 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000860:	4802      	ldr	r0, [pc, #8]	; (800086c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000862:	f002 fd89 	bl	8003378 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000010c 	.word	0x2000010c

08000870 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <SystemInit+0x5c>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087a:	4a14      	ldr	r2, [pc, #80]	; (80008cc <SystemInit+0x5c>)
 800087c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <SystemInit+0x60>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a11      	ldr	r2, [pc, #68]	; (80008d0 <SystemInit+0x60>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <SystemInit+0x60>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <SystemInit+0x60>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <SystemInit+0x60>)
 800089c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80008a0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80008a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <SystemInit+0x60>)
 80008a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008ac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <SystemInit+0x60>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <SystemInit+0x60>)
 80008b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <SystemInit+0x60>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00
 80008d0:	40021000 	.word	0x40021000

080008d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	; 0x30
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	2224      	movs	r2, #36	; 0x24
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f004 f9a0 	bl	8004c28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	463b      	mov	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_TIM2_Init+0xa4>)
 80008f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_TIM2_Init+0xa4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_TIM2_Init+0xa4>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1919;
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_TIM2_Init+0xa4>)
 8000908:	f240 727f 	movw	r2, #1919	; 0x77f
 800090c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_TIM2_Init+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_TIM2_Init+0xa4>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800091a:	2301      	movs	r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000922:	2301      	movs	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000932:	2301      	movs	r3, #1
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	4619      	mov	r1, r3
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_TIM2_Init+0xa4>)
 8000946:	f002 fbe3 	bl	8003110 <HAL_TIM_Encoder_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000950:	f7ff ff30 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000954:	2300      	movs	r3, #0
 8000956:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_TIM2_Init+0xa4>)
 8000962:	f003 fc57 	bl	8004214 <HAL_TIMEx_MasterConfigSynchronization>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800096c:	f7ff ff22 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3730      	adds	r7, #48	; 0x30
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000c0 	.word	0x200000c0

0800097c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08e      	sub	sp, #56	; 0x38
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099c:	463b      	mov	r3, r7
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
 80009aa:	615a      	str	r2, [r3, #20]
 80009ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <MX_TIM3_Init+0xe8>)
 80009b0:	4a2d      	ldr	r2, [pc, #180]	; (8000a68 <MX_TIM3_Init+0xec>)
 80009b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <MX_TIM3_Init+0xe8>)
 80009b6:	2203      	movs	r2, #3
 80009b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <MX_TIM3_Init+0xe8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80009c0:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <MX_TIM3_Init+0xe8>)
 80009c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <MX_TIM3_Init+0xe8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009ce:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <MX_TIM3_Init+0xe8>)
 80009d0:	2280      	movs	r2, #128	; 0x80
 80009d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009d4:	4823      	ldr	r0, [pc, #140]	; (8000a64 <MX_TIM3_Init+0xe8>)
 80009d6:	f002 f96b 	bl	8002cb0 <HAL_TIM_Base_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80009e0:	f7ff fee8 	bl	80007b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ee:	4619      	mov	r1, r3
 80009f0:	481c      	ldr	r0, [pc, #112]	; (8000a64 <MX_TIM3_Init+0xe8>)
 80009f2:	f002 fef1 	bl	80037d8 <HAL_TIM_ConfigClockSource>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80009fc:	f7ff feda 	bl	80007b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a00:	4818      	ldr	r0, [pc, #96]	; (8000a64 <MX_TIM3_Init+0xe8>)
 8000a02:	f002 fa1d 	bl	8002e40 <HAL_TIM_PWM_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000a0c:	f7ff fed2 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4811      	ldr	r0, [pc, #68]	; (8000a64 <MX_TIM3_Init+0xe8>)
 8000a20:	f003 fbf8 	bl	8004214 <HAL_TIMEx_MasterConfigSynchronization>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a2a:	f7ff fec3 	bl	80007b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2e:	2360      	movs	r3, #96	; 0x60
 8000a30:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2200      	movs	r2, #0
 8000a42:	4619      	mov	r1, r3
 8000a44:	4807      	ldr	r0, [pc, #28]	; (8000a64 <MX_TIM3_Init+0xe8>)
 8000a46:	f002 fdb7 	bl	80035b8 <HAL_TIM_PWM_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a50:	f7ff feb0 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <MX_TIM3_Init+0xe8>)
 8000a56:	f000 f8ab 	bl	8000bb0 <HAL_TIM_MspPostInit>

}
 8000a5a:	bf00      	nop
 8000a5c:	3738      	adds	r7, #56	; 0x38
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000074 	.word	0x20000074
 8000a68:	40000400 	.word	0x40000400

08000a6c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_TIM16_Init+0x48>)
 8000a72:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <MX_TIM16_Init+0x4c>)
 8000a74:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_TIM16_Init+0x48>)
 8000a78:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a7c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <MX_TIM16_Init+0x48>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_TIM16_Init+0x48>)
 8000a86:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a8a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_TIM16_Init+0x48>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_TIM16_Init+0x48>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_TIM16_Init+0x48>)
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_TIM16_Init+0x48>)
 8000aa0:	f002 f906 	bl	8002cb0 <HAL_TIM_Base_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000aaa:	f7ff fe83 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000010c 	.word	0x2000010c
 8000ab8:	40014400 	.word	0x40014400

08000abc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000adc:	d128      	bne.n	8000b30 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae2:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2c:	f000 fab2 	bl	8001094 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <HAL_TIM_Base_MspInit+0x68>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d10c      	bne.n	8000b68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <HAL_TIM_Base_MspInit+0x6c>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b52:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <HAL_TIM_Base_MspInit+0x6c>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6593      	str	r3, [r2, #88]	; 0x58
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <HAL_TIM_Base_MspInit+0x6c>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000b66:	e018      	b.n	8000b9a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <HAL_TIM_Base_MspInit+0x70>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d113      	bne.n	8000b9a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_TIM_Base_MspInit+0x6c>)
 8000b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b76:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <HAL_TIM_Base_MspInit+0x6c>)
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_TIM_Base_MspInit+0x6c>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2019      	movs	r0, #25
 8000b90:	f000 fa49 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b94:	2019      	movs	r0, #25
 8000b96:	f000 fa62 	bl	800105e <HAL_NVIC_EnableIRQ>
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40000400 	.word	0x40000400
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40014400 	.word	0x40014400

08000bb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <HAL_TIM_MspPostInit+0x64>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d11c      	bne.n	8000c0c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_TIM_MspPostInit+0x68>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_TIM_MspPostInit+0x68>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_TIM_MspPostInit+0x68>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bea:	2340      	movs	r3, #64	; 0x40
 8000bec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	4619      	mov	r1, r3
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c08:	f000 fa44 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3720      	adds	r7, #32
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40000400 	.word	0x40000400
 8000c18:	40021000 	.word	0x40021000

08000c1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c22:	4a15      	ldr	r2, [pc, #84]	; (8000c78 <MX_USART2_UART_Init+0x5c>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c60:	f003 fb7e 	bl	8004360 <HAL_UART_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c6a:	f7ff fda3 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000158 	.word	0x20000158
 8000c78:	40004400 	.word	0x40004400

08000c7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0ac      	sub	sp, #176	; 0xb0
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2288      	movs	r2, #136	; 0x88
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 ffc3 	bl	8004c28 <memset>
  if(uartHandle->Instance==USART2)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <HAL_UART_MspInit+0xb0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d13b      	bne.n	8000d24 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f001 fb3d 	bl	8002338 <HAL_RCCEx_PeriphCLKConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc4:	f7ff fd76 	bl	80007b4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_UART_MspInit+0xb4>)
 8000cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ccc:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <HAL_UART_MspInit+0xb4>)
 8000cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <HAL_UART_MspInit+0xb4>)
 8000cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <HAL_UART_MspInit+0xb4>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce4:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <HAL_UART_MspInit+0xb4>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <HAL_UART_MspInit+0xb4>)
 8000cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d10:	2307      	movs	r3, #7
 8000d12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f000 f9b8 	bl	8001094 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d24:	bf00      	nop
 8000d26:	37b0      	adds	r7, #176	; 0xb0
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40004400 	.word	0x40004400
 8000d30:	40021000 	.word	0x40021000

08000d34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d38:	f7ff fd9a 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d3e:	e003      	b.n	8000d48 <LoopCopyDataInit>

08000d40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d46:	3104      	adds	r1, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d48:	480a      	ldr	r0, [pc, #40]	; (8000d74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d50:	d3f6      	bcc.n	8000d40 <CopyDataInit>
	ldr	r2, =_sbss
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d54:	e002      	b.n	8000d5c <LoopFillZerobss>

08000d56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d58:	f842 3b04 	str.w	r3, [r2], #4

08000d5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <LoopForever+0x16>)
	cmp	r2, r3
 8000d5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d60:	d3f9      	bcc.n	8000d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d62:	f003 ff3d 	bl	8004be0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d66:	f7ff fc87 	bl	8000678 <main>

08000d6a <LoopForever>:

LoopForever:
    b LoopForever
 8000d6a:	e7fe      	b.n	8000d6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d6c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000d70:	08004ca8 	.word	0x08004ca8
	ldr	r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d78:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000d7c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000d80:	200001e0 	.word	0x200001e0

08000d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC1_2_IRQHandler>

08000d86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f93d 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d96:	200f      	movs	r0, #15
 8000d98:	f000 f80e 	bl	8000db8 <HAL_InitTick>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d002      	beq.n	8000da8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	71fb      	strb	r3, [r7, #7]
 8000da6:	e001      	b.n	8000dac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000da8:	f7ff fd0a 	bl	80007c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dac:	79fb      	ldrb	r3, [r7, #7]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <HAL_InitTick+0x6c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d023      	beq.n	8000e14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <HAL_InitTick+0x70>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <HAL_InitTick+0x6c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f949 	bl	800107a <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10f      	bne.n	8000e0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d809      	bhi.n	8000e08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f913 	bl	8001026 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_InitTick+0x74>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	e007      	b.n	8000e18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	e004      	b.n	8000e18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	73fb      	strb	r3, [r7, #15]
 8000e12:	e001      	b.n	8000e18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008
 8000e54:	200001dc 	.word	0x200001dc

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	200001dc 	.word	0x200001dc

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	db0b      	blt.n	8000efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f003 021f 	and.w	r2, r3, #31
 8000eec:	4907      	ldr	r1, [pc, #28]	; (8000f0c <__NVIC_EnableIRQ+0x38>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e100 	.word	0xe000e100

08000f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	; (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	; (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
         );
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f7ff ff8e 	bl	8000f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff29 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff3e 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff8e 	bl	8000f64 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5d 	bl	8000f10 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff31 	bl	8000ed4 <__NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa2 	bl	8000fcc <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b087      	sub	sp, #28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a2:	e17f      	b.n	80013a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	2101      	movs	r1, #1
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	fa01 f303 	lsl.w	r3, r1, r3
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8171 	beq.w	800139e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d00b      	beq.n	80010dc <HAL_GPIO_Init+0x48>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d007      	beq.n	80010dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d0:	2b11      	cmp	r3, #17
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b12      	cmp	r3, #18
 80010da:	d130      	bne.n	800113e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001112:	2201      	movs	r2, #1
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	091b      	lsrs	r3, r3, #4
 8001128:	f003 0201 	and.w	r2, r3, #1
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b03      	cmp	r3, #3
 8001148:	d118      	bne.n	800117c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001150:	2201      	movs	r2, #1
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	08db      	lsrs	r3, r3, #3
 8001166:	f003 0201 	and.w	r2, r3, #1
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x128>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b12      	cmp	r3, #18
 80011ba:	d123      	bne.n	8001204 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	08da      	lsrs	r2, r3, #3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3208      	adds	r2, #8
 80011c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	220f      	movs	r2, #15
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	691a      	ldr	r2, [r3, #16]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	08da      	lsrs	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3208      	adds	r2, #8
 80011fe:	6939      	ldr	r1, [r7, #16]
 8001200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0203 	and.w	r2, r3, #3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 80ac 	beq.w	800139e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	4b5f      	ldr	r3, [pc, #380]	; (80013c4 <HAL_GPIO_Init+0x330>)
 8001248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124a:	4a5e      	ldr	r2, [pc, #376]	; (80013c4 <HAL_GPIO_Init+0x330>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6613      	str	r3, [r2, #96]	; 0x60
 8001252:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <HAL_GPIO_Init+0x330>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800125e:	4a5a      	ldr	r2, [pc, #360]	; (80013c8 <HAL_GPIO_Init+0x334>)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001288:	d025      	beq.n	80012d6 <HAL_GPIO_Init+0x242>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4f      	ldr	r2, [pc, #316]	; (80013cc <HAL_GPIO_Init+0x338>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d01f      	beq.n	80012d2 <HAL_GPIO_Init+0x23e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4e      	ldr	r2, [pc, #312]	; (80013d0 <HAL_GPIO_Init+0x33c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d019      	beq.n	80012ce <HAL_GPIO_Init+0x23a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4d      	ldr	r2, [pc, #308]	; (80013d4 <HAL_GPIO_Init+0x340>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d013      	beq.n	80012ca <HAL_GPIO_Init+0x236>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4c      	ldr	r2, [pc, #304]	; (80013d8 <HAL_GPIO_Init+0x344>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00d      	beq.n	80012c6 <HAL_GPIO_Init+0x232>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4b      	ldr	r2, [pc, #300]	; (80013dc <HAL_GPIO_Init+0x348>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <HAL_GPIO_Init+0x22e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4a      	ldr	r2, [pc, #296]	; (80013e0 <HAL_GPIO_Init+0x34c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_GPIO_Init+0x22a>
 80012ba:	2306      	movs	r3, #6
 80012bc:	e00c      	b.n	80012d8 <HAL_GPIO_Init+0x244>
 80012be:	2307      	movs	r3, #7
 80012c0:	e00a      	b.n	80012d8 <HAL_GPIO_Init+0x244>
 80012c2:	2305      	movs	r3, #5
 80012c4:	e008      	b.n	80012d8 <HAL_GPIO_Init+0x244>
 80012c6:	2304      	movs	r3, #4
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_Init+0x244>
 80012ca:	2303      	movs	r3, #3
 80012cc:	e004      	b.n	80012d8 <HAL_GPIO_Init+0x244>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_Init+0x244>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <HAL_GPIO_Init+0x244>
 80012d6:	2300      	movs	r3, #0
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	f002 0203 	and.w	r2, r2, #3
 80012de:	0092      	lsls	r2, r2, #2
 80012e0:	4093      	lsls	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012e8:	4937      	ldr	r1, [pc, #220]	; (80013c8 <HAL_GPIO_Init+0x334>)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	089b      	lsrs	r3, r3, #2
 80012ee:	3302      	adds	r3, #2
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012f6:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <HAL_GPIO_Init+0x350>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800131a:	4a32      	ldr	r2, [pc, #200]	; (80013e4 <HAL_GPIO_Init+0x350>)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001320:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <HAL_GPIO_Init+0x350>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001344:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <HAL_GPIO_Init+0x350>)
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <HAL_GPIO_Init+0x350>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800136e:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <HAL_GPIO_Init+0x350>)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <HAL_GPIO_Init+0x350>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001398:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <HAL_GPIO_Init+0x350>)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3301      	adds	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa22 f303 	lsr.w	r3, r2, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f47f ae78 	bne.w	80010a4 <HAL_GPIO_Init+0x10>
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	371c      	adds	r7, #28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000
 80013cc:	48000400 	.word	0x48000400
 80013d0:	48000800 	.word	0x48000800
 80013d4:	48000c00 	.word	0x48000c00
 80013d8:	48001000 	.word	0x48001000
 80013dc:	48001400 	.word	0x48001400
 80013e0:	48001800 	.word	0x48001800
 80013e4:	40010400 	.word	0x40010400

080013e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
 80013f4:	4613      	mov	r3, r2
 80013f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f8:	787b      	ldrb	r3, [r7, #1]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013fe:	887a      	ldrh	r2, [r7, #2]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001404:	e002      	b.n	800140c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4013      	ands	r3, r2
 8001430:	041a      	lsls	r2, r3, #16
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	43d9      	mvns	r1, r3
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	400b      	ands	r3, r1
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	619a      	str	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e081      	b.n	8001562 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d106      	bne.n	8001478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff f8a2 	bl	80005bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2224      	movs	r2, #36	; 0x24
 800147c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0201 	bic.w	r2, r2, #1
 800148e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800149c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d107      	bne.n	80014c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	e006      	b.n	80014d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80014d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d104      	bne.n	80014e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001508:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691a      	ldr	r2, [r3, #16]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	ea42 0103 	orr.w	r1, r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	021a      	lsls	r2, r3, #8
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69d9      	ldr	r1, [r3, #28]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1a      	ldr	r2, [r3, #32]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2220      	movs	r2, #32
 800154e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b20      	cmp	r3, #32
 800157e:	d138      	bne.n	80015f2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800158a:	2302      	movs	r3, #2
 800158c:	e032      	b.n	80015f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2224      	movs	r2, #36	; 0x24
 800159a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015bc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6819      	ldr	r1, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2220      	movs	r2, #32
 80015e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e000      	b.n	80015f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015f2:	2302      	movs	r3, #2
  }
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b20      	cmp	r3, #32
 8001614:	d139      	bne.n	800168a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800161c:	2b01      	cmp	r3, #1
 800161e:	d101      	bne.n	8001624 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001620:	2302      	movs	r3, #2
 8001622:	e033      	b.n	800168c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2224      	movs	r2, #36	; 0x24
 8001630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0201 	bic.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001652:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	4313      	orrs	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 0201 	orr.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2220      	movs	r2, #32
 800167a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800168a:	2302      	movs	r3, #2
  }
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40007000 	.word	0x40007000

080016b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016c2:	d130      	bne.n	8001726 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016c4:	4b23      	ldr	r3, [pc, #140]	; (8001754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016d0:	d038      	beq.n	8001744 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016da:	4a1e      	ldr	r2, [pc, #120]	; (8001754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2232      	movs	r2, #50	; 0x32
 80016e8:	fb02 f303 	mul.w	r3, r2, r3
 80016ec:	4a1b      	ldr	r2, [pc, #108]	; (800175c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	0c9b      	lsrs	r3, r3, #18
 80016f4:	3301      	adds	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016f8:	e002      	b.n	8001700 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170c:	d102      	bne.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x60>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f2      	bne.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001720:	d110      	bne.n	8001744 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e00f      	b.n	8001746 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800172e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001732:	d007      	beq.n	8001744 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800173c:	4a05      	ldr	r2, [pc, #20]	; (8001754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001742:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40007000 	.word	0x40007000
 8001758:	20000000 	.word	0x20000000
 800175c:	431bde83 	.word	0x431bde83

08001760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e3d4      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001772:	4ba1      	ldr	r3, [pc, #644]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800177c:	4b9e      	ldr	r3, [pc, #632]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 80e4 	beq.w	800195c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d007      	beq.n	80017aa <HAL_RCC_OscConfig+0x4a>
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	2b0c      	cmp	r3, #12
 800179e:	f040 808b 	bne.w	80018b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	f040 8087 	bne.w	80018b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017aa:	4b93      	ldr	r3, [pc, #588]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_RCC_OscConfig+0x62>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e3ac      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1a      	ldr	r2, [r3, #32]
 80017c6:	4b8c      	ldr	r3, [pc, #560]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d004      	beq.n	80017dc <HAL_RCC_OscConfig+0x7c>
 80017d2:	4b89      	ldr	r3, [pc, #548]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017da:	e005      	b.n	80017e8 <HAL_RCC_OscConfig+0x88>
 80017dc:	4b86      	ldr	r3, [pc, #536]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80017de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d223      	bcs.n	8001834 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fd41 	bl	8002278 <RCC_SetFlashLatencyFromMSIRange>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e38d      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001800:	4b7d      	ldr	r3, [pc, #500]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a7c      	ldr	r2, [pc, #496]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 8001806:	f043 0308 	orr.w	r3, r3, #8
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b7a      	ldr	r3, [pc, #488]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	4977      	ldr	r1, [pc, #476]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800181e:	4b76      	ldr	r3, [pc, #472]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	4972      	ldr	r1, [pc, #456]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
 8001832:	e025      	b.n	8001880 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001834:	4b70      	ldr	r3, [pc, #448]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a6f      	ldr	r2, [pc, #444]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 800183a:	f043 0308 	orr.w	r3, r3, #8
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4b6d      	ldr	r3, [pc, #436]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	496a      	ldr	r1, [pc, #424]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001852:	4b69      	ldr	r3, [pc, #420]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	4965      	ldr	r1, [pc, #404]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 8001862:	4313      	orrs	r3, r2
 8001864:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4618      	mov	r0, r3
 8001872:	f000 fd01 	bl	8002278 <RCC_SetFlashLatencyFromMSIRange>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e34d      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001880:	f000 fc36 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 8001884:	4602      	mov	r2, r0
 8001886:	4b5c      	ldr	r3, [pc, #368]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	495a      	ldr	r1, [pc, #360]	; (80019fc <HAL_RCC_OscConfig+0x29c>)
 8001892:	5ccb      	ldrb	r3, [r1, r3]
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
 800189c:	4a58      	ldr	r2, [pc, #352]	; (8001a00 <HAL_RCC_OscConfig+0x2a0>)
 800189e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018a0:	4b58      	ldr	r3, [pc, #352]	; (8001a04 <HAL_RCC_OscConfig+0x2a4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fa87 	bl	8000db8 <HAL_InitTick>
 80018aa:	4603      	mov	r3, r0
 80018ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d052      	beq.n	800195a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	e331      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d032      	beq.n	8001926 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018c0:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a4c      	ldr	r2, [pc, #304]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fac4 	bl	8000e58 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018d4:	f7ff fac0 	bl	8000e58 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e31a      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018e6:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f2:	4b41      	ldr	r3, [pc, #260]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a40      	ldr	r2, [pc, #256]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b3e      	ldr	r3, [pc, #248]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	493b      	ldr	r1, [pc, #236]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001910:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	4936      	ldr	r1, [pc, #216]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
 8001924:	e01a      	b.n	800195c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a33      	ldr	r2, [pc, #204]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001932:	f7ff fa91 	bl	8000e58 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800193a:	f7ff fa8d 	bl	8000e58 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e2e7      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800194c:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x1da>
 8001958:	e000      	b.n	800195c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800195a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d074      	beq.n	8001a52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2b08      	cmp	r3, #8
 800196c:	d005      	beq.n	800197a <HAL_RCC_OscConfig+0x21a>
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	2b0c      	cmp	r3, #12
 8001972:	d10e      	bne.n	8001992 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d10b      	bne.n	8001992 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d064      	beq.n	8001a50 <HAL_RCC_OscConfig+0x2f0>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d160      	bne.n	8001a50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e2c4      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199a:	d106      	bne.n	80019aa <HAL_RCC_OscConfig+0x24a>
 800199c:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a15      	ldr	r2, [pc, #84]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80019a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	e01d      	b.n	80019e6 <HAL_RCC_OscConfig+0x286>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b2:	d10c      	bne.n	80019ce <HAL_RCC_OscConfig+0x26e>
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80019ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80019c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	e00b      	b.n	80019e6 <HAL_RCC_OscConfig+0x286>
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80019d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <HAL_RCC_OscConfig+0x298>)
 80019e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d01c      	beq.n	8001a28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7ff fa33 	bl	8000e58 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f4:	e011      	b.n	8001a1a <HAL_RCC_OscConfig+0x2ba>
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	08004c50 	.word	0x08004c50
 8001a00:	20000000 	.word	0x20000000
 8001a04:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a08:	f7ff fa26 	bl	8000e58 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	; 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e280      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1a:	4baf      	ldr	r3, [pc, #700]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x2a8>
 8001a26:	e014      	b.n	8001a52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff fa16 	bl	8000e58 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a30:	f7ff fa12 	bl	8000e58 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	; 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e26c      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a42:	4ba5      	ldr	r3, [pc, #660]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x2d0>
 8001a4e:	e000      	b.n	8001a52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d060      	beq.n	8001b20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_OscConfig+0x310>
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2b0c      	cmp	r3, #12
 8001a68:	d119      	bne.n	8001a9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d116      	bne.n	8001a9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a70:	4b99      	ldr	r3, [pc, #612]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_OscConfig+0x328>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e249      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a88:	4b93      	ldr	r3, [pc, #588]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	061b      	lsls	r3, r3, #24
 8001a96:	4990      	ldr	r1, [pc, #576]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a9c:	e040      	b.n	8001b20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d023      	beq.n	8001aee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa6:	4b8c      	ldr	r3, [pc, #560]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a8b      	ldr	r2, [pc, #556]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab2:	f7ff f9d1 	bl	8000e58 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aba:	f7ff f9cd 	bl	8000e58 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e227      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001acc:	4b82      	ldr	r3, [pc, #520]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad8:	4b7f      	ldr	r3, [pc, #508]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	061b      	lsls	r3, r3, #24
 8001ae6:	497c      	ldr	r1, [pc, #496]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
 8001aec:	e018      	b.n	8001b20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aee:	4b7a      	ldr	r3, [pc, #488]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a79      	ldr	r2, [pc, #484]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7ff f9ad 	bl	8000e58 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b02:	f7ff f9a9 	bl	8000e58 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e203      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b14:	4b70      	ldr	r3, [pc, #448]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d03c      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d01c      	beq.n	8001b6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b34:	4b68      	ldr	r3, [pc, #416]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3a:	4a67      	ldr	r2, [pc, #412]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b44:	f7ff f988 	bl	8000e58 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4c:	f7ff f984 	bl	8000e58 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e1de      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b5e:	4b5e      	ldr	r3, [pc, #376]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0ef      	beq.n	8001b4c <HAL_RCC_OscConfig+0x3ec>
 8001b6c:	e01b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b6e:	4b5a      	ldr	r3, [pc, #360]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b74:	4a58      	ldr	r2, [pc, #352]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001b76:	f023 0301 	bic.w	r3, r3, #1
 8001b7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7e:	f7ff f96b 	bl	8000e58 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b86:	f7ff f967 	bl	8000e58 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e1c1      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b98:	4b4f      	ldr	r3, [pc, #316]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1ef      	bne.n	8001b86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 80a6 	beq.w	8001d00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bb8:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10d      	bne.n	8001be0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc4:	4b44      	ldr	r3, [pc, #272]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc8:	4a43      	ldr	r2, [pc, #268]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bce:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd0:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be0:	4b3e      	ldr	r3, [pc, #248]	; (8001cdc <HAL_RCC_OscConfig+0x57c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d118      	bne.n	8001c1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bec:	4b3b      	ldr	r3, [pc, #236]	; (8001cdc <HAL_RCC_OscConfig+0x57c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a3a      	ldr	r2, [pc, #232]	; (8001cdc <HAL_RCC_OscConfig+0x57c>)
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf8:	f7ff f92e 	bl	8000e58 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c00:	f7ff f92a 	bl	8000e58 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e184      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c12:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <HAL_RCC_OscConfig+0x57c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d108      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4d8>
 8001c26:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2c:	4a2a      	ldr	r2, [pc, #168]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c36:	e024      	b.n	8001c82 <HAL_RCC_OscConfig+0x522>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d110      	bne.n	8001c62 <HAL_RCC_OscConfig+0x502>
 8001c40:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c46:	4a24      	ldr	r2, [pc, #144]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001c48:	f043 0304 	orr.w	r3, r3, #4
 8001c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c56:	4a20      	ldr	r2, [pc, #128]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c60:	e00f      	b.n	8001c82 <HAL_RCC_OscConfig+0x522>
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c68:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c72:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c78:	4a17      	ldr	r2, [pc, #92]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001c7a:	f023 0304 	bic.w	r3, r3, #4
 8001c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d016      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8a:	f7ff f8e5 	bl	8000e58 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f7ff f8e1 	bl	8000e58 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e139      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_OscConfig+0x578>)
 8001caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0ed      	beq.n	8001c92 <HAL_RCC_OscConfig+0x532>
 8001cb6:	e01a      	b.n	8001cee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7ff f8ce 	bl	8000e58 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cbe:	e00f      	b.n	8001ce0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc0:	f7ff f8ca 	bl	8000e58 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d906      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e122      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ce0:	4b90      	ldr	r3, [pc, #576]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1e8      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cee:	7ffb      	ldrb	r3, [r7, #31]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d105      	bne.n	8001d00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf4:	4b8b      	ldr	r3, [pc, #556]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf8:	4a8a      	ldr	r2, [pc, #552]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 8108 	beq.w	8001f1a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	f040 80d0 	bne.w	8001eb4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d14:	4b83      	ldr	r3, [pc, #524]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f003 0203 	and.w	r2, r3, #3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d130      	bne.n	8001d8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	3b01      	subs	r3, #1
 8001d34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d127      	bne.n	8001d8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d11f      	bne.n	8001d8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d54:	2a07      	cmp	r2, #7
 8001d56:	bf14      	ite	ne
 8001d58:	2201      	movne	r2, #1
 8001d5a:	2200      	moveq	r2, #0
 8001d5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d113      	bne.n	8001d8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6c:	085b      	lsrs	r3, r3, #1
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d109      	bne.n	8001d8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	085b      	lsrs	r3, r3, #1
 8001d82:	3b01      	subs	r3, #1
 8001d84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d06e      	beq.n	8001e68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	2b0c      	cmp	r3, #12
 8001d8e:	d069      	beq.n	8001e64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d90:	4b64      	ldr	r3, [pc, #400]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d9c:	4b61      	ldr	r3, [pc, #388]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0b7      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dac:	4b5d      	ldr	r3, [pc, #372]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a5c      	ldr	r2, [pc, #368]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001db6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001db8:	f7ff f84e 	bl	8000e58 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7ff f84a 	bl	8000e58 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e0a4      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd2:	4b54      	ldr	r3, [pc, #336]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dde:	4b51      	ldr	r3, [pc, #324]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	4b51      	ldr	r3, [pc, #324]	; (8001f28 <HAL_RCC_OscConfig+0x7c8>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dee:	3a01      	subs	r2, #1
 8001df0:	0112      	lsls	r2, r2, #4
 8001df2:	4311      	orrs	r1, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001df8:	0212      	lsls	r2, r2, #8
 8001dfa:	4311      	orrs	r1, r2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e00:	0852      	lsrs	r2, r2, #1
 8001e02:	3a01      	subs	r2, #1
 8001e04:	0552      	lsls	r2, r2, #21
 8001e06:	4311      	orrs	r1, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e0c:	0852      	lsrs	r2, r2, #1
 8001e0e:	3a01      	subs	r2, #1
 8001e10:	0652      	lsls	r2, r2, #25
 8001e12:	4311      	orrs	r1, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e18:	0912      	lsrs	r2, r2, #4
 8001e1a:	0452      	lsls	r2, r2, #17
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	4941      	ldr	r1, [pc, #260]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e24:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a3e      	ldr	r2, [pc, #248]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e30:	4b3c      	ldr	r3, [pc, #240]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4a3b      	ldr	r2, [pc, #236]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e3c:	f7ff f80c 	bl	8000e58 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e44:	f7ff f808 	bl	8000e58 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e062      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e56:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e62:	e05a      	b.n	8001f1a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e059      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e68:	4b2e      	ldr	r3, [pc, #184]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d152      	bne.n	8001f1a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e74:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a2a      	ldr	r2, [pc, #168]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e80:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4a27      	ldr	r2, [pc, #156]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e8c:	f7fe ffe4 	bl	8000e58 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e94:	f7fe ffe0 	bl	8000e58 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e03a      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea6:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x734>
 8001eb2:	e032      	b.n	8001f1a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2b0c      	cmp	r3, #12
 8001eb8:	d02d      	beq.n	8001f16 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eba:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a19      	ldr	r2, [pc, #100]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001ec0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ec4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d105      	bne.n	8001ede <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ed2:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	4a13      	ldr	r2, [pc, #76]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001ed8:	f023 0303 	bic.w	r3, r3, #3
 8001edc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001ee4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eee:	f7fe ffb3 	bl	8000e58 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef6:	f7fe ffaf 	bl	8000e58 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e009      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_RCC_OscConfig+0x7c4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f0      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x796>
 8001f14:	e001      	b.n	8001f1a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3720      	adds	r7, #32
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000
 8001f28:	f99d808c 	.word	0xf99d808c

08001f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0c8      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f40:	4b66      	ldr	r3, [pc, #408]	; (80020dc <HAL_RCC_ClockConfig+0x1b0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d910      	bls.n	8001f70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b63      	ldr	r3, [pc, #396]	; (80020dc <HAL_RCC_ClockConfig+0x1b0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 0207 	bic.w	r2, r3, #7
 8001f56:	4961      	ldr	r1, [pc, #388]	; (80020dc <HAL_RCC_ClockConfig+0x1b0>)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5e:	4b5f      	ldr	r3, [pc, #380]	; (80020dc <HAL_RCC_ClockConfig+0x1b0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0b0      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d04c      	beq.n	8002016 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d107      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f84:	4b56      	ldr	r3, [pc, #344]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d121      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e09e      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f9c:	4b50      	ldr	r3, [pc, #320]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d115      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e092      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fb4:	4b4a      	ldr	r3, [pc, #296]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d109      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e086      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc4:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e07e      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fd4:	4b42      	ldr	r3, [pc, #264]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f023 0203 	bic.w	r2, r3, #3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	493f      	ldr	r1, [pc, #252]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe6:	f7fe ff37 	bl	8000e58 <HAL_GetTick>
 8001fea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fec:	e00a      	b.n	8002004 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fee:	f7fe ff33 	bl	8000e58 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e066      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002004:	4b36      	ldr	r3, [pc, #216]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 020c 	and.w	r2, r3, #12
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	429a      	cmp	r2, r3
 8002014:	d1eb      	bne.n	8001fee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002022:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	492c      	ldr	r1, [pc, #176]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002030:	4313      	orrs	r3, r2
 8002032:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002034:	4b29      	ldr	r3, [pc, #164]	; (80020dc <HAL_RCC_ClockConfig+0x1b0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d210      	bcs.n	8002064 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b26      	ldr	r3, [pc, #152]	; (80020dc <HAL_RCC_ClockConfig+0x1b0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 0207 	bic.w	r2, r3, #7
 800204a:	4924      	ldr	r1, [pc, #144]	; (80020dc <HAL_RCC_ClockConfig+0x1b0>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b22      	ldr	r3, [pc, #136]	; (80020dc <HAL_RCC_ClockConfig+0x1b0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e036      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4918      	ldr	r1, [pc, #96]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d009      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800208e:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4910      	ldr	r1, [pc, #64]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020a2:	f000 f825 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80020a6:	4602      	mov	r2, r0
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	490c      	ldr	r1, [pc, #48]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 80020b4:	5ccb      	ldrb	r3, [r1, r3]
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	fa22 f303 	lsr.w	r3, r2, r3
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fe76 	bl	8000db8 <HAL_InitTick>
 80020cc:	4603      	mov	r3, r0
 80020ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80020d0:	7afb      	ldrb	r3, [r7, #11]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40022000 	.word	0x40022000
 80020e0:	40021000 	.word	0x40021000
 80020e4:	08004c50 	.word	0x08004c50
 80020e8:	20000000 	.word	0x20000000
 80020ec:	20000004 	.word	0x20000004

080020f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020fe:	4b3e      	ldr	r3, [pc, #248]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002108:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0x34>
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	2b0c      	cmp	r3, #12
 800211c:	d121      	bne.n	8002162 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d11e      	bne.n	8002162 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002124:	4b34      	ldr	r3, [pc, #208]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b00      	cmp	r3, #0
 800212e:	d107      	bne.n	8002140 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002130:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	e005      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002140:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800214c:	4a2b      	ldr	r2, [pc, #172]	; (80021fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002154:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10d      	bne.n	8002178 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002160:	e00a      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b04      	cmp	r3, #4
 8002166:	d102      	bne.n	800216e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002168:	4b25      	ldr	r3, [pc, #148]	; (8002200 <HAL_RCC_GetSysClockFreq+0x110>)
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	e004      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b08      	cmp	r3, #8
 8002172:	d101      	bne.n	8002178 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002174:	4b23      	ldr	r3, [pc, #140]	; (8002204 <HAL_RCC_GetSysClockFreq+0x114>)
 8002176:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d134      	bne.n	80021e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800217e:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d003      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0xa6>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d003      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0xac>
 8002194:	e005      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002196:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <HAL_RCC_GetSysClockFreq+0x110>)
 8002198:	617b      	str	r3, [r7, #20]
      break;
 800219a:	e005      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_RCC_GetSysClockFreq+0x114>)
 800219e:	617b      	str	r3, [r7, #20]
      break;
 80021a0:	e002      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	617b      	str	r3, [r7, #20]
      break;
 80021a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	3301      	adds	r3, #1
 80021b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	fb02 f203 	mul.w	r2, r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	0e5b      	lsrs	r3, r3, #25
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	3301      	adds	r3, #1
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021e8:	69bb      	ldr	r3, [r7, #24]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	; 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08004c68 	.word	0x08004c68
 8002200:	00f42400 	.word	0x00f42400
 8002204:	007a1200 	.word	0x007a1200

08002208 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_RCC_GetHCLKFreq+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000000 	.word	0x20000000

08002220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002224:	f7ff fff0 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	4904      	ldr	r1, [pc, #16]	; (8002248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	08004c60 	.word	0x08004c60

0800224c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002250:	f7ff ffda 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002254:	4602      	mov	r2, r0
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	0adb      	lsrs	r3, r3, #11
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	4904      	ldr	r1, [pc, #16]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002262:	5ccb      	ldrb	r3, [r1, r3]
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800226c:	4618      	mov	r0, r3
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000
 8002274:	08004c60 	.word	0x08004c60

08002278 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002284:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002290:	f7ff fa02 	bl	8001698 <HAL_PWREx_GetVoltageRange>
 8002294:	6178      	str	r0, [r7, #20]
 8002296:	e014      	b.n	80022c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002298:	4b25      	ldr	r3, [pc, #148]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	4a24      	ldr	r2, [pc, #144]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a2:	6593      	str	r3, [r2, #88]	; 0x58
 80022a4:	4b22      	ldr	r3, [pc, #136]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022b0:	f7ff f9f2 	bl	8001698 <HAL_PWREx_GetVoltageRange>
 80022b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022b6:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c8:	d10b      	bne.n	80022e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b80      	cmp	r3, #128	; 0x80
 80022ce:	d919      	bls.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2ba0      	cmp	r3, #160	; 0xa0
 80022d4:	d902      	bls.n	80022dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022d6:	2302      	movs	r3, #2
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	e013      	b.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022dc:	2301      	movs	r3, #1
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	e010      	b.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b80      	cmp	r3, #128	; 0x80
 80022e6:	d902      	bls.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022e8:	2303      	movs	r3, #3
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	e00a      	b.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b80      	cmp	r3, #128	; 0x80
 80022f2:	d102      	bne.n	80022fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022f4:	2302      	movs	r3, #2
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	e004      	b.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b70      	cmp	r3, #112	; 0x70
 80022fe:	d101      	bne.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002300:	2301      	movs	r3, #1
 8002302:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 0207 	bic.w	r2, r3, #7
 800230c:	4909      	ldr	r1, [pc, #36]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	429a      	cmp	r2, r3
 8002320:	d001      	beq.n	8002326 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	40022000 	.word	0x40022000

08002338 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002340:	2300      	movs	r3, #0
 8002342:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002344:	2300      	movs	r3, #0
 8002346:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002350:	2b00      	cmp	r3, #0
 8002352:	d041      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002358:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800235c:	d02a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800235e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002362:	d824      	bhi.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002364:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002368:	d008      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800236a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800236e:	d81e      	bhi.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002378:	d010      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800237a:	e018      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800237c:	4b86      	ldr	r3, [pc, #536]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a85      	ldr	r2, [pc, #532]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002386:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002388:	e015      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3304      	adds	r3, #4
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fabb 	bl	800290c <RCCEx_PLLSAI1_Config>
 8002396:	4603      	mov	r3, r0
 8002398:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800239a:	e00c      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3320      	adds	r3, #32
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fba6 	bl	8002af4 <RCCEx_PLLSAI2_Config>
 80023a8:	4603      	mov	r3, r0
 80023aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ac:	e003      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	74fb      	strb	r3, [r7, #19]
      break;
 80023b2:	e000      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10b      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023bc:	4b76      	ldr	r3, [pc, #472]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ca:	4973      	ldr	r1, [pc, #460]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023d2:	e001      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d041      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023ec:	d02a      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023f2:	d824      	bhi.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023f8:	d008      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023fe:	d81e      	bhi.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002408:	d010      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800240a:	e018      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800240c:	4b62      	ldr	r3, [pc, #392]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a61      	ldr	r2, [pc, #388]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002416:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002418:	e015      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3304      	adds	r3, #4
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f000 fa73 	bl	800290c <RCCEx_PLLSAI1_Config>
 8002426:	4603      	mov	r3, r0
 8002428:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800242a:	e00c      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3320      	adds	r3, #32
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fb5e 	bl	8002af4 <RCCEx_PLLSAI2_Config>
 8002438:	4603      	mov	r3, r0
 800243a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800243c:	e003      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	74fb      	strb	r3, [r7, #19]
      break;
 8002442:	e000      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002446:	7cfb      	ldrb	r3, [r7, #19]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10b      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800244c:	4b52      	ldr	r3, [pc, #328]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800245a:	494f      	ldr	r1, [pc, #316]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002462:	e001      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002464:	7cfb      	ldrb	r3, [r7, #19]
 8002466:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80a0 	beq.w	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800247a:	4b47      	ldr	r3, [pc, #284]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800248a:	2300      	movs	r3, #0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00d      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002490:	4b41      	ldr	r3, [pc, #260]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	4a40      	ldr	r2, [pc, #256]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249a:	6593      	str	r3, [r2, #88]	; 0x58
 800249c:	4b3e      	ldr	r3, [pc, #248]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a8:	2301      	movs	r3, #1
 80024aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ac:	4b3b      	ldr	r3, [pc, #236]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a3a      	ldr	r2, [pc, #232]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024b8:	f7fe fcce 	bl	8000e58 <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024be:	e009      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c0:	f7fe fcca 	bl	8000e58 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d902      	bls.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	74fb      	strb	r3, [r7, #19]
        break;
 80024d2:	e005      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024d4:	4b31      	ldr	r3, [pc, #196]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0ef      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d15c      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024e6:	4b2c      	ldr	r3, [pc, #176]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d01f      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	429a      	cmp	r2, r3
 8002502:	d019      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002504:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800250e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002510:	4b21      	ldr	r3, [pc, #132]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002516:	4a20      	ldr	r2, [pc, #128]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002520:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	4a1c      	ldr	r2, [pc, #112]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002530:	4a19      	ldr	r2, [pc, #100]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d016      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002542:	f7fe fc89 	bl	8000e58 <HAL_GetTick>
 8002546:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002548:	e00b      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254a:	f7fe fc85 	bl	8000e58 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f241 3288 	movw	r2, #5000	; 0x1388
 8002558:	4293      	cmp	r3, r2
 800255a:	d902      	bls.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	74fb      	strb	r3, [r7, #19]
            break;
 8002560:	e006      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0ec      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10c      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002576:	4b08      	ldr	r3, [pc, #32]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002586:	4904      	ldr	r1, [pc, #16]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800258e:	e009      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	74bb      	strb	r3, [r7, #18]
 8002594:	e006      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025a4:	7c7b      	ldrb	r3, [r7, #17]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d105      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025aa:	4b9e      	ldr	r3, [pc, #632]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	4a9d      	ldr	r2, [pc, #628]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025c2:	4b98      	ldr	r3, [pc, #608]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c8:	f023 0203 	bic.w	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	4994      	ldr	r1, [pc, #592]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025e4:	4b8f      	ldr	r3, [pc, #572]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ea:	f023 020c 	bic.w	r2, r3, #12
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f2:	498c      	ldr	r1, [pc, #560]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002606:	4b87      	ldr	r3, [pc, #540]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	4983      	ldr	r1, [pc, #524]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002628:	4b7e      	ldr	r3, [pc, #504]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	497b      	ldr	r1, [pc, #492]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800264a:	4b76      	ldr	r3, [pc, #472]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002658:	4972      	ldr	r1, [pc, #456]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800266c:	4b6d      	ldr	r3, [pc, #436]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	496a      	ldr	r1, [pc, #424]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800268e:	4b65      	ldr	r3, [pc, #404]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002694:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269c:	4961      	ldr	r1, [pc, #388]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026b0:	4b5c      	ldr	r3, [pc, #368]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026be:	4959      	ldr	r1, [pc, #356]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026d2:	4b54      	ldr	r3, [pc, #336]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e0:	4950      	ldr	r1, [pc, #320]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026f4:	4b4b      	ldr	r3, [pc, #300]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	4948      	ldr	r1, [pc, #288]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002716:	4b43      	ldr	r3, [pc, #268]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	493f      	ldr	r1, [pc, #252]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d028      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002738:	4b3a      	ldr	r3, [pc, #232]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002746:	4937      	ldr	r1, [pc, #220]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002752:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002756:	d106      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002758:	4b32      	ldr	r3, [pc, #200]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4a31      	ldr	r2, [pc, #196]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002762:	60d3      	str	r3, [r2, #12]
 8002764:	e011      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800276a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800276e:	d10c      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3304      	adds	r3, #4
 8002774:	2101      	movs	r1, #1
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f8c8 	bl	800290c <RCCEx_PLLSAI1_Config>
 800277c:	4603      	mov	r3, r0
 800277e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002786:	7cfb      	ldrb	r3, [r7, #19]
 8002788:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d028      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002796:	4b23      	ldr	r3, [pc, #140]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	491f      	ldr	r1, [pc, #124]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027b4:	d106      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027b6:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	4a1a      	ldr	r2, [pc, #104]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c0:	60d3      	str	r3, [r2, #12]
 80027c2:	e011      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3304      	adds	r3, #4
 80027d2:	2101      	movs	r1, #1
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 f899 	bl	800290c <RCCEx_PLLSAI1_Config>
 80027da:	4603      	mov	r3, r0
 80027dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027de:	7cfb      	ldrb	r3, [r7, #19]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d02b      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002802:	4908      	ldr	r1, [pc, #32]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002812:	d109      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4a02      	ldr	r2, [pc, #8]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800281e:	60d3      	str	r3, [r2, #12]
 8002820:	e014      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002830:	d10c      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3304      	adds	r3, #4
 8002836:	2101      	movs	r1, #1
 8002838:	4618      	mov	r0, r3
 800283a:	f000 f867 	bl	800290c <RCCEx_PLLSAI1_Config>
 800283e:	4603      	mov	r3, r0
 8002840:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002842:	7cfb      	ldrb	r3, [r7, #19]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002848:	7cfb      	ldrb	r3, [r7, #19]
 800284a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d02f      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002858:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002866:	4928      	ldr	r1, [pc, #160]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002876:	d10d      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3304      	adds	r3, #4
 800287c:	2102      	movs	r1, #2
 800287e:	4618      	mov	r0, r3
 8002880:	f000 f844 	bl	800290c <RCCEx_PLLSAI1_Config>
 8002884:	4603      	mov	r3, r0
 8002886:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d014      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800288e:	7cfb      	ldrb	r3, [r7, #19]
 8002890:	74bb      	strb	r3, [r7, #18]
 8002892:	e011      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800289c:	d10c      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3320      	adds	r3, #32
 80028a2:	2102      	movs	r1, #2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 f925 	bl	8002af4 <RCCEx_PLLSAI2_Config>
 80028aa:	4603      	mov	r3, r0
 80028ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ae:	7cfb      	ldrb	r3, [r7, #19]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028b4:	7cfb      	ldrb	r3, [r7, #19]
 80028b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028c4:	4b10      	ldr	r3, [pc, #64]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028d2:	490d      	ldr	r1, [pc, #52]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028e6:	4b08      	ldr	r3, [pc, #32]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028f6:	4904      	ldr	r1, [pc, #16]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000

0800290c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800291a:	4b75      	ldr	r3, [pc, #468]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d018      	beq.n	8002958 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002926:	4b72      	ldr	r3, [pc, #456]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f003 0203 	and.w	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d10d      	bne.n	8002952 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
       ||
 800293a:	2b00      	cmp	r3, #0
 800293c:	d009      	beq.n	8002952 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800293e:	4b6c      	ldr	r3, [pc, #432]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
       ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d047      	beq.n	80029e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
 8002956:	e044      	b.n	80029e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d018      	beq.n	8002992 <RCCEx_PLLSAI1_Config+0x86>
 8002960:	2b03      	cmp	r3, #3
 8002962:	d825      	bhi.n	80029b0 <RCCEx_PLLSAI1_Config+0xa4>
 8002964:	2b01      	cmp	r3, #1
 8002966:	d002      	beq.n	800296e <RCCEx_PLLSAI1_Config+0x62>
 8002968:	2b02      	cmp	r3, #2
 800296a:	d009      	beq.n	8002980 <RCCEx_PLLSAI1_Config+0x74>
 800296c:	e020      	b.n	80029b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800296e:	4b60      	ldr	r3, [pc, #384]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d11d      	bne.n	80029b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800297e:	e01a      	b.n	80029b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002980:	4b5b      	ldr	r3, [pc, #364]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002988:	2b00      	cmp	r3, #0
 800298a:	d116      	bne.n	80029ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002990:	e013      	b.n	80029ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002992:	4b57      	ldr	r3, [pc, #348]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10f      	bne.n	80029be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800299e:	4b54      	ldr	r3, [pc, #336]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029ae:	e006      	b.n	80029be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
      break;
 80029b4:	e004      	b.n	80029c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029b6:	bf00      	nop
 80029b8:	e002      	b.n	80029c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ba:	bf00      	nop
 80029bc:	e000      	b.n	80029c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029be:	bf00      	nop
    }

    if(status == HAL_OK)
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10d      	bne.n	80029e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029c6:	4b4a      	ldr	r3, [pc, #296]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6819      	ldr	r1, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	430b      	orrs	r3, r1
 80029dc:	4944      	ldr	r1, [pc, #272]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d17d      	bne.n	8002ae4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029e8:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a40      	ldr	r2, [pc, #256]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f4:	f7fe fa30 	bl	8000e58 <HAL_GetTick>
 80029f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029fa:	e009      	b.n	8002a10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029fc:	f7fe fa2c 	bl	8000e58 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d902      	bls.n	8002a10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a0e:	e005      	b.n	8002a1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a10:	4b37      	ldr	r3, [pc, #220]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1ef      	bne.n	80029fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d160      	bne.n	8002ae4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d111      	bne.n	8002a4c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a28:	4b31      	ldr	r3, [pc, #196]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6892      	ldr	r2, [r2, #8]
 8002a38:	0211      	lsls	r1, r2, #8
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68d2      	ldr	r2, [r2, #12]
 8002a3e:	0912      	lsrs	r2, r2, #4
 8002a40:	0452      	lsls	r2, r2, #17
 8002a42:	430a      	orrs	r2, r1
 8002a44:	492a      	ldr	r1, [pc, #168]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	610b      	str	r3, [r1, #16]
 8002a4a:	e027      	b.n	8002a9c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d112      	bne.n	8002a78 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a52:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a5a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6892      	ldr	r2, [r2, #8]
 8002a62:	0211      	lsls	r1, r2, #8
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6912      	ldr	r2, [r2, #16]
 8002a68:	0852      	lsrs	r2, r2, #1
 8002a6a:	3a01      	subs	r2, #1
 8002a6c:	0552      	lsls	r2, r2, #21
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	491f      	ldr	r1, [pc, #124]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	610b      	str	r3, [r1, #16]
 8002a76:	e011      	b.n	8002a9c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a78:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6892      	ldr	r2, [r2, #8]
 8002a88:	0211      	lsls	r1, r2, #8
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6952      	ldr	r2, [r2, #20]
 8002a8e:	0852      	lsrs	r2, r2, #1
 8002a90:	3a01      	subs	r2, #1
 8002a92:	0652      	lsls	r2, r2, #25
 8002a94:	430a      	orrs	r2, r1
 8002a96:	4916      	ldr	r1, [pc, #88]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a9c:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a13      	ldr	r2, [pc, #76]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aa6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7fe f9d6 	bl	8000e58 <HAL_GetTick>
 8002aac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aae:	e009      	b.n	8002ac4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ab0:	f7fe f9d2 	bl	8000e58 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d902      	bls.n	8002ac4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ac2:	e005      	b.n	8002ad0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0ef      	beq.n	8002ab0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	4904      	ldr	r1, [pc, #16]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000

08002af4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b02:	4b6a      	ldr	r3, [pc, #424]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d018      	beq.n	8002b40 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b0e:	4b67      	ldr	r3, [pc, #412]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0203 	and.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d10d      	bne.n	8002b3a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
       ||
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b26:	4b61      	ldr	r3, [pc, #388]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
       ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d047      	beq.n	8002bca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
 8002b3e:	e044      	b.n	8002bca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d018      	beq.n	8002b7a <RCCEx_PLLSAI2_Config+0x86>
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d825      	bhi.n	8002b98 <RCCEx_PLLSAI2_Config+0xa4>
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d002      	beq.n	8002b56 <RCCEx_PLLSAI2_Config+0x62>
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d009      	beq.n	8002b68 <RCCEx_PLLSAI2_Config+0x74>
 8002b54:	e020      	b.n	8002b98 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b56:	4b55      	ldr	r3, [pc, #340]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d11d      	bne.n	8002b9e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b66:	e01a      	b.n	8002b9e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b68:	4b50      	ldr	r3, [pc, #320]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d116      	bne.n	8002ba2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b78:	e013      	b.n	8002ba2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b7a:	4b4c      	ldr	r3, [pc, #304]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10f      	bne.n	8002ba6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b86:	4b49      	ldr	r3, [pc, #292]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b96:	e006      	b.n	8002ba6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b9c:	e004      	b.n	8002ba8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e002      	b.n	8002ba8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e000      	b.n	8002ba8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ba6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10d      	bne.n	8002bca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bae:	4b3f      	ldr	r3, [pc, #252]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	4939      	ldr	r1, [pc, #228]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d167      	bne.n	8002ca0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bd0:	4b36      	ldr	r3, [pc, #216]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a35      	ldr	r2, [pc, #212]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bdc:	f7fe f93c 	bl	8000e58 <HAL_GetTick>
 8002be0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002be2:	e009      	b.n	8002bf8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002be4:	f7fe f938 	bl	8000e58 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d902      	bls.n	8002bf8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	73fb      	strb	r3, [r7, #15]
        break;
 8002bf6:	e005      	b.n	8002c04 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bf8:	4b2c      	ldr	r3, [pc, #176]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1ef      	bne.n	8002be4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d14a      	bne.n	8002ca0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d111      	bne.n	8002c34 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c10:	4b26      	ldr	r3, [pc, #152]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6892      	ldr	r2, [r2, #8]
 8002c20:	0211      	lsls	r1, r2, #8
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	68d2      	ldr	r2, [r2, #12]
 8002c26:	0912      	lsrs	r2, r2, #4
 8002c28:	0452      	lsls	r2, r2, #17
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	491f      	ldr	r1, [pc, #124]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	614b      	str	r3, [r1, #20]
 8002c32:	e011      	b.n	8002c58 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c34:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6892      	ldr	r2, [r2, #8]
 8002c44:	0211      	lsls	r1, r2, #8
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6912      	ldr	r2, [r2, #16]
 8002c4a:	0852      	lsrs	r2, r2, #1
 8002c4c:	3a01      	subs	r2, #1
 8002c4e:	0652      	lsls	r2, r2, #25
 8002c50:	430a      	orrs	r2, r1
 8002c52:	4916      	ldr	r1, [pc, #88]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c58:	4b14      	ldr	r3, [pc, #80]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a13      	ldr	r2, [pc, #76]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7fe f8f8 	bl	8000e58 <HAL_GetTick>
 8002c68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c6a:	e009      	b.n	8002c80 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c6c:	f7fe f8f4 	bl	8000e58 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d902      	bls.n	8002c80 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c7e:	e005      	b.n	8002c8c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ef      	beq.n	8002c6c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	4904      	ldr	r1, [pc, #16]	; (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000

08002cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e049      	b.n	8002d56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fd ff30 	bl	8000b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3304      	adds	r3, #4
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f000 fe60 	bl	80039b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d001      	beq.n	8002d78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e04f      	b.n	8002e18 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a23      	ldr	r2, [pc, #140]	; (8002e24 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01d      	beq.n	8002dd6 <HAL_TIM_Base_Start_IT+0x76>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da2:	d018      	beq.n	8002dd6 <HAL_TIM_Base_Start_IT+0x76>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a1f      	ldr	r2, [pc, #124]	; (8002e28 <HAL_TIM_Base_Start_IT+0xc8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d013      	beq.n	8002dd6 <HAL_TIM_Base_Start_IT+0x76>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a1e      	ldr	r2, [pc, #120]	; (8002e2c <HAL_TIM_Base_Start_IT+0xcc>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00e      	beq.n	8002dd6 <HAL_TIM_Base_Start_IT+0x76>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <HAL_TIM_Base_Start_IT+0xd0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d009      	beq.n	8002dd6 <HAL_TIM_Base_Start_IT+0x76>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a1b      	ldr	r2, [pc, #108]	; (8002e34 <HAL_TIM_Base_Start_IT+0xd4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d004      	beq.n	8002dd6 <HAL_TIM_Base_Start_IT+0x76>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a19      	ldr	r2, [pc, #100]	; (8002e38 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d115      	bne.n	8002e02 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <HAL_TIM_Base_Start_IT+0xdc>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b06      	cmp	r3, #6
 8002de6:	d015      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0xb4>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dee:	d011      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e00:	e008      	b.n	8002e14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0201 	orr.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	e000      	b.n	8002e16 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	40012c00 	.word	0x40012c00
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	40000800 	.word	0x40000800
 8002e30:	40000c00 	.word	0x40000c00
 8002e34:	40013400 	.word	0x40013400
 8002e38:	40014000 	.word	0x40014000
 8002e3c:	00010007 	.word	0x00010007

08002e40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e049      	b.n	8002ee6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f841 	bl	8002eee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f000 fd98 	bl	80039b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d109      	bne.n	8002f28 <HAL_TIM_PWM_Start+0x24>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	bf14      	ite	ne
 8002f20:	2301      	movne	r3, #1
 8002f22:	2300      	moveq	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e03c      	b.n	8002fa2 <HAL_TIM_PWM_Start+0x9e>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d109      	bne.n	8002f42 <HAL_TIM_PWM_Start+0x3e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	bf14      	ite	ne
 8002f3a:	2301      	movne	r3, #1
 8002f3c:	2300      	moveq	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	e02f      	b.n	8002fa2 <HAL_TIM_PWM_Start+0x9e>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d109      	bne.n	8002f5c <HAL_TIM_PWM_Start+0x58>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	bf14      	ite	ne
 8002f54:	2301      	movne	r3, #1
 8002f56:	2300      	moveq	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e022      	b.n	8002fa2 <HAL_TIM_PWM_Start+0x9e>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	d109      	bne.n	8002f76 <HAL_TIM_PWM_Start+0x72>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	bf14      	ite	ne
 8002f6e:	2301      	movne	r3, #1
 8002f70:	2300      	moveq	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	e015      	b.n	8002fa2 <HAL_TIM_PWM_Start+0x9e>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b10      	cmp	r3, #16
 8002f7a:	d109      	bne.n	8002f90 <HAL_TIM_PWM_Start+0x8c>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	bf14      	ite	ne
 8002f88:	2301      	movne	r3, #1
 8002f8a:	2300      	moveq	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	e008      	b.n	8002fa2 <HAL_TIM_PWM_Start+0x9e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	bf14      	ite	ne
 8002f9c:	2301      	movne	r3, #1
 8002f9e:	2300      	moveq	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e09c      	b.n	80030e4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d104      	bne.n	8002fba <HAL_TIM_PWM_Start+0xb6>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fb8:	e023      	b.n	8003002 <HAL_TIM_PWM_Start+0xfe>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d104      	bne.n	8002fca <HAL_TIM_PWM_Start+0xc6>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc8:	e01b      	b.n	8003002 <HAL_TIM_PWM_Start+0xfe>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d104      	bne.n	8002fda <HAL_TIM_PWM_Start+0xd6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fd8:	e013      	b.n	8003002 <HAL_TIM_PWM_Start+0xfe>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b0c      	cmp	r3, #12
 8002fde:	d104      	bne.n	8002fea <HAL_TIM_PWM_Start+0xe6>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fe8:	e00b      	b.n	8003002 <HAL_TIM_PWM_Start+0xfe>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b10      	cmp	r3, #16
 8002fee:	d104      	bne.n	8002ffa <HAL_TIM_PWM_Start+0xf6>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ff8:	e003      	b.n	8003002 <HAL_TIM_PWM_Start+0xfe>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2201      	movs	r2, #1
 8003008:	6839      	ldr	r1, [r7, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f001 f8dc 	bl	80041c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a35      	ldr	r2, [pc, #212]	; (80030ec <HAL_TIM_PWM_Start+0x1e8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <HAL_TIM_PWM_Start+0x13e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a34      	ldr	r2, [pc, #208]	; (80030f0 <HAL_TIM_PWM_Start+0x1ec>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00e      	beq.n	8003042 <HAL_TIM_PWM_Start+0x13e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a32      	ldr	r2, [pc, #200]	; (80030f4 <HAL_TIM_PWM_Start+0x1f0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d009      	beq.n	8003042 <HAL_TIM_PWM_Start+0x13e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a31      	ldr	r2, [pc, #196]	; (80030f8 <HAL_TIM_PWM_Start+0x1f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d004      	beq.n	8003042 <HAL_TIM_PWM_Start+0x13e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a2f      	ldr	r2, [pc, #188]	; (80030fc <HAL_TIM_PWM_Start+0x1f8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d101      	bne.n	8003046 <HAL_TIM_PWM_Start+0x142>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <HAL_TIM_PWM_Start+0x144>
 8003046:	2300      	movs	r3, #0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800305a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a22      	ldr	r2, [pc, #136]	; (80030ec <HAL_TIM_PWM_Start+0x1e8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01d      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x19e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306e:	d018      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x19e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a22      	ldr	r2, [pc, #136]	; (8003100 <HAL_TIM_PWM_Start+0x1fc>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d013      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x19e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a21      	ldr	r2, [pc, #132]	; (8003104 <HAL_TIM_PWM_Start+0x200>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00e      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x19e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1f      	ldr	r2, [pc, #124]	; (8003108 <HAL_TIM_PWM_Start+0x204>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d009      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x19e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a17      	ldr	r2, [pc, #92]	; (80030f0 <HAL_TIM_PWM_Start+0x1ec>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d004      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x19e>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a15      	ldr	r2, [pc, #84]	; (80030f4 <HAL_TIM_PWM_Start+0x1f0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d115      	bne.n	80030ce <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	4b18      	ldr	r3, [pc, #96]	; (800310c <HAL_TIM_PWM_Start+0x208>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b06      	cmp	r3, #6
 80030b2:	d015      	beq.n	80030e0 <HAL_TIM_PWM_Start+0x1dc>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ba:	d011      	beq.n	80030e0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030cc:	e008      	b.n	80030e0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0201 	orr.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	e000      	b.n	80030e2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40013400 	.word	0x40013400
 80030f4:	40014000 	.word	0x40014000
 80030f8:	40014400 	.word	0x40014400
 80030fc:	40014800 	.word	0x40014800
 8003100:	40000400 	.word	0x40000400
 8003104:	40000800 	.word	0x40000800
 8003108:	40000c00 	.word	0x40000c00
 800310c:	00010007 	.word	0x00010007

08003110 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e097      	b.n	8003254 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d106      	bne.n	800313e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7fd fcbf 	bl	8000abc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003154:	f023 0307 	bic.w	r3, r3, #7
 8003158:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3304      	adds	r3, #4
 8003162:	4619      	mov	r1, r3
 8003164:	4610      	mov	r0, r2
 8003166:	f000 fc25 	bl	80039b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003192:	f023 0303 	bic.w	r3, r3, #3
 8003196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	4313      	orrs	r3, r2
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80031b0:	f023 030c 	bic.w	r3, r3, #12
 80031b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	4313      	orrs	r3, r2
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	011a      	lsls	r2, r3, #4
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	031b      	lsls	r3, r3, #12
 80031e0:	4313      	orrs	r3, r2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80031ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80031f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	4313      	orrs	r3, r2
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800326c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003274:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800327c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003284:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d110      	bne.n	80032ae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800328c:	7bfb      	ldrb	r3, [r7, #15]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d102      	bne.n	8003298 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003292:	7b7b      	ldrb	r3, [r7, #13]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d001      	beq.n	800329c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e069      	b.n	8003370 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032ac:	e031      	b.n	8003312 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d110      	bne.n	80032d6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032b4:	7bbb      	ldrb	r3, [r7, #14]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d102      	bne.n	80032c0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032ba:	7b3b      	ldrb	r3, [r7, #12]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d001      	beq.n	80032c4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e055      	b.n	8003370 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032d4:	e01d      	b.n	8003312 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d108      	bne.n	80032ee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032dc:	7bbb      	ldrb	r3, [r7, #14]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d105      	bne.n	80032ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032e2:	7b7b      	ldrb	r3, [r7, #13]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d102      	bne.n	80032ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032e8:	7b3b      	ldrb	r3, [r7, #12]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d001      	beq.n	80032f2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e03e      	b.n	8003370 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2202      	movs	r2, #2
 80032fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_TIM_Encoder_Start+0xc4>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2b04      	cmp	r3, #4
 800331c:	d008      	beq.n	8003330 <HAL_TIM_Encoder_Start+0xd4>
 800331e:	e00f      	b.n	8003340 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2201      	movs	r2, #1
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f000 ff4d 	bl	80041c8 <TIM_CCxChannelCmd>
      break;
 800332e:	e016      	b.n	800335e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2201      	movs	r2, #1
 8003336:	2104      	movs	r1, #4
 8003338:	4618      	mov	r0, r3
 800333a:	f000 ff45 	bl	80041c8 <TIM_CCxChannelCmd>
      break;
 800333e:	e00e      	b.n	800335e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2201      	movs	r2, #1
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f000 ff3d 	bl	80041c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2201      	movs	r2, #1
 8003354:	2104      	movs	r1, #4
 8003356:	4618      	mov	r0, r3
 8003358:	f000 ff36 	bl	80041c8 <TIM_CCxChannelCmd>
      break;
 800335c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0201 	orr.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b02      	cmp	r3, #2
 800338c:	d122      	bne.n	80033d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b02      	cmp	r3, #2
 800339a:	d11b      	bne.n	80033d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0202 	mvn.w	r2, #2
 80033a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fadc 	bl	8003978 <HAL_TIM_IC_CaptureCallback>
 80033c0:	e005      	b.n	80033ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 face 	bl	8003964 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fadf 	bl	800398c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d122      	bne.n	8003428 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d11b      	bne.n	8003428 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0204 	mvn.w	r2, #4
 80033f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2202      	movs	r2, #2
 80033fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fab2 	bl	8003978 <HAL_TIM_IC_CaptureCallback>
 8003414:	e005      	b.n	8003422 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 faa4 	bl	8003964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fab5 	bl	800398c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b08      	cmp	r3, #8
 8003434:	d122      	bne.n	800347c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b08      	cmp	r3, #8
 8003442:	d11b      	bne.n	800347c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0208 	mvn.w	r2, #8
 800344c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2204      	movs	r2, #4
 8003452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fa88 	bl	8003978 <HAL_TIM_IC_CaptureCallback>
 8003468:	e005      	b.n	8003476 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fa7a 	bl	8003964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fa8b 	bl	800398c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b10      	cmp	r3, #16
 8003488:	d122      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b10      	cmp	r3, #16
 8003496:	d11b      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0210 	mvn.w	r2, #16
 80034a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2208      	movs	r2, #8
 80034a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fa5e 	bl	8003978 <HAL_TIM_IC_CaptureCallback>
 80034bc:	e005      	b.n	80034ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fa50 	bl	8003964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fa61 	bl	800398c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d10e      	bne.n	80034fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d107      	bne.n	80034fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0201 	mvn.w	r2, #1
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd f948 	bl	800078c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003506:	2b80      	cmp	r3, #128	; 0x80
 8003508:	d10e      	bne.n	8003528 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003514:	2b80      	cmp	r3, #128	; 0x80
 8003516:	d107      	bne.n	8003528 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 ff08 	bl	8004338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003536:	d10e      	bne.n	8003556 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003542:	2b80      	cmp	r3, #128	; 0x80
 8003544:	d107      	bne.n	8003556 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800354e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fefb 	bl	800434c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003560:	2b40      	cmp	r3, #64	; 0x40
 8003562:	d10e      	bne.n	8003582 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356e:	2b40      	cmp	r3, #64	; 0x40
 8003570:	d107      	bne.n	8003582 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800357a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fa0f 	bl	80039a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f003 0320 	and.w	r3, r3, #32
 800358c:	2b20      	cmp	r3, #32
 800358e:	d10e      	bne.n	80035ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b20      	cmp	r3, #32
 800359c:	d107      	bne.n	80035ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f06f 0220 	mvn.w	r2, #32
 80035a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 febb 	bl	8004324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e0fd      	b.n	80037ce <HAL_TIM_PWM_ConfigChannel+0x216>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b14      	cmp	r3, #20
 80035de:	f200 80f0 	bhi.w	80037c2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80035e2:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	0800363d 	.word	0x0800363d
 80035ec:	080037c3 	.word	0x080037c3
 80035f0:	080037c3 	.word	0x080037c3
 80035f4:	080037c3 	.word	0x080037c3
 80035f8:	0800367d 	.word	0x0800367d
 80035fc:	080037c3 	.word	0x080037c3
 8003600:	080037c3 	.word	0x080037c3
 8003604:	080037c3 	.word	0x080037c3
 8003608:	080036bf 	.word	0x080036bf
 800360c:	080037c3 	.word	0x080037c3
 8003610:	080037c3 	.word	0x080037c3
 8003614:	080037c3 	.word	0x080037c3
 8003618:	080036ff 	.word	0x080036ff
 800361c:	080037c3 	.word	0x080037c3
 8003620:	080037c3 	.word	0x080037c3
 8003624:	080037c3 	.word	0x080037c3
 8003628:	08003741 	.word	0x08003741
 800362c:	080037c3 	.word	0x080037c3
 8003630:	080037c3 	.word	0x080037c3
 8003634:	080037c3 	.word	0x080037c3
 8003638:	08003781 	.word	0x08003781
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fa50 	bl	8003ae8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0208 	orr.w	r2, r2, #8
 8003656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0204 	bic.w	r2, r2, #4
 8003666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6999      	ldr	r1, [r3, #24]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	619a      	str	r2, [r3, #24]
      break;
 800367a:	e0a3      	b.n	80037c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fac0 	bl	8003c08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6999      	ldr	r1, [r3, #24]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	021a      	lsls	r2, r3, #8
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	619a      	str	r2, [r3, #24]
      break;
 80036bc:	e082      	b.n	80037c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fb29 	bl	8003d1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69da      	ldr	r2, [r3, #28]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0208 	orr.w	r2, r2, #8
 80036d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0204 	bic.w	r2, r2, #4
 80036e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69d9      	ldr	r1, [r3, #28]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	61da      	str	r2, [r3, #28]
      break;
 80036fc:	e062      	b.n	80037c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fb91 	bl	8003e2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69d9      	ldr	r1, [r3, #28]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	021a      	lsls	r2, r3, #8
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	61da      	str	r2, [r3, #28]
      break;
 800373e:	e041      	b.n	80037c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fbda 	bl	8003f00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0208 	orr.w	r2, r2, #8
 800375a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0204 	bic.w	r2, r2, #4
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	691a      	ldr	r2, [r3, #16]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800377e:	e021      	b.n	80037c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fc1e 	bl	8003fc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800379a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	021a      	lsls	r2, r3, #8
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037c0:	e000      	b.n	80037c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80037c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop

080037d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIM_ConfigClockSource+0x18>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e0b5      	b.n	800395c <HAL_TIM_ConfigClockSource+0x184>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003812:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800381a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382c:	d03e      	beq.n	80038ac <HAL_TIM_ConfigClockSource+0xd4>
 800382e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003832:	f200 8087 	bhi.w	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 8003836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383a:	f000 8085 	beq.w	8003948 <HAL_TIM_ConfigClockSource+0x170>
 800383e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003842:	d87f      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 8003844:	2b70      	cmp	r3, #112	; 0x70
 8003846:	d01a      	beq.n	800387e <HAL_TIM_ConfigClockSource+0xa6>
 8003848:	2b70      	cmp	r3, #112	; 0x70
 800384a:	d87b      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 800384c:	2b60      	cmp	r3, #96	; 0x60
 800384e:	d050      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0x11a>
 8003850:	2b60      	cmp	r3, #96	; 0x60
 8003852:	d877      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 8003854:	2b50      	cmp	r3, #80	; 0x50
 8003856:	d03c      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0xfa>
 8003858:	2b50      	cmp	r3, #80	; 0x50
 800385a:	d873      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d058      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0x13a>
 8003860:	2b40      	cmp	r3, #64	; 0x40
 8003862:	d86f      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 8003864:	2b30      	cmp	r3, #48	; 0x30
 8003866:	d064      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x15a>
 8003868:	2b30      	cmp	r3, #48	; 0x30
 800386a:	d86b      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 800386c:	2b20      	cmp	r3, #32
 800386e:	d060      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x15a>
 8003870:	2b20      	cmp	r3, #32
 8003872:	d867      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d05c      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x15a>
 8003878:	2b10      	cmp	r3, #16
 800387a:	d05a      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800387c:	e062      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6899      	ldr	r1, [r3, #8]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f000 fc7b 	bl	8004188 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	609a      	str	r2, [r3, #8]
      break;
 80038aa:	e04e      	b.n	800394a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	6899      	ldr	r1, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f000 fc64 	bl	8004188 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ce:	609a      	str	r2, [r3, #8]
      break;
 80038d0:	e03b      	b.n	800394a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6859      	ldr	r1, [r3, #4]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	461a      	mov	r2, r3
 80038e0:	f000 fbd8 	bl	8004094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2150      	movs	r1, #80	; 0x50
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fc31 	bl	8004152 <TIM_ITRx_SetConfig>
      break;
 80038f0:	e02b      	b.n	800394a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6859      	ldr	r1, [r3, #4]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	461a      	mov	r2, r3
 8003900:	f000 fbf7 	bl	80040f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2160      	movs	r1, #96	; 0x60
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fc21 	bl	8004152 <TIM_ITRx_SetConfig>
      break;
 8003910:	e01b      	b.n	800394a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6859      	ldr	r1, [r3, #4]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	461a      	mov	r2, r3
 8003920:	f000 fbb8 	bl	8004094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2140      	movs	r1, #64	; 0x40
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fc11 	bl	8004152 <TIM_ITRx_SetConfig>
      break;
 8003930:	e00b      	b.n	800394a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f000 fc08 	bl	8004152 <TIM_ITRx_SetConfig>
        break;
 8003942:	e002      	b.n	800394a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003948:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a40      	ldr	r2, [pc, #256]	; (8003ac8 <TIM_Base_SetConfig+0x114>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d013      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d2:	d00f      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a3d      	ldr	r2, [pc, #244]	; (8003acc <TIM_Base_SetConfig+0x118>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00b      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a3c      	ldr	r2, [pc, #240]	; (8003ad0 <TIM_Base_SetConfig+0x11c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d007      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a3b      	ldr	r2, [pc, #236]	; (8003ad4 <TIM_Base_SetConfig+0x120>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d003      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a3a      	ldr	r2, [pc, #232]	; (8003ad8 <TIM_Base_SetConfig+0x124>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d108      	bne.n	8003a06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a2f      	ldr	r2, [pc, #188]	; (8003ac8 <TIM_Base_SetConfig+0x114>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d01f      	beq.n	8003a4e <TIM_Base_SetConfig+0x9a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a14:	d01b      	beq.n	8003a4e <TIM_Base_SetConfig+0x9a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a2c      	ldr	r2, [pc, #176]	; (8003acc <TIM_Base_SetConfig+0x118>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d017      	beq.n	8003a4e <TIM_Base_SetConfig+0x9a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a2b      	ldr	r2, [pc, #172]	; (8003ad0 <TIM_Base_SetConfig+0x11c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d013      	beq.n	8003a4e <TIM_Base_SetConfig+0x9a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a2a      	ldr	r2, [pc, #168]	; (8003ad4 <TIM_Base_SetConfig+0x120>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00f      	beq.n	8003a4e <TIM_Base_SetConfig+0x9a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a29      	ldr	r2, [pc, #164]	; (8003ad8 <TIM_Base_SetConfig+0x124>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00b      	beq.n	8003a4e <TIM_Base_SetConfig+0x9a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a28      	ldr	r2, [pc, #160]	; (8003adc <TIM_Base_SetConfig+0x128>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d007      	beq.n	8003a4e <TIM_Base_SetConfig+0x9a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a27      	ldr	r2, [pc, #156]	; (8003ae0 <TIM_Base_SetConfig+0x12c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d003      	beq.n	8003a4e <TIM_Base_SetConfig+0x9a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a26      	ldr	r2, [pc, #152]	; (8003ae4 <TIM_Base_SetConfig+0x130>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d108      	bne.n	8003a60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a10      	ldr	r2, [pc, #64]	; (8003ac8 <TIM_Base_SetConfig+0x114>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00f      	beq.n	8003aac <TIM_Base_SetConfig+0xf8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a12      	ldr	r2, [pc, #72]	; (8003ad8 <TIM_Base_SetConfig+0x124>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00b      	beq.n	8003aac <TIM_Base_SetConfig+0xf8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a11      	ldr	r2, [pc, #68]	; (8003adc <TIM_Base_SetConfig+0x128>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d007      	beq.n	8003aac <TIM_Base_SetConfig+0xf8>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a10      	ldr	r2, [pc, #64]	; (8003ae0 <TIM_Base_SetConfig+0x12c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d003      	beq.n	8003aac <TIM_Base_SetConfig+0xf8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <TIM_Base_SetConfig+0x130>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d103      	bne.n	8003ab4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	615a      	str	r2, [r3, #20]
}
 8003aba:	bf00      	nop
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40012c00 	.word	0x40012c00
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40000800 	.word	0x40000800
 8003ad4:	40000c00 	.word	0x40000c00
 8003ad8:	40013400 	.word	0x40013400
 8003adc:	40014000 	.word	0x40014000
 8003ae0:	40014400 	.word	0x40014400
 8003ae4:	40014800 	.word	0x40014800

08003ae8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f023 0201 	bic.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0303 	bic.w	r3, r3, #3
 8003b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f023 0302 	bic.w	r3, r3, #2
 8003b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a2c      	ldr	r2, [pc, #176]	; (8003bf4 <TIM_OC1_SetConfig+0x10c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00f      	beq.n	8003b68 <TIM_OC1_SetConfig+0x80>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a2b      	ldr	r2, [pc, #172]	; (8003bf8 <TIM_OC1_SetConfig+0x110>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00b      	beq.n	8003b68 <TIM_OC1_SetConfig+0x80>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a2a      	ldr	r2, [pc, #168]	; (8003bfc <TIM_OC1_SetConfig+0x114>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d007      	beq.n	8003b68 <TIM_OC1_SetConfig+0x80>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a29      	ldr	r2, [pc, #164]	; (8003c00 <TIM_OC1_SetConfig+0x118>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <TIM_OC1_SetConfig+0x80>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a28      	ldr	r2, [pc, #160]	; (8003c04 <TIM_OC1_SetConfig+0x11c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d10c      	bne.n	8003b82 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f023 0308 	bic.w	r3, r3, #8
 8003b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f023 0304 	bic.w	r3, r3, #4
 8003b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a1b      	ldr	r2, [pc, #108]	; (8003bf4 <TIM_OC1_SetConfig+0x10c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00f      	beq.n	8003baa <TIM_OC1_SetConfig+0xc2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a1a      	ldr	r2, [pc, #104]	; (8003bf8 <TIM_OC1_SetConfig+0x110>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00b      	beq.n	8003baa <TIM_OC1_SetConfig+0xc2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a19      	ldr	r2, [pc, #100]	; (8003bfc <TIM_OC1_SetConfig+0x114>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d007      	beq.n	8003baa <TIM_OC1_SetConfig+0xc2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a18      	ldr	r2, [pc, #96]	; (8003c00 <TIM_OC1_SetConfig+0x118>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d003      	beq.n	8003baa <TIM_OC1_SetConfig+0xc2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a17      	ldr	r2, [pc, #92]	; (8003c04 <TIM_OC1_SetConfig+0x11c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d111      	bne.n	8003bce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	621a      	str	r2, [r3, #32]
}
 8003be8:	bf00      	nop
 8003bea:	371c      	adds	r7, #28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	40012c00 	.word	0x40012c00
 8003bf8:	40013400 	.word	0x40013400
 8003bfc:	40014000 	.word	0x40014000
 8003c00:	40014400 	.word	0x40014400
 8003c04:	40014800 	.word	0x40014800

08003c08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f023 0210 	bic.w	r2, r3, #16
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f023 0320 	bic.w	r3, r3, #32
 8003c56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a28      	ldr	r2, [pc, #160]	; (8003d08 <TIM_OC2_SetConfig+0x100>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d003      	beq.n	8003c74 <TIM_OC2_SetConfig+0x6c>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a27      	ldr	r2, [pc, #156]	; (8003d0c <TIM_OC2_SetConfig+0x104>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d10d      	bne.n	8003c90 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a1d      	ldr	r2, [pc, #116]	; (8003d08 <TIM_OC2_SetConfig+0x100>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00f      	beq.n	8003cb8 <TIM_OC2_SetConfig+0xb0>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a1c      	ldr	r2, [pc, #112]	; (8003d0c <TIM_OC2_SetConfig+0x104>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00b      	beq.n	8003cb8 <TIM_OC2_SetConfig+0xb0>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a1b      	ldr	r2, [pc, #108]	; (8003d10 <TIM_OC2_SetConfig+0x108>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d007      	beq.n	8003cb8 <TIM_OC2_SetConfig+0xb0>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a1a      	ldr	r2, [pc, #104]	; (8003d14 <TIM_OC2_SetConfig+0x10c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d003      	beq.n	8003cb8 <TIM_OC2_SetConfig+0xb0>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <TIM_OC2_SetConfig+0x110>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d113      	bne.n	8003ce0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	621a      	str	r2, [r3, #32]
}
 8003cfa:	bf00      	nop
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40012c00 	.word	0x40012c00
 8003d0c:	40013400 	.word	0x40013400
 8003d10:	40014000 	.word	0x40014000
 8003d14:	40014400 	.word	0x40014400
 8003d18:	40014800 	.word	0x40014800

08003d1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a27      	ldr	r2, [pc, #156]	; (8003e18 <TIM_OC3_SetConfig+0xfc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d003      	beq.n	8003d86 <TIM_OC3_SetConfig+0x6a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a26      	ldr	r2, [pc, #152]	; (8003e1c <TIM_OC3_SetConfig+0x100>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d10d      	bne.n	8003da2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <TIM_OC3_SetConfig+0xfc>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00f      	beq.n	8003dca <TIM_OC3_SetConfig+0xae>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <TIM_OC3_SetConfig+0x100>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00b      	beq.n	8003dca <TIM_OC3_SetConfig+0xae>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1a      	ldr	r2, [pc, #104]	; (8003e20 <TIM_OC3_SetConfig+0x104>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d007      	beq.n	8003dca <TIM_OC3_SetConfig+0xae>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a19      	ldr	r2, [pc, #100]	; (8003e24 <TIM_OC3_SetConfig+0x108>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d003      	beq.n	8003dca <TIM_OC3_SetConfig+0xae>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a18      	ldr	r2, [pc, #96]	; (8003e28 <TIM_OC3_SetConfig+0x10c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d113      	bne.n	8003df2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	621a      	str	r2, [r3, #32]
}
 8003e0c:	bf00      	nop
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	40012c00 	.word	0x40012c00
 8003e1c:	40013400 	.word	0x40013400
 8003e20:	40014000 	.word	0x40014000
 8003e24:	40014400 	.word	0x40014400
 8003e28:	40014800 	.word	0x40014800

08003e2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	031b      	lsls	r3, r3, #12
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a18      	ldr	r2, [pc, #96]	; (8003eec <TIM_OC4_SetConfig+0xc0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00f      	beq.n	8003eb0 <TIM_OC4_SetConfig+0x84>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a17      	ldr	r2, [pc, #92]	; (8003ef0 <TIM_OC4_SetConfig+0xc4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00b      	beq.n	8003eb0 <TIM_OC4_SetConfig+0x84>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a16      	ldr	r2, [pc, #88]	; (8003ef4 <TIM_OC4_SetConfig+0xc8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d007      	beq.n	8003eb0 <TIM_OC4_SetConfig+0x84>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a15      	ldr	r2, [pc, #84]	; (8003ef8 <TIM_OC4_SetConfig+0xcc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_OC4_SetConfig+0x84>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a14      	ldr	r2, [pc, #80]	; (8003efc <TIM_OC4_SetConfig+0xd0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d109      	bne.n	8003ec4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	019b      	lsls	r3, r3, #6
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	621a      	str	r2, [r3, #32]
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40012c00 	.word	0x40012c00
 8003ef0:	40013400 	.word	0x40013400
 8003ef4:	40014000 	.word	0x40014000
 8003ef8:	40014400 	.word	0x40014400
 8003efc:	40014800 	.word	0x40014800

08003f00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	041b      	lsls	r3, r3, #16
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a17      	ldr	r2, [pc, #92]	; (8003fb4 <TIM_OC5_SetConfig+0xb4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00f      	beq.n	8003f7a <TIM_OC5_SetConfig+0x7a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a16      	ldr	r2, [pc, #88]	; (8003fb8 <TIM_OC5_SetConfig+0xb8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00b      	beq.n	8003f7a <TIM_OC5_SetConfig+0x7a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <TIM_OC5_SetConfig+0xbc>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d007      	beq.n	8003f7a <TIM_OC5_SetConfig+0x7a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a14      	ldr	r2, [pc, #80]	; (8003fc0 <TIM_OC5_SetConfig+0xc0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d003      	beq.n	8003f7a <TIM_OC5_SetConfig+0x7a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a13      	ldr	r2, [pc, #76]	; (8003fc4 <TIM_OC5_SetConfig+0xc4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d109      	bne.n	8003f8e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	621a      	str	r2, [r3, #32]
}
 8003fa8:	bf00      	nop
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	40012c00 	.word	0x40012c00
 8003fb8:	40013400 	.word	0x40013400
 8003fbc:	40014000 	.word	0x40014000
 8003fc0:	40014400 	.word	0x40014400
 8003fc4:	40014800 	.word	0x40014800

08003fc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	021b      	lsls	r3, r3, #8
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800400e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	051b      	lsls	r3, r3, #20
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a18      	ldr	r2, [pc, #96]	; (8004080 <TIM_OC6_SetConfig+0xb8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00f      	beq.n	8004044 <TIM_OC6_SetConfig+0x7c>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a17      	ldr	r2, [pc, #92]	; (8004084 <TIM_OC6_SetConfig+0xbc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00b      	beq.n	8004044 <TIM_OC6_SetConfig+0x7c>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a16      	ldr	r2, [pc, #88]	; (8004088 <TIM_OC6_SetConfig+0xc0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d007      	beq.n	8004044 <TIM_OC6_SetConfig+0x7c>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a15      	ldr	r2, [pc, #84]	; (800408c <TIM_OC6_SetConfig+0xc4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d003      	beq.n	8004044 <TIM_OC6_SetConfig+0x7c>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a14      	ldr	r2, [pc, #80]	; (8004090 <TIM_OC6_SetConfig+0xc8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d109      	bne.n	8004058 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800404a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	029b      	lsls	r3, r3, #10
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40012c00 	.word	0x40012c00
 8004084:	40013400 	.word	0x40013400
 8004088:	40014000 	.word	0x40014000
 800408c:	40014400 	.word	0x40014400
 8004090:	40014800 	.word	0x40014800

08004094 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f023 0201 	bic.w	r2, r3, #1
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f023 030a 	bic.w	r3, r3, #10
 80040d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	621a      	str	r2, [r3, #32]
}
 80040e6:	bf00      	nop
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b087      	sub	sp, #28
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f023 0210 	bic.w	r2, r3, #16
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800411c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	031b      	lsls	r3, r3, #12
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800412e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	621a      	str	r2, [r3, #32]
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	f043 0307 	orr.w	r3, r3, #7
 8004174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	609a      	str	r2, [r3, #8]
}
 800417c:	bf00      	nop
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	021a      	lsls	r2, r3, #8
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	609a      	str	r2, [r3, #8]
}
 80041bc:	bf00      	nop
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 031f 	and.w	r3, r3, #31
 80041da:	2201      	movs	r2, #1
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1a      	ldr	r2, [r3, #32]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	43db      	mvns	r3, r3
 80041ea:	401a      	ands	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a1a      	ldr	r2, [r3, #32]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	431a      	orrs	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	621a      	str	r2, [r3, #32]
}
 8004206:	bf00      	nop
 8004208:	371c      	adds	r7, #28
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004228:	2302      	movs	r3, #2
 800422a:	e068      	b.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a2e      	ldr	r2, [pc, #184]	; (800430c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d004      	beq.n	8004260 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a2d      	ldr	r2, [pc, #180]	; (8004310 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d108      	bne.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004266:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004278:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1e      	ldr	r2, [pc, #120]	; (800430c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d01d      	beq.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429e:	d018      	beq.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1b      	ldr	r2, [pc, #108]	; (8004314 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1a      	ldr	r2, [pc, #104]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00e      	beq.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a18      	ldr	r2, [pc, #96]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d009      	beq.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a13      	ldr	r2, [pc, #76]	; (8004310 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a14      	ldr	r2, [pc, #80]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d10c      	bne.n	80042ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40012c00 	.word	0x40012c00
 8004310:	40013400 	.word	0x40013400
 8004314:	40000400 	.word	0x40000400
 8004318:	40000800 	.word	0x40000800
 800431c:	40000c00 	.word	0x40000c00
 8004320:	40014000 	.word	0x40014000

08004324 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e040      	b.n	80043f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fc fc7a 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2224      	movs	r2, #36	; 0x24
 800438c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0201 	bic.w	r2, r2, #1
 800439c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f82c 	bl	80043fc <UART_SetConfig>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e022      	b.n	80043f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 faaa 	bl	8004910 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fb31 	bl	8004a54 <UART_CheckIdleState>
 80043f2:	4603      	mov	r3, r0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043fc:	b5b0      	push	{r4, r5, r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	4313      	orrs	r3, r2
 800441e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4bad      	ldr	r3, [pc, #692]	; (80046dc <UART_SetConfig+0x2e0>)
 8004428:	4013      	ands	r3, r2
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6812      	ldr	r2, [r2, #0]
 800442e:	69f9      	ldr	r1, [r7, #28]
 8004430:	430b      	orrs	r3, r1
 8004432:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4aa2      	ldr	r2, [pc, #648]	; (80046e0 <UART_SetConfig+0x2e4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d004      	beq.n	8004464 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	4313      	orrs	r3, r2
 8004462:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	430a      	orrs	r2, r1
 8004476:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a99      	ldr	r2, [pc, #612]	; (80046e4 <UART_SetConfig+0x2e8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d121      	bne.n	80044c6 <UART_SetConfig+0xca>
 8004482:	4b99      	ldr	r3, [pc, #612]	; (80046e8 <UART_SetConfig+0x2ec>)
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	2b03      	cmp	r3, #3
 800448e:	d817      	bhi.n	80044c0 <UART_SetConfig+0xc4>
 8004490:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <UART_SetConfig+0x9c>)
 8004492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004496:	bf00      	nop
 8004498:	080044a9 	.word	0x080044a9
 800449c:	080044b5 	.word	0x080044b5
 80044a0:	080044af 	.word	0x080044af
 80044a4:	080044bb 	.word	0x080044bb
 80044a8:	2301      	movs	r3, #1
 80044aa:	76fb      	strb	r3, [r7, #27]
 80044ac:	e0e7      	b.n	800467e <UART_SetConfig+0x282>
 80044ae:	2302      	movs	r3, #2
 80044b0:	76fb      	strb	r3, [r7, #27]
 80044b2:	e0e4      	b.n	800467e <UART_SetConfig+0x282>
 80044b4:	2304      	movs	r3, #4
 80044b6:	76fb      	strb	r3, [r7, #27]
 80044b8:	e0e1      	b.n	800467e <UART_SetConfig+0x282>
 80044ba:	2308      	movs	r3, #8
 80044bc:	76fb      	strb	r3, [r7, #27]
 80044be:	e0de      	b.n	800467e <UART_SetConfig+0x282>
 80044c0:	2310      	movs	r3, #16
 80044c2:	76fb      	strb	r3, [r7, #27]
 80044c4:	e0db      	b.n	800467e <UART_SetConfig+0x282>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a88      	ldr	r2, [pc, #544]	; (80046ec <UART_SetConfig+0x2f0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d132      	bne.n	8004536 <UART_SetConfig+0x13a>
 80044d0:	4b85      	ldr	r3, [pc, #532]	; (80046e8 <UART_SetConfig+0x2ec>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b0c      	cmp	r3, #12
 80044dc:	d828      	bhi.n	8004530 <UART_SetConfig+0x134>
 80044de:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <UART_SetConfig+0xe8>)
 80044e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e4:	08004519 	.word	0x08004519
 80044e8:	08004531 	.word	0x08004531
 80044ec:	08004531 	.word	0x08004531
 80044f0:	08004531 	.word	0x08004531
 80044f4:	08004525 	.word	0x08004525
 80044f8:	08004531 	.word	0x08004531
 80044fc:	08004531 	.word	0x08004531
 8004500:	08004531 	.word	0x08004531
 8004504:	0800451f 	.word	0x0800451f
 8004508:	08004531 	.word	0x08004531
 800450c:	08004531 	.word	0x08004531
 8004510:	08004531 	.word	0x08004531
 8004514:	0800452b 	.word	0x0800452b
 8004518:	2300      	movs	r3, #0
 800451a:	76fb      	strb	r3, [r7, #27]
 800451c:	e0af      	b.n	800467e <UART_SetConfig+0x282>
 800451e:	2302      	movs	r3, #2
 8004520:	76fb      	strb	r3, [r7, #27]
 8004522:	e0ac      	b.n	800467e <UART_SetConfig+0x282>
 8004524:	2304      	movs	r3, #4
 8004526:	76fb      	strb	r3, [r7, #27]
 8004528:	e0a9      	b.n	800467e <UART_SetConfig+0x282>
 800452a:	2308      	movs	r3, #8
 800452c:	76fb      	strb	r3, [r7, #27]
 800452e:	e0a6      	b.n	800467e <UART_SetConfig+0x282>
 8004530:	2310      	movs	r3, #16
 8004532:	76fb      	strb	r3, [r7, #27]
 8004534:	e0a3      	b.n	800467e <UART_SetConfig+0x282>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a6d      	ldr	r2, [pc, #436]	; (80046f0 <UART_SetConfig+0x2f4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d120      	bne.n	8004582 <UART_SetConfig+0x186>
 8004540:	4b69      	ldr	r3, [pc, #420]	; (80046e8 <UART_SetConfig+0x2ec>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004546:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800454a:	2b30      	cmp	r3, #48	; 0x30
 800454c:	d013      	beq.n	8004576 <UART_SetConfig+0x17a>
 800454e:	2b30      	cmp	r3, #48	; 0x30
 8004550:	d814      	bhi.n	800457c <UART_SetConfig+0x180>
 8004552:	2b20      	cmp	r3, #32
 8004554:	d009      	beq.n	800456a <UART_SetConfig+0x16e>
 8004556:	2b20      	cmp	r3, #32
 8004558:	d810      	bhi.n	800457c <UART_SetConfig+0x180>
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <UART_SetConfig+0x168>
 800455e:	2b10      	cmp	r3, #16
 8004560:	d006      	beq.n	8004570 <UART_SetConfig+0x174>
 8004562:	e00b      	b.n	800457c <UART_SetConfig+0x180>
 8004564:	2300      	movs	r3, #0
 8004566:	76fb      	strb	r3, [r7, #27]
 8004568:	e089      	b.n	800467e <UART_SetConfig+0x282>
 800456a:	2302      	movs	r3, #2
 800456c:	76fb      	strb	r3, [r7, #27]
 800456e:	e086      	b.n	800467e <UART_SetConfig+0x282>
 8004570:	2304      	movs	r3, #4
 8004572:	76fb      	strb	r3, [r7, #27]
 8004574:	e083      	b.n	800467e <UART_SetConfig+0x282>
 8004576:	2308      	movs	r3, #8
 8004578:	76fb      	strb	r3, [r7, #27]
 800457a:	e080      	b.n	800467e <UART_SetConfig+0x282>
 800457c:	2310      	movs	r3, #16
 800457e:	76fb      	strb	r3, [r7, #27]
 8004580:	e07d      	b.n	800467e <UART_SetConfig+0x282>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a5b      	ldr	r2, [pc, #364]	; (80046f4 <UART_SetConfig+0x2f8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d120      	bne.n	80045ce <UART_SetConfig+0x1d2>
 800458c:	4b56      	ldr	r3, [pc, #344]	; (80046e8 <UART_SetConfig+0x2ec>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004592:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004596:	2bc0      	cmp	r3, #192	; 0xc0
 8004598:	d013      	beq.n	80045c2 <UART_SetConfig+0x1c6>
 800459a:	2bc0      	cmp	r3, #192	; 0xc0
 800459c:	d814      	bhi.n	80045c8 <UART_SetConfig+0x1cc>
 800459e:	2b80      	cmp	r3, #128	; 0x80
 80045a0:	d009      	beq.n	80045b6 <UART_SetConfig+0x1ba>
 80045a2:	2b80      	cmp	r3, #128	; 0x80
 80045a4:	d810      	bhi.n	80045c8 <UART_SetConfig+0x1cc>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <UART_SetConfig+0x1b4>
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d006      	beq.n	80045bc <UART_SetConfig+0x1c0>
 80045ae:	e00b      	b.n	80045c8 <UART_SetConfig+0x1cc>
 80045b0:	2300      	movs	r3, #0
 80045b2:	76fb      	strb	r3, [r7, #27]
 80045b4:	e063      	b.n	800467e <UART_SetConfig+0x282>
 80045b6:	2302      	movs	r3, #2
 80045b8:	76fb      	strb	r3, [r7, #27]
 80045ba:	e060      	b.n	800467e <UART_SetConfig+0x282>
 80045bc:	2304      	movs	r3, #4
 80045be:	76fb      	strb	r3, [r7, #27]
 80045c0:	e05d      	b.n	800467e <UART_SetConfig+0x282>
 80045c2:	2308      	movs	r3, #8
 80045c4:	76fb      	strb	r3, [r7, #27]
 80045c6:	e05a      	b.n	800467e <UART_SetConfig+0x282>
 80045c8:	2310      	movs	r3, #16
 80045ca:	76fb      	strb	r3, [r7, #27]
 80045cc:	e057      	b.n	800467e <UART_SetConfig+0x282>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a49      	ldr	r2, [pc, #292]	; (80046f8 <UART_SetConfig+0x2fc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d125      	bne.n	8004624 <UART_SetConfig+0x228>
 80045d8:	4b43      	ldr	r3, [pc, #268]	; (80046e8 <UART_SetConfig+0x2ec>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e6:	d017      	beq.n	8004618 <UART_SetConfig+0x21c>
 80045e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ec:	d817      	bhi.n	800461e <UART_SetConfig+0x222>
 80045ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f2:	d00b      	beq.n	800460c <UART_SetConfig+0x210>
 80045f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f8:	d811      	bhi.n	800461e <UART_SetConfig+0x222>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <UART_SetConfig+0x20a>
 80045fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004602:	d006      	beq.n	8004612 <UART_SetConfig+0x216>
 8004604:	e00b      	b.n	800461e <UART_SetConfig+0x222>
 8004606:	2300      	movs	r3, #0
 8004608:	76fb      	strb	r3, [r7, #27]
 800460a:	e038      	b.n	800467e <UART_SetConfig+0x282>
 800460c:	2302      	movs	r3, #2
 800460e:	76fb      	strb	r3, [r7, #27]
 8004610:	e035      	b.n	800467e <UART_SetConfig+0x282>
 8004612:	2304      	movs	r3, #4
 8004614:	76fb      	strb	r3, [r7, #27]
 8004616:	e032      	b.n	800467e <UART_SetConfig+0x282>
 8004618:	2308      	movs	r3, #8
 800461a:	76fb      	strb	r3, [r7, #27]
 800461c:	e02f      	b.n	800467e <UART_SetConfig+0x282>
 800461e:	2310      	movs	r3, #16
 8004620:	76fb      	strb	r3, [r7, #27]
 8004622:	e02c      	b.n	800467e <UART_SetConfig+0x282>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a2d      	ldr	r2, [pc, #180]	; (80046e0 <UART_SetConfig+0x2e4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d125      	bne.n	800467a <UART_SetConfig+0x27e>
 800462e:	4b2e      	ldr	r3, [pc, #184]	; (80046e8 <UART_SetConfig+0x2ec>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004634:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004638:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800463c:	d017      	beq.n	800466e <UART_SetConfig+0x272>
 800463e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004642:	d817      	bhi.n	8004674 <UART_SetConfig+0x278>
 8004644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004648:	d00b      	beq.n	8004662 <UART_SetConfig+0x266>
 800464a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464e:	d811      	bhi.n	8004674 <UART_SetConfig+0x278>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <UART_SetConfig+0x260>
 8004654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004658:	d006      	beq.n	8004668 <UART_SetConfig+0x26c>
 800465a:	e00b      	b.n	8004674 <UART_SetConfig+0x278>
 800465c:	2300      	movs	r3, #0
 800465e:	76fb      	strb	r3, [r7, #27]
 8004660:	e00d      	b.n	800467e <UART_SetConfig+0x282>
 8004662:	2302      	movs	r3, #2
 8004664:	76fb      	strb	r3, [r7, #27]
 8004666:	e00a      	b.n	800467e <UART_SetConfig+0x282>
 8004668:	2304      	movs	r3, #4
 800466a:	76fb      	strb	r3, [r7, #27]
 800466c:	e007      	b.n	800467e <UART_SetConfig+0x282>
 800466e:	2308      	movs	r3, #8
 8004670:	76fb      	strb	r3, [r7, #27]
 8004672:	e004      	b.n	800467e <UART_SetConfig+0x282>
 8004674:	2310      	movs	r3, #16
 8004676:	76fb      	strb	r3, [r7, #27]
 8004678:	e001      	b.n	800467e <UART_SetConfig+0x282>
 800467a:	2310      	movs	r3, #16
 800467c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a17      	ldr	r2, [pc, #92]	; (80046e0 <UART_SetConfig+0x2e4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	f040 8087 	bne.w	8004798 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800468a:	7efb      	ldrb	r3, [r7, #27]
 800468c:	2b08      	cmp	r3, #8
 800468e:	d837      	bhi.n	8004700 <UART_SetConfig+0x304>
 8004690:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <UART_SetConfig+0x29c>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	080046bd 	.word	0x080046bd
 800469c:	08004701 	.word	0x08004701
 80046a0:	080046c5 	.word	0x080046c5
 80046a4:	08004701 	.word	0x08004701
 80046a8:	080046cb 	.word	0x080046cb
 80046ac:	08004701 	.word	0x08004701
 80046b0:	08004701 	.word	0x08004701
 80046b4:	08004701 	.word	0x08004701
 80046b8:	080046d3 	.word	0x080046d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046bc:	f7fd fdb0 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 80046c0:	6178      	str	r0, [r7, #20]
        break;
 80046c2:	e022      	b.n	800470a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c4:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <UART_SetConfig+0x300>)
 80046c6:	617b      	str	r3, [r7, #20]
        break;
 80046c8:	e01f      	b.n	800470a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ca:	f7fd fd11 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80046ce:	6178      	str	r0, [r7, #20]
        break;
 80046d0:	e01b      	b.n	800470a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d6:	617b      	str	r3, [r7, #20]
        break;
 80046d8:	e017      	b.n	800470a <UART_SetConfig+0x30e>
 80046da:	bf00      	nop
 80046dc:	efff69f3 	.word	0xefff69f3
 80046e0:	40008000 	.word	0x40008000
 80046e4:	40013800 	.word	0x40013800
 80046e8:	40021000 	.word	0x40021000
 80046ec:	40004400 	.word	0x40004400
 80046f0:	40004800 	.word	0x40004800
 80046f4:	40004c00 	.word	0x40004c00
 80046f8:	40005000 	.word	0x40005000
 80046fc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	76bb      	strb	r3, [r7, #26]
        break;
 8004708:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80f1 	beq.w	80048f4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	4413      	add	r3, r2
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	429a      	cmp	r2, r3
 8004720:	d305      	bcc.n	800472e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	429a      	cmp	r2, r3
 800472c:	d902      	bls.n	8004734 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	76bb      	strb	r3, [r7, #26]
 8004732:	e0df      	b.n	80048f4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	4618      	mov	r0, r3
 8004738:	f04f 0100 	mov.w	r1, #0
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	020b      	lsls	r3, r1, #8
 8004746:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800474a:	0202      	lsls	r2, r0, #8
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	6849      	ldr	r1, [r1, #4]
 8004750:	0849      	lsrs	r1, r1, #1
 8004752:	4608      	mov	r0, r1
 8004754:	f04f 0100 	mov.w	r1, #0
 8004758:	1814      	adds	r4, r2, r0
 800475a:	eb43 0501 	adc.w	r5, r3, r1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	461a      	mov	r2, r3
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	4620      	mov	r0, r4
 800476a:	4629      	mov	r1, r5
 800476c:	f7fb fd2c 	bl	80001c8 <__aeabi_uldivmod>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4613      	mov	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800477e:	d308      	bcc.n	8004792 <UART_SetConfig+0x396>
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004786:	d204      	bcs.n	8004792 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	60da      	str	r2, [r3, #12]
 8004790:	e0b0      	b.n	80048f4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	76bb      	strb	r3, [r7, #26]
 8004796:	e0ad      	b.n	80048f4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a0:	d15c      	bne.n	800485c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80047a2:	7efb      	ldrb	r3, [r7, #27]
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d828      	bhi.n	80047fa <UART_SetConfig+0x3fe>
 80047a8:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <UART_SetConfig+0x3b4>)
 80047aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ae:	bf00      	nop
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	080047dd 	.word	0x080047dd
 80047b8:	080047e5 	.word	0x080047e5
 80047bc:	080047fb 	.word	0x080047fb
 80047c0:	080047eb 	.word	0x080047eb
 80047c4:	080047fb 	.word	0x080047fb
 80047c8:	080047fb 	.word	0x080047fb
 80047cc:	080047fb 	.word	0x080047fb
 80047d0:	080047f3 	.word	0x080047f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d4:	f7fd fd24 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 80047d8:	6178      	str	r0, [r7, #20]
        break;
 80047da:	e013      	b.n	8004804 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047dc:	f7fd fd36 	bl	800224c <HAL_RCC_GetPCLK2Freq>
 80047e0:	6178      	str	r0, [r7, #20]
        break;
 80047e2:	e00f      	b.n	8004804 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e4:	4b49      	ldr	r3, [pc, #292]	; (800490c <UART_SetConfig+0x510>)
 80047e6:	617b      	str	r3, [r7, #20]
        break;
 80047e8:	e00c      	b.n	8004804 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ea:	f7fd fc81 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80047ee:	6178      	str	r0, [r7, #20]
        break;
 80047f0:	e008      	b.n	8004804 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047f6:	617b      	str	r3, [r7, #20]
        break;
 80047f8:	e004      	b.n	8004804 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	76bb      	strb	r3, [r7, #26]
        break;
 8004802:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d074      	beq.n	80048f4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	005a      	lsls	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	085b      	lsrs	r3, r3, #1
 8004814:	441a      	add	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	fbb2 f3f3 	udiv	r3, r2, r3
 800481e:	b29b      	uxth	r3, r3
 8004820:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b0f      	cmp	r3, #15
 8004826:	d916      	bls.n	8004856 <UART_SetConfig+0x45a>
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800482e:	d212      	bcs.n	8004856 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	b29b      	uxth	r3, r3
 8004834:	f023 030f 	bic.w	r3, r3, #15
 8004838:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	085b      	lsrs	r3, r3, #1
 800483e:	b29b      	uxth	r3, r3
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	b29a      	uxth	r2, r3
 8004846:	89fb      	ldrh	r3, [r7, #14]
 8004848:	4313      	orrs	r3, r2
 800484a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	89fa      	ldrh	r2, [r7, #14]
 8004852:	60da      	str	r2, [r3, #12]
 8004854:	e04e      	b.n	80048f4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	76bb      	strb	r3, [r7, #26]
 800485a:	e04b      	b.n	80048f4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800485c:	7efb      	ldrb	r3, [r7, #27]
 800485e:	2b08      	cmp	r3, #8
 8004860:	d827      	bhi.n	80048b2 <UART_SetConfig+0x4b6>
 8004862:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0x46c>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	0800488d 	.word	0x0800488d
 800486c:	08004895 	.word	0x08004895
 8004870:	0800489d 	.word	0x0800489d
 8004874:	080048b3 	.word	0x080048b3
 8004878:	080048a3 	.word	0x080048a3
 800487c:	080048b3 	.word	0x080048b3
 8004880:	080048b3 	.word	0x080048b3
 8004884:	080048b3 	.word	0x080048b3
 8004888:	080048ab 	.word	0x080048ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800488c:	f7fd fcc8 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 8004890:	6178      	str	r0, [r7, #20]
        break;
 8004892:	e013      	b.n	80048bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004894:	f7fd fcda 	bl	800224c <HAL_RCC_GetPCLK2Freq>
 8004898:	6178      	str	r0, [r7, #20]
        break;
 800489a:	e00f      	b.n	80048bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800489c:	4b1b      	ldr	r3, [pc, #108]	; (800490c <UART_SetConfig+0x510>)
 800489e:	617b      	str	r3, [r7, #20]
        break;
 80048a0:	e00c      	b.n	80048bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a2:	f7fd fc25 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80048a6:	6178      	str	r0, [r7, #20]
        break;
 80048a8:	e008      	b.n	80048bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ae:	617b      	str	r3, [r7, #20]
        break;
 80048b0:	e004      	b.n	80048bc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	76bb      	strb	r3, [r7, #26]
        break;
 80048ba:	bf00      	nop
    }

    if (pclk != 0U)
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d018      	beq.n	80048f4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	085a      	lsrs	r2, r3, #1
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	441a      	add	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b0f      	cmp	r3, #15
 80048dc:	d908      	bls.n	80048f0 <UART_SetConfig+0x4f4>
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e4:	d204      	bcs.n	80048f0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	60da      	str	r2, [r3, #12]
 80048ee:	e001      	b.n	80048f4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004900:	7ebb      	ldrb	r3, [r7, #26]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3720      	adds	r7, #32
 8004906:	46bd      	mov	sp, r7
 8004908:	bdb0      	pop	{r4, r5, r7, pc}
 800490a:	bf00      	nop
 800490c:	00f42400 	.word	0x00f42400

08004910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01a      	beq.n	8004a26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a0e:	d10a      	bne.n	8004a26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	605a      	str	r2, [r3, #4]
  }
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a64:	f7fc f9f8 	bl	8000e58 <HAL_GetTick>
 8004a68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d10e      	bne.n	8004a96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f82d 	bl	8004ae6 <UART_WaitOnFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e023      	b.n	8004ade <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d10e      	bne.n	8004ac2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f817 	bl	8004ae6 <UART_WaitOnFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e00d      	b.n	8004ade <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	603b      	str	r3, [r7, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af6:	e05e      	b.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afe:	d05a      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b00:	f7fc f9aa 	bl	8000e58 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d302      	bcc.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d11b      	bne.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b24:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0201 	bic.w	r2, r2, #1
 8004b34:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e043      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d02c      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b6a:	d124      	bne.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b74:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b84:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0201 	bic.w	r2, r2, #1
 8004b94:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e00f      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2301      	moveq	r3, #1
 8004bc8:	2300      	movne	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d091      	beq.n	8004af8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <__libc_init_array>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	4d0d      	ldr	r5, [pc, #52]	; (8004c18 <__libc_init_array+0x38>)
 8004be4:	4c0d      	ldr	r4, [pc, #52]	; (8004c1c <__libc_init_array+0x3c>)
 8004be6:	1b64      	subs	r4, r4, r5
 8004be8:	10a4      	asrs	r4, r4, #2
 8004bea:	2600      	movs	r6, #0
 8004bec:	42a6      	cmp	r6, r4
 8004bee:	d109      	bne.n	8004c04 <__libc_init_array+0x24>
 8004bf0:	4d0b      	ldr	r5, [pc, #44]	; (8004c20 <__libc_init_array+0x40>)
 8004bf2:	4c0c      	ldr	r4, [pc, #48]	; (8004c24 <__libc_init_array+0x44>)
 8004bf4:	f000 f820 	bl	8004c38 <_init>
 8004bf8:	1b64      	subs	r4, r4, r5
 8004bfa:	10a4      	asrs	r4, r4, #2
 8004bfc:	2600      	movs	r6, #0
 8004bfe:	42a6      	cmp	r6, r4
 8004c00:	d105      	bne.n	8004c0e <__libc_init_array+0x2e>
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c08:	4798      	blx	r3
 8004c0a:	3601      	adds	r6, #1
 8004c0c:	e7ee      	b.n	8004bec <__libc_init_array+0xc>
 8004c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c12:	4798      	blx	r3
 8004c14:	3601      	adds	r6, #1
 8004c16:	e7f2      	b.n	8004bfe <__libc_init_array+0x1e>
 8004c18:	08004ca0 	.word	0x08004ca0
 8004c1c:	08004ca0 	.word	0x08004ca0
 8004c20:	08004ca0 	.word	0x08004ca0
 8004c24:	08004ca4 	.word	0x08004ca4

08004c28 <memset>:
 8004c28:	4402      	add	r2, r0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d100      	bne.n	8004c32 <memset+0xa>
 8004c30:	4770      	bx	lr
 8004c32:	f803 1b01 	strb.w	r1, [r3], #1
 8004c36:	e7f9      	b.n	8004c2c <memset+0x4>

08004c38 <_init>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	bf00      	nop
 8004c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3e:	bc08      	pop	{r3}
 8004c40:	469e      	mov	lr, r3
 8004c42:	4770      	bx	lr

08004c44 <_fini>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	bf00      	nop
 8004c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4a:	bc08      	pop	{r3}
 8004c4c:	469e      	mov	lr, r3
 8004c4e:	4770      	bx	lr
