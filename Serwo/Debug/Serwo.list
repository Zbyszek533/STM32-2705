
Serwo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f90  08005f90  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005f90  08005f90  00015f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f98  08005f98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f98  08005f98  00015f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f9c  08005f9c  00015f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000070  08006010  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08006010  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012acf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002899  00000000  00000000  00032b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00035408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00036428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280eb  00000000  00000000  00037330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012365  00000000  00000000  0005f41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f56fb  00000000  00000000  00071780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00166e7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf0  00000000  00000000  00166ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e78 	.word	0x08005e78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005e78 	.word	0x08005e78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_GPIO_Init+0x2c>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a08      	ldr	r2, [pc, #32]	; (8000594 <MX_GPIO_Init+0x2c>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <MX_GPIO_Init+0x2c>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fc33 	bl	8000e06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f84a 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f7ff ffe0 	bl	8000568 <MX_GPIO_Init>
  MX_TIM16_Init();
 80005a8:	f000 f9f0 	bl	800098c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80005ac:	f000 fb6e 	bl	8000c8c <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80005b0:	f000 fa64 	bl	8000a7c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &znak, 1);
 80005b4:	2201      	movs	r2, #1
 80005b6:	4919      	ldr	r1, [pc, #100]	; (800061c <main+0x84>)
 80005b8:	4819      	ldr	r0, [pc, #100]	; (8000620 <main+0x88>)
 80005ba:	f003 fa6b 	bl	8003a94 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80005be:	2100      	movs	r1, #0
 80005c0:	4818      	ldr	r0, [pc, #96]	; (8000624 <main+0x8c>)
 80005c2:	f002 fb93 	bl	8002cec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80005c6:	2100      	movs	r1, #0
 80005c8:	4817      	ldr	r0, [pc, #92]	; (8000628 <main+0x90>)
 80005ca:	f002 fb8f 	bl	8002cec <HAL_TIM_PWM_Start>

  printf("Udalo sie!");
 80005ce:	4817      	ldr	r0, [pc, #92]	; (800062c <main+0x94>)
 80005d0:	f004 fb2a 	bl	8004c28 <iprintf>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  serwo1 = 20*znak + 400;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <main+0x84>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	4613      	mov	r3, r2
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <main+0x98>)
 80005ea:	601a      	str	r2, [r3, #0]
	  serwo2 = 20*znak + 520;
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <main+0x84>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	4613      	mov	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80005fe:	461a      	mov	r2, r3
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <main+0x9c>)
 8000602:	601a      	str	r2, [r3, #0]

	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, serwo1);
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <main+0x8c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a09      	ldr	r2, [pc, #36]	; (8000630 <main+0x98>)
 800060a:	6812      	ldr	r2, [r2, #0]
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, serwo2);
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <main+0x90>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a08      	ldr	r2, [pc, #32]	; (8000634 <main+0x9c>)
 8000614:	6812      	ldr	r2, [r2, #0]
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
	  serwo1 = 20*znak + 400;
 8000618:	e7dc      	b.n	80005d4 <main+0x3c>
 800061a:	bf00      	nop
 800061c:	200000b4 	.word	0x200000b4
 8000620:	2000015c 	.word	0x2000015c
 8000624:	20000110 	.word	0x20000110
 8000628:	200000c4 	.word	0x200000c4
 800062c:	08005e90 	.word	0x08005e90
 8000630:	200000b8 	.word	0x200000b8
 8000634:	200000b0 	.word	0x200000b0

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b096      	sub	sp, #88	; 0x58
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	2244      	movs	r2, #68	; 0x44
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 fae6 	bl	8004c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800065e:	f000 ff8f 	bl	8001580 <HAL_PWREx_ControlVoltageScaling>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000668:	f000 f85c 	bl	8000724 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800066c:	2310      	movs	r3, #16
 800066e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000678:	2360      	movs	r3, #96	; 0x60
 800067a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4618      	mov	r0, r3
 8000686:	f000 ffd1 	bl	800162c <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000690:	f000 f848 	bl	8000724 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a8:	463b      	mov	r3, r7
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fba3 	bl	8001df8 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006b8:	f000 f834 	bl	8000724 <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3758      	adds	r7, #88	; 0x58
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a0e      	ldr	r2, [pc, #56]	; (800070c <HAL_UART_RxCpltCallback+0x48>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d116      	bne.n	8000704 <HAL_UART_RxCpltCallback+0x40>


		dl = sprintf(komunikat,"Received value %d", znak);
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <HAL_UART_RxCpltCallback+0x4c>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	490d      	ldr	r1, [pc, #52]	; (8000714 <HAL_UART_RxCpltCallback+0x50>)
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <HAL_UART_RxCpltCallback+0x54>)
 80006e0:	f004 faba 	bl	8004c58 <siprintf>
 80006e4:	4603      	mov	r3, r0
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_UART_RxCpltCallback+0x58>)
 80006ea:	801a      	strh	r2, [r3, #0]

		HAL_UART_Transmit_IT(&huart2, (uint8_t*)komunikat, dl);
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <HAL_UART_RxCpltCallback+0x58>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	4909      	ldr	r1, [pc, #36]	; (8000718 <HAL_UART_RxCpltCallback+0x54>)
 80006f4:	480a      	ldr	r0, [pc, #40]	; (8000720 <HAL_UART_RxCpltCallback+0x5c>)
 80006f6:	f003 f971 	bl	80039dc <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2, &znak, 1);
 80006fa:	2201      	movs	r2, #1
 80006fc:	4904      	ldr	r1, [pc, #16]	; (8000710 <HAL_UART_RxCpltCallback+0x4c>)
 80006fe:	4808      	ldr	r0, [pc, #32]	; (8000720 <HAL_UART_RxCpltCallback+0x5c>)
 8000700:	f003 f9c8 	bl	8003a94 <HAL_UART_Receive_IT>

	}
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40004400 	.word	0x40004400
 8000710:	200000b4 	.word	0x200000b4
 8000714:	08005e9c 	.word	0x08005e9c
 8000718:	2000009c 	.word	0x2000009c
 800071c:	200000c0 	.word	0x200000c0
 8000720:	2000015c 	.word	0x2000015c

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_MspInit+0x44>)
 8000738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073a:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <HAL_MspInit+0x44>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6613      	str	r3, [r2, #96]	; 0x60
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_MspInit+0x44>)
 8000744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_MspInit+0x44>)
 8000750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <HAL_MspInit+0x44>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	6593      	str	r3, [r2, #88]	; 0x58
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_MspInit+0x44>)
 800075c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800077c:	e7fe      	b.n	800077c <NMI_Handler+0x4>

0800077e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <HardFault_Handler+0x4>

08000784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <MemManage_Handler+0x4>

0800078a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <UsageFault_Handler+0x4>

08000796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c4:	f000 fb74 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007d0:	4802      	ldr	r0, [pc, #8]	; (80007dc <USART2_IRQHandler+0x10>)
 80007d2:	f003 f9a3 	bl	8003b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000015c 	.word	0x2000015c

080007e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	e00a      	b.n	8000808 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007f2:	f3af 8000 	nop.w
 80007f6:	4601      	mov	r1, r0
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	60ba      	str	r2, [r7, #8]
 80007fe:	b2ca      	uxtb	r2, r1
 8000800:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	3301      	adds	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	429a      	cmp	r2, r3
 800080e:	dbf0      	blt.n	80007f2 <_read+0x12>
	}

return len;
 8000810:	687b      	ldr	r3, [r7, #4]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b086      	sub	sp, #24
 800081e:	af00      	add	r7, sp, #0
 8000820:	60f8      	str	r0, [r7, #12]
 8000822:	60b9      	str	r1, [r7, #8]
 8000824:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	e009      	b.n	8000840 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	60ba      	str	r2, [r7, #8]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	3301      	adds	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	dbf1      	blt.n	800082c <_write+0x12>
	}
	return len;
 8000848:	687b      	ldr	r3, [r7, #4]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <_close>:

int _close(int file)
{
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
	return -1;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800087a:	605a      	str	r2, [r3, #4]
	return 0;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <_isatty>:

int _isatty(int file)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
	return 1;
 8000892:	2301      	movs	r3, #1
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
	return 0;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c4:	4a14      	ldr	r2, [pc, #80]	; (8000918 <_sbrk+0x5c>)
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <_sbrk+0x60>)
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d102      	bne.n	80008de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <_sbrk+0x64>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <_sbrk+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d207      	bcs.n	80008fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ec:	f004 f96a 	bl	8004bc4 <__errno>
 80008f0:	4603      	mov	r3, r0
 80008f2:	220c      	movs	r2, #12
 80008f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	e009      	b.n	8000910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <_sbrk+0x64>)
 800090c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20018000 	.word	0x20018000
 800091c:	00000400 	.word	0x00000400
 8000920:	2000008c 	.word	0x2000008c
 8000924:	200001f8 	.word	0x200001f8

08000928 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <SystemInit+0x5c>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a14      	ldr	r2, [pc, #80]	; (8000984 <SystemInit+0x5c>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <SystemInit+0x60>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a11      	ldr	r2, [pc, #68]	; (8000988 <SystemInit+0x60>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <SystemInit+0x60>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <SystemInit+0x60>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <SystemInit+0x60>)
 8000954:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000958:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800095c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <SystemInit+0x60>)
 8000960:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000964:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <SystemInit+0x60>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a07      	ldr	r2, [pc, #28]	; (8000988 <SystemInit+0x60>)
 800096c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000970:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <SystemInit+0x60>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00
 8000988:	40021000 	.word	0x40021000

0800098c <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b092      	sub	sp, #72	; 0x48
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000992:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009a6:	463b      	mov	r3, r7
 80009a8:	222c      	movs	r2, #44	; 0x2c
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f004 f933 	bl	8004c18 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009b2:	4b30      	ldr	r3, [pc, #192]	; (8000a74 <MX_TIM16_Init+0xe8>)
 80009b4:	4a30      	ldr	r2, [pc, #192]	; (8000a78 <MX_TIM16_Init+0xec>)
 80009b6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3;
 80009b8:	4b2e      	ldr	r3, [pc, #184]	; (8000a74 <MX_TIM16_Init+0xe8>)
 80009ba:	2203      	movs	r2, #3
 80009bc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <MX_TIM16_Init+0xe8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 80009c4:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <MX_TIM16_Init+0xe8>)
 80009c6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80009ca:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <MX_TIM16_Init+0xe8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009d2:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <MX_TIM16_Init+0xe8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009d8:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <MX_TIM16_Init+0xe8>)
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009de:	4825      	ldr	r0, [pc, #148]	; (8000a74 <MX_TIM16_Init+0xe8>)
 80009e0:	f002 f8cc 	bl	8002b7c <HAL_TIM_Base_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80009ea:	f7ff fe9b 	bl	8000724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80009ee:	4821      	ldr	r0, [pc, #132]	; (8000a74 <MX_TIM16_Init+0xe8>)
 80009f0:	f002 f91b 	bl	8002c2a <HAL_TIM_PWM_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80009fa:	f7ff fe93 	bl	8000724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fe:	2360      	movs	r3, #96	; 0x60
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a06:	2300      	movs	r3, #0
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a1e:	2200      	movs	r2, #0
 8000a20:	4619      	mov	r1, r3
 8000a22:	4814      	ldr	r0, [pc, #80]	; (8000a74 <MX_TIM16_Init+0xe8>)
 8000a24:	f002 fa68 	bl	8002ef8 <HAL_TIM_PWM_ConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000a2e:	f7ff fe79 	bl	8000724 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000a50:	463b      	mov	r3, r7
 8000a52:	4619      	mov	r1, r3
 8000a54:	4807      	ldr	r0, [pc, #28]	; (8000a74 <MX_TIM16_Init+0xe8>)
 8000a56:	f002 fef5 	bl	8003844 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8000a60:	f7ff fe60 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000a64:	4803      	ldr	r0, [pc, #12]	; (8000a74 <MX_TIM16_Init+0xe8>)
 8000a66:	f000 f8b5 	bl	8000bd4 <HAL_TIM_MspPostInit>

}
 8000a6a:	bf00      	nop
 8000a6c:	3748      	adds	r7, #72	; 0x48
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000110 	.word	0x20000110
 8000a78:	40014400 	.word	0x40014400

08000a7c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b092      	sub	sp, #72	; 0x48
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
 8000a92:	615a      	str	r2, [r3, #20]
 8000a94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a96:	463b      	mov	r3, r7
 8000a98:	222c      	movs	r2, #44	; 0x2c
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f004 f8bb 	bl	8004c18 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000aa2:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <MX_TIM17_Init+0xe8>)
 8000aa4:	4a30      	ldr	r2, [pc, #192]	; (8000b68 <MX_TIM17_Init+0xec>)
 8000aa6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3;
 8000aa8:	4b2e      	ldr	r3, [pc, #184]	; (8000b64 <MX_TIM17_Init+0xe8>)
 8000aaa:	2203      	movs	r2, #3
 8000aac:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <MX_TIM17_Init+0xe8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 19999;
 8000ab4:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <MX_TIM17_Init+0xe8>)
 8000ab6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000aba:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abc:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <MX_TIM17_Init+0xe8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000ac2:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <MX_TIM17_Init+0xe8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ac8:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <MX_TIM17_Init+0xe8>)
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000ace:	4825      	ldr	r0, [pc, #148]	; (8000b64 <MX_TIM17_Init+0xe8>)
 8000ad0:	f002 f854 	bl	8002b7c <HAL_TIM_Base_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000ada:	f7ff fe23 	bl	8000724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000ade:	4821      	ldr	r0, [pc, #132]	; (8000b64 <MX_TIM17_Init+0xe8>)
 8000ae0:	f002 f8a3 	bl	8002c2a <HAL_TIM_PWM_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000aea:	f7ff fe1b 	bl	8000724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aee:	2360      	movs	r3, #96	; 0x60
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af6:	2300      	movs	r3, #0
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000afa:	2300      	movs	r3, #0
 8000afc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b0e:	2200      	movs	r2, #0
 8000b10:	4619      	mov	r1, r3
 8000b12:	4814      	ldr	r0, [pc, #80]	; (8000b64 <MX_TIM17_Init+0xe8>)
 8000b14:	f002 f9f0 	bl	8002ef8 <HAL_TIM_PWM_ConfigChannel>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000b1e:	f7ff fe01 	bl	8000724 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000b40:	463b      	mov	r3, r7
 8000b42:	4619      	mov	r1, r3
 8000b44:	4807      	ldr	r0, [pc, #28]	; (8000b64 <MX_TIM17_Init+0xe8>)
 8000b46:	f002 fe7d 	bl	8003844 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 8000b50:	f7ff fde8 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000b54:	4803      	ldr	r0, [pc, #12]	; (8000b64 <MX_TIM17_Init+0xe8>)
 8000b56:	f000 f83d 	bl	8000bd4 <HAL_TIM_MspPostInit>

}
 8000b5a:	bf00      	nop
 8000b5c:	3748      	adds	r7, #72	; 0x48
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000c4 	.word	0x200000c4
 8000b68:	40014800 	.word	0x40014800

08000b6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d10c      	bne.n	8000b98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <HAL_TIM_Base_MspInit+0x60>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <HAL_TIM_Base_MspInit+0x60>)
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	6613      	str	r3, [r2, #96]	; 0x60
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_TIM_Base_MspInit+0x60>)
 8000b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000b96:	e010      	b.n	8000bba <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0c      	ldr	r2, [pc, #48]	; (8000bd0 <HAL_TIM_Base_MspInit+0x64>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d10b      	bne.n	8000bba <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_TIM_Base_MspInit+0x60>)
 8000ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba6:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <HAL_TIM_Base_MspInit+0x60>)
 8000ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bac:	6613      	str	r3, [r2, #96]	; 0x60
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <HAL_TIM_Base_MspInit+0x60>)
 8000bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40014400 	.word	0x40014400
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40014800 	.word	0x40014800

08000bd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a23      	ldr	r2, [pc, #140]	; (8000c80 <HAL_TIM_MspPostInit+0xac>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d11d      	bne.n	8000c32 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <HAL_TIM_MspPostInit+0xb0>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a22      	ldr	r2, [pc, #136]	; (8000c84 <HAL_TIM_MspPostInit+0xb0>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <HAL_TIM_MspPostInit+0xb0>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000c1e:	230e      	movs	r3, #14
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2c:	f000 faf0 	bl	8001210 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000c30:	e021      	b.n	8000c76 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM17)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <HAL_TIM_MspPostInit+0xb4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d11c      	bne.n	8000c76 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_TIM_MspPostInit+0xb0>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c40:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <HAL_TIM_MspPostInit+0xb0>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_TIM_MspPostInit+0xb0>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8000c64:	230e      	movs	r3, #14
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c72:	f000 facd 	bl	8001210 <HAL_GPIO_Init>
}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40014400 	.word	0x40014400
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40014800 	.word	0x40014800

08000c8c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000c92:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <MX_USART2_UART_Init+0x5c>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cd0:	f002 fe36 	bl	8003940 <HAL_UART_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cda:	f7ff fd23 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000015c 	.word	0x2000015c
 8000ce8:	40004400 	.word	0x40004400

08000cec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0ac      	sub	sp, #176	; 0xb0
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2288      	movs	r2, #136	; 0x88
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 ff83 	bl	8004c18 <memset>
  if(uartHandle->Instance==USART2)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a25      	ldr	r2, [pc, #148]	; (8000dac <HAL_UART_MspInit+0xc0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d143      	bne.n	8000da4 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f001 fa6b 	bl	8002204 <HAL_RCCEx_PeriphCLKConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d34:	f7ff fcf6 	bl	8000724 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_UART_MspInit+0xc4>)
 8000d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3c:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <HAL_UART_MspInit+0xc4>)
 8000d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d42:	6593      	str	r3, [r2, #88]	; 0x58
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <HAL_UART_MspInit+0xc4>)
 8000d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <HAL_UART_MspInit+0xc4>)
 8000d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d54:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <HAL_UART_MspInit+0xc4>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <HAL_UART_MspInit+0xc4>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d68:	230c      	movs	r3, #12
 8000d6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d80:	2307      	movs	r3, #7
 8000d82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d90:	f000 fa3e 	bl	8001210 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	2026      	movs	r0, #38	; 0x26
 8000d9a:	f000 f984 	bl	80010a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d9e:	2026      	movs	r0, #38	; 0x26
 8000da0:	f000 f99d 	bl	80010de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000da4:	bf00      	nop
 8000da6:	37b0      	adds	r7, #176	; 0xb0
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40004400 	.word	0x40004400
 8000db0:	40021000 	.word	0x40021000

08000db4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db8:	f7ff fdb6 	bl	8000928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000dbc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000dbe:	e003      	b.n	8000dc8 <LoopCopyDataInit>

08000dc0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000dc2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000dc4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000dc6:	3104      	adds	r1, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000dc8:	480a      	ldr	r0, [pc, #40]	; (8000df4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000dcc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000dd0:	d3f6      	bcc.n	8000dc0 <CopyDataInit>
	ldr	r2, =_sbss
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000dd4:	e002      	b.n	8000ddc <LoopFillZerobss>

08000dd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000dd6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000dd8:	f842 3b04 	str.w	r3, [r2], #4

08000ddc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <LoopForever+0x16>)
	cmp	r2, r3
 8000dde:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000de0:	d3f9      	bcc.n	8000dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de2:	f003 fef5 	bl	8004bd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000de6:	f7ff fbd7 	bl	8000598 <main>

08000dea <LoopForever>:

LoopForever:
    b LoopForever
 8000dea:	e7fe      	b.n	8000dea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000df0:	08005fa0 	.word	0x08005fa0
	ldr	r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000df8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000dfc:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000e00:	200001f4 	.word	0x200001f4

08000e04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC1_2_IRQHandler>

08000e06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f93d 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e16:	200f      	movs	r0, #15
 8000e18:	f000 f80e 	bl	8000e38 <HAL_InitTick>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	71fb      	strb	r3, [r7, #7]
 8000e26:	e001      	b.n	8000e2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e28:	f7ff fc82 	bl	8000730 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_InitTick+0x6c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d023      	beq.n	8000e94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <HAL_InitTick+0x70>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_InitTick+0x6c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f949 	bl	80010fa <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10f      	bne.n	8000e8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d809      	bhi.n	8000e88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f000 f913 	bl	80010a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_InitTick+0x74>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	e007      	b.n	8000e98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	e004      	b.n	8000e98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	73fb      	strb	r3, [r7, #15]
 8000e92:	e001      	b.n	8000e98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000004 	.word	0x20000004

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	200001e0 	.word	0x200001e0

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	200001e0 	.word	0x200001e0

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	db0b      	blt.n	8000f7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 021f 	and.w	r2, r3, #31
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <__NVIC_EnableIRQ+0x38>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	2001      	movs	r0, #1
 8000f76:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f7ff ff8e 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff29 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff3e 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff8e 	bl	8000fe4 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5d 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff31 	bl	8000f54 <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa2 	bl	800104c <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d008      	beq.n	800113c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2204      	movs	r2, #4
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e022      	b.n	8001182 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 020e 	bic.w	r2, r2, #14
 800114a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0201 	bic.w	r2, r2, #1
 800115a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001160:	f003 021c 	and.w	r2, r3, #28
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	2101      	movs	r1, #1
 800116a:	fa01 f202 	lsl.w	r2, r1, r2
 800116e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d005      	beq.n	80011b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2204      	movs	r2, #4
 80011aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	e029      	b.n	8001206 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 020e 	bic.w	r2, r2, #14
 80011c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0201 	bic.w	r2, r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f003 021c 	and.w	r2, r3, #28
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	2101      	movs	r1, #1
 80011e0:	fa01 f202 	lsl.w	r2, r1, r2
 80011e4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	4798      	blx	r3
    }
  }
  return status;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b480      	push	{r7}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121e:	e17f      	b.n	8001520 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	2101      	movs	r1, #1
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 8171 	beq.w	800151a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d00b      	beq.n	8001258 <HAL_GPIO_Init+0x48>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d007      	beq.n	8001258 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800124c:	2b11      	cmp	r3, #17
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b12      	cmp	r3, #18
 8001256:	d130      	bne.n	80012ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800128e:	2201      	movs	r2, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	f003 0201 	and.w	r2, r3, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d118      	bne.n	80012f8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012cc:	2201      	movs	r2, #1
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	08db      	lsrs	r3, r3, #3
 80012e2:	f003 0201 	and.w	r2, r3, #1
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x128>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b12      	cmp	r3, #18
 8001336:	d123      	bne.n	8001380 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	08da      	lsrs	r2, r3, #3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3208      	adds	r2, #8
 8001340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	220f      	movs	r2, #15
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	08da      	lsrs	r2, r3, #3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3208      	adds	r2, #8
 800137a:	6939      	ldr	r1, [r7, #16]
 800137c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0203 	and.w	r2, r3, #3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80ac 	beq.w	800151a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	4b5f      	ldr	r3, [pc, #380]	; (8001540 <HAL_GPIO_Init+0x330>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	4a5e      	ldr	r2, [pc, #376]	; (8001540 <HAL_GPIO_Init+0x330>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6613      	str	r3, [r2, #96]	; 0x60
 80013ce:	4b5c      	ldr	r3, [pc, #368]	; (8001540 <HAL_GPIO_Init+0x330>)
 80013d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013da:	4a5a      	ldr	r2, [pc, #360]	; (8001544 <HAL_GPIO_Init+0x334>)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	3302      	adds	r3, #2
 80013e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001404:	d025      	beq.n	8001452 <HAL_GPIO_Init+0x242>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4f      	ldr	r2, [pc, #316]	; (8001548 <HAL_GPIO_Init+0x338>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d01f      	beq.n	800144e <HAL_GPIO_Init+0x23e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4e      	ldr	r2, [pc, #312]	; (800154c <HAL_GPIO_Init+0x33c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d019      	beq.n	800144a <HAL_GPIO_Init+0x23a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4d      	ldr	r2, [pc, #308]	; (8001550 <HAL_GPIO_Init+0x340>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0x236>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4c      	ldr	r2, [pc, #304]	; (8001554 <HAL_GPIO_Init+0x344>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00d      	beq.n	8001442 <HAL_GPIO_Init+0x232>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4b      	ldr	r2, [pc, #300]	; (8001558 <HAL_GPIO_Init+0x348>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x22e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4a      	ldr	r2, [pc, #296]	; (800155c <HAL_GPIO_Init+0x34c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_GPIO_Init+0x22a>
 8001436:	2306      	movs	r3, #6
 8001438:	e00c      	b.n	8001454 <HAL_GPIO_Init+0x244>
 800143a:	2307      	movs	r3, #7
 800143c:	e00a      	b.n	8001454 <HAL_GPIO_Init+0x244>
 800143e:	2305      	movs	r3, #5
 8001440:	e008      	b.n	8001454 <HAL_GPIO_Init+0x244>
 8001442:	2304      	movs	r3, #4
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x244>
 8001446:	2303      	movs	r3, #3
 8001448:	e004      	b.n	8001454 <HAL_GPIO_Init+0x244>
 800144a:	2302      	movs	r3, #2
 800144c:	e002      	b.n	8001454 <HAL_GPIO_Init+0x244>
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <HAL_GPIO_Init+0x244>
 8001452:	2300      	movs	r3, #0
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	f002 0203 	and.w	r2, r2, #3
 800145a:	0092      	lsls	r2, r2, #2
 800145c:	4093      	lsls	r3, r2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001464:	4937      	ldr	r1, [pc, #220]	; (8001544 <HAL_GPIO_Init+0x334>)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	089b      	lsrs	r3, r3, #2
 800146a:	3302      	adds	r3, #2
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001472:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <HAL_GPIO_Init+0x350>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001496:	4a32      	ldr	r2, [pc, #200]	; (8001560 <HAL_GPIO_Init+0x350>)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800149c:	4b30      	ldr	r3, [pc, #192]	; (8001560 <HAL_GPIO_Init+0x350>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014c0:	4a27      	ldr	r2, [pc, #156]	; (8001560 <HAL_GPIO_Init+0x350>)
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014c6:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_GPIO_Init+0x350>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014ea:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <HAL_GPIO_Init+0x350>)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <HAL_GPIO_Init+0x350>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001514:	4a12      	ldr	r2, [pc, #72]	; (8001560 <HAL_GPIO_Init+0x350>)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa22 f303 	lsr.w	r3, r2, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	f47f ae78 	bne.w	8001220 <HAL_GPIO_Init+0x10>
  }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	371c      	adds	r7, #28
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	40010000 	.word	0x40010000
 8001548:	48000400 	.word	0x48000400
 800154c:	48000800 	.word	0x48000800
 8001550:	48000c00 	.word	0x48000c00
 8001554:	48001000 	.word	0x48001000
 8001558:	48001400 	.word	0x48001400
 800155c:	48001800 	.word	0x48001800
 8001560:	40010400 	.word	0x40010400

08001564 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <HAL_PWREx_GetVoltageRange+0x18>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40007000 	.word	0x40007000

08001580 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800158e:	d130      	bne.n	80015f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001590:	4b23      	ldr	r3, [pc, #140]	; (8001620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800159c:	d038      	beq.n	8001610 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800159e:	4b20      	ldr	r3, [pc, #128]	; (8001620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015a6:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2232      	movs	r2, #50	; 0x32
 80015b4:	fb02 f303 	mul.w	r3, r2, r3
 80015b8:	4a1b      	ldr	r2, [pc, #108]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	0c9b      	lsrs	r3, r3, #18
 80015c0:	3301      	adds	r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015c4:	e002      	b.n	80015cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d8:	d102      	bne.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f2      	bne.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ec:	d110      	bne.n	8001610 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e00f      	b.n	8001612 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015fe:	d007      	beq.n	8001610 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001608:	4a05      	ldr	r2, [pc, #20]	; (8001620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800160e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40007000 	.word	0x40007000
 8001624:	20000000 	.word	0x20000000
 8001628:	431bde83 	.word	0x431bde83

0800162c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e3d4      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800163e:	4ba1      	ldr	r3, [pc, #644]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001648:	4b9e      	ldr	r3, [pc, #632]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 80e4 	beq.w	8001828 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <HAL_RCC_OscConfig+0x4a>
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b0c      	cmp	r3, #12
 800166a:	f040 808b 	bne.w	8001784 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2b01      	cmp	r3, #1
 8001672:	f040 8087 	bne.w	8001784 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001676:	4b93      	ldr	r3, [pc, #588]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <HAL_RCC_OscConfig+0x62>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e3ac      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1a      	ldr	r2, [r3, #32]
 8001692:	4b8c      	ldr	r3, [pc, #560]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d004      	beq.n	80016a8 <HAL_RCC_OscConfig+0x7c>
 800169e:	4b89      	ldr	r3, [pc, #548]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016a6:	e005      	b.n	80016b4 <HAL_RCC_OscConfig+0x88>
 80016a8:	4b86      	ldr	r3, [pc, #536]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80016aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d223      	bcs.n	8001700 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 fd41 	bl	8002144 <RCC_SetFlashLatencyFromMSIRange>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e38d      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016cc:	4b7d      	ldr	r3, [pc, #500]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a7c      	ldr	r2, [pc, #496]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80016d2:	f043 0308 	orr.w	r3, r3, #8
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b7a      	ldr	r3, [pc, #488]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4977      	ldr	r1, [pc, #476]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ea:	4b76      	ldr	r3, [pc, #472]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	4972      	ldr	r1, [pc, #456]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	604b      	str	r3, [r1, #4]
 80016fe:	e025      	b.n	800174c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001700:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a6f      	ldr	r2, [pc, #444]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 8001706:	f043 0308 	orr.w	r3, r3, #8
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b6d      	ldr	r3, [pc, #436]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	496a      	ldr	r1, [pc, #424]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171e:	4b69      	ldr	r3, [pc, #420]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	4965      	ldr	r1, [pc, #404]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 800172e:	4313      	orrs	r3, r2
 8001730:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d109      	bne.n	800174c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4618      	mov	r0, r3
 800173e:	f000 fd01 	bl	8002144 <RCC_SetFlashLatencyFromMSIRange>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e34d      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800174c:	f000 fc36 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 8001750:	4602      	mov	r2, r0
 8001752:	4b5c      	ldr	r3, [pc, #368]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	091b      	lsrs	r3, r3, #4
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	495a      	ldr	r1, [pc, #360]	; (80018c8 <HAL_RCC_OscConfig+0x29c>)
 800175e:	5ccb      	ldrb	r3, [r1, r3]
 8001760:	f003 031f 	and.w	r3, r3, #31
 8001764:	fa22 f303 	lsr.w	r3, r2, r3
 8001768:	4a58      	ldr	r2, [pc, #352]	; (80018cc <HAL_RCC_OscConfig+0x2a0>)
 800176a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800176c:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <HAL_RCC_OscConfig+0x2a4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fb61 	bl	8000e38 <HAL_InitTick>
 8001776:	4603      	mov	r3, r0
 8001778:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d052      	beq.n	8001826 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	e331      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d032      	beq.n	80017f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800178c:	4b4d      	ldr	r3, [pc, #308]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a4c      	ldr	r2, [pc, #304]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001798:	f7ff fb9e 	bl	8000ed8 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017a0:	f7ff fb9a 	bl	8000ed8 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e31a      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017b2:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017be:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a40      	ldr	r2, [pc, #256]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80017c4:	f043 0308 	orr.w	r3, r3, #8
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	4b3e      	ldr	r3, [pc, #248]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	493b      	ldr	r1, [pc, #236]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017dc:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	4936      	ldr	r1, [pc, #216]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
 80017f0:	e01a      	b.n	8001828 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017f2:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a33      	ldr	r2, [pc, #204]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017fe:	f7ff fb6b 	bl	8000ed8 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001806:	f7ff fb67 	bl	8000ed8 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e2e7      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001818:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x1da>
 8001824:	e000      	b.n	8001828 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001826:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d074      	beq.n	800191e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b08      	cmp	r3, #8
 8001838:	d005      	beq.n	8001846 <HAL_RCC_OscConfig+0x21a>
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	2b0c      	cmp	r3, #12
 800183e:	d10e      	bne.n	800185e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2b03      	cmp	r3, #3
 8001844:	d10b      	bne.n	800185e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d064      	beq.n	800191c <HAL_RCC_OscConfig+0x2f0>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d160      	bne.n	800191c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e2c4      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001866:	d106      	bne.n	8001876 <HAL_RCC_OscConfig+0x24a>
 8001868:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a15      	ldr	r2, [pc, #84]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 800186e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	e01d      	b.n	80018b2 <HAL_RCC_OscConfig+0x286>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800187e:	d10c      	bne.n	800189a <HAL_RCC_OscConfig+0x26e>
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 8001886:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0c      	ldr	r2, [pc, #48]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 8001892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	e00b      	b.n	80018b2 <HAL_RCC_OscConfig+0x286>
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80018a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_RCC_OscConfig+0x298>)
 80018ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01c      	beq.n	80018f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff fb0d 	bl	8000ed8 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018c0:	e011      	b.n	80018e6 <HAL_RCC_OscConfig+0x2ba>
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	08005eb0 	.word	0x08005eb0
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d4:	f7ff fb00 	bl	8000ed8 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e280      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018e6:	4baf      	ldr	r3, [pc, #700]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x2a8>
 80018f2:	e014      	b.n	800191e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff faf0 	bl	8000ed8 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff faec 	bl	8000ed8 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e26c      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800190e:	4ba5      	ldr	r3, [pc, #660]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x2d0>
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d060      	beq.n	80019ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	2b04      	cmp	r3, #4
 800192e:	d005      	beq.n	800193c <HAL_RCC_OscConfig+0x310>
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2b0c      	cmp	r3, #12
 8001934:	d119      	bne.n	800196a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d116      	bne.n	800196a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800193c:	4b99      	ldr	r3, [pc, #612]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_OscConfig+0x328>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e249      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001954:	4b93      	ldr	r3, [pc, #588]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	061b      	lsls	r3, r3, #24
 8001962:	4990      	ldr	r1, [pc, #576]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001968:	e040      	b.n	80019ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d023      	beq.n	80019ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001972:	4b8c      	ldr	r3, [pc, #560]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a8b      	ldr	r2, [pc, #556]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197e:	f7ff faab 	bl	8000ed8 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001986:	f7ff faa7 	bl	8000ed8 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e227      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001998:	4b82      	ldr	r3, [pc, #520]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a4:	4b7f      	ldr	r3, [pc, #508]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	061b      	lsls	r3, r3, #24
 80019b2:	497c      	ldr	r1, [pc, #496]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
 80019b8:	e018      	b.n	80019ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ba:	4b7a      	ldr	r3, [pc, #488]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a79      	ldr	r2, [pc, #484]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 80019c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7ff fa87 	bl	8000ed8 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ce:	f7ff fa83 	bl	8000ed8 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e203      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019e0:	4b70      	ldr	r3, [pc, #448]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f0      	bne.n	80019ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d03c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d01c      	beq.n	8001a3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a00:	4b68      	ldr	r3, [pc, #416]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a06:	4a67      	ldr	r2, [pc, #412]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a10:	f7ff fa62 	bl	8000ed8 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff fa5e 	bl	8000ed8 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e1de      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a2a:	4b5e      	ldr	r3, [pc, #376]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0ef      	beq.n	8001a18 <HAL_RCC_OscConfig+0x3ec>
 8001a38:	e01b      	b.n	8001a72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3a:	4b5a      	ldr	r3, [pc, #360]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a40:	4a58      	ldr	r2, [pc, #352]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fa45 	bl	8000ed8 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a52:	f7ff fa41 	bl	8000ed8 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e1c1      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a64:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1ef      	bne.n	8001a52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 80a6 	beq.w	8001bcc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a84:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10d      	bne.n	8001aac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a90:	4b44      	ldr	r3, [pc, #272]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	4a43      	ldr	r2, [pc, #268]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a9c:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aac:	4b3e      	ldr	r3, [pc, #248]	; (8001ba8 <HAL_RCC_OscConfig+0x57c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d118      	bne.n	8001aea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ab8:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_RCC_OscConfig+0x57c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a3a      	ldr	r2, [pc, #232]	; (8001ba8 <HAL_RCC_OscConfig+0x57c>)
 8001abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fa08 	bl	8000ed8 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001acc:	f7ff fa04 	bl	8000ed8 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e184      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ade:	4b32      	ldr	r3, [pc, #200]	; (8001ba8 <HAL_RCC_OscConfig+0x57c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d108      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4d8>
 8001af2:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af8:	4a2a      	ldr	r2, [pc, #168]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b02:	e024      	b.n	8001b4e <HAL_RCC_OscConfig+0x522>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b05      	cmp	r3, #5
 8001b0a:	d110      	bne.n	8001b2e <HAL_RCC_OscConfig+0x502>
 8001b0c:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b12:	4a24      	ldr	r2, [pc, #144]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b1c:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b22:	4a20      	ldr	r2, [pc, #128]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b2c:	e00f      	b.n	8001b4e <HAL_RCC_OscConfig+0x522>
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b34:	4a1b      	ldr	r2, [pc, #108]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b44:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b46:	f023 0304 	bic.w	r3, r3, #4
 8001b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d016      	beq.n	8001b84 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b56:	f7ff f9bf 	bl	8000ed8 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b5c:	e00a      	b.n	8001b74 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5e:	f7ff f9bb 	bl	8000ed8 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e139      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0ed      	beq.n	8001b5e <HAL_RCC_OscConfig+0x532>
 8001b82:	e01a      	b.n	8001bba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff f9a8 	bl	8000ed8 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b8a:	e00f      	b.n	8001bac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8c:	f7ff f9a4 	bl	8000ed8 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d906      	bls.n	8001bac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e122      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bac:	4b90      	ldr	r3, [pc, #576]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1e8      	bne.n	8001b8c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bba:	7ffb      	ldrb	r3, [r7, #31]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d105      	bne.n	8001bcc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc0:	4b8b      	ldr	r3, [pc, #556]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc4:	4a8a      	ldr	r2, [pc, #552]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 8108 	beq.w	8001de6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	f040 80d0 	bne.w	8001d80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001be0:	4b83      	ldr	r3, [pc, #524]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f003 0203 	and.w	r2, r3, #3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d130      	bne.n	8001c56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d127      	bne.n	8001c56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d11f      	bne.n	8001c56 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c20:	2a07      	cmp	r2, #7
 8001c22:	bf14      	ite	ne
 8001c24:	2201      	movne	r2, #1
 8001c26:	2200      	moveq	r2, #0
 8001c28:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d113      	bne.n	8001c56 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c38:	085b      	lsrs	r3, r3, #1
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d109      	bne.n	8001c56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	085b      	lsrs	r3, r3, #1
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d06e      	beq.n	8001d34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	2b0c      	cmp	r3, #12
 8001c5a:	d069      	beq.n	8001d30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c5c:	4b64      	ldr	r3, [pc, #400]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d105      	bne.n	8001c74 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c68:	4b61      	ldr	r3, [pc, #388]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0b7      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c78:	4b5d      	ldr	r3, [pc, #372]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a5c      	ldr	r2, [pc, #368]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c82:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c84:	f7ff f928 	bl	8000ed8 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff f924 	bl	8000ed8 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e0a4      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c9e:	4b54      	ldr	r3, [pc, #336]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001caa:	4b51      	ldr	r3, [pc, #324]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	4b51      	ldr	r3, [pc, #324]	; (8001df4 <HAL_RCC_OscConfig+0x7c8>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cba:	3a01      	subs	r2, #1
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	4311      	orrs	r1, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cc4:	0212      	lsls	r2, r2, #8
 8001cc6:	4311      	orrs	r1, r2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ccc:	0852      	lsrs	r2, r2, #1
 8001cce:	3a01      	subs	r2, #1
 8001cd0:	0552      	lsls	r2, r2, #21
 8001cd2:	4311      	orrs	r1, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cd8:	0852      	lsrs	r2, r2, #1
 8001cda:	3a01      	subs	r2, #1
 8001cdc:	0652      	lsls	r2, r2, #25
 8001cde:	4311      	orrs	r1, r2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ce4:	0912      	lsrs	r2, r2, #4
 8001ce6:	0452      	lsls	r2, r2, #17
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	4941      	ldr	r1, [pc, #260]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cf0:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a3e      	ldr	r2, [pc, #248]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cfc:	4b3c      	ldr	r3, [pc, #240]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4a3b      	ldr	r2, [pc, #236]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d08:	f7ff f8e6 	bl	8000ed8 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d10:	f7ff f8e2 	bl	8000ed8 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e062      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d22:	4b33      	ldr	r3, [pc, #204]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d2e:	e05a      	b.n	8001de6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e059      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d34:	4b2e      	ldr	r3, [pc, #184]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d152      	bne.n	8001de6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d40:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a2a      	ldr	r2, [pc, #168]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d4c:	4b28      	ldr	r3, [pc, #160]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4a27      	ldr	r2, [pc, #156]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d58:	f7ff f8be 	bl	8000ed8 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d60:	f7ff f8ba 	bl	8000ed8 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e03a      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d72:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x734>
 8001d7e:	e032      	b.n	8001de6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d02d      	beq.n	8001de2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001d8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d90:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d105      	bne.n	8001daa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d9e:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	4a13      	ldr	r2, [pc, #76]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001da4:	f023 0303 	bic.w	r3, r3, #3
 8001da8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001db0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7ff f88d 	bl	8000ed8 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc2:	f7ff f889 	bl	8000ed8 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e009      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_RCC_OscConfig+0x7c4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f0      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x796>
 8001de0:	e001      	b.n	8001de6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3720      	adds	r7, #32
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	f99d808c 	.word	0xf99d808c

08001df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0c8      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b66      	ldr	r3, [pc, #408]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d910      	bls.n	8001e3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b63      	ldr	r3, [pc, #396]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 0207 	bic.w	r2, r3, #7
 8001e22:	4961      	ldr	r1, [pc, #388]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	4b5f      	ldr	r3, [pc, #380]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0b0      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d04c      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d107      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e50:	4b56      	ldr	r3, [pc, #344]	; (8001fac <HAL_RCC_ClockConfig+0x1b4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d121      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e09e      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d107      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e68:	4b50      	ldr	r3, [pc, #320]	; (8001fac <HAL_RCC_ClockConfig+0x1b4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d115      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e092      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e80:	4b4a      	ldr	r3, [pc, #296]	; (8001fac <HAL_RCC_ClockConfig+0x1b4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d109      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e086      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e90:	4b46      	ldr	r3, [pc, #280]	; (8001fac <HAL_RCC_ClockConfig+0x1b4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e07e      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ea0:	4b42      	ldr	r3, [pc, #264]	; (8001fac <HAL_RCC_ClockConfig+0x1b4>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f023 0203 	bic.w	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	493f      	ldr	r1, [pc, #252]	; (8001fac <HAL_RCC_ClockConfig+0x1b4>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb2:	f7ff f811 	bl	8000ed8 <HAL_GetTick>
 8001eb6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eba:	f7ff f80d 	bl	8000ed8 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e066      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed0:	4b36      	ldr	r3, [pc, #216]	; (8001fac <HAL_RCC_ClockConfig+0x1b4>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 020c 	and.w	r2, r3, #12
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d1eb      	bne.n	8001eba <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d008      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eee:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <HAL_RCC_ClockConfig+0x1b4>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	492c      	ldr	r1, [pc, #176]	; (8001fac <HAL_RCC_ClockConfig+0x1b4>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f00:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d210      	bcs.n	8001f30 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 0207 	bic.w	r2, r3, #7
 8001f16:	4924      	ldr	r1, [pc, #144]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e036      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_RCC_ClockConfig+0x1b4>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4918      	ldr	r1, [pc, #96]	; (8001fac <HAL_RCC_ClockConfig+0x1b4>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f5a:	4b14      	ldr	r3, [pc, #80]	; (8001fac <HAL_RCC_ClockConfig+0x1b4>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4910      	ldr	r1, [pc, #64]	; (8001fac <HAL_RCC_ClockConfig+0x1b4>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f6e:	f000 f825 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 8001f72:	4602      	mov	r2, r0
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <HAL_RCC_ClockConfig+0x1b4>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	490c      	ldr	r1, [pc, #48]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f80:	5ccb      	ldrb	r3, [r1, r3]
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe ff50 	bl	8000e38 <HAL_InitTick>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f9c:	7afb      	ldrb	r3, [r7, #11]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40022000 	.word	0x40022000
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	08005eb0 	.word	0x08005eb0
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	20000004 	.word	0x20000004

08001fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fca:	4b3e      	ldr	r3, [pc, #248]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd4:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2b0c      	cmp	r3, #12
 8001fe8:	d121      	bne.n	800202e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d11e      	bne.n	800202e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ff0:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d107      	bne.n	800200c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ffc:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	e005      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002018:	4a2b      	ldr	r2, [pc, #172]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10d      	bne.n	8002044 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2b04      	cmp	r3, #4
 8002032:	d102      	bne.n	800203a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002034:	4b25      	ldr	r3, [pc, #148]	; (80020cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002036:	61bb      	str	r3, [r7, #24]
 8002038:	e004      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b08      	cmp	r3, #8
 800203e:	d101      	bne.n	8002044 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002042:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2b0c      	cmp	r3, #12
 8002048:	d134      	bne.n	80020b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800204a:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d003      	beq.n	8002062 <HAL_RCC_GetSysClockFreq+0xa6>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b03      	cmp	r3, #3
 800205e:	d003      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0xac>
 8002060:	e005      	b.n	800206e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002062:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002064:	617b      	str	r3, [r7, #20]
      break;
 8002066:	e005      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800206a:	617b      	str	r3, [r7, #20]
      break;
 800206c:	e002      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	617b      	str	r3, [r7, #20]
      break;
 8002072:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	3301      	adds	r3, #1
 8002080:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	fb02 f203 	mul.w	r2, r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	fbb2 f3f3 	udiv	r3, r2, r3
 8002098:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	0e5b      	lsrs	r3, r3, #25
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	3301      	adds	r3, #1
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020b4:	69bb      	ldr	r3, [r7, #24]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3724      	adds	r7, #36	; 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	08005ec8 	.word	0x08005ec8
 80020cc:	00f42400 	.word	0x00f42400
 80020d0:	007a1200 	.word	0x007a1200

080020d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000000 	.word	0x20000000

080020ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020f0:	f7ff fff0 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	4904      	ldr	r1, [pc, #16]	; (8002114 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002102:	5ccb      	ldrb	r3, [r1, r3]
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000
 8002114:	08005ec0 	.word	0x08005ec0

08002118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800211c:	f7ff ffda 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	0adb      	lsrs	r3, r3, #11
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4904      	ldr	r1, [pc, #16]	; (8002140 <HAL_RCC_GetPCLK2Freq+0x28>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002138:	4618      	mov	r0, r3
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000
 8002140:	08005ec0 	.word	0x08005ec0

08002144 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002150:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800215c:	f7ff fa02 	bl	8001564 <HAL_PWREx_GetVoltageRange>
 8002160:	6178      	str	r0, [r7, #20]
 8002162:	e014      	b.n	800218e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002164:	4b25      	ldr	r3, [pc, #148]	; (80021fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002168:	4a24      	ldr	r2, [pc, #144]	; (80021fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216e:	6593      	str	r3, [r2, #88]	; 0x58
 8002170:	4b22      	ldr	r3, [pc, #136]	; (80021fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800217c:	f7ff f9f2 	bl	8001564 <HAL_PWREx_GetVoltageRange>
 8002180:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002182:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002186:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002194:	d10b      	bne.n	80021ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b80      	cmp	r3, #128	; 0x80
 800219a:	d919      	bls.n	80021d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2ba0      	cmp	r3, #160	; 0xa0
 80021a0:	d902      	bls.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021a2:	2302      	movs	r3, #2
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	e013      	b.n	80021d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021a8:	2301      	movs	r3, #1
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	e010      	b.n	80021d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b80      	cmp	r3, #128	; 0x80
 80021b2:	d902      	bls.n	80021ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021b4:	2303      	movs	r3, #3
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	e00a      	b.n	80021d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b80      	cmp	r3, #128	; 0x80
 80021be:	d102      	bne.n	80021c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021c0:	2302      	movs	r3, #2
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	e004      	b.n	80021d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b70      	cmp	r3, #112	; 0x70
 80021ca:	d101      	bne.n	80021d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021cc:	2301      	movs	r3, #1
 80021ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 0207 	bic.w	r2, r3, #7
 80021d8:	4909      	ldr	r1, [pc, #36]	; (8002200 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d001      	beq.n	80021f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	40022000 	.word	0x40022000

08002204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800220c:	2300      	movs	r3, #0
 800220e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002210:	2300      	movs	r3, #0
 8002212:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800221c:	2b00      	cmp	r3, #0
 800221e:	d041      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002224:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002228:	d02a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800222a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800222e:	d824      	bhi.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002230:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002234:	d008      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002236:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800223a:	d81e      	bhi.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002244:	d010      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002246:	e018      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002248:	4b86      	ldr	r3, [pc, #536]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a85      	ldr	r2, [pc, #532]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002252:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002254:	e015      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3304      	adds	r3, #4
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f000 fabb 	bl	80027d8 <RCCEx_PLLSAI1_Config>
 8002262:	4603      	mov	r3, r0
 8002264:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002266:	e00c      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3320      	adds	r3, #32
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f000 fba6 	bl	80029c0 <RCCEx_PLLSAI2_Config>
 8002274:	4603      	mov	r3, r0
 8002276:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002278:	e003      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	74fb      	strb	r3, [r7, #19]
      break;
 800227e:	e000      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002282:	7cfb      	ldrb	r3, [r7, #19]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10b      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002288:	4b76      	ldr	r3, [pc, #472]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002296:	4973      	ldr	r1, [pc, #460]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800229e:	e001      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a0:	7cfb      	ldrb	r3, [r7, #19]
 80022a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d041      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022b8:	d02a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80022ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022be:	d824      	bhi.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022c4:	d008      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022ca:	d81e      	bhi.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80022d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d4:	d010      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022d6:	e018      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022d8:	4b62      	ldr	r3, [pc, #392]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a61      	ldr	r2, [pc, #388]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022e4:	e015      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fa73 	bl	80027d8 <RCCEx_PLLSAI1_Config>
 80022f2:	4603      	mov	r3, r0
 80022f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022f6:	e00c      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3320      	adds	r3, #32
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fb5e 	bl	80029c0 <RCCEx_PLLSAI2_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002308:	e003      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	74fb      	strb	r3, [r7, #19]
      break;
 800230e:	e000      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10b      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002318:	4b52      	ldr	r3, [pc, #328]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002326:	494f      	ldr	r1, [pc, #316]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800232e:	e001      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a0 	beq.w	8002482 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002346:	4b47      	ldr	r3, [pc, #284]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002356:	2300      	movs	r3, #0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00d      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235c:	4b41      	ldr	r3, [pc, #260]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	4a40      	ldr	r2, [pc, #256]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002366:	6593      	str	r3, [r2, #88]	; 0x58
 8002368:	4b3e      	ldr	r3, [pc, #248]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002374:	2301      	movs	r3, #1
 8002376:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002378:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a3a      	ldr	r2, [pc, #232]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002382:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002384:	f7fe fda8 	bl	8000ed8 <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800238a:	e009      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238c:	f7fe fda4 	bl	8000ed8 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d902      	bls.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	74fb      	strb	r3, [r7, #19]
        break;
 800239e:	e005      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023a0:	4b31      	ldr	r3, [pc, #196]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0ef      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d15c      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023b2:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d01f      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d019      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023d0:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023dc:	4b21      	ldr	r3, [pc, #132]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	4a20      	ldr	r2, [pc, #128]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023ec:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	4a1c      	ldr	r2, [pc, #112]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023fc:	4a19      	ldr	r2, [pc, #100]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d016      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240e:	f7fe fd63 	bl	8000ed8 <HAL_GetTick>
 8002412:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002414:	e00b      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002416:	f7fe fd5f 	bl	8000ed8 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f241 3288 	movw	r2, #5000	; 0x1388
 8002424:	4293      	cmp	r3, r2
 8002426:	d902      	bls.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	74fb      	strb	r3, [r7, #19]
            break;
 800242c:	e006      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0ec      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10c      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002452:	4904      	ldr	r1, [pc, #16]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800245a:	e009      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800245c:	7cfb      	ldrb	r3, [r7, #19]
 800245e:	74bb      	strb	r3, [r7, #18]
 8002460:	e006      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800246c:	7cfb      	ldrb	r3, [r7, #19]
 800246e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002470:	7c7b      	ldrb	r3, [r7, #17]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d105      	bne.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002476:	4b9e      	ldr	r3, [pc, #632]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247a:	4a9d      	ldr	r2, [pc, #628]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002480:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800248e:	4b98      	ldr	r3, [pc, #608]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002494:	f023 0203 	bic.w	r2, r3, #3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	4994      	ldr	r1, [pc, #592]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024b0:	4b8f      	ldr	r3, [pc, #572]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	f023 020c 	bic.w	r2, r3, #12
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024be:	498c      	ldr	r1, [pc, #560]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024d2:	4b87      	ldr	r3, [pc, #540]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	4983      	ldr	r1, [pc, #524]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024f4:	4b7e      	ldr	r3, [pc, #504]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	497b      	ldr	r1, [pc, #492]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002516:	4b76      	ldr	r3, [pc, #472]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002524:	4972      	ldr	r1, [pc, #456]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002538:	4b6d      	ldr	r3, [pc, #436]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002546:	496a      	ldr	r1, [pc, #424]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800255a:	4b65      	ldr	r3, [pc, #404]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002560:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	4961      	ldr	r1, [pc, #388]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800257c:	4b5c      	ldr	r3, [pc, #368]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258a:	4959      	ldr	r1, [pc, #356]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800259e:	4b54      	ldr	r3, [pc, #336]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ac:	4950      	ldr	r1, [pc, #320]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025c0:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	4948      	ldr	r1, [pc, #288]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025e2:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	493f      	ldr	r1, [pc, #252]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d028      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002604:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002612:	4937      	ldr	r1, [pc, #220]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800261e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002622:	d106      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002624:	4b32      	ldr	r3, [pc, #200]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a31      	ldr	r2, [pc, #196]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800262e:	60d3      	str	r3, [r2, #12]
 8002630:	e011      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002636:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800263a:	d10c      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3304      	adds	r3, #4
 8002640:	2101      	movs	r1, #1
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f8c8 	bl	80027d8 <RCCEx_PLLSAI1_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d028      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002662:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	491f      	ldr	r1, [pc, #124]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002680:	d106      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002682:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	4a1a      	ldr	r2, [pc, #104]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800268c:	60d3      	str	r3, [r2, #12]
 800268e:	e011      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002698:	d10c      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3304      	adds	r3, #4
 800269e:	2101      	movs	r1, #1
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 f899 	bl	80027d8 <RCCEx_PLLSAI1_Config>
 80026a6:	4603      	mov	r3, r0
 80026a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026aa:	7cfb      	ldrb	r3, [r7, #19]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d02b      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ce:	4908      	ldr	r1, [pc, #32]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026de:	d109      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4a02      	ldr	r2, [pc, #8]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ea:	60d3      	str	r3, [r2, #12]
 80026ec:	e014      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026fc:	d10c      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3304      	adds	r3, #4
 8002702:	2101      	movs	r1, #1
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f867 	bl	80027d8 <RCCEx_PLLSAI1_Config>
 800270a:	4603      	mov	r3, r0
 800270c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d02f      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002724:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002732:	4928      	ldr	r1, [pc, #160]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800273e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002742:	d10d      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3304      	adds	r3, #4
 8002748:	2102      	movs	r1, #2
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f844 	bl	80027d8 <RCCEx_PLLSAI1_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d014      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800275a:	7cfb      	ldrb	r3, [r7, #19]
 800275c:	74bb      	strb	r3, [r7, #18]
 800275e:	e011      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002768:	d10c      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3320      	adds	r3, #32
 800276e:	2102      	movs	r1, #2
 8002770:	4618      	mov	r0, r3
 8002772:	f000 f925 	bl	80029c0 <RCCEx_PLLSAI2_Config>
 8002776:	4603      	mov	r3, r0
 8002778:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800277a:	7cfb      	ldrb	r3, [r7, #19]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002790:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800279e:	490d      	ldr	r1, [pc, #52]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00b      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027c2:	4904      	ldr	r1, [pc, #16]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40021000 	.word	0x40021000

080027d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027e6:	4b75      	ldr	r3, [pc, #468]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d018      	beq.n	8002824 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027f2:	4b72      	ldr	r3, [pc, #456]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0203 	and.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d10d      	bne.n	800281e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
       ||
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800280a:	4b6c      	ldr	r3, [pc, #432]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
       ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d047      	beq.n	80028ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
 8002822:	e044      	b.n	80028ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d018      	beq.n	800285e <RCCEx_PLLSAI1_Config+0x86>
 800282c:	2b03      	cmp	r3, #3
 800282e:	d825      	bhi.n	800287c <RCCEx_PLLSAI1_Config+0xa4>
 8002830:	2b01      	cmp	r3, #1
 8002832:	d002      	beq.n	800283a <RCCEx_PLLSAI1_Config+0x62>
 8002834:	2b02      	cmp	r3, #2
 8002836:	d009      	beq.n	800284c <RCCEx_PLLSAI1_Config+0x74>
 8002838:	e020      	b.n	800287c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800283a:	4b60      	ldr	r3, [pc, #384]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d11d      	bne.n	8002882 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800284a:	e01a      	b.n	8002882 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800284c:	4b5b      	ldr	r3, [pc, #364]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002854:	2b00      	cmp	r3, #0
 8002856:	d116      	bne.n	8002886 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800285c:	e013      	b.n	8002886 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800285e:	4b57      	ldr	r3, [pc, #348]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10f      	bne.n	800288a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800286a:	4b54      	ldr	r3, [pc, #336]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800287a:	e006      	b.n	800288a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
      break;
 8002880:	e004      	b.n	800288c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002882:	bf00      	nop
 8002884:	e002      	b.n	800288c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002886:	bf00      	nop
 8002888:	e000      	b.n	800288c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800288a:	bf00      	nop
    }

    if(status == HAL_OK)
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10d      	bne.n	80028ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002892:	4b4a      	ldr	r3, [pc, #296]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	430b      	orrs	r3, r1
 80028a8:	4944      	ldr	r1, [pc, #272]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d17d      	bne.n	80029b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028b4:	4b41      	ldr	r3, [pc, #260]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a40      	ldr	r2, [pc, #256]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c0:	f7fe fb0a 	bl	8000ed8 <HAL_GetTick>
 80028c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028c6:	e009      	b.n	80028dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028c8:	f7fe fb06 	bl	8000ed8 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d902      	bls.n	80028dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	73fb      	strb	r3, [r7, #15]
        break;
 80028da:	e005      	b.n	80028e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028dc:	4b37      	ldr	r3, [pc, #220]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1ef      	bne.n	80028c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d160      	bne.n	80029b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d111      	bne.n	8002918 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028f4:	4b31      	ldr	r3, [pc, #196]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6892      	ldr	r2, [r2, #8]
 8002904:	0211      	lsls	r1, r2, #8
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68d2      	ldr	r2, [r2, #12]
 800290a:	0912      	lsrs	r2, r2, #4
 800290c:	0452      	lsls	r2, r2, #17
 800290e:	430a      	orrs	r2, r1
 8002910:	492a      	ldr	r1, [pc, #168]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	610b      	str	r3, [r1, #16]
 8002916:	e027      	b.n	8002968 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d112      	bne.n	8002944 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800291e:	4b27      	ldr	r3, [pc, #156]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002926:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6892      	ldr	r2, [r2, #8]
 800292e:	0211      	lsls	r1, r2, #8
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6912      	ldr	r2, [r2, #16]
 8002934:	0852      	lsrs	r2, r2, #1
 8002936:	3a01      	subs	r2, #1
 8002938:	0552      	lsls	r2, r2, #21
 800293a:	430a      	orrs	r2, r1
 800293c:	491f      	ldr	r1, [pc, #124]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800293e:	4313      	orrs	r3, r2
 8002940:	610b      	str	r3, [r1, #16]
 8002942:	e011      	b.n	8002968 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002944:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800294c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6892      	ldr	r2, [r2, #8]
 8002954:	0211      	lsls	r1, r2, #8
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6952      	ldr	r2, [r2, #20]
 800295a:	0852      	lsrs	r2, r2, #1
 800295c:	3a01      	subs	r2, #1
 800295e:	0652      	lsls	r2, r2, #25
 8002960:	430a      	orrs	r2, r1
 8002962:	4916      	ldr	r1, [pc, #88]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002964:	4313      	orrs	r3, r2
 8002966:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a13      	ldr	r2, [pc, #76]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800296e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002972:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7fe fab0 	bl	8000ed8 <HAL_GetTick>
 8002978:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800297a:	e009      	b.n	8002990 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800297c:	f7fe faac 	bl	8000ed8 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d902      	bls.n	8002990 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	73fb      	strb	r3, [r7, #15]
          break;
 800298e:	e005      	b.n	800299c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002990:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0ef      	beq.n	800297c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	4904      	ldr	r1, [pc, #16]	; (80029bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000

080029c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029ce:	4b6a      	ldr	r3, [pc, #424]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d018      	beq.n	8002a0c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029da:	4b67      	ldr	r3, [pc, #412]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0203 	and.w	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d10d      	bne.n	8002a06 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
       ||
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029f2:	4b61      	ldr	r3, [pc, #388]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
       ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d047      	beq.n	8002a96 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
 8002a0a:	e044      	b.n	8002a96 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d018      	beq.n	8002a46 <RCCEx_PLLSAI2_Config+0x86>
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d825      	bhi.n	8002a64 <RCCEx_PLLSAI2_Config+0xa4>
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d002      	beq.n	8002a22 <RCCEx_PLLSAI2_Config+0x62>
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d009      	beq.n	8002a34 <RCCEx_PLLSAI2_Config+0x74>
 8002a20:	e020      	b.n	8002a64 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a22:	4b55      	ldr	r3, [pc, #340]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d11d      	bne.n	8002a6a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a32:	e01a      	b.n	8002a6a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a34:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d116      	bne.n	8002a6e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a44:	e013      	b.n	8002a6e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a46:	4b4c      	ldr	r3, [pc, #304]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10f      	bne.n	8002a72 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a52:	4b49      	ldr	r3, [pc, #292]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a62:	e006      	b.n	8002a72 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
      break;
 8002a68:	e004      	b.n	8002a74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e002      	b.n	8002a74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e000      	b.n	8002a74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a72:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10d      	bne.n	8002a96 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a7a:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6819      	ldr	r1, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	4939      	ldr	r1, [pc, #228]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d167      	bne.n	8002b6c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a9c:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a35      	ldr	r2, [pc, #212]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa8:	f7fe fa16 	bl	8000ed8 <HAL_GetTick>
 8002aac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aae:	e009      	b.n	8002ac4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ab0:	f7fe fa12 	bl	8000ed8 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d902      	bls.n	8002ac4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ac2:	e005      	b.n	8002ad0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ac4:	4b2c      	ldr	r3, [pc, #176]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1ef      	bne.n	8002ab0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d14a      	bne.n	8002b6c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d111      	bne.n	8002b00 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002adc:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6892      	ldr	r2, [r2, #8]
 8002aec:	0211      	lsls	r1, r2, #8
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68d2      	ldr	r2, [r2, #12]
 8002af2:	0912      	lsrs	r2, r2, #4
 8002af4:	0452      	lsls	r2, r2, #17
 8002af6:	430a      	orrs	r2, r1
 8002af8:	491f      	ldr	r1, [pc, #124]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	614b      	str	r3, [r1, #20]
 8002afe:	e011      	b.n	8002b24 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b00:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6892      	ldr	r2, [r2, #8]
 8002b10:	0211      	lsls	r1, r2, #8
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6912      	ldr	r2, [r2, #16]
 8002b16:	0852      	lsrs	r2, r2, #1
 8002b18:	3a01      	subs	r2, #1
 8002b1a:	0652      	lsls	r2, r2, #25
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	4916      	ldr	r1, [pc, #88]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b24:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a13      	ldr	r2, [pc, #76]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7fe f9d2 	bl	8000ed8 <HAL_GetTick>
 8002b34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b36:	e009      	b.n	8002b4c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b38:	f7fe f9ce 	bl	8000ed8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d902      	bls.n	8002b4c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	73fb      	strb	r3, [r7, #15]
          break;
 8002b4a:	e005      	b.n	8002b58 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b4c:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0ef      	beq.n	8002b38 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	4904      	ldr	r1, [pc, #16]	; (8002b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000

08002b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e049      	b.n	8002c22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fd ffe2 	bl	8000b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	f000 faac 	bl	8003118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e049      	b.n	8002cd0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f841 	bl	8002cd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3304      	adds	r3, #4
 8002c66:	4619      	mov	r1, r3
 8002c68:	4610      	mov	r0, r2
 8002c6a:	f000 fa55 	bl	8003118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d109      	bne.n	8002d10 <HAL_TIM_PWM_Start+0x24>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	bf14      	ite	ne
 8002d08:	2301      	movne	r3, #1
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e03c      	b.n	8002d8a <HAL_TIM_PWM_Start+0x9e>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d109      	bne.n	8002d2a <HAL_TIM_PWM_Start+0x3e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	bf14      	ite	ne
 8002d22:	2301      	movne	r3, #1
 8002d24:	2300      	moveq	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	e02f      	b.n	8002d8a <HAL_TIM_PWM_Start+0x9e>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d109      	bne.n	8002d44 <HAL_TIM_PWM_Start+0x58>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	bf14      	ite	ne
 8002d3c:	2301      	movne	r3, #1
 8002d3e:	2300      	moveq	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	e022      	b.n	8002d8a <HAL_TIM_PWM_Start+0x9e>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	d109      	bne.n	8002d5e <HAL_TIM_PWM_Start+0x72>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	bf14      	ite	ne
 8002d56:	2301      	movne	r3, #1
 8002d58:	2300      	moveq	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	e015      	b.n	8002d8a <HAL_TIM_PWM_Start+0x9e>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d109      	bne.n	8002d78 <HAL_TIM_PWM_Start+0x8c>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	e008      	b.n	8002d8a <HAL_TIM_PWM_Start+0x9e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	bf14      	ite	ne
 8002d84:	2301      	movne	r3, #1
 8002d86:	2300      	moveq	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e09c      	b.n	8002ecc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_PWM_Start+0xb6>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002da0:	e023      	b.n	8002dea <HAL_TIM_PWM_Start+0xfe>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d104      	bne.n	8002db2 <HAL_TIM_PWM_Start+0xc6>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db0:	e01b      	b.n	8002dea <HAL_TIM_PWM_Start+0xfe>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d104      	bne.n	8002dc2 <HAL_TIM_PWM_Start+0xd6>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc0:	e013      	b.n	8002dea <HAL_TIM_PWM_Start+0xfe>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b0c      	cmp	r3, #12
 8002dc6:	d104      	bne.n	8002dd2 <HAL_TIM_PWM_Start+0xe6>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dd0:	e00b      	b.n	8002dea <HAL_TIM_PWM_Start+0xfe>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d104      	bne.n	8002de2 <HAL_TIM_PWM_Start+0xf6>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002de0:	e003      	b.n	8002dea <HAL_TIM_PWM_Start+0xfe>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2202      	movs	r2, #2
 8002de6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2201      	movs	r2, #1
 8002df0:	6839      	ldr	r1, [r7, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fd00 	bl	80037f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a35      	ldr	r2, [pc, #212]	; (8002ed4 <HAL_TIM_PWM_Start+0x1e8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <HAL_TIM_PWM_Start+0x13e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a34      	ldr	r2, [pc, #208]	; (8002ed8 <HAL_TIM_PWM_Start+0x1ec>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00e      	beq.n	8002e2a <HAL_TIM_PWM_Start+0x13e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a32      	ldr	r2, [pc, #200]	; (8002edc <HAL_TIM_PWM_Start+0x1f0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d009      	beq.n	8002e2a <HAL_TIM_PWM_Start+0x13e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a31      	ldr	r2, [pc, #196]	; (8002ee0 <HAL_TIM_PWM_Start+0x1f4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_TIM_PWM_Start+0x13e>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a2f      	ldr	r2, [pc, #188]	; (8002ee4 <HAL_TIM_PWM_Start+0x1f8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_PWM_Start+0x142>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_TIM_PWM_Start+0x144>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a22      	ldr	r2, [pc, #136]	; (8002ed4 <HAL_TIM_PWM_Start+0x1e8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d01d      	beq.n	8002e8a <HAL_TIM_PWM_Start+0x19e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e56:	d018      	beq.n	8002e8a <HAL_TIM_PWM_Start+0x19e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a22      	ldr	r2, [pc, #136]	; (8002ee8 <HAL_TIM_PWM_Start+0x1fc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d013      	beq.n	8002e8a <HAL_TIM_PWM_Start+0x19e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a21      	ldr	r2, [pc, #132]	; (8002eec <HAL_TIM_PWM_Start+0x200>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00e      	beq.n	8002e8a <HAL_TIM_PWM_Start+0x19e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <HAL_TIM_PWM_Start+0x204>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d009      	beq.n	8002e8a <HAL_TIM_PWM_Start+0x19e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <HAL_TIM_PWM_Start+0x1ec>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d004      	beq.n	8002e8a <HAL_TIM_PWM_Start+0x19e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a15      	ldr	r2, [pc, #84]	; (8002edc <HAL_TIM_PWM_Start+0x1f0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d115      	bne.n	8002eb6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <HAL_TIM_PWM_Start+0x208>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b06      	cmp	r3, #6
 8002e9a:	d015      	beq.n	8002ec8 <HAL_TIM_PWM_Start+0x1dc>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea2:	d011      	beq.n	8002ec8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb4:	e008      	b.n	8002ec8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0201 	orr.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	e000      	b.n	8002eca <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40012c00 	.word	0x40012c00
 8002ed8:	40013400 	.word	0x40013400
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40014400 	.word	0x40014400
 8002ee4:	40014800 	.word	0x40014800
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40000800 	.word	0x40000800
 8002ef0:	40000c00 	.word	0x40000c00
 8002ef4:	00010007 	.word	0x00010007

08002ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e0fd      	b.n	800310e <HAL_TIM_PWM_ConfigChannel+0x216>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b14      	cmp	r3, #20
 8002f1e:	f200 80f0 	bhi.w	8003102 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002f22:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f28:	08002f7d 	.word	0x08002f7d
 8002f2c:	08003103 	.word	0x08003103
 8002f30:	08003103 	.word	0x08003103
 8002f34:	08003103 	.word	0x08003103
 8002f38:	08002fbd 	.word	0x08002fbd
 8002f3c:	08003103 	.word	0x08003103
 8002f40:	08003103 	.word	0x08003103
 8002f44:	08003103 	.word	0x08003103
 8002f48:	08002fff 	.word	0x08002fff
 8002f4c:	08003103 	.word	0x08003103
 8002f50:	08003103 	.word	0x08003103
 8002f54:	08003103 	.word	0x08003103
 8002f58:	0800303f 	.word	0x0800303f
 8002f5c:	08003103 	.word	0x08003103
 8002f60:	08003103 	.word	0x08003103
 8002f64:	08003103 	.word	0x08003103
 8002f68:	08003081 	.word	0x08003081
 8002f6c:	08003103 	.word	0x08003103
 8002f70:	08003103 	.word	0x08003103
 8002f74:	08003103 	.word	0x08003103
 8002f78:	080030c1 	.word	0x080030c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f962 	bl	800324c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0208 	orr.w	r2, r2, #8
 8002f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0204 	bic.w	r2, r2, #4
 8002fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6999      	ldr	r1, [r3, #24]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	619a      	str	r2, [r3, #24]
      break;
 8002fba:	e0a3      	b.n	8003104 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 f9d2 	bl	800336c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6999      	ldr	r1, [r3, #24]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	021a      	lsls	r2, r3, #8
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	619a      	str	r2, [r3, #24]
      break;
 8002ffc:	e082      	b.n	8003104 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	4618      	mov	r0, r3
 8003006:	f000 fa3b 	bl	8003480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0208 	orr.w	r2, r2, #8
 8003018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0204 	bic.w	r2, r2, #4
 8003028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69d9      	ldr	r1, [r3, #28]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	61da      	str	r2, [r3, #28]
      break;
 800303c:	e062      	b.n	8003104 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	4618      	mov	r0, r3
 8003046:	f000 faa3 	bl	8003590 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69da      	ldr	r2, [r3, #28]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69d9      	ldr	r1, [r3, #28]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	021a      	lsls	r2, r3, #8
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	61da      	str	r2, [r3, #28]
      break;
 800307e:	e041      	b.n	8003104 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	4618      	mov	r0, r3
 8003088:	f000 faec 	bl	8003664 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0208 	orr.w	r2, r2, #8
 800309a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0204 	bic.w	r2, r2, #4
 80030aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80030be:	e021      	b.n	8003104 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fb30 	bl	800372c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	021a      	lsls	r2, r3, #8
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003100:	e000      	b.n	8003104 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003102:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop

08003118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a40      	ldr	r2, [pc, #256]	; (800322c <TIM_Base_SetConfig+0x114>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d013      	beq.n	8003158 <TIM_Base_SetConfig+0x40>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003136:	d00f      	beq.n	8003158 <TIM_Base_SetConfig+0x40>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a3d      	ldr	r2, [pc, #244]	; (8003230 <TIM_Base_SetConfig+0x118>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00b      	beq.n	8003158 <TIM_Base_SetConfig+0x40>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a3c      	ldr	r2, [pc, #240]	; (8003234 <TIM_Base_SetConfig+0x11c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d007      	beq.n	8003158 <TIM_Base_SetConfig+0x40>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a3b      	ldr	r2, [pc, #236]	; (8003238 <TIM_Base_SetConfig+0x120>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d003      	beq.n	8003158 <TIM_Base_SetConfig+0x40>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a3a      	ldr	r2, [pc, #232]	; (800323c <TIM_Base_SetConfig+0x124>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d108      	bne.n	800316a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a2f      	ldr	r2, [pc, #188]	; (800322c <TIM_Base_SetConfig+0x114>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d01f      	beq.n	80031b2 <TIM_Base_SetConfig+0x9a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003178:	d01b      	beq.n	80031b2 <TIM_Base_SetConfig+0x9a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a2c      	ldr	r2, [pc, #176]	; (8003230 <TIM_Base_SetConfig+0x118>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d017      	beq.n	80031b2 <TIM_Base_SetConfig+0x9a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a2b      	ldr	r2, [pc, #172]	; (8003234 <TIM_Base_SetConfig+0x11c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <TIM_Base_SetConfig+0x9a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a2a      	ldr	r2, [pc, #168]	; (8003238 <TIM_Base_SetConfig+0x120>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00f      	beq.n	80031b2 <TIM_Base_SetConfig+0x9a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a29      	ldr	r2, [pc, #164]	; (800323c <TIM_Base_SetConfig+0x124>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00b      	beq.n	80031b2 <TIM_Base_SetConfig+0x9a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a28      	ldr	r2, [pc, #160]	; (8003240 <TIM_Base_SetConfig+0x128>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d007      	beq.n	80031b2 <TIM_Base_SetConfig+0x9a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a27      	ldr	r2, [pc, #156]	; (8003244 <TIM_Base_SetConfig+0x12c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d003      	beq.n	80031b2 <TIM_Base_SetConfig+0x9a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a26      	ldr	r2, [pc, #152]	; (8003248 <TIM_Base_SetConfig+0x130>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d108      	bne.n	80031c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a10      	ldr	r2, [pc, #64]	; (800322c <TIM_Base_SetConfig+0x114>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00f      	beq.n	8003210 <TIM_Base_SetConfig+0xf8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a12      	ldr	r2, [pc, #72]	; (800323c <TIM_Base_SetConfig+0x124>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00b      	beq.n	8003210 <TIM_Base_SetConfig+0xf8>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a11      	ldr	r2, [pc, #68]	; (8003240 <TIM_Base_SetConfig+0x128>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d007      	beq.n	8003210 <TIM_Base_SetConfig+0xf8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a10      	ldr	r2, [pc, #64]	; (8003244 <TIM_Base_SetConfig+0x12c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <TIM_Base_SetConfig+0xf8>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a0f      	ldr	r2, [pc, #60]	; (8003248 <TIM_Base_SetConfig+0x130>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d103      	bne.n	8003218 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	615a      	str	r2, [r3, #20]
}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40000400 	.word	0x40000400
 8003234:	40000800 	.word	0x40000800
 8003238:	40000c00 	.word	0x40000c00
 800323c:	40013400 	.word	0x40013400
 8003240:	40014000 	.word	0x40014000
 8003244:	40014400 	.word	0x40014400
 8003248:	40014800 	.word	0x40014800

0800324c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f023 0201 	bic.w	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0303 	bic.w	r3, r3, #3
 8003286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f023 0302 	bic.w	r3, r3, #2
 8003298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a2c      	ldr	r2, [pc, #176]	; (8003358 <TIM_OC1_SetConfig+0x10c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00f      	beq.n	80032cc <TIM_OC1_SetConfig+0x80>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a2b      	ldr	r2, [pc, #172]	; (800335c <TIM_OC1_SetConfig+0x110>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00b      	beq.n	80032cc <TIM_OC1_SetConfig+0x80>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a2a      	ldr	r2, [pc, #168]	; (8003360 <TIM_OC1_SetConfig+0x114>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d007      	beq.n	80032cc <TIM_OC1_SetConfig+0x80>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a29      	ldr	r2, [pc, #164]	; (8003364 <TIM_OC1_SetConfig+0x118>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d003      	beq.n	80032cc <TIM_OC1_SetConfig+0x80>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a28      	ldr	r2, [pc, #160]	; (8003368 <TIM_OC1_SetConfig+0x11c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d10c      	bne.n	80032e6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f023 0308 	bic.w	r3, r3, #8
 80032d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f023 0304 	bic.w	r3, r3, #4
 80032e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a1b      	ldr	r2, [pc, #108]	; (8003358 <TIM_OC1_SetConfig+0x10c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00f      	beq.n	800330e <TIM_OC1_SetConfig+0xc2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a1a      	ldr	r2, [pc, #104]	; (800335c <TIM_OC1_SetConfig+0x110>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00b      	beq.n	800330e <TIM_OC1_SetConfig+0xc2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a19      	ldr	r2, [pc, #100]	; (8003360 <TIM_OC1_SetConfig+0x114>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d007      	beq.n	800330e <TIM_OC1_SetConfig+0xc2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a18      	ldr	r2, [pc, #96]	; (8003364 <TIM_OC1_SetConfig+0x118>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d003      	beq.n	800330e <TIM_OC1_SetConfig+0xc2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a17      	ldr	r2, [pc, #92]	; (8003368 <TIM_OC1_SetConfig+0x11c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d111      	bne.n	8003332 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800331c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	621a      	str	r2, [r3, #32]
}
 800334c:	bf00      	nop
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40013400 	.word	0x40013400
 8003360:	40014000 	.word	0x40014000
 8003364:	40014400 	.word	0x40014400
 8003368:	40014800 	.word	0x40014800

0800336c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f023 0210 	bic.w	r2, r3, #16
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800339a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800339e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 0320 	bic.w	r3, r3, #32
 80033ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a28      	ldr	r2, [pc, #160]	; (800346c <TIM_OC2_SetConfig+0x100>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <TIM_OC2_SetConfig+0x6c>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a27      	ldr	r2, [pc, #156]	; (8003470 <TIM_OC2_SetConfig+0x104>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d10d      	bne.n	80033f4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a1d      	ldr	r2, [pc, #116]	; (800346c <TIM_OC2_SetConfig+0x100>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00f      	beq.n	800341c <TIM_OC2_SetConfig+0xb0>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a1c      	ldr	r2, [pc, #112]	; (8003470 <TIM_OC2_SetConfig+0x104>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00b      	beq.n	800341c <TIM_OC2_SetConfig+0xb0>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a1b      	ldr	r2, [pc, #108]	; (8003474 <TIM_OC2_SetConfig+0x108>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d007      	beq.n	800341c <TIM_OC2_SetConfig+0xb0>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a1a      	ldr	r2, [pc, #104]	; (8003478 <TIM_OC2_SetConfig+0x10c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d003      	beq.n	800341c <TIM_OC2_SetConfig+0xb0>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a19      	ldr	r2, [pc, #100]	; (800347c <TIM_OC2_SetConfig+0x110>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d113      	bne.n	8003444 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003422:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800342a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	621a      	str	r2, [r3, #32]
}
 800345e:	bf00      	nop
 8003460:	371c      	adds	r7, #28
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40012c00 	.word	0x40012c00
 8003470:	40013400 	.word	0x40013400
 8003474:	40014000 	.word	0x40014000
 8003478:	40014400 	.word	0x40014400
 800347c:	40014800 	.word	0x40014800

08003480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0303 	bic.w	r3, r3, #3
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a27      	ldr	r2, [pc, #156]	; (800357c <TIM_OC3_SetConfig+0xfc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d003      	beq.n	80034ea <TIM_OC3_SetConfig+0x6a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a26      	ldr	r2, [pc, #152]	; (8003580 <TIM_OC3_SetConfig+0x100>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d10d      	bne.n	8003506 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a1c      	ldr	r2, [pc, #112]	; (800357c <TIM_OC3_SetConfig+0xfc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00f      	beq.n	800352e <TIM_OC3_SetConfig+0xae>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a1b      	ldr	r2, [pc, #108]	; (8003580 <TIM_OC3_SetConfig+0x100>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00b      	beq.n	800352e <TIM_OC3_SetConfig+0xae>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a1a      	ldr	r2, [pc, #104]	; (8003584 <TIM_OC3_SetConfig+0x104>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d007      	beq.n	800352e <TIM_OC3_SetConfig+0xae>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a19      	ldr	r2, [pc, #100]	; (8003588 <TIM_OC3_SetConfig+0x108>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d003      	beq.n	800352e <TIM_OC3_SetConfig+0xae>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a18      	ldr	r2, [pc, #96]	; (800358c <TIM_OC3_SetConfig+0x10c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d113      	bne.n	8003556 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800353c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	621a      	str	r2, [r3, #32]
}
 8003570:	bf00      	nop
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40013400 	.word	0x40013400
 8003584:	40014000 	.word	0x40014000
 8003588:	40014400 	.word	0x40014400
 800358c:	40014800 	.word	0x40014800

08003590 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	031b      	lsls	r3, r3, #12
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a18      	ldr	r2, [pc, #96]	; (8003650 <TIM_OC4_SetConfig+0xc0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00f      	beq.n	8003614 <TIM_OC4_SetConfig+0x84>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a17      	ldr	r2, [pc, #92]	; (8003654 <TIM_OC4_SetConfig+0xc4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00b      	beq.n	8003614 <TIM_OC4_SetConfig+0x84>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a16      	ldr	r2, [pc, #88]	; (8003658 <TIM_OC4_SetConfig+0xc8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d007      	beq.n	8003614 <TIM_OC4_SetConfig+0x84>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a15      	ldr	r2, [pc, #84]	; (800365c <TIM_OC4_SetConfig+0xcc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d003      	beq.n	8003614 <TIM_OC4_SetConfig+0x84>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a14      	ldr	r2, [pc, #80]	; (8003660 <TIM_OC4_SetConfig+0xd0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d109      	bne.n	8003628 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800361a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	019b      	lsls	r3, r3, #6
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	4313      	orrs	r3, r2
 8003626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	621a      	str	r2, [r3, #32]
}
 8003642:	bf00      	nop
 8003644:	371c      	adds	r7, #28
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40013400 	.word	0x40013400
 8003658:	40014000 	.word	0x40014000
 800365c:	40014400 	.word	0x40014400
 8003660:	40014800 	.word	0x40014800

08003664 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80036a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	041b      	lsls	r3, r3, #16
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a17      	ldr	r2, [pc, #92]	; (8003718 <TIM_OC5_SetConfig+0xb4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00f      	beq.n	80036de <TIM_OC5_SetConfig+0x7a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a16      	ldr	r2, [pc, #88]	; (800371c <TIM_OC5_SetConfig+0xb8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00b      	beq.n	80036de <TIM_OC5_SetConfig+0x7a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a15      	ldr	r2, [pc, #84]	; (8003720 <TIM_OC5_SetConfig+0xbc>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d007      	beq.n	80036de <TIM_OC5_SetConfig+0x7a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a14      	ldr	r2, [pc, #80]	; (8003724 <TIM_OC5_SetConfig+0xc0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d003      	beq.n	80036de <TIM_OC5_SetConfig+0x7a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a13      	ldr	r2, [pc, #76]	; (8003728 <TIM_OC5_SetConfig+0xc4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d109      	bne.n	80036f2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	621a      	str	r2, [r3, #32]
}
 800370c:	bf00      	nop
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	40012c00 	.word	0x40012c00
 800371c:	40013400 	.word	0x40013400
 8003720:	40014000 	.word	0x40014000
 8003724:	40014400 	.word	0x40014400
 8003728:	40014800 	.word	0x40014800

0800372c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800375a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800375e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4313      	orrs	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	051b      	lsls	r3, r3, #20
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <TIM_OC6_SetConfig+0xb8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00f      	beq.n	80037a8 <TIM_OC6_SetConfig+0x7c>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a17      	ldr	r2, [pc, #92]	; (80037e8 <TIM_OC6_SetConfig+0xbc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d00b      	beq.n	80037a8 <TIM_OC6_SetConfig+0x7c>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a16      	ldr	r2, [pc, #88]	; (80037ec <TIM_OC6_SetConfig+0xc0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d007      	beq.n	80037a8 <TIM_OC6_SetConfig+0x7c>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <TIM_OC6_SetConfig+0xc4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d003      	beq.n	80037a8 <TIM_OC6_SetConfig+0x7c>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <TIM_OC6_SetConfig+0xc8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d109      	bne.n	80037bc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	029b      	lsls	r3, r3, #10
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40012c00 	.word	0x40012c00
 80037e8:	40013400 	.word	0x40013400
 80037ec:	40014000 	.word	0x40014000
 80037f0:	40014400 	.word	0x40014400
 80037f4:	40014800 	.word	0x40014800

080037f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	2201      	movs	r2, #1
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a1a      	ldr	r2, [r3, #32]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	43db      	mvns	r3, r3
 800381a:	401a      	ands	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a1a      	ldr	r2, [r3, #32]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	fa01 f303 	lsl.w	r3, r1, r3
 8003830:	431a      	orrs	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	621a      	str	r2, [r3, #32]
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800385c:	2302      	movs	r3, #2
 800385e:	e065      	b.n	800392c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	041b      	lsls	r3, r3, #16
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a16      	ldr	r2, [pc, #88]	; (8003938 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d004      	beq.n	80038ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a14      	ldr	r2, [pc, #80]	; (800393c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d115      	bne.n	800391a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	051b      	lsls	r3, r3, #20
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40012c00 	.word	0x40012c00
 800393c:	40013400 	.word	0x40013400

08003940 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e040      	b.n	80039d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fd f9c2 	bl	8000cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2224      	movs	r2, #36	; 0x24
 800396c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0201 	bic.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 faee 	bl	8003f60 <UART_SetConfig>
 8003984:	4603      	mov	r3, r0
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e022      	b.n	80039d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fd6c 	bl	8004474 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fdf3 	bl	80045b8 <UART_CheckIdleState>
 80039d2:	4603      	mov	r3, r0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	4613      	mov	r3, r2
 80039e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d145      	bne.n	8003a7e <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_UART_Transmit_IT+0x22>
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e03e      	b.n	8003a80 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_UART_Transmit_IT+0x34>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e037      	b.n	8003a80 <HAL_UART_Transmit_IT+0xa4>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	88fa      	ldrh	r2, [r7, #6]
 8003a2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2221      	movs	r2, #33	; 0x21
 8003a40:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4a:	d107      	bne.n	8003a5c <HAL_UART_Transmit_IT+0x80>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d103      	bne.n	8003a5c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4a0d      	ldr	r2, [pc, #52]	; (8003a8c <HAL_UART_Transmit_IT+0xb0>)
 8003a58:	669a      	str	r2, [r3, #104]	; 0x68
 8003a5a:	e002      	b.n	8003a62 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a0c      	ldr	r2, [pc, #48]	; (8003a90 <HAL_UART_Transmit_IT+0xb4>)
 8003a60:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a78:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
  }
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	08004953 	.word	0x08004953
 8003a90:	080048df 	.word	0x080048df

08003a94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d131      	bne.n	8003b0e <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <HAL_UART_Receive_IT+0x22>
 8003ab0:	88fb      	ldrh	r3, [r7, #6]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e02a      	b.n	8003b10 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_UART_Receive_IT+0x34>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e023      	b.n	8003b10 <HAL_UART_Receive_IT+0x7c>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a0f      	ldr	r2, [pc, #60]	; (8003b18 <HAL_UART_Receive_IT+0x84>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003afc:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	461a      	mov	r2, r3
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 fe1d 	bl	8004744 <UART_Start_Receive_IT>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	e000      	b.n	8003b10 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
  }
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40008000 	.word	0x40008000

08003b1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b3c:	69fa      	ldr	r2, [r7, #28]
 8003b3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b42:	4013      	ands	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d113      	bne.n	8003b74 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00e      	beq.n	8003b74 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d009      	beq.n	8003b74 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 81ce 	beq.w	8003f06 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	4798      	blx	r3
      }
      return;
 8003b72:	e1c8      	b.n	8003f06 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 80e3 	beq.w	8003d42 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d105      	bne.n	8003b92 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4ba6      	ldr	r3, [pc, #664]	; (8003e24 <HAL_UART_IRQHandler+0x308>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80d8 	beq.w	8003d42 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d010      	beq.n	8003bbe <HAL_UART_IRQHandler+0xa2>
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2201      	movs	r2, #1
 8003bac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bb4:	f043 0201 	orr.w	r2, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d010      	beq.n	8003bea <HAL_UART_IRQHandler+0xce>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003be0:	f043 0204 	orr.w	r2, r3, #4
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d010      	beq.n	8003c16 <HAL_UART_IRQHandler+0xfa>
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00b      	beq.n	8003c16 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2204      	movs	r2, #4
 8003c04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c0c:	f043 0202 	orr.w	r2, r3, #2
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d015      	beq.n	8003c4c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d104      	bne.n	8003c34 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00b      	beq.n	8003c4c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2208      	movs	r2, #8
 8003c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c42:	f043 0208 	orr.w	r2, r3, #8
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d011      	beq.n	8003c7a <HAL_UART_IRQHandler+0x15e>
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00c      	beq.n	8003c7a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c70:	f043 0220 	orr.w	r2, r3, #32
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8142 	beq.w	8003f0a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00c      	beq.n	8003caa <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cb0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d004      	beq.n	8003cca <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d031      	beq.n	8003d2e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fdc2 	bl	8004854 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d123      	bne.n	8003d26 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cec:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d013      	beq.n	8003d1e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	4a4b      	ldr	r2, [pc, #300]	; (8003e28 <HAL_UART_IRQHandler+0x30c>)
 8003cfc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fd fa43 	bl	800118e <HAL_DMA_Abort_IT>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d017      	beq.n	8003d3e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d1c:	e00f      	b.n	8003d3e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f908 	bl	8003f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d24:	e00b      	b.n	8003d3e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f904 	bl	8003f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2c:	e007      	b.n	8003d3e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f900 	bl	8003f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003d3c:	e0e5      	b.n	8003f0a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3e:	bf00      	nop
    return;
 8003d40:	e0e3      	b.n	8003f0a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	f040 80a9 	bne.w	8003e9e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80a3 	beq.w	8003e9e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 809d 	beq.w	8003e9e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2210      	movs	r2, #16
 8003d6a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d76:	2b40      	cmp	r3, #64	; 0x40
 8003d78:	d158      	bne.n	8003e2c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003d84:	893b      	ldrh	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 80c1 	beq.w	8003f0e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d92:	893a      	ldrh	r2, [r7, #8]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	f080 80ba 	bcs.w	8003f0e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	893a      	ldrh	r2, [r7, #8]
 8003d9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d12a      	bne.n	8003e08 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de0:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0210 	bic.w	r2, r2, #16
 8003dfc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fd f985 	bl	8001112 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f893 	bl	8003f48 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e22:	e074      	b.n	8003f0e <HAL_UART_IRQHandler+0x3f2>
 8003e24:	04000120 	.word	0x04000120
 8003e28:	080048b3 	.word	0x080048b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d063      	beq.n	8003f12 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003e4a:	897b      	ldrh	r3, [r7, #10]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d060      	beq.n	8003f12 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e5e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0201 	bic.w	r2, r2, #1
 8003e6e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0210 	bic.w	r2, r2, #16
 8003e90:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e92:	897b      	ldrh	r3, [r7, #10]
 8003e94:	4619      	mov	r1, r3
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f856 	bl	8003f48 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e9c:	e039      	b.n	8003f12 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00d      	beq.n	8003ec4 <HAL_UART_IRQHandler+0x3a8>
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d008      	beq.n	8003ec4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003eba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fe77 	bl	8004bb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ec2:	e029      	b.n	8003f18 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00d      	beq.n	8003eea <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01a      	beq.n	8003f16 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	4798      	blx	r3
    }
    return;
 8003ee8:	e015      	b.n	8003f16 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d011      	beq.n	8003f18 <HAL_UART_IRQHandler+0x3fc>
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00c      	beq.n	8003f18 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fd65 	bl	80049ce <UART_EndTransmit_IT>
    return;
 8003f04:	e008      	b.n	8003f18 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003f06:	bf00      	nop
 8003f08:	e006      	b.n	8003f18 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003f0a:	bf00      	nop
 8003f0c:	e004      	b.n	8003f18 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003f0e:	bf00      	nop
 8003f10:	e002      	b.n	8003f18 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003f12:	bf00      	nop
 8003f14:	e000      	b.n	8003f18 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003f16:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003f18:	3720      	adds	r7, #32
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop

08003f20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f60:	b5b0      	push	{r4, r5, r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4bad      	ldr	r3, [pc, #692]	; (8004240 <UART_SetConfig+0x2e0>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	69f9      	ldr	r1, [r7, #28]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4aa2      	ldr	r2, [pc, #648]	; (8004244 <UART_SetConfig+0x2e4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d004      	beq.n	8003fc8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a99      	ldr	r2, [pc, #612]	; (8004248 <UART_SetConfig+0x2e8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d121      	bne.n	800402a <UART_SetConfig+0xca>
 8003fe6:	4b99      	ldr	r3, [pc, #612]	; (800424c <UART_SetConfig+0x2ec>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d817      	bhi.n	8004024 <UART_SetConfig+0xc4>
 8003ff4:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <UART_SetConfig+0x9c>)
 8003ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffa:	bf00      	nop
 8003ffc:	0800400d 	.word	0x0800400d
 8004000:	08004019 	.word	0x08004019
 8004004:	08004013 	.word	0x08004013
 8004008:	0800401f 	.word	0x0800401f
 800400c:	2301      	movs	r3, #1
 800400e:	76fb      	strb	r3, [r7, #27]
 8004010:	e0e7      	b.n	80041e2 <UART_SetConfig+0x282>
 8004012:	2302      	movs	r3, #2
 8004014:	76fb      	strb	r3, [r7, #27]
 8004016:	e0e4      	b.n	80041e2 <UART_SetConfig+0x282>
 8004018:	2304      	movs	r3, #4
 800401a:	76fb      	strb	r3, [r7, #27]
 800401c:	e0e1      	b.n	80041e2 <UART_SetConfig+0x282>
 800401e:	2308      	movs	r3, #8
 8004020:	76fb      	strb	r3, [r7, #27]
 8004022:	e0de      	b.n	80041e2 <UART_SetConfig+0x282>
 8004024:	2310      	movs	r3, #16
 8004026:	76fb      	strb	r3, [r7, #27]
 8004028:	e0db      	b.n	80041e2 <UART_SetConfig+0x282>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a88      	ldr	r2, [pc, #544]	; (8004250 <UART_SetConfig+0x2f0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d132      	bne.n	800409a <UART_SetConfig+0x13a>
 8004034:	4b85      	ldr	r3, [pc, #532]	; (800424c <UART_SetConfig+0x2ec>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b0c      	cmp	r3, #12
 8004040:	d828      	bhi.n	8004094 <UART_SetConfig+0x134>
 8004042:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <UART_SetConfig+0xe8>)
 8004044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004048:	0800407d 	.word	0x0800407d
 800404c:	08004095 	.word	0x08004095
 8004050:	08004095 	.word	0x08004095
 8004054:	08004095 	.word	0x08004095
 8004058:	08004089 	.word	0x08004089
 800405c:	08004095 	.word	0x08004095
 8004060:	08004095 	.word	0x08004095
 8004064:	08004095 	.word	0x08004095
 8004068:	08004083 	.word	0x08004083
 800406c:	08004095 	.word	0x08004095
 8004070:	08004095 	.word	0x08004095
 8004074:	08004095 	.word	0x08004095
 8004078:	0800408f 	.word	0x0800408f
 800407c:	2300      	movs	r3, #0
 800407e:	76fb      	strb	r3, [r7, #27]
 8004080:	e0af      	b.n	80041e2 <UART_SetConfig+0x282>
 8004082:	2302      	movs	r3, #2
 8004084:	76fb      	strb	r3, [r7, #27]
 8004086:	e0ac      	b.n	80041e2 <UART_SetConfig+0x282>
 8004088:	2304      	movs	r3, #4
 800408a:	76fb      	strb	r3, [r7, #27]
 800408c:	e0a9      	b.n	80041e2 <UART_SetConfig+0x282>
 800408e:	2308      	movs	r3, #8
 8004090:	76fb      	strb	r3, [r7, #27]
 8004092:	e0a6      	b.n	80041e2 <UART_SetConfig+0x282>
 8004094:	2310      	movs	r3, #16
 8004096:	76fb      	strb	r3, [r7, #27]
 8004098:	e0a3      	b.n	80041e2 <UART_SetConfig+0x282>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a6d      	ldr	r2, [pc, #436]	; (8004254 <UART_SetConfig+0x2f4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d120      	bne.n	80040e6 <UART_SetConfig+0x186>
 80040a4:	4b69      	ldr	r3, [pc, #420]	; (800424c <UART_SetConfig+0x2ec>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040ae:	2b30      	cmp	r3, #48	; 0x30
 80040b0:	d013      	beq.n	80040da <UART_SetConfig+0x17a>
 80040b2:	2b30      	cmp	r3, #48	; 0x30
 80040b4:	d814      	bhi.n	80040e0 <UART_SetConfig+0x180>
 80040b6:	2b20      	cmp	r3, #32
 80040b8:	d009      	beq.n	80040ce <UART_SetConfig+0x16e>
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	d810      	bhi.n	80040e0 <UART_SetConfig+0x180>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <UART_SetConfig+0x168>
 80040c2:	2b10      	cmp	r3, #16
 80040c4:	d006      	beq.n	80040d4 <UART_SetConfig+0x174>
 80040c6:	e00b      	b.n	80040e0 <UART_SetConfig+0x180>
 80040c8:	2300      	movs	r3, #0
 80040ca:	76fb      	strb	r3, [r7, #27]
 80040cc:	e089      	b.n	80041e2 <UART_SetConfig+0x282>
 80040ce:	2302      	movs	r3, #2
 80040d0:	76fb      	strb	r3, [r7, #27]
 80040d2:	e086      	b.n	80041e2 <UART_SetConfig+0x282>
 80040d4:	2304      	movs	r3, #4
 80040d6:	76fb      	strb	r3, [r7, #27]
 80040d8:	e083      	b.n	80041e2 <UART_SetConfig+0x282>
 80040da:	2308      	movs	r3, #8
 80040dc:	76fb      	strb	r3, [r7, #27]
 80040de:	e080      	b.n	80041e2 <UART_SetConfig+0x282>
 80040e0:	2310      	movs	r3, #16
 80040e2:	76fb      	strb	r3, [r7, #27]
 80040e4:	e07d      	b.n	80041e2 <UART_SetConfig+0x282>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a5b      	ldr	r2, [pc, #364]	; (8004258 <UART_SetConfig+0x2f8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d120      	bne.n	8004132 <UART_SetConfig+0x1d2>
 80040f0:	4b56      	ldr	r3, [pc, #344]	; (800424c <UART_SetConfig+0x2ec>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040fa:	2bc0      	cmp	r3, #192	; 0xc0
 80040fc:	d013      	beq.n	8004126 <UART_SetConfig+0x1c6>
 80040fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004100:	d814      	bhi.n	800412c <UART_SetConfig+0x1cc>
 8004102:	2b80      	cmp	r3, #128	; 0x80
 8004104:	d009      	beq.n	800411a <UART_SetConfig+0x1ba>
 8004106:	2b80      	cmp	r3, #128	; 0x80
 8004108:	d810      	bhi.n	800412c <UART_SetConfig+0x1cc>
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <UART_SetConfig+0x1b4>
 800410e:	2b40      	cmp	r3, #64	; 0x40
 8004110:	d006      	beq.n	8004120 <UART_SetConfig+0x1c0>
 8004112:	e00b      	b.n	800412c <UART_SetConfig+0x1cc>
 8004114:	2300      	movs	r3, #0
 8004116:	76fb      	strb	r3, [r7, #27]
 8004118:	e063      	b.n	80041e2 <UART_SetConfig+0x282>
 800411a:	2302      	movs	r3, #2
 800411c:	76fb      	strb	r3, [r7, #27]
 800411e:	e060      	b.n	80041e2 <UART_SetConfig+0x282>
 8004120:	2304      	movs	r3, #4
 8004122:	76fb      	strb	r3, [r7, #27]
 8004124:	e05d      	b.n	80041e2 <UART_SetConfig+0x282>
 8004126:	2308      	movs	r3, #8
 8004128:	76fb      	strb	r3, [r7, #27]
 800412a:	e05a      	b.n	80041e2 <UART_SetConfig+0x282>
 800412c:	2310      	movs	r3, #16
 800412e:	76fb      	strb	r3, [r7, #27]
 8004130:	e057      	b.n	80041e2 <UART_SetConfig+0x282>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a49      	ldr	r2, [pc, #292]	; (800425c <UART_SetConfig+0x2fc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d125      	bne.n	8004188 <UART_SetConfig+0x228>
 800413c:	4b43      	ldr	r3, [pc, #268]	; (800424c <UART_SetConfig+0x2ec>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414a:	d017      	beq.n	800417c <UART_SetConfig+0x21c>
 800414c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004150:	d817      	bhi.n	8004182 <UART_SetConfig+0x222>
 8004152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004156:	d00b      	beq.n	8004170 <UART_SetConfig+0x210>
 8004158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800415c:	d811      	bhi.n	8004182 <UART_SetConfig+0x222>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <UART_SetConfig+0x20a>
 8004162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004166:	d006      	beq.n	8004176 <UART_SetConfig+0x216>
 8004168:	e00b      	b.n	8004182 <UART_SetConfig+0x222>
 800416a:	2300      	movs	r3, #0
 800416c:	76fb      	strb	r3, [r7, #27]
 800416e:	e038      	b.n	80041e2 <UART_SetConfig+0x282>
 8004170:	2302      	movs	r3, #2
 8004172:	76fb      	strb	r3, [r7, #27]
 8004174:	e035      	b.n	80041e2 <UART_SetConfig+0x282>
 8004176:	2304      	movs	r3, #4
 8004178:	76fb      	strb	r3, [r7, #27]
 800417a:	e032      	b.n	80041e2 <UART_SetConfig+0x282>
 800417c:	2308      	movs	r3, #8
 800417e:	76fb      	strb	r3, [r7, #27]
 8004180:	e02f      	b.n	80041e2 <UART_SetConfig+0x282>
 8004182:	2310      	movs	r3, #16
 8004184:	76fb      	strb	r3, [r7, #27]
 8004186:	e02c      	b.n	80041e2 <UART_SetConfig+0x282>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a2d      	ldr	r2, [pc, #180]	; (8004244 <UART_SetConfig+0x2e4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d125      	bne.n	80041de <UART_SetConfig+0x27e>
 8004192:	4b2e      	ldr	r3, [pc, #184]	; (800424c <UART_SetConfig+0x2ec>)
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004198:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800419c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041a0:	d017      	beq.n	80041d2 <UART_SetConfig+0x272>
 80041a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041a6:	d817      	bhi.n	80041d8 <UART_SetConfig+0x278>
 80041a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ac:	d00b      	beq.n	80041c6 <UART_SetConfig+0x266>
 80041ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b2:	d811      	bhi.n	80041d8 <UART_SetConfig+0x278>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <UART_SetConfig+0x260>
 80041b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041bc:	d006      	beq.n	80041cc <UART_SetConfig+0x26c>
 80041be:	e00b      	b.n	80041d8 <UART_SetConfig+0x278>
 80041c0:	2300      	movs	r3, #0
 80041c2:	76fb      	strb	r3, [r7, #27]
 80041c4:	e00d      	b.n	80041e2 <UART_SetConfig+0x282>
 80041c6:	2302      	movs	r3, #2
 80041c8:	76fb      	strb	r3, [r7, #27]
 80041ca:	e00a      	b.n	80041e2 <UART_SetConfig+0x282>
 80041cc:	2304      	movs	r3, #4
 80041ce:	76fb      	strb	r3, [r7, #27]
 80041d0:	e007      	b.n	80041e2 <UART_SetConfig+0x282>
 80041d2:	2308      	movs	r3, #8
 80041d4:	76fb      	strb	r3, [r7, #27]
 80041d6:	e004      	b.n	80041e2 <UART_SetConfig+0x282>
 80041d8:	2310      	movs	r3, #16
 80041da:	76fb      	strb	r3, [r7, #27]
 80041dc:	e001      	b.n	80041e2 <UART_SetConfig+0x282>
 80041de:	2310      	movs	r3, #16
 80041e0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a17      	ldr	r2, [pc, #92]	; (8004244 <UART_SetConfig+0x2e4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	f040 8087 	bne.w	80042fc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041ee:	7efb      	ldrb	r3, [r7, #27]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d837      	bhi.n	8004264 <UART_SetConfig+0x304>
 80041f4:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <UART_SetConfig+0x29c>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	08004221 	.word	0x08004221
 8004200:	08004265 	.word	0x08004265
 8004204:	08004229 	.word	0x08004229
 8004208:	08004265 	.word	0x08004265
 800420c:	0800422f 	.word	0x0800422f
 8004210:	08004265 	.word	0x08004265
 8004214:	08004265 	.word	0x08004265
 8004218:	08004265 	.word	0x08004265
 800421c:	08004237 	.word	0x08004237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004220:	f7fd ff64 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 8004224:	6178      	str	r0, [r7, #20]
        break;
 8004226:	e022      	b.n	800426e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <UART_SetConfig+0x300>)
 800422a:	617b      	str	r3, [r7, #20]
        break;
 800422c:	e01f      	b.n	800426e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800422e:	f7fd fec5 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 8004232:	6178      	str	r0, [r7, #20]
        break;
 8004234:	e01b      	b.n	800426e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800423a:	617b      	str	r3, [r7, #20]
        break;
 800423c:	e017      	b.n	800426e <UART_SetConfig+0x30e>
 800423e:	bf00      	nop
 8004240:	efff69f3 	.word	0xefff69f3
 8004244:	40008000 	.word	0x40008000
 8004248:	40013800 	.word	0x40013800
 800424c:	40021000 	.word	0x40021000
 8004250:	40004400 	.word	0x40004400
 8004254:	40004800 	.word	0x40004800
 8004258:	40004c00 	.word	0x40004c00
 800425c:	40005000 	.word	0x40005000
 8004260:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	76bb      	strb	r3, [r7, #26]
        break;
 800426c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 80f1 	beq.w	8004458 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	4413      	add	r3, r2
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	429a      	cmp	r2, r3
 8004284:	d305      	bcc.n	8004292 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	429a      	cmp	r2, r3
 8004290:	d902      	bls.n	8004298 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	76bb      	strb	r3, [r7, #26]
 8004296:	e0df      	b.n	8004458 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	4618      	mov	r0, r3
 800429c:	f04f 0100 	mov.w	r1, #0
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	020b      	lsls	r3, r1, #8
 80042aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80042ae:	0202      	lsls	r2, r0, #8
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	6849      	ldr	r1, [r1, #4]
 80042b4:	0849      	lsrs	r1, r1, #1
 80042b6:	4608      	mov	r0, r1
 80042b8:	f04f 0100 	mov.w	r1, #0
 80042bc:	1814      	adds	r4, r2, r0
 80042be:	eb43 0501 	adc.w	r5, r3, r1
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	461a      	mov	r2, r3
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	4620      	mov	r0, r4
 80042ce:	4629      	mov	r1, r5
 80042d0:	f7fb ffce 	bl	8000270 <__aeabi_uldivmod>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4613      	mov	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e2:	d308      	bcc.n	80042f6 <UART_SetConfig+0x396>
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ea:	d204      	bcs.n	80042f6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	60da      	str	r2, [r3, #12]
 80042f4:	e0b0      	b.n	8004458 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	76bb      	strb	r3, [r7, #26]
 80042fa:	e0ad      	b.n	8004458 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004304:	d15c      	bne.n	80043c0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004306:	7efb      	ldrb	r3, [r7, #27]
 8004308:	2b08      	cmp	r3, #8
 800430a:	d828      	bhi.n	800435e <UART_SetConfig+0x3fe>
 800430c:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <UART_SetConfig+0x3b4>)
 800430e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004312:	bf00      	nop
 8004314:	08004339 	.word	0x08004339
 8004318:	08004341 	.word	0x08004341
 800431c:	08004349 	.word	0x08004349
 8004320:	0800435f 	.word	0x0800435f
 8004324:	0800434f 	.word	0x0800434f
 8004328:	0800435f 	.word	0x0800435f
 800432c:	0800435f 	.word	0x0800435f
 8004330:	0800435f 	.word	0x0800435f
 8004334:	08004357 	.word	0x08004357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004338:	f7fd fed8 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 800433c:	6178      	str	r0, [r7, #20]
        break;
 800433e:	e013      	b.n	8004368 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004340:	f7fd feea 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
 8004344:	6178      	str	r0, [r7, #20]
        break;
 8004346:	e00f      	b.n	8004368 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004348:	4b49      	ldr	r3, [pc, #292]	; (8004470 <UART_SetConfig+0x510>)
 800434a:	617b      	str	r3, [r7, #20]
        break;
 800434c:	e00c      	b.n	8004368 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800434e:	f7fd fe35 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 8004352:	6178      	str	r0, [r7, #20]
        break;
 8004354:	e008      	b.n	8004368 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800435a:	617b      	str	r3, [r7, #20]
        break;
 800435c:	e004      	b.n	8004368 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	76bb      	strb	r3, [r7, #26]
        break;
 8004366:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d074      	beq.n	8004458 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	005a      	lsls	r2, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	085b      	lsrs	r3, r3, #1
 8004378:	441a      	add	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004382:	b29b      	uxth	r3, r3
 8004384:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	2b0f      	cmp	r3, #15
 800438a:	d916      	bls.n	80043ba <UART_SetConfig+0x45a>
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004392:	d212      	bcs.n	80043ba <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	b29b      	uxth	r3, r3
 8004398:	f023 030f 	bic.w	r3, r3, #15
 800439c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	085b      	lsrs	r3, r3, #1
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	89fb      	ldrh	r3, [r7, #14]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	89fa      	ldrh	r2, [r7, #14]
 80043b6:	60da      	str	r2, [r3, #12]
 80043b8:	e04e      	b.n	8004458 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	76bb      	strb	r3, [r7, #26]
 80043be:	e04b      	b.n	8004458 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043c0:	7efb      	ldrb	r3, [r7, #27]
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d827      	bhi.n	8004416 <UART_SetConfig+0x4b6>
 80043c6:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <UART_SetConfig+0x46c>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	080043f9 	.word	0x080043f9
 80043d4:	08004401 	.word	0x08004401
 80043d8:	08004417 	.word	0x08004417
 80043dc:	08004407 	.word	0x08004407
 80043e0:	08004417 	.word	0x08004417
 80043e4:	08004417 	.word	0x08004417
 80043e8:	08004417 	.word	0x08004417
 80043ec:	0800440f 	.word	0x0800440f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f0:	f7fd fe7c 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 80043f4:	6178      	str	r0, [r7, #20]
        break;
 80043f6:	e013      	b.n	8004420 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f8:	f7fd fe8e 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
 80043fc:	6178      	str	r0, [r7, #20]
        break;
 80043fe:	e00f      	b.n	8004420 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004400:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <UART_SetConfig+0x510>)
 8004402:	617b      	str	r3, [r7, #20]
        break;
 8004404:	e00c      	b.n	8004420 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004406:	f7fd fdd9 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 800440a:	6178      	str	r0, [r7, #20]
        break;
 800440c:	e008      	b.n	8004420 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004412:	617b      	str	r3, [r7, #20]
        break;
 8004414:	e004      	b.n	8004420 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	76bb      	strb	r3, [r7, #26]
        break;
 800441e:	bf00      	nop
    }

    if (pclk != 0U)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d018      	beq.n	8004458 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	085a      	lsrs	r2, r3, #1
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	441a      	add	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	fbb2 f3f3 	udiv	r3, r2, r3
 8004438:	b29b      	uxth	r3, r3
 800443a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	2b0f      	cmp	r3, #15
 8004440:	d908      	bls.n	8004454 <UART_SetConfig+0x4f4>
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004448:	d204      	bcs.n	8004454 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	60da      	str	r2, [r3, #12]
 8004452:	e001      	b.n	8004458 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004464:	7ebb      	ldrb	r3, [r7, #26]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3720      	adds	r7, #32
 800446a:	46bd      	mov	sp, r7
 800446c:	bdb0      	pop	{r4, r5, r7, pc}
 800446e:	bf00      	nop
 8004470:	00f42400 	.word	0x00f42400

08004474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	f003 0310 	and.w	r3, r3, #16
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01a      	beq.n	800458a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004572:	d10a      	bne.n	800458a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	605a      	str	r2, [r3, #4]
  }
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af02      	add	r7, sp, #8
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045c8:	f7fc fc86 	bl	8000ed8 <HAL_GetTick>
 80045cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d10e      	bne.n	80045fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f82d 	bl	800464a <UART_WaitOnFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e023      	b.n	8004642 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b04      	cmp	r3, #4
 8004606:	d10e      	bne.n	8004626 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f817 	bl	800464a <UART_WaitOnFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e00d      	b.n	8004642 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	603b      	str	r3, [r7, #0]
 8004656:	4613      	mov	r3, r2
 8004658:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800465a:	e05e      	b.n	800471a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004662:	d05a      	beq.n	800471a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004664:	f7fc fc38 	bl	8000ed8 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	429a      	cmp	r2, r3
 8004672:	d302      	bcc.n	800467a <UART_WaitOnFlagUntilTimeout+0x30>
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d11b      	bne.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004688:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0201 	bic.w	r2, r2, #1
 8004698:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e043      	b.n	800473a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d02c      	beq.n	800471a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ce:	d124      	bne.n	800471a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046d8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046e8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0201 	bic.w	r2, r2, #1
 80046f8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2220      	movs	r2, #32
 800470a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e00f      	b.n	800473a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69da      	ldr	r2, [r3, #28]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4013      	ands	r3, r2
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	429a      	cmp	r2, r3
 8004728:	bf0c      	ite	eq
 800472a:	2301      	moveq	r3, #1
 800472c:	2300      	movne	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	429a      	cmp	r2, r3
 8004736:	d091      	beq.n	800465c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	4613      	mov	r3, r2
 8004750:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	88fa      	ldrh	r2, [r7, #6]
 800475c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	88fa      	ldrh	r2, [r7, #6]
 8004764:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004776:	d10e      	bne.n	8004796 <UART_Start_Receive_IT+0x52>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d105      	bne.n	800478c <UART_Start_Receive_IT+0x48>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004786:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800478a:	e02d      	b.n	80047e8 <UART_Start_Receive_IT+0xa4>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	22ff      	movs	r2, #255	; 0xff
 8004790:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004794:	e028      	b.n	80047e8 <UART_Start_Receive_IT+0xa4>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10d      	bne.n	80047ba <UART_Start_Receive_IT+0x76>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d104      	bne.n	80047b0 <UART_Start_Receive_IT+0x6c>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	22ff      	movs	r2, #255	; 0xff
 80047aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047ae:	e01b      	b.n	80047e8 <UART_Start_Receive_IT+0xa4>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	227f      	movs	r2, #127	; 0x7f
 80047b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047b8:	e016      	b.n	80047e8 <UART_Start_Receive_IT+0xa4>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047c2:	d10d      	bne.n	80047e0 <UART_Start_Receive_IT+0x9c>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <UART_Start_Receive_IT+0x92>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	227f      	movs	r2, #127	; 0x7f
 80047d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047d4:	e008      	b.n	80047e8 <UART_Start_Receive_IT+0xa4>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	223f      	movs	r2, #63	; 0x3f
 80047da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047de:	e003      	b.n	80047e8 <UART_Start_Receive_IT+0xa4>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2222      	movs	r2, #34	; 0x22
 80047f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0201 	orr.w	r2, r2, #1
 8004804:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480e:	d107      	bne.n	8004820 <UART_Start_Receive_IT+0xdc>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d103      	bne.n	8004820 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4a0c      	ldr	r2, [pc, #48]	; (800484c <UART_Start_Receive_IT+0x108>)
 800481c:	665a      	str	r2, [r3, #100]	; 0x64
 800481e:	e002      	b.n	8004826 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4a0b      	ldr	r2, [pc, #44]	; (8004850 <UART_Start_Receive_IT+0x10c>)
 8004824:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800483c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	08004ad9 	.word	0x08004ad9
 8004850:	08004a01 	.word	0x08004a01

08004854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800486a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0201 	bic.w	r2, r2, #1
 800487a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004880:	2b01      	cmp	r3, #1
 8004882:	d107      	bne.n	8004894 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0210 	bic.w	r2, r2, #16
 8004892:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff fb2f 	bl	8003f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048d6:	bf00      	nop
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ea:	2b21      	cmp	r3, #33	; 0x21
 80048ec:	d12b      	bne.n	8004946 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d110      	bne.n	800491c <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004908:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004918:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800491a:	e014      	b.n	8004946 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004920:	781a      	ldrb	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	b292      	uxth	r2, r2
 8004928:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004952:	b480      	push	{r7}
 8004954:	b085      	sub	sp, #20
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800495e:	2b21      	cmp	r3, #33	; 0x21
 8004960:	d12f      	bne.n	80049c2 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d110      	bne.n	8004990 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800497c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800498c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800498e:	e018      	b.n	80049c2 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004994:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	881a      	ldrh	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a2:	b292      	uxth	r2, r2
 80049a4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049aa:	1c9a      	adds	r2, r3, #2
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7ff fa94 	bl	8003f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049f8:	bf00      	nop
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a0e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a14:	2b22      	cmp	r3, #34	; 0x22
 8004a16:	d151      	bne.n	8004abc <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a1e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a20:	89bb      	ldrh	r3, [r7, #12]
 8004a22:	b2d9      	uxtb	r1, r3
 8004a24:	89fb      	ldrh	r3, [r7, #14]
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	400a      	ands	r2, r1
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d13a      	bne.n	8004ad0 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a68:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0201 	bic.w	r2, r2, #1
 8004a78:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d10f      	bne.n	8004aae <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0210 	bic.w	r2, r2, #16
 8004a9c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff fa4e 	bl	8003f48 <HAL_UARTEx_RxEventCallback>
 8004aac:	e002      	b.n	8004ab4 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fb fe08 	bl	80006c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004aba:	e009      	b.n	8004ad0 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	8b1b      	ldrh	r3, [r3, #24]
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0208 	orr.w	r2, r2, #8
 8004acc:	b292      	uxth	r2, r2
 8004ace:	831a      	strh	r2, [r3, #24]
}
 8004ad0:	bf00      	nop
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ae6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aec:	2b22      	cmp	r3, #34	; 0x22
 8004aee:	d151      	bne.n	8004b94 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004af6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004afe:	89ba      	ldrh	r2, [r7, #12]
 8004b00:	89fb      	ldrh	r3, [r7, #14]
 8004b02:	4013      	ands	r3, r2
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0e:	1c9a      	adds	r2, r3, #2
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d13a      	bne.n	8004ba8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b40:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0201 	bic.w	r2, r2, #1
 8004b50:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d10f      	bne.n	8004b86 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0210 	bic.w	r2, r2, #16
 8004b74:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff f9e2 	bl	8003f48 <HAL_UARTEx_RxEventCallback>
 8004b84:	e002      	b.n	8004b8c <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7fb fd9c 	bl	80006c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b92:	e009      	b.n	8004ba8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	8b1b      	ldrh	r3, [r3, #24]
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0208 	orr.w	r2, r2, #8
 8004ba4:	b292      	uxth	r2, r2
 8004ba6:	831a      	strh	r2, [r3, #24]
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <__errno>:
 8004bc4:	4b01      	ldr	r3, [pc, #4]	; (8004bcc <__errno+0x8>)
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	2000000c 	.word	0x2000000c

08004bd0 <__libc_init_array>:
 8004bd0:	b570      	push	{r4, r5, r6, lr}
 8004bd2:	4d0d      	ldr	r5, [pc, #52]	; (8004c08 <__libc_init_array+0x38>)
 8004bd4:	4c0d      	ldr	r4, [pc, #52]	; (8004c0c <__libc_init_array+0x3c>)
 8004bd6:	1b64      	subs	r4, r4, r5
 8004bd8:	10a4      	asrs	r4, r4, #2
 8004bda:	2600      	movs	r6, #0
 8004bdc:	42a6      	cmp	r6, r4
 8004bde:	d109      	bne.n	8004bf4 <__libc_init_array+0x24>
 8004be0:	4d0b      	ldr	r5, [pc, #44]	; (8004c10 <__libc_init_array+0x40>)
 8004be2:	4c0c      	ldr	r4, [pc, #48]	; (8004c14 <__libc_init_array+0x44>)
 8004be4:	f001 f948 	bl	8005e78 <_init>
 8004be8:	1b64      	subs	r4, r4, r5
 8004bea:	10a4      	asrs	r4, r4, #2
 8004bec:	2600      	movs	r6, #0
 8004bee:	42a6      	cmp	r6, r4
 8004bf0:	d105      	bne.n	8004bfe <__libc_init_array+0x2e>
 8004bf2:	bd70      	pop	{r4, r5, r6, pc}
 8004bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf8:	4798      	blx	r3
 8004bfa:	3601      	adds	r6, #1
 8004bfc:	e7ee      	b.n	8004bdc <__libc_init_array+0xc>
 8004bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c02:	4798      	blx	r3
 8004c04:	3601      	adds	r6, #1
 8004c06:	e7f2      	b.n	8004bee <__libc_init_array+0x1e>
 8004c08:	08005f98 	.word	0x08005f98
 8004c0c:	08005f98 	.word	0x08005f98
 8004c10:	08005f98 	.word	0x08005f98
 8004c14:	08005f9c 	.word	0x08005f9c

08004c18 <memset>:
 8004c18:	4402      	add	r2, r0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d100      	bne.n	8004c22 <memset+0xa>
 8004c20:	4770      	bx	lr
 8004c22:	f803 1b01 	strb.w	r1, [r3], #1
 8004c26:	e7f9      	b.n	8004c1c <memset+0x4>

08004c28 <iprintf>:
 8004c28:	b40f      	push	{r0, r1, r2, r3}
 8004c2a:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <iprintf+0x2c>)
 8004c2c:	b513      	push	{r0, r1, r4, lr}
 8004c2e:	681c      	ldr	r4, [r3, #0]
 8004c30:	b124      	cbz	r4, 8004c3c <iprintf+0x14>
 8004c32:	69a3      	ldr	r3, [r4, #24]
 8004c34:	b913      	cbnz	r3, 8004c3c <iprintf+0x14>
 8004c36:	4620      	mov	r0, r4
 8004c38:	f000 f886 	bl	8004d48 <__sinit>
 8004c3c:	ab05      	add	r3, sp, #20
 8004c3e:	9a04      	ldr	r2, [sp, #16]
 8004c40:	68a1      	ldr	r1, [r4, #8]
 8004c42:	9301      	str	r3, [sp, #4]
 8004c44:	4620      	mov	r0, r4
 8004c46:	f000 faff 	bl	8005248 <_vfiprintf_r>
 8004c4a:	b002      	add	sp, #8
 8004c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c50:	b004      	add	sp, #16
 8004c52:	4770      	bx	lr
 8004c54:	2000000c 	.word	0x2000000c

08004c58 <siprintf>:
 8004c58:	b40e      	push	{r1, r2, r3}
 8004c5a:	b500      	push	{lr}
 8004c5c:	b09c      	sub	sp, #112	; 0x70
 8004c5e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c60:	9002      	str	r0, [sp, #8]
 8004c62:	9006      	str	r0, [sp, #24]
 8004c64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c68:	4809      	ldr	r0, [pc, #36]	; (8004c90 <siprintf+0x38>)
 8004c6a:	9107      	str	r1, [sp, #28]
 8004c6c:	9104      	str	r1, [sp, #16]
 8004c6e:	4909      	ldr	r1, [pc, #36]	; (8004c94 <siprintf+0x3c>)
 8004c70:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c74:	9105      	str	r1, [sp, #20]
 8004c76:	6800      	ldr	r0, [r0, #0]
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	a902      	add	r1, sp, #8
 8004c7c:	f000 f9ba 	bl	8004ff4 <_svfiprintf_r>
 8004c80:	9b02      	ldr	r3, [sp, #8]
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	b01c      	add	sp, #112	; 0x70
 8004c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c8c:	b003      	add	sp, #12
 8004c8e:	4770      	bx	lr
 8004c90:	2000000c 	.word	0x2000000c
 8004c94:	ffff0208 	.word	0xffff0208

08004c98 <std>:
 8004c98:	2300      	movs	r3, #0
 8004c9a:	b510      	push	{r4, lr}
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8004ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ca6:	6083      	str	r3, [r0, #8]
 8004ca8:	8181      	strh	r1, [r0, #12]
 8004caa:	6643      	str	r3, [r0, #100]	; 0x64
 8004cac:	81c2      	strh	r2, [r0, #14]
 8004cae:	6183      	str	r3, [r0, #24]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	2208      	movs	r2, #8
 8004cb4:	305c      	adds	r0, #92	; 0x5c
 8004cb6:	f7ff ffaf 	bl	8004c18 <memset>
 8004cba:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <std+0x38>)
 8004cbc:	6263      	str	r3, [r4, #36]	; 0x24
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <std+0x3c>)
 8004cc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cc2:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <std+0x40>)
 8004cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cc6:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <std+0x44>)
 8004cc8:	6224      	str	r4, [r4, #32]
 8004cca:	6323      	str	r3, [r4, #48]	; 0x30
 8004ccc:	bd10      	pop	{r4, pc}
 8004cce:	bf00      	nop
 8004cd0:	080057f1 	.word	0x080057f1
 8004cd4:	08005813 	.word	0x08005813
 8004cd8:	0800584b 	.word	0x0800584b
 8004cdc:	0800586f 	.word	0x0800586f

08004ce0 <_cleanup_r>:
 8004ce0:	4901      	ldr	r1, [pc, #4]	; (8004ce8 <_cleanup_r+0x8>)
 8004ce2:	f000 b8af 	b.w	8004e44 <_fwalk_reent>
 8004ce6:	bf00      	nop
 8004ce8:	08005b49 	.word	0x08005b49

08004cec <__sfmoreglue>:
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	1e4a      	subs	r2, r1, #1
 8004cf0:	2568      	movs	r5, #104	; 0x68
 8004cf2:	4355      	muls	r5, r2
 8004cf4:	460e      	mov	r6, r1
 8004cf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004cfa:	f000 f8c5 	bl	8004e88 <_malloc_r>
 8004cfe:	4604      	mov	r4, r0
 8004d00:	b140      	cbz	r0, 8004d14 <__sfmoreglue+0x28>
 8004d02:	2100      	movs	r1, #0
 8004d04:	e9c0 1600 	strd	r1, r6, [r0]
 8004d08:	300c      	adds	r0, #12
 8004d0a:	60a0      	str	r0, [r4, #8]
 8004d0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d10:	f7ff ff82 	bl	8004c18 <memset>
 8004d14:	4620      	mov	r0, r4
 8004d16:	bd70      	pop	{r4, r5, r6, pc}

08004d18 <__sfp_lock_acquire>:
 8004d18:	4801      	ldr	r0, [pc, #4]	; (8004d20 <__sfp_lock_acquire+0x8>)
 8004d1a:	f000 b8b3 	b.w	8004e84 <__retarget_lock_acquire_recursive>
 8004d1e:	bf00      	nop
 8004d20:	200001ec 	.word	0x200001ec

08004d24 <__sfp_lock_release>:
 8004d24:	4801      	ldr	r0, [pc, #4]	; (8004d2c <__sfp_lock_release+0x8>)
 8004d26:	f000 b8ae 	b.w	8004e86 <__retarget_lock_release_recursive>
 8004d2a:	bf00      	nop
 8004d2c:	200001ec 	.word	0x200001ec

08004d30 <__sinit_lock_acquire>:
 8004d30:	4801      	ldr	r0, [pc, #4]	; (8004d38 <__sinit_lock_acquire+0x8>)
 8004d32:	f000 b8a7 	b.w	8004e84 <__retarget_lock_acquire_recursive>
 8004d36:	bf00      	nop
 8004d38:	200001e7 	.word	0x200001e7

08004d3c <__sinit_lock_release>:
 8004d3c:	4801      	ldr	r0, [pc, #4]	; (8004d44 <__sinit_lock_release+0x8>)
 8004d3e:	f000 b8a2 	b.w	8004e86 <__retarget_lock_release_recursive>
 8004d42:	bf00      	nop
 8004d44:	200001e7 	.word	0x200001e7

08004d48 <__sinit>:
 8004d48:	b510      	push	{r4, lr}
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	f7ff fff0 	bl	8004d30 <__sinit_lock_acquire>
 8004d50:	69a3      	ldr	r3, [r4, #24]
 8004d52:	b11b      	cbz	r3, 8004d5c <__sinit+0x14>
 8004d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d58:	f7ff bff0 	b.w	8004d3c <__sinit_lock_release>
 8004d5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d60:	6523      	str	r3, [r4, #80]	; 0x50
 8004d62:	4b13      	ldr	r3, [pc, #76]	; (8004db0 <__sinit+0x68>)
 8004d64:	4a13      	ldr	r2, [pc, #76]	; (8004db4 <__sinit+0x6c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d6a:	42a3      	cmp	r3, r4
 8004d6c:	bf04      	itt	eq
 8004d6e:	2301      	moveq	r3, #1
 8004d70:	61a3      	streq	r3, [r4, #24]
 8004d72:	4620      	mov	r0, r4
 8004d74:	f000 f820 	bl	8004db8 <__sfp>
 8004d78:	6060      	str	r0, [r4, #4]
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f000 f81c 	bl	8004db8 <__sfp>
 8004d80:	60a0      	str	r0, [r4, #8]
 8004d82:	4620      	mov	r0, r4
 8004d84:	f000 f818 	bl	8004db8 <__sfp>
 8004d88:	2200      	movs	r2, #0
 8004d8a:	60e0      	str	r0, [r4, #12]
 8004d8c:	2104      	movs	r1, #4
 8004d8e:	6860      	ldr	r0, [r4, #4]
 8004d90:	f7ff ff82 	bl	8004c98 <std>
 8004d94:	68a0      	ldr	r0, [r4, #8]
 8004d96:	2201      	movs	r2, #1
 8004d98:	2109      	movs	r1, #9
 8004d9a:	f7ff ff7d 	bl	8004c98 <std>
 8004d9e:	68e0      	ldr	r0, [r4, #12]
 8004da0:	2202      	movs	r2, #2
 8004da2:	2112      	movs	r1, #18
 8004da4:	f7ff ff78 	bl	8004c98 <std>
 8004da8:	2301      	movs	r3, #1
 8004daa:	61a3      	str	r3, [r4, #24]
 8004dac:	e7d2      	b.n	8004d54 <__sinit+0xc>
 8004dae:	bf00      	nop
 8004db0:	08005ef8 	.word	0x08005ef8
 8004db4:	08004ce1 	.word	0x08004ce1

08004db8 <__sfp>:
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dba:	4607      	mov	r7, r0
 8004dbc:	f7ff ffac 	bl	8004d18 <__sfp_lock_acquire>
 8004dc0:	4b1e      	ldr	r3, [pc, #120]	; (8004e3c <__sfp+0x84>)
 8004dc2:	681e      	ldr	r6, [r3, #0]
 8004dc4:	69b3      	ldr	r3, [r6, #24]
 8004dc6:	b913      	cbnz	r3, 8004dce <__sfp+0x16>
 8004dc8:	4630      	mov	r0, r6
 8004dca:	f7ff ffbd 	bl	8004d48 <__sinit>
 8004dce:	3648      	adds	r6, #72	; 0x48
 8004dd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	d503      	bpl.n	8004de0 <__sfp+0x28>
 8004dd8:	6833      	ldr	r3, [r6, #0]
 8004dda:	b30b      	cbz	r3, 8004e20 <__sfp+0x68>
 8004ddc:	6836      	ldr	r6, [r6, #0]
 8004dde:	e7f7      	b.n	8004dd0 <__sfp+0x18>
 8004de0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004de4:	b9d5      	cbnz	r5, 8004e1c <__sfp+0x64>
 8004de6:	4b16      	ldr	r3, [pc, #88]	; (8004e40 <__sfp+0x88>)
 8004de8:	60e3      	str	r3, [r4, #12]
 8004dea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004dee:	6665      	str	r5, [r4, #100]	; 0x64
 8004df0:	f000 f847 	bl	8004e82 <__retarget_lock_init_recursive>
 8004df4:	f7ff ff96 	bl	8004d24 <__sfp_lock_release>
 8004df8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004dfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e00:	6025      	str	r5, [r4, #0]
 8004e02:	61a5      	str	r5, [r4, #24]
 8004e04:	2208      	movs	r2, #8
 8004e06:	4629      	mov	r1, r5
 8004e08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e0c:	f7ff ff04 	bl	8004c18 <memset>
 8004e10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e18:	4620      	mov	r0, r4
 8004e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e1c:	3468      	adds	r4, #104	; 0x68
 8004e1e:	e7d9      	b.n	8004dd4 <__sfp+0x1c>
 8004e20:	2104      	movs	r1, #4
 8004e22:	4638      	mov	r0, r7
 8004e24:	f7ff ff62 	bl	8004cec <__sfmoreglue>
 8004e28:	4604      	mov	r4, r0
 8004e2a:	6030      	str	r0, [r6, #0]
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d1d5      	bne.n	8004ddc <__sfp+0x24>
 8004e30:	f7ff ff78 	bl	8004d24 <__sfp_lock_release>
 8004e34:	230c      	movs	r3, #12
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	e7ee      	b.n	8004e18 <__sfp+0x60>
 8004e3a:	bf00      	nop
 8004e3c:	08005ef8 	.word	0x08005ef8
 8004e40:	ffff0001 	.word	0xffff0001

08004e44 <_fwalk_reent>:
 8004e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e48:	4606      	mov	r6, r0
 8004e4a:	4688      	mov	r8, r1
 8004e4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e50:	2700      	movs	r7, #0
 8004e52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e56:	f1b9 0901 	subs.w	r9, r9, #1
 8004e5a:	d505      	bpl.n	8004e68 <_fwalk_reent+0x24>
 8004e5c:	6824      	ldr	r4, [r4, #0]
 8004e5e:	2c00      	cmp	r4, #0
 8004e60:	d1f7      	bne.n	8004e52 <_fwalk_reent+0xe>
 8004e62:	4638      	mov	r0, r7
 8004e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e68:	89ab      	ldrh	r3, [r5, #12]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d907      	bls.n	8004e7e <_fwalk_reent+0x3a>
 8004e6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e72:	3301      	adds	r3, #1
 8004e74:	d003      	beq.n	8004e7e <_fwalk_reent+0x3a>
 8004e76:	4629      	mov	r1, r5
 8004e78:	4630      	mov	r0, r6
 8004e7a:	47c0      	blx	r8
 8004e7c:	4307      	orrs	r7, r0
 8004e7e:	3568      	adds	r5, #104	; 0x68
 8004e80:	e7e9      	b.n	8004e56 <_fwalk_reent+0x12>

08004e82 <__retarget_lock_init_recursive>:
 8004e82:	4770      	bx	lr

08004e84 <__retarget_lock_acquire_recursive>:
 8004e84:	4770      	bx	lr

08004e86 <__retarget_lock_release_recursive>:
 8004e86:	4770      	bx	lr

08004e88 <_malloc_r>:
 8004e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8a:	1ccd      	adds	r5, r1, #3
 8004e8c:	f025 0503 	bic.w	r5, r5, #3
 8004e90:	3508      	adds	r5, #8
 8004e92:	2d0c      	cmp	r5, #12
 8004e94:	bf38      	it	cc
 8004e96:	250c      	movcc	r5, #12
 8004e98:	2d00      	cmp	r5, #0
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	db01      	blt.n	8004ea2 <_malloc_r+0x1a>
 8004e9e:	42a9      	cmp	r1, r5
 8004ea0:	d903      	bls.n	8004eaa <_malloc_r+0x22>
 8004ea2:	230c      	movs	r3, #12
 8004ea4:	6033      	str	r3, [r6, #0]
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eaa:	f000 ff27 	bl	8005cfc <__malloc_lock>
 8004eae:	4921      	ldr	r1, [pc, #132]	; (8004f34 <_malloc_r+0xac>)
 8004eb0:	680a      	ldr	r2, [r1, #0]
 8004eb2:	4614      	mov	r4, r2
 8004eb4:	b99c      	cbnz	r4, 8004ede <_malloc_r+0x56>
 8004eb6:	4f20      	ldr	r7, [pc, #128]	; (8004f38 <_malloc_r+0xb0>)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	b923      	cbnz	r3, 8004ec6 <_malloc_r+0x3e>
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f000 fc86 	bl	80057d0 <_sbrk_r>
 8004ec4:	6038      	str	r0, [r7, #0]
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	4630      	mov	r0, r6
 8004eca:	f000 fc81 	bl	80057d0 <_sbrk_r>
 8004ece:	1c43      	adds	r3, r0, #1
 8004ed0:	d123      	bne.n	8004f1a <_malloc_r+0x92>
 8004ed2:	230c      	movs	r3, #12
 8004ed4:	6033      	str	r3, [r6, #0]
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f000 ff16 	bl	8005d08 <__malloc_unlock>
 8004edc:	e7e3      	b.n	8004ea6 <_malloc_r+0x1e>
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	1b5b      	subs	r3, r3, r5
 8004ee2:	d417      	bmi.n	8004f14 <_malloc_r+0x8c>
 8004ee4:	2b0b      	cmp	r3, #11
 8004ee6:	d903      	bls.n	8004ef0 <_malloc_r+0x68>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	441c      	add	r4, r3
 8004eec:	6025      	str	r5, [r4, #0]
 8004eee:	e004      	b.n	8004efa <_malloc_r+0x72>
 8004ef0:	6863      	ldr	r3, [r4, #4]
 8004ef2:	42a2      	cmp	r2, r4
 8004ef4:	bf0c      	ite	eq
 8004ef6:	600b      	streq	r3, [r1, #0]
 8004ef8:	6053      	strne	r3, [r2, #4]
 8004efa:	4630      	mov	r0, r6
 8004efc:	f000 ff04 	bl	8005d08 <__malloc_unlock>
 8004f00:	f104 000b 	add.w	r0, r4, #11
 8004f04:	1d23      	adds	r3, r4, #4
 8004f06:	f020 0007 	bic.w	r0, r0, #7
 8004f0a:	1ac2      	subs	r2, r0, r3
 8004f0c:	d0cc      	beq.n	8004ea8 <_malloc_r+0x20>
 8004f0e:	1a1b      	subs	r3, r3, r0
 8004f10:	50a3      	str	r3, [r4, r2]
 8004f12:	e7c9      	b.n	8004ea8 <_malloc_r+0x20>
 8004f14:	4622      	mov	r2, r4
 8004f16:	6864      	ldr	r4, [r4, #4]
 8004f18:	e7cc      	b.n	8004eb4 <_malloc_r+0x2c>
 8004f1a:	1cc4      	adds	r4, r0, #3
 8004f1c:	f024 0403 	bic.w	r4, r4, #3
 8004f20:	42a0      	cmp	r0, r4
 8004f22:	d0e3      	beq.n	8004eec <_malloc_r+0x64>
 8004f24:	1a21      	subs	r1, r4, r0
 8004f26:	4630      	mov	r0, r6
 8004f28:	f000 fc52 	bl	80057d0 <_sbrk_r>
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	d1dd      	bne.n	8004eec <_malloc_r+0x64>
 8004f30:	e7cf      	b.n	8004ed2 <_malloc_r+0x4a>
 8004f32:	bf00      	nop
 8004f34:	20000090 	.word	0x20000090
 8004f38:	20000094 	.word	0x20000094

08004f3c <__ssputs_r>:
 8004f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	688e      	ldr	r6, [r1, #8]
 8004f42:	429e      	cmp	r6, r3
 8004f44:	4682      	mov	sl, r0
 8004f46:	460c      	mov	r4, r1
 8004f48:	4690      	mov	r8, r2
 8004f4a:	461f      	mov	r7, r3
 8004f4c:	d838      	bhi.n	8004fc0 <__ssputs_r+0x84>
 8004f4e:	898a      	ldrh	r2, [r1, #12]
 8004f50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f54:	d032      	beq.n	8004fbc <__ssputs_r+0x80>
 8004f56:	6825      	ldr	r5, [r4, #0]
 8004f58:	6909      	ldr	r1, [r1, #16]
 8004f5a:	eba5 0901 	sub.w	r9, r5, r1
 8004f5e:	6965      	ldr	r5, [r4, #20]
 8004f60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f68:	3301      	adds	r3, #1
 8004f6a:	444b      	add	r3, r9
 8004f6c:	106d      	asrs	r5, r5, #1
 8004f6e:	429d      	cmp	r5, r3
 8004f70:	bf38      	it	cc
 8004f72:	461d      	movcc	r5, r3
 8004f74:	0553      	lsls	r3, r2, #21
 8004f76:	d531      	bpl.n	8004fdc <__ssputs_r+0xa0>
 8004f78:	4629      	mov	r1, r5
 8004f7a:	f7ff ff85 	bl	8004e88 <_malloc_r>
 8004f7e:	4606      	mov	r6, r0
 8004f80:	b950      	cbnz	r0, 8004f98 <__ssputs_r+0x5c>
 8004f82:	230c      	movs	r3, #12
 8004f84:	f8ca 3000 	str.w	r3, [sl]
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f8e:	81a3      	strh	r3, [r4, #12]
 8004f90:	f04f 30ff 	mov.w	r0, #4294967295
 8004f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f98:	6921      	ldr	r1, [r4, #16]
 8004f9a:	464a      	mov	r2, r9
 8004f9c:	f000 fe86 	bl	8005cac <memcpy>
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	6126      	str	r6, [r4, #16]
 8004fae:	6165      	str	r5, [r4, #20]
 8004fb0:	444e      	add	r6, r9
 8004fb2:	eba5 0509 	sub.w	r5, r5, r9
 8004fb6:	6026      	str	r6, [r4, #0]
 8004fb8:	60a5      	str	r5, [r4, #8]
 8004fba:	463e      	mov	r6, r7
 8004fbc:	42be      	cmp	r6, r7
 8004fbe:	d900      	bls.n	8004fc2 <__ssputs_r+0x86>
 8004fc0:	463e      	mov	r6, r7
 8004fc2:	4632      	mov	r2, r6
 8004fc4:	6820      	ldr	r0, [r4, #0]
 8004fc6:	4641      	mov	r1, r8
 8004fc8:	f000 fe7e 	bl	8005cc8 <memmove>
 8004fcc:	68a3      	ldr	r3, [r4, #8]
 8004fce:	6822      	ldr	r2, [r4, #0]
 8004fd0:	1b9b      	subs	r3, r3, r6
 8004fd2:	4432      	add	r2, r6
 8004fd4:	60a3      	str	r3, [r4, #8]
 8004fd6:	6022      	str	r2, [r4, #0]
 8004fd8:	2000      	movs	r0, #0
 8004fda:	e7db      	b.n	8004f94 <__ssputs_r+0x58>
 8004fdc:	462a      	mov	r2, r5
 8004fde:	f000 fee9 	bl	8005db4 <_realloc_r>
 8004fe2:	4606      	mov	r6, r0
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	d1e1      	bne.n	8004fac <__ssputs_r+0x70>
 8004fe8:	6921      	ldr	r1, [r4, #16]
 8004fea:	4650      	mov	r0, sl
 8004fec:	f000 fe92 	bl	8005d14 <_free_r>
 8004ff0:	e7c7      	b.n	8004f82 <__ssputs_r+0x46>
	...

08004ff4 <_svfiprintf_r>:
 8004ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff8:	4698      	mov	r8, r3
 8004ffa:	898b      	ldrh	r3, [r1, #12]
 8004ffc:	061b      	lsls	r3, r3, #24
 8004ffe:	b09d      	sub	sp, #116	; 0x74
 8005000:	4607      	mov	r7, r0
 8005002:	460d      	mov	r5, r1
 8005004:	4614      	mov	r4, r2
 8005006:	d50e      	bpl.n	8005026 <_svfiprintf_r+0x32>
 8005008:	690b      	ldr	r3, [r1, #16]
 800500a:	b963      	cbnz	r3, 8005026 <_svfiprintf_r+0x32>
 800500c:	2140      	movs	r1, #64	; 0x40
 800500e:	f7ff ff3b 	bl	8004e88 <_malloc_r>
 8005012:	6028      	str	r0, [r5, #0]
 8005014:	6128      	str	r0, [r5, #16]
 8005016:	b920      	cbnz	r0, 8005022 <_svfiprintf_r+0x2e>
 8005018:	230c      	movs	r3, #12
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	f04f 30ff 	mov.w	r0, #4294967295
 8005020:	e0d1      	b.n	80051c6 <_svfiprintf_r+0x1d2>
 8005022:	2340      	movs	r3, #64	; 0x40
 8005024:	616b      	str	r3, [r5, #20]
 8005026:	2300      	movs	r3, #0
 8005028:	9309      	str	r3, [sp, #36]	; 0x24
 800502a:	2320      	movs	r3, #32
 800502c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005030:	f8cd 800c 	str.w	r8, [sp, #12]
 8005034:	2330      	movs	r3, #48	; 0x30
 8005036:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80051e0 <_svfiprintf_r+0x1ec>
 800503a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800503e:	f04f 0901 	mov.w	r9, #1
 8005042:	4623      	mov	r3, r4
 8005044:	469a      	mov	sl, r3
 8005046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800504a:	b10a      	cbz	r2, 8005050 <_svfiprintf_r+0x5c>
 800504c:	2a25      	cmp	r2, #37	; 0x25
 800504e:	d1f9      	bne.n	8005044 <_svfiprintf_r+0x50>
 8005050:	ebba 0b04 	subs.w	fp, sl, r4
 8005054:	d00b      	beq.n	800506e <_svfiprintf_r+0x7a>
 8005056:	465b      	mov	r3, fp
 8005058:	4622      	mov	r2, r4
 800505a:	4629      	mov	r1, r5
 800505c:	4638      	mov	r0, r7
 800505e:	f7ff ff6d 	bl	8004f3c <__ssputs_r>
 8005062:	3001      	adds	r0, #1
 8005064:	f000 80aa 	beq.w	80051bc <_svfiprintf_r+0x1c8>
 8005068:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800506a:	445a      	add	r2, fp
 800506c:	9209      	str	r2, [sp, #36]	; 0x24
 800506e:	f89a 3000 	ldrb.w	r3, [sl]
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 80a2 	beq.w	80051bc <_svfiprintf_r+0x1c8>
 8005078:	2300      	movs	r3, #0
 800507a:	f04f 32ff 	mov.w	r2, #4294967295
 800507e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005082:	f10a 0a01 	add.w	sl, sl, #1
 8005086:	9304      	str	r3, [sp, #16]
 8005088:	9307      	str	r3, [sp, #28]
 800508a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800508e:	931a      	str	r3, [sp, #104]	; 0x68
 8005090:	4654      	mov	r4, sl
 8005092:	2205      	movs	r2, #5
 8005094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005098:	4851      	ldr	r0, [pc, #324]	; (80051e0 <_svfiprintf_r+0x1ec>)
 800509a:	f7fb f899 	bl	80001d0 <memchr>
 800509e:	9a04      	ldr	r2, [sp, #16]
 80050a0:	b9d8      	cbnz	r0, 80050da <_svfiprintf_r+0xe6>
 80050a2:	06d0      	lsls	r0, r2, #27
 80050a4:	bf44      	itt	mi
 80050a6:	2320      	movmi	r3, #32
 80050a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050ac:	0711      	lsls	r1, r2, #28
 80050ae:	bf44      	itt	mi
 80050b0:	232b      	movmi	r3, #43	; 0x2b
 80050b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050b6:	f89a 3000 	ldrb.w	r3, [sl]
 80050ba:	2b2a      	cmp	r3, #42	; 0x2a
 80050bc:	d015      	beq.n	80050ea <_svfiprintf_r+0xf6>
 80050be:	9a07      	ldr	r2, [sp, #28]
 80050c0:	4654      	mov	r4, sl
 80050c2:	2000      	movs	r0, #0
 80050c4:	f04f 0c0a 	mov.w	ip, #10
 80050c8:	4621      	mov	r1, r4
 80050ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050ce:	3b30      	subs	r3, #48	; 0x30
 80050d0:	2b09      	cmp	r3, #9
 80050d2:	d94e      	bls.n	8005172 <_svfiprintf_r+0x17e>
 80050d4:	b1b0      	cbz	r0, 8005104 <_svfiprintf_r+0x110>
 80050d6:	9207      	str	r2, [sp, #28]
 80050d8:	e014      	b.n	8005104 <_svfiprintf_r+0x110>
 80050da:	eba0 0308 	sub.w	r3, r0, r8
 80050de:	fa09 f303 	lsl.w	r3, r9, r3
 80050e2:	4313      	orrs	r3, r2
 80050e4:	9304      	str	r3, [sp, #16]
 80050e6:	46a2      	mov	sl, r4
 80050e8:	e7d2      	b.n	8005090 <_svfiprintf_r+0x9c>
 80050ea:	9b03      	ldr	r3, [sp, #12]
 80050ec:	1d19      	adds	r1, r3, #4
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	9103      	str	r1, [sp, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	bfbb      	ittet	lt
 80050f6:	425b      	neglt	r3, r3
 80050f8:	f042 0202 	orrlt.w	r2, r2, #2
 80050fc:	9307      	strge	r3, [sp, #28]
 80050fe:	9307      	strlt	r3, [sp, #28]
 8005100:	bfb8      	it	lt
 8005102:	9204      	strlt	r2, [sp, #16]
 8005104:	7823      	ldrb	r3, [r4, #0]
 8005106:	2b2e      	cmp	r3, #46	; 0x2e
 8005108:	d10c      	bne.n	8005124 <_svfiprintf_r+0x130>
 800510a:	7863      	ldrb	r3, [r4, #1]
 800510c:	2b2a      	cmp	r3, #42	; 0x2a
 800510e:	d135      	bne.n	800517c <_svfiprintf_r+0x188>
 8005110:	9b03      	ldr	r3, [sp, #12]
 8005112:	1d1a      	adds	r2, r3, #4
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	9203      	str	r2, [sp, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	bfb8      	it	lt
 800511c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005120:	3402      	adds	r4, #2
 8005122:	9305      	str	r3, [sp, #20]
 8005124:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80051f0 <_svfiprintf_r+0x1fc>
 8005128:	7821      	ldrb	r1, [r4, #0]
 800512a:	2203      	movs	r2, #3
 800512c:	4650      	mov	r0, sl
 800512e:	f7fb f84f 	bl	80001d0 <memchr>
 8005132:	b140      	cbz	r0, 8005146 <_svfiprintf_r+0x152>
 8005134:	2340      	movs	r3, #64	; 0x40
 8005136:	eba0 000a 	sub.w	r0, r0, sl
 800513a:	fa03 f000 	lsl.w	r0, r3, r0
 800513e:	9b04      	ldr	r3, [sp, #16]
 8005140:	4303      	orrs	r3, r0
 8005142:	3401      	adds	r4, #1
 8005144:	9304      	str	r3, [sp, #16]
 8005146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800514a:	4826      	ldr	r0, [pc, #152]	; (80051e4 <_svfiprintf_r+0x1f0>)
 800514c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005150:	2206      	movs	r2, #6
 8005152:	f7fb f83d 	bl	80001d0 <memchr>
 8005156:	2800      	cmp	r0, #0
 8005158:	d038      	beq.n	80051cc <_svfiprintf_r+0x1d8>
 800515a:	4b23      	ldr	r3, [pc, #140]	; (80051e8 <_svfiprintf_r+0x1f4>)
 800515c:	bb1b      	cbnz	r3, 80051a6 <_svfiprintf_r+0x1b2>
 800515e:	9b03      	ldr	r3, [sp, #12]
 8005160:	3307      	adds	r3, #7
 8005162:	f023 0307 	bic.w	r3, r3, #7
 8005166:	3308      	adds	r3, #8
 8005168:	9303      	str	r3, [sp, #12]
 800516a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800516c:	4433      	add	r3, r6
 800516e:	9309      	str	r3, [sp, #36]	; 0x24
 8005170:	e767      	b.n	8005042 <_svfiprintf_r+0x4e>
 8005172:	fb0c 3202 	mla	r2, ip, r2, r3
 8005176:	460c      	mov	r4, r1
 8005178:	2001      	movs	r0, #1
 800517a:	e7a5      	b.n	80050c8 <_svfiprintf_r+0xd4>
 800517c:	2300      	movs	r3, #0
 800517e:	3401      	adds	r4, #1
 8005180:	9305      	str	r3, [sp, #20]
 8005182:	4619      	mov	r1, r3
 8005184:	f04f 0c0a 	mov.w	ip, #10
 8005188:	4620      	mov	r0, r4
 800518a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800518e:	3a30      	subs	r2, #48	; 0x30
 8005190:	2a09      	cmp	r2, #9
 8005192:	d903      	bls.n	800519c <_svfiprintf_r+0x1a8>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0c5      	beq.n	8005124 <_svfiprintf_r+0x130>
 8005198:	9105      	str	r1, [sp, #20]
 800519a:	e7c3      	b.n	8005124 <_svfiprintf_r+0x130>
 800519c:	fb0c 2101 	mla	r1, ip, r1, r2
 80051a0:	4604      	mov	r4, r0
 80051a2:	2301      	movs	r3, #1
 80051a4:	e7f0      	b.n	8005188 <_svfiprintf_r+0x194>
 80051a6:	ab03      	add	r3, sp, #12
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	462a      	mov	r2, r5
 80051ac:	4b0f      	ldr	r3, [pc, #60]	; (80051ec <_svfiprintf_r+0x1f8>)
 80051ae:	a904      	add	r1, sp, #16
 80051b0:	4638      	mov	r0, r7
 80051b2:	f3af 8000 	nop.w
 80051b6:	1c42      	adds	r2, r0, #1
 80051b8:	4606      	mov	r6, r0
 80051ba:	d1d6      	bne.n	800516a <_svfiprintf_r+0x176>
 80051bc:	89ab      	ldrh	r3, [r5, #12]
 80051be:	065b      	lsls	r3, r3, #25
 80051c0:	f53f af2c 	bmi.w	800501c <_svfiprintf_r+0x28>
 80051c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051c6:	b01d      	add	sp, #116	; 0x74
 80051c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051cc:	ab03      	add	r3, sp, #12
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	462a      	mov	r2, r5
 80051d2:	4b06      	ldr	r3, [pc, #24]	; (80051ec <_svfiprintf_r+0x1f8>)
 80051d4:	a904      	add	r1, sp, #16
 80051d6:	4638      	mov	r0, r7
 80051d8:	f000 f9d4 	bl	8005584 <_printf_i>
 80051dc:	e7eb      	b.n	80051b6 <_svfiprintf_r+0x1c2>
 80051de:	bf00      	nop
 80051e0:	08005f5c 	.word	0x08005f5c
 80051e4:	08005f66 	.word	0x08005f66
 80051e8:	00000000 	.word	0x00000000
 80051ec:	08004f3d 	.word	0x08004f3d
 80051f0:	08005f62 	.word	0x08005f62

080051f4 <__sfputc_r>:
 80051f4:	6893      	ldr	r3, [r2, #8]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	b410      	push	{r4}
 80051fc:	6093      	str	r3, [r2, #8]
 80051fe:	da08      	bge.n	8005212 <__sfputc_r+0x1e>
 8005200:	6994      	ldr	r4, [r2, #24]
 8005202:	42a3      	cmp	r3, r4
 8005204:	db01      	blt.n	800520a <__sfputc_r+0x16>
 8005206:	290a      	cmp	r1, #10
 8005208:	d103      	bne.n	8005212 <__sfputc_r+0x1e>
 800520a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800520e:	f000 bb33 	b.w	8005878 <__swbuf_r>
 8005212:	6813      	ldr	r3, [r2, #0]
 8005214:	1c58      	adds	r0, r3, #1
 8005216:	6010      	str	r0, [r2, #0]
 8005218:	7019      	strb	r1, [r3, #0]
 800521a:	4608      	mov	r0, r1
 800521c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005220:	4770      	bx	lr

08005222 <__sfputs_r>:
 8005222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005224:	4606      	mov	r6, r0
 8005226:	460f      	mov	r7, r1
 8005228:	4614      	mov	r4, r2
 800522a:	18d5      	adds	r5, r2, r3
 800522c:	42ac      	cmp	r4, r5
 800522e:	d101      	bne.n	8005234 <__sfputs_r+0x12>
 8005230:	2000      	movs	r0, #0
 8005232:	e007      	b.n	8005244 <__sfputs_r+0x22>
 8005234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005238:	463a      	mov	r2, r7
 800523a:	4630      	mov	r0, r6
 800523c:	f7ff ffda 	bl	80051f4 <__sfputc_r>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d1f3      	bne.n	800522c <__sfputs_r+0xa>
 8005244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005248 <_vfiprintf_r>:
 8005248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524c:	460d      	mov	r5, r1
 800524e:	b09d      	sub	sp, #116	; 0x74
 8005250:	4614      	mov	r4, r2
 8005252:	4698      	mov	r8, r3
 8005254:	4606      	mov	r6, r0
 8005256:	b118      	cbz	r0, 8005260 <_vfiprintf_r+0x18>
 8005258:	6983      	ldr	r3, [r0, #24]
 800525a:	b90b      	cbnz	r3, 8005260 <_vfiprintf_r+0x18>
 800525c:	f7ff fd74 	bl	8004d48 <__sinit>
 8005260:	4b89      	ldr	r3, [pc, #548]	; (8005488 <_vfiprintf_r+0x240>)
 8005262:	429d      	cmp	r5, r3
 8005264:	d11b      	bne.n	800529e <_vfiprintf_r+0x56>
 8005266:	6875      	ldr	r5, [r6, #4]
 8005268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800526a:	07d9      	lsls	r1, r3, #31
 800526c:	d405      	bmi.n	800527a <_vfiprintf_r+0x32>
 800526e:	89ab      	ldrh	r3, [r5, #12]
 8005270:	059a      	lsls	r2, r3, #22
 8005272:	d402      	bmi.n	800527a <_vfiprintf_r+0x32>
 8005274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005276:	f7ff fe05 	bl	8004e84 <__retarget_lock_acquire_recursive>
 800527a:	89ab      	ldrh	r3, [r5, #12]
 800527c:	071b      	lsls	r3, r3, #28
 800527e:	d501      	bpl.n	8005284 <_vfiprintf_r+0x3c>
 8005280:	692b      	ldr	r3, [r5, #16]
 8005282:	b9eb      	cbnz	r3, 80052c0 <_vfiprintf_r+0x78>
 8005284:	4629      	mov	r1, r5
 8005286:	4630      	mov	r0, r6
 8005288:	f000 fb5a 	bl	8005940 <__swsetup_r>
 800528c:	b1c0      	cbz	r0, 80052c0 <_vfiprintf_r+0x78>
 800528e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005290:	07dc      	lsls	r4, r3, #31
 8005292:	d50e      	bpl.n	80052b2 <_vfiprintf_r+0x6a>
 8005294:	f04f 30ff 	mov.w	r0, #4294967295
 8005298:	b01d      	add	sp, #116	; 0x74
 800529a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529e:	4b7b      	ldr	r3, [pc, #492]	; (800548c <_vfiprintf_r+0x244>)
 80052a0:	429d      	cmp	r5, r3
 80052a2:	d101      	bne.n	80052a8 <_vfiprintf_r+0x60>
 80052a4:	68b5      	ldr	r5, [r6, #8]
 80052a6:	e7df      	b.n	8005268 <_vfiprintf_r+0x20>
 80052a8:	4b79      	ldr	r3, [pc, #484]	; (8005490 <_vfiprintf_r+0x248>)
 80052aa:	429d      	cmp	r5, r3
 80052ac:	bf08      	it	eq
 80052ae:	68f5      	ldreq	r5, [r6, #12]
 80052b0:	e7da      	b.n	8005268 <_vfiprintf_r+0x20>
 80052b2:	89ab      	ldrh	r3, [r5, #12]
 80052b4:	0598      	lsls	r0, r3, #22
 80052b6:	d4ed      	bmi.n	8005294 <_vfiprintf_r+0x4c>
 80052b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052ba:	f7ff fde4 	bl	8004e86 <__retarget_lock_release_recursive>
 80052be:	e7e9      	b.n	8005294 <_vfiprintf_r+0x4c>
 80052c0:	2300      	movs	r3, #0
 80052c2:	9309      	str	r3, [sp, #36]	; 0x24
 80052c4:	2320      	movs	r3, #32
 80052c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80052ce:	2330      	movs	r3, #48	; 0x30
 80052d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005494 <_vfiprintf_r+0x24c>
 80052d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052d8:	f04f 0901 	mov.w	r9, #1
 80052dc:	4623      	mov	r3, r4
 80052de:	469a      	mov	sl, r3
 80052e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052e4:	b10a      	cbz	r2, 80052ea <_vfiprintf_r+0xa2>
 80052e6:	2a25      	cmp	r2, #37	; 0x25
 80052e8:	d1f9      	bne.n	80052de <_vfiprintf_r+0x96>
 80052ea:	ebba 0b04 	subs.w	fp, sl, r4
 80052ee:	d00b      	beq.n	8005308 <_vfiprintf_r+0xc0>
 80052f0:	465b      	mov	r3, fp
 80052f2:	4622      	mov	r2, r4
 80052f4:	4629      	mov	r1, r5
 80052f6:	4630      	mov	r0, r6
 80052f8:	f7ff ff93 	bl	8005222 <__sfputs_r>
 80052fc:	3001      	adds	r0, #1
 80052fe:	f000 80aa 	beq.w	8005456 <_vfiprintf_r+0x20e>
 8005302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005304:	445a      	add	r2, fp
 8005306:	9209      	str	r2, [sp, #36]	; 0x24
 8005308:	f89a 3000 	ldrb.w	r3, [sl]
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 80a2 	beq.w	8005456 <_vfiprintf_r+0x20e>
 8005312:	2300      	movs	r3, #0
 8005314:	f04f 32ff 	mov.w	r2, #4294967295
 8005318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800531c:	f10a 0a01 	add.w	sl, sl, #1
 8005320:	9304      	str	r3, [sp, #16]
 8005322:	9307      	str	r3, [sp, #28]
 8005324:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005328:	931a      	str	r3, [sp, #104]	; 0x68
 800532a:	4654      	mov	r4, sl
 800532c:	2205      	movs	r2, #5
 800532e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005332:	4858      	ldr	r0, [pc, #352]	; (8005494 <_vfiprintf_r+0x24c>)
 8005334:	f7fa ff4c 	bl	80001d0 <memchr>
 8005338:	9a04      	ldr	r2, [sp, #16]
 800533a:	b9d8      	cbnz	r0, 8005374 <_vfiprintf_r+0x12c>
 800533c:	06d1      	lsls	r1, r2, #27
 800533e:	bf44      	itt	mi
 8005340:	2320      	movmi	r3, #32
 8005342:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005346:	0713      	lsls	r3, r2, #28
 8005348:	bf44      	itt	mi
 800534a:	232b      	movmi	r3, #43	; 0x2b
 800534c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005350:	f89a 3000 	ldrb.w	r3, [sl]
 8005354:	2b2a      	cmp	r3, #42	; 0x2a
 8005356:	d015      	beq.n	8005384 <_vfiprintf_r+0x13c>
 8005358:	9a07      	ldr	r2, [sp, #28]
 800535a:	4654      	mov	r4, sl
 800535c:	2000      	movs	r0, #0
 800535e:	f04f 0c0a 	mov.w	ip, #10
 8005362:	4621      	mov	r1, r4
 8005364:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005368:	3b30      	subs	r3, #48	; 0x30
 800536a:	2b09      	cmp	r3, #9
 800536c:	d94e      	bls.n	800540c <_vfiprintf_r+0x1c4>
 800536e:	b1b0      	cbz	r0, 800539e <_vfiprintf_r+0x156>
 8005370:	9207      	str	r2, [sp, #28]
 8005372:	e014      	b.n	800539e <_vfiprintf_r+0x156>
 8005374:	eba0 0308 	sub.w	r3, r0, r8
 8005378:	fa09 f303 	lsl.w	r3, r9, r3
 800537c:	4313      	orrs	r3, r2
 800537e:	9304      	str	r3, [sp, #16]
 8005380:	46a2      	mov	sl, r4
 8005382:	e7d2      	b.n	800532a <_vfiprintf_r+0xe2>
 8005384:	9b03      	ldr	r3, [sp, #12]
 8005386:	1d19      	adds	r1, r3, #4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	9103      	str	r1, [sp, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	bfbb      	ittet	lt
 8005390:	425b      	neglt	r3, r3
 8005392:	f042 0202 	orrlt.w	r2, r2, #2
 8005396:	9307      	strge	r3, [sp, #28]
 8005398:	9307      	strlt	r3, [sp, #28]
 800539a:	bfb8      	it	lt
 800539c:	9204      	strlt	r2, [sp, #16]
 800539e:	7823      	ldrb	r3, [r4, #0]
 80053a0:	2b2e      	cmp	r3, #46	; 0x2e
 80053a2:	d10c      	bne.n	80053be <_vfiprintf_r+0x176>
 80053a4:	7863      	ldrb	r3, [r4, #1]
 80053a6:	2b2a      	cmp	r3, #42	; 0x2a
 80053a8:	d135      	bne.n	8005416 <_vfiprintf_r+0x1ce>
 80053aa:	9b03      	ldr	r3, [sp, #12]
 80053ac:	1d1a      	adds	r2, r3, #4
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	9203      	str	r2, [sp, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	bfb8      	it	lt
 80053b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80053ba:	3402      	adds	r4, #2
 80053bc:	9305      	str	r3, [sp, #20]
 80053be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80054a4 <_vfiprintf_r+0x25c>
 80053c2:	7821      	ldrb	r1, [r4, #0]
 80053c4:	2203      	movs	r2, #3
 80053c6:	4650      	mov	r0, sl
 80053c8:	f7fa ff02 	bl	80001d0 <memchr>
 80053cc:	b140      	cbz	r0, 80053e0 <_vfiprintf_r+0x198>
 80053ce:	2340      	movs	r3, #64	; 0x40
 80053d0:	eba0 000a 	sub.w	r0, r0, sl
 80053d4:	fa03 f000 	lsl.w	r0, r3, r0
 80053d8:	9b04      	ldr	r3, [sp, #16]
 80053da:	4303      	orrs	r3, r0
 80053dc:	3401      	adds	r4, #1
 80053de:	9304      	str	r3, [sp, #16]
 80053e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053e4:	482c      	ldr	r0, [pc, #176]	; (8005498 <_vfiprintf_r+0x250>)
 80053e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053ea:	2206      	movs	r2, #6
 80053ec:	f7fa fef0 	bl	80001d0 <memchr>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d03f      	beq.n	8005474 <_vfiprintf_r+0x22c>
 80053f4:	4b29      	ldr	r3, [pc, #164]	; (800549c <_vfiprintf_r+0x254>)
 80053f6:	bb1b      	cbnz	r3, 8005440 <_vfiprintf_r+0x1f8>
 80053f8:	9b03      	ldr	r3, [sp, #12]
 80053fa:	3307      	adds	r3, #7
 80053fc:	f023 0307 	bic.w	r3, r3, #7
 8005400:	3308      	adds	r3, #8
 8005402:	9303      	str	r3, [sp, #12]
 8005404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005406:	443b      	add	r3, r7
 8005408:	9309      	str	r3, [sp, #36]	; 0x24
 800540a:	e767      	b.n	80052dc <_vfiprintf_r+0x94>
 800540c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005410:	460c      	mov	r4, r1
 8005412:	2001      	movs	r0, #1
 8005414:	e7a5      	b.n	8005362 <_vfiprintf_r+0x11a>
 8005416:	2300      	movs	r3, #0
 8005418:	3401      	adds	r4, #1
 800541a:	9305      	str	r3, [sp, #20]
 800541c:	4619      	mov	r1, r3
 800541e:	f04f 0c0a 	mov.w	ip, #10
 8005422:	4620      	mov	r0, r4
 8005424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005428:	3a30      	subs	r2, #48	; 0x30
 800542a:	2a09      	cmp	r2, #9
 800542c:	d903      	bls.n	8005436 <_vfiprintf_r+0x1ee>
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0c5      	beq.n	80053be <_vfiprintf_r+0x176>
 8005432:	9105      	str	r1, [sp, #20]
 8005434:	e7c3      	b.n	80053be <_vfiprintf_r+0x176>
 8005436:	fb0c 2101 	mla	r1, ip, r1, r2
 800543a:	4604      	mov	r4, r0
 800543c:	2301      	movs	r3, #1
 800543e:	e7f0      	b.n	8005422 <_vfiprintf_r+0x1da>
 8005440:	ab03      	add	r3, sp, #12
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	462a      	mov	r2, r5
 8005446:	4b16      	ldr	r3, [pc, #88]	; (80054a0 <_vfiprintf_r+0x258>)
 8005448:	a904      	add	r1, sp, #16
 800544a:	4630      	mov	r0, r6
 800544c:	f3af 8000 	nop.w
 8005450:	4607      	mov	r7, r0
 8005452:	1c78      	adds	r0, r7, #1
 8005454:	d1d6      	bne.n	8005404 <_vfiprintf_r+0x1bc>
 8005456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005458:	07d9      	lsls	r1, r3, #31
 800545a:	d405      	bmi.n	8005468 <_vfiprintf_r+0x220>
 800545c:	89ab      	ldrh	r3, [r5, #12]
 800545e:	059a      	lsls	r2, r3, #22
 8005460:	d402      	bmi.n	8005468 <_vfiprintf_r+0x220>
 8005462:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005464:	f7ff fd0f 	bl	8004e86 <__retarget_lock_release_recursive>
 8005468:	89ab      	ldrh	r3, [r5, #12]
 800546a:	065b      	lsls	r3, r3, #25
 800546c:	f53f af12 	bmi.w	8005294 <_vfiprintf_r+0x4c>
 8005470:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005472:	e711      	b.n	8005298 <_vfiprintf_r+0x50>
 8005474:	ab03      	add	r3, sp, #12
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	462a      	mov	r2, r5
 800547a:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <_vfiprintf_r+0x258>)
 800547c:	a904      	add	r1, sp, #16
 800547e:	4630      	mov	r0, r6
 8005480:	f000 f880 	bl	8005584 <_printf_i>
 8005484:	e7e4      	b.n	8005450 <_vfiprintf_r+0x208>
 8005486:	bf00      	nop
 8005488:	08005f1c 	.word	0x08005f1c
 800548c:	08005f3c 	.word	0x08005f3c
 8005490:	08005efc 	.word	0x08005efc
 8005494:	08005f5c 	.word	0x08005f5c
 8005498:	08005f66 	.word	0x08005f66
 800549c:	00000000 	.word	0x00000000
 80054a0:	08005223 	.word	0x08005223
 80054a4:	08005f62 	.word	0x08005f62

080054a8 <_printf_common>:
 80054a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054ac:	4616      	mov	r6, r2
 80054ae:	4699      	mov	r9, r3
 80054b0:	688a      	ldr	r2, [r1, #8]
 80054b2:	690b      	ldr	r3, [r1, #16]
 80054b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054b8:	4293      	cmp	r3, r2
 80054ba:	bfb8      	it	lt
 80054bc:	4613      	movlt	r3, r2
 80054be:	6033      	str	r3, [r6, #0]
 80054c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054c4:	4607      	mov	r7, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	b10a      	cbz	r2, 80054ce <_printf_common+0x26>
 80054ca:	3301      	adds	r3, #1
 80054cc:	6033      	str	r3, [r6, #0]
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	0699      	lsls	r1, r3, #26
 80054d2:	bf42      	ittt	mi
 80054d4:	6833      	ldrmi	r3, [r6, #0]
 80054d6:	3302      	addmi	r3, #2
 80054d8:	6033      	strmi	r3, [r6, #0]
 80054da:	6825      	ldr	r5, [r4, #0]
 80054dc:	f015 0506 	ands.w	r5, r5, #6
 80054e0:	d106      	bne.n	80054f0 <_printf_common+0x48>
 80054e2:	f104 0a19 	add.w	sl, r4, #25
 80054e6:	68e3      	ldr	r3, [r4, #12]
 80054e8:	6832      	ldr	r2, [r6, #0]
 80054ea:	1a9b      	subs	r3, r3, r2
 80054ec:	42ab      	cmp	r3, r5
 80054ee:	dc26      	bgt.n	800553e <_printf_common+0x96>
 80054f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054f4:	1e13      	subs	r3, r2, #0
 80054f6:	6822      	ldr	r2, [r4, #0]
 80054f8:	bf18      	it	ne
 80054fa:	2301      	movne	r3, #1
 80054fc:	0692      	lsls	r2, r2, #26
 80054fe:	d42b      	bmi.n	8005558 <_printf_common+0xb0>
 8005500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005504:	4649      	mov	r1, r9
 8005506:	4638      	mov	r0, r7
 8005508:	47c0      	blx	r8
 800550a:	3001      	adds	r0, #1
 800550c:	d01e      	beq.n	800554c <_printf_common+0xa4>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	68e5      	ldr	r5, [r4, #12]
 8005512:	6832      	ldr	r2, [r6, #0]
 8005514:	f003 0306 	and.w	r3, r3, #6
 8005518:	2b04      	cmp	r3, #4
 800551a:	bf08      	it	eq
 800551c:	1aad      	subeq	r5, r5, r2
 800551e:	68a3      	ldr	r3, [r4, #8]
 8005520:	6922      	ldr	r2, [r4, #16]
 8005522:	bf0c      	ite	eq
 8005524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005528:	2500      	movne	r5, #0
 800552a:	4293      	cmp	r3, r2
 800552c:	bfc4      	itt	gt
 800552e:	1a9b      	subgt	r3, r3, r2
 8005530:	18ed      	addgt	r5, r5, r3
 8005532:	2600      	movs	r6, #0
 8005534:	341a      	adds	r4, #26
 8005536:	42b5      	cmp	r5, r6
 8005538:	d11a      	bne.n	8005570 <_printf_common+0xc8>
 800553a:	2000      	movs	r0, #0
 800553c:	e008      	b.n	8005550 <_printf_common+0xa8>
 800553e:	2301      	movs	r3, #1
 8005540:	4652      	mov	r2, sl
 8005542:	4649      	mov	r1, r9
 8005544:	4638      	mov	r0, r7
 8005546:	47c0      	blx	r8
 8005548:	3001      	adds	r0, #1
 800554a:	d103      	bne.n	8005554 <_printf_common+0xac>
 800554c:	f04f 30ff 	mov.w	r0, #4294967295
 8005550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005554:	3501      	adds	r5, #1
 8005556:	e7c6      	b.n	80054e6 <_printf_common+0x3e>
 8005558:	18e1      	adds	r1, r4, r3
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	2030      	movs	r0, #48	; 0x30
 800555e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005562:	4422      	add	r2, r4
 8005564:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005568:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800556c:	3302      	adds	r3, #2
 800556e:	e7c7      	b.n	8005500 <_printf_common+0x58>
 8005570:	2301      	movs	r3, #1
 8005572:	4622      	mov	r2, r4
 8005574:	4649      	mov	r1, r9
 8005576:	4638      	mov	r0, r7
 8005578:	47c0      	blx	r8
 800557a:	3001      	adds	r0, #1
 800557c:	d0e6      	beq.n	800554c <_printf_common+0xa4>
 800557e:	3601      	adds	r6, #1
 8005580:	e7d9      	b.n	8005536 <_printf_common+0x8e>
	...

08005584 <_printf_i>:
 8005584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005588:	460c      	mov	r4, r1
 800558a:	4691      	mov	r9, r2
 800558c:	7e27      	ldrb	r7, [r4, #24]
 800558e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005590:	2f78      	cmp	r7, #120	; 0x78
 8005592:	4680      	mov	r8, r0
 8005594:	469a      	mov	sl, r3
 8005596:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800559a:	d807      	bhi.n	80055ac <_printf_i+0x28>
 800559c:	2f62      	cmp	r7, #98	; 0x62
 800559e:	d80a      	bhi.n	80055b6 <_printf_i+0x32>
 80055a0:	2f00      	cmp	r7, #0
 80055a2:	f000 80d8 	beq.w	8005756 <_printf_i+0x1d2>
 80055a6:	2f58      	cmp	r7, #88	; 0x58
 80055a8:	f000 80a3 	beq.w	80056f2 <_printf_i+0x16e>
 80055ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055b4:	e03a      	b.n	800562c <_printf_i+0xa8>
 80055b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055ba:	2b15      	cmp	r3, #21
 80055bc:	d8f6      	bhi.n	80055ac <_printf_i+0x28>
 80055be:	a001      	add	r0, pc, #4	; (adr r0, 80055c4 <_printf_i+0x40>)
 80055c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80055c4:	0800561d 	.word	0x0800561d
 80055c8:	08005631 	.word	0x08005631
 80055cc:	080055ad 	.word	0x080055ad
 80055d0:	080055ad 	.word	0x080055ad
 80055d4:	080055ad 	.word	0x080055ad
 80055d8:	080055ad 	.word	0x080055ad
 80055dc:	08005631 	.word	0x08005631
 80055e0:	080055ad 	.word	0x080055ad
 80055e4:	080055ad 	.word	0x080055ad
 80055e8:	080055ad 	.word	0x080055ad
 80055ec:	080055ad 	.word	0x080055ad
 80055f0:	0800573d 	.word	0x0800573d
 80055f4:	08005661 	.word	0x08005661
 80055f8:	0800571f 	.word	0x0800571f
 80055fc:	080055ad 	.word	0x080055ad
 8005600:	080055ad 	.word	0x080055ad
 8005604:	0800575f 	.word	0x0800575f
 8005608:	080055ad 	.word	0x080055ad
 800560c:	08005661 	.word	0x08005661
 8005610:	080055ad 	.word	0x080055ad
 8005614:	080055ad 	.word	0x080055ad
 8005618:	08005727 	.word	0x08005727
 800561c:	680b      	ldr	r3, [r1, #0]
 800561e:	1d1a      	adds	r2, r3, #4
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	600a      	str	r2, [r1, #0]
 8005624:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800562c:	2301      	movs	r3, #1
 800562e:	e0a3      	b.n	8005778 <_printf_i+0x1f4>
 8005630:	6825      	ldr	r5, [r4, #0]
 8005632:	6808      	ldr	r0, [r1, #0]
 8005634:	062e      	lsls	r6, r5, #24
 8005636:	f100 0304 	add.w	r3, r0, #4
 800563a:	d50a      	bpl.n	8005652 <_printf_i+0xce>
 800563c:	6805      	ldr	r5, [r0, #0]
 800563e:	600b      	str	r3, [r1, #0]
 8005640:	2d00      	cmp	r5, #0
 8005642:	da03      	bge.n	800564c <_printf_i+0xc8>
 8005644:	232d      	movs	r3, #45	; 0x2d
 8005646:	426d      	negs	r5, r5
 8005648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800564c:	485e      	ldr	r0, [pc, #376]	; (80057c8 <_printf_i+0x244>)
 800564e:	230a      	movs	r3, #10
 8005650:	e019      	b.n	8005686 <_printf_i+0x102>
 8005652:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005656:	6805      	ldr	r5, [r0, #0]
 8005658:	600b      	str	r3, [r1, #0]
 800565a:	bf18      	it	ne
 800565c:	b22d      	sxthne	r5, r5
 800565e:	e7ef      	b.n	8005640 <_printf_i+0xbc>
 8005660:	680b      	ldr	r3, [r1, #0]
 8005662:	6825      	ldr	r5, [r4, #0]
 8005664:	1d18      	adds	r0, r3, #4
 8005666:	6008      	str	r0, [r1, #0]
 8005668:	0628      	lsls	r0, r5, #24
 800566a:	d501      	bpl.n	8005670 <_printf_i+0xec>
 800566c:	681d      	ldr	r5, [r3, #0]
 800566e:	e002      	b.n	8005676 <_printf_i+0xf2>
 8005670:	0669      	lsls	r1, r5, #25
 8005672:	d5fb      	bpl.n	800566c <_printf_i+0xe8>
 8005674:	881d      	ldrh	r5, [r3, #0]
 8005676:	4854      	ldr	r0, [pc, #336]	; (80057c8 <_printf_i+0x244>)
 8005678:	2f6f      	cmp	r7, #111	; 0x6f
 800567a:	bf0c      	ite	eq
 800567c:	2308      	moveq	r3, #8
 800567e:	230a      	movne	r3, #10
 8005680:	2100      	movs	r1, #0
 8005682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005686:	6866      	ldr	r6, [r4, #4]
 8005688:	60a6      	str	r6, [r4, #8]
 800568a:	2e00      	cmp	r6, #0
 800568c:	bfa2      	ittt	ge
 800568e:	6821      	ldrge	r1, [r4, #0]
 8005690:	f021 0104 	bicge.w	r1, r1, #4
 8005694:	6021      	strge	r1, [r4, #0]
 8005696:	b90d      	cbnz	r5, 800569c <_printf_i+0x118>
 8005698:	2e00      	cmp	r6, #0
 800569a:	d04d      	beq.n	8005738 <_printf_i+0x1b4>
 800569c:	4616      	mov	r6, r2
 800569e:	fbb5 f1f3 	udiv	r1, r5, r3
 80056a2:	fb03 5711 	mls	r7, r3, r1, r5
 80056a6:	5dc7      	ldrb	r7, [r0, r7]
 80056a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056ac:	462f      	mov	r7, r5
 80056ae:	42bb      	cmp	r3, r7
 80056b0:	460d      	mov	r5, r1
 80056b2:	d9f4      	bls.n	800569e <_printf_i+0x11a>
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d10b      	bne.n	80056d0 <_printf_i+0x14c>
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	07df      	lsls	r7, r3, #31
 80056bc:	d508      	bpl.n	80056d0 <_printf_i+0x14c>
 80056be:	6923      	ldr	r3, [r4, #16]
 80056c0:	6861      	ldr	r1, [r4, #4]
 80056c2:	4299      	cmp	r1, r3
 80056c4:	bfde      	ittt	le
 80056c6:	2330      	movle	r3, #48	; 0x30
 80056c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056d0:	1b92      	subs	r2, r2, r6
 80056d2:	6122      	str	r2, [r4, #16]
 80056d4:	f8cd a000 	str.w	sl, [sp]
 80056d8:	464b      	mov	r3, r9
 80056da:	aa03      	add	r2, sp, #12
 80056dc:	4621      	mov	r1, r4
 80056de:	4640      	mov	r0, r8
 80056e0:	f7ff fee2 	bl	80054a8 <_printf_common>
 80056e4:	3001      	adds	r0, #1
 80056e6:	d14c      	bne.n	8005782 <_printf_i+0x1fe>
 80056e8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ec:	b004      	add	sp, #16
 80056ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f2:	4835      	ldr	r0, [pc, #212]	; (80057c8 <_printf_i+0x244>)
 80056f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	680e      	ldr	r6, [r1, #0]
 80056fc:	061f      	lsls	r7, r3, #24
 80056fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8005702:	600e      	str	r6, [r1, #0]
 8005704:	d514      	bpl.n	8005730 <_printf_i+0x1ac>
 8005706:	07d9      	lsls	r1, r3, #31
 8005708:	bf44      	itt	mi
 800570a:	f043 0320 	orrmi.w	r3, r3, #32
 800570e:	6023      	strmi	r3, [r4, #0]
 8005710:	b91d      	cbnz	r5, 800571a <_printf_i+0x196>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	f023 0320 	bic.w	r3, r3, #32
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	2310      	movs	r3, #16
 800571c:	e7b0      	b.n	8005680 <_printf_i+0xfc>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	f043 0320 	orr.w	r3, r3, #32
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	2378      	movs	r3, #120	; 0x78
 8005728:	4828      	ldr	r0, [pc, #160]	; (80057cc <_printf_i+0x248>)
 800572a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800572e:	e7e3      	b.n	80056f8 <_printf_i+0x174>
 8005730:	065e      	lsls	r6, r3, #25
 8005732:	bf48      	it	mi
 8005734:	b2ad      	uxthmi	r5, r5
 8005736:	e7e6      	b.n	8005706 <_printf_i+0x182>
 8005738:	4616      	mov	r6, r2
 800573a:	e7bb      	b.n	80056b4 <_printf_i+0x130>
 800573c:	680b      	ldr	r3, [r1, #0]
 800573e:	6826      	ldr	r6, [r4, #0]
 8005740:	6960      	ldr	r0, [r4, #20]
 8005742:	1d1d      	adds	r5, r3, #4
 8005744:	600d      	str	r5, [r1, #0]
 8005746:	0635      	lsls	r5, r6, #24
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	d501      	bpl.n	8005750 <_printf_i+0x1cc>
 800574c:	6018      	str	r0, [r3, #0]
 800574e:	e002      	b.n	8005756 <_printf_i+0x1d2>
 8005750:	0671      	lsls	r1, r6, #25
 8005752:	d5fb      	bpl.n	800574c <_printf_i+0x1c8>
 8005754:	8018      	strh	r0, [r3, #0]
 8005756:	2300      	movs	r3, #0
 8005758:	6123      	str	r3, [r4, #16]
 800575a:	4616      	mov	r6, r2
 800575c:	e7ba      	b.n	80056d4 <_printf_i+0x150>
 800575e:	680b      	ldr	r3, [r1, #0]
 8005760:	1d1a      	adds	r2, r3, #4
 8005762:	600a      	str	r2, [r1, #0]
 8005764:	681e      	ldr	r6, [r3, #0]
 8005766:	6862      	ldr	r2, [r4, #4]
 8005768:	2100      	movs	r1, #0
 800576a:	4630      	mov	r0, r6
 800576c:	f7fa fd30 	bl	80001d0 <memchr>
 8005770:	b108      	cbz	r0, 8005776 <_printf_i+0x1f2>
 8005772:	1b80      	subs	r0, r0, r6
 8005774:	6060      	str	r0, [r4, #4]
 8005776:	6863      	ldr	r3, [r4, #4]
 8005778:	6123      	str	r3, [r4, #16]
 800577a:	2300      	movs	r3, #0
 800577c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005780:	e7a8      	b.n	80056d4 <_printf_i+0x150>
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	4632      	mov	r2, r6
 8005786:	4649      	mov	r1, r9
 8005788:	4640      	mov	r0, r8
 800578a:	47d0      	blx	sl
 800578c:	3001      	adds	r0, #1
 800578e:	d0ab      	beq.n	80056e8 <_printf_i+0x164>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	079b      	lsls	r3, r3, #30
 8005794:	d413      	bmi.n	80057be <_printf_i+0x23a>
 8005796:	68e0      	ldr	r0, [r4, #12]
 8005798:	9b03      	ldr	r3, [sp, #12]
 800579a:	4298      	cmp	r0, r3
 800579c:	bfb8      	it	lt
 800579e:	4618      	movlt	r0, r3
 80057a0:	e7a4      	b.n	80056ec <_printf_i+0x168>
 80057a2:	2301      	movs	r3, #1
 80057a4:	4632      	mov	r2, r6
 80057a6:	4649      	mov	r1, r9
 80057a8:	4640      	mov	r0, r8
 80057aa:	47d0      	blx	sl
 80057ac:	3001      	adds	r0, #1
 80057ae:	d09b      	beq.n	80056e8 <_printf_i+0x164>
 80057b0:	3501      	adds	r5, #1
 80057b2:	68e3      	ldr	r3, [r4, #12]
 80057b4:	9903      	ldr	r1, [sp, #12]
 80057b6:	1a5b      	subs	r3, r3, r1
 80057b8:	42ab      	cmp	r3, r5
 80057ba:	dcf2      	bgt.n	80057a2 <_printf_i+0x21e>
 80057bc:	e7eb      	b.n	8005796 <_printf_i+0x212>
 80057be:	2500      	movs	r5, #0
 80057c0:	f104 0619 	add.w	r6, r4, #25
 80057c4:	e7f5      	b.n	80057b2 <_printf_i+0x22e>
 80057c6:	bf00      	nop
 80057c8:	08005f6d 	.word	0x08005f6d
 80057cc:	08005f7e 	.word	0x08005f7e

080057d0 <_sbrk_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4d06      	ldr	r5, [pc, #24]	; (80057ec <_sbrk_r+0x1c>)
 80057d4:	2300      	movs	r3, #0
 80057d6:	4604      	mov	r4, r0
 80057d8:	4608      	mov	r0, r1
 80057da:	602b      	str	r3, [r5, #0]
 80057dc:	f7fb f86e 	bl	80008bc <_sbrk>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d102      	bne.n	80057ea <_sbrk_r+0x1a>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	b103      	cbz	r3, 80057ea <_sbrk_r+0x1a>
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	bd38      	pop	{r3, r4, r5, pc}
 80057ec:	200001f0 	.word	0x200001f0

080057f0 <__sread>:
 80057f0:	b510      	push	{r4, lr}
 80057f2:	460c      	mov	r4, r1
 80057f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f8:	f000 fb02 	bl	8005e00 <_read_r>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	bfab      	itete	ge
 8005800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005802:	89a3      	ldrhlt	r3, [r4, #12]
 8005804:	181b      	addge	r3, r3, r0
 8005806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800580a:	bfac      	ite	ge
 800580c:	6563      	strge	r3, [r4, #84]	; 0x54
 800580e:	81a3      	strhlt	r3, [r4, #12]
 8005810:	bd10      	pop	{r4, pc}

08005812 <__swrite>:
 8005812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005816:	461f      	mov	r7, r3
 8005818:	898b      	ldrh	r3, [r1, #12]
 800581a:	05db      	lsls	r3, r3, #23
 800581c:	4605      	mov	r5, r0
 800581e:	460c      	mov	r4, r1
 8005820:	4616      	mov	r6, r2
 8005822:	d505      	bpl.n	8005830 <__swrite+0x1e>
 8005824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005828:	2302      	movs	r3, #2
 800582a:	2200      	movs	r2, #0
 800582c:	f000 f9c8 	bl	8005bc0 <_lseek_r>
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800583a:	81a3      	strh	r3, [r4, #12]
 800583c:	4632      	mov	r2, r6
 800583e:	463b      	mov	r3, r7
 8005840:	4628      	mov	r0, r5
 8005842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005846:	f000 b869 	b.w	800591c <_write_r>

0800584a <__sseek>:
 800584a:	b510      	push	{r4, lr}
 800584c:	460c      	mov	r4, r1
 800584e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005852:	f000 f9b5 	bl	8005bc0 <_lseek_r>
 8005856:	1c43      	adds	r3, r0, #1
 8005858:	89a3      	ldrh	r3, [r4, #12]
 800585a:	bf15      	itete	ne
 800585c:	6560      	strne	r0, [r4, #84]	; 0x54
 800585e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005866:	81a3      	strheq	r3, [r4, #12]
 8005868:	bf18      	it	ne
 800586a:	81a3      	strhne	r3, [r4, #12]
 800586c:	bd10      	pop	{r4, pc}

0800586e <__sclose>:
 800586e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005872:	f000 b8d3 	b.w	8005a1c <_close_r>
	...

08005878 <__swbuf_r>:
 8005878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587a:	460e      	mov	r6, r1
 800587c:	4614      	mov	r4, r2
 800587e:	4605      	mov	r5, r0
 8005880:	b118      	cbz	r0, 800588a <__swbuf_r+0x12>
 8005882:	6983      	ldr	r3, [r0, #24]
 8005884:	b90b      	cbnz	r3, 800588a <__swbuf_r+0x12>
 8005886:	f7ff fa5f 	bl	8004d48 <__sinit>
 800588a:	4b21      	ldr	r3, [pc, #132]	; (8005910 <__swbuf_r+0x98>)
 800588c:	429c      	cmp	r4, r3
 800588e:	d12b      	bne.n	80058e8 <__swbuf_r+0x70>
 8005890:	686c      	ldr	r4, [r5, #4]
 8005892:	69a3      	ldr	r3, [r4, #24]
 8005894:	60a3      	str	r3, [r4, #8]
 8005896:	89a3      	ldrh	r3, [r4, #12]
 8005898:	071a      	lsls	r2, r3, #28
 800589a:	d52f      	bpl.n	80058fc <__swbuf_r+0x84>
 800589c:	6923      	ldr	r3, [r4, #16]
 800589e:	b36b      	cbz	r3, 80058fc <__swbuf_r+0x84>
 80058a0:	6923      	ldr	r3, [r4, #16]
 80058a2:	6820      	ldr	r0, [r4, #0]
 80058a4:	1ac0      	subs	r0, r0, r3
 80058a6:	6963      	ldr	r3, [r4, #20]
 80058a8:	b2f6      	uxtb	r6, r6
 80058aa:	4283      	cmp	r3, r0
 80058ac:	4637      	mov	r7, r6
 80058ae:	dc04      	bgt.n	80058ba <__swbuf_r+0x42>
 80058b0:	4621      	mov	r1, r4
 80058b2:	4628      	mov	r0, r5
 80058b4:	f000 f948 	bl	8005b48 <_fflush_r>
 80058b8:	bb30      	cbnz	r0, 8005908 <__swbuf_r+0x90>
 80058ba:	68a3      	ldr	r3, [r4, #8]
 80058bc:	3b01      	subs	r3, #1
 80058be:	60a3      	str	r3, [r4, #8]
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	6022      	str	r2, [r4, #0]
 80058c6:	701e      	strb	r6, [r3, #0]
 80058c8:	6963      	ldr	r3, [r4, #20]
 80058ca:	3001      	adds	r0, #1
 80058cc:	4283      	cmp	r3, r0
 80058ce:	d004      	beq.n	80058da <__swbuf_r+0x62>
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	07db      	lsls	r3, r3, #31
 80058d4:	d506      	bpl.n	80058e4 <__swbuf_r+0x6c>
 80058d6:	2e0a      	cmp	r6, #10
 80058d8:	d104      	bne.n	80058e4 <__swbuf_r+0x6c>
 80058da:	4621      	mov	r1, r4
 80058dc:	4628      	mov	r0, r5
 80058de:	f000 f933 	bl	8005b48 <_fflush_r>
 80058e2:	b988      	cbnz	r0, 8005908 <__swbuf_r+0x90>
 80058e4:	4638      	mov	r0, r7
 80058e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <__swbuf_r+0x9c>)
 80058ea:	429c      	cmp	r4, r3
 80058ec:	d101      	bne.n	80058f2 <__swbuf_r+0x7a>
 80058ee:	68ac      	ldr	r4, [r5, #8]
 80058f0:	e7cf      	b.n	8005892 <__swbuf_r+0x1a>
 80058f2:	4b09      	ldr	r3, [pc, #36]	; (8005918 <__swbuf_r+0xa0>)
 80058f4:	429c      	cmp	r4, r3
 80058f6:	bf08      	it	eq
 80058f8:	68ec      	ldreq	r4, [r5, #12]
 80058fa:	e7ca      	b.n	8005892 <__swbuf_r+0x1a>
 80058fc:	4621      	mov	r1, r4
 80058fe:	4628      	mov	r0, r5
 8005900:	f000 f81e 	bl	8005940 <__swsetup_r>
 8005904:	2800      	cmp	r0, #0
 8005906:	d0cb      	beq.n	80058a0 <__swbuf_r+0x28>
 8005908:	f04f 37ff 	mov.w	r7, #4294967295
 800590c:	e7ea      	b.n	80058e4 <__swbuf_r+0x6c>
 800590e:	bf00      	nop
 8005910:	08005f1c 	.word	0x08005f1c
 8005914:	08005f3c 	.word	0x08005f3c
 8005918:	08005efc 	.word	0x08005efc

0800591c <_write_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	4d07      	ldr	r5, [pc, #28]	; (800593c <_write_r+0x20>)
 8005920:	4604      	mov	r4, r0
 8005922:	4608      	mov	r0, r1
 8005924:	4611      	mov	r1, r2
 8005926:	2200      	movs	r2, #0
 8005928:	602a      	str	r2, [r5, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	f7fa ff75 	bl	800081a <_write>
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	d102      	bne.n	800593a <_write_r+0x1e>
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	b103      	cbz	r3, 800593a <_write_r+0x1e>
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	bd38      	pop	{r3, r4, r5, pc}
 800593c:	200001f0 	.word	0x200001f0

08005940 <__swsetup_r>:
 8005940:	4b32      	ldr	r3, [pc, #200]	; (8005a0c <__swsetup_r+0xcc>)
 8005942:	b570      	push	{r4, r5, r6, lr}
 8005944:	681d      	ldr	r5, [r3, #0]
 8005946:	4606      	mov	r6, r0
 8005948:	460c      	mov	r4, r1
 800594a:	b125      	cbz	r5, 8005956 <__swsetup_r+0x16>
 800594c:	69ab      	ldr	r3, [r5, #24]
 800594e:	b913      	cbnz	r3, 8005956 <__swsetup_r+0x16>
 8005950:	4628      	mov	r0, r5
 8005952:	f7ff f9f9 	bl	8004d48 <__sinit>
 8005956:	4b2e      	ldr	r3, [pc, #184]	; (8005a10 <__swsetup_r+0xd0>)
 8005958:	429c      	cmp	r4, r3
 800595a:	d10f      	bne.n	800597c <__swsetup_r+0x3c>
 800595c:	686c      	ldr	r4, [r5, #4]
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005964:	0719      	lsls	r1, r3, #28
 8005966:	d42c      	bmi.n	80059c2 <__swsetup_r+0x82>
 8005968:	06dd      	lsls	r5, r3, #27
 800596a:	d411      	bmi.n	8005990 <__swsetup_r+0x50>
 800596c:	2309      	movs	r3, #9
 800596e:	6033      	str	r3, [r6, #0]
 8005970:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	f04f 30ff 	mov.w	r0, #4294967295
 800597a:	e03e      	b.n	80059fa <__swsetup_r+0xba>
 800597c:	4b25      	ldr	r3, [pc, #148]	; (8005a14 <__swsetup_r+0xd4>)
 800597e:	429c      	cmp	r4, r3
 8005980:	d101      	bne.n	8005986 <__swsetup_r+0x46>
 8005982:	68ac      	ldr	r4, [r5, #8]
 8005984:	e7eb      	b.n	800595e <__swsetup_r+0x1e>
 8005986:	4b24      	ldr	r3, [pc, #144]	; (8005a18 <__swsetup_r+0xd8>)
 8005988:	429c      	cmp	r4, r3
 800598a:	bf08      	it	eq
 800598c:	68ec      	ldreq	r4, [r5, #12]
 800598e:	e7e6      	b.n	800595e <__swsetup_r+0x1e>
 8005990:	0758      	lsls	r0, r3, #29
 8005992:	d512      	bpl.n	80059ba <__swsetup_r+0x7a>
 8005994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005996:	b141      	cbz	r1, 80059aa <__swsetup_r+0x6a>
 8005998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800599c:	4299      	cmp	r1, r3
 800599e:	d002      	beq.n	80059a6 <__swsetup_r+0x66>
 80059a0:	4630      	mov	r0, r6
 80059a2:	f000 f9b7 	bl	8005d14 <_free_r>
 80059a6:	2300      	movs	r3, #0
 80059a8:	6363      	str	r3, [r4, #52]	; 0x34
 80059aa:	89a3      	ldrh	r3, [r4, #12]
 80059ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059b0:	81a3      	strh	r3, [r4, #12]
 80059b2:	2300      	movs	r3, #0
 80059b4:	6063      	str	r3, [r4, #4]
 80059b6:	6923      	ldr	r3, [r4, #16]
 80059b8:	6023      	str	r3, [r4, #0]
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	f043 0308 	orr.w	r3, r3, #8
 80059c0:	81a3      	strh	r3, [r4, #12]
 80059c2:	6923      	ldr	r3, [r4, #16]
 80059c4:	b94b      	cbnz	r3, 80059da <__swsetup_r+0x9a>
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d0:	d003      	beq.n	80059da <__swsetup_r+0x9a>
 80059d2:	4621      	mov	r1, r4
 80059d4:	4630      	mov	r0, r6
 80059d6:	f000 f929 	bl	8005c2c <__smakebuf_r>
 80059da:	89a0      	ldrh	r0, [r4, #12]
 80059dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059e0:	f010 0301 	ands.w	r3, r0, #1
 80059e4:	d00a      	beq.n	80059fc <__swsetup_r+0xbc>
 80059e6:	2300      	movs	r3, #0
 80059e8:	60a3      	str	r3, [r4, #8]
 80059ea:	6963      	ldr	r3, [r4, #20]
 80059ec:	425b      	negs	r3, r3
 80059ee:	61a3      	str	r3, [r4, #24]
 80059f0:	6923      	ldr	r3, [r4, #16]
 80059f2:	b943      	cbnz	r3, 8005a06 <__swsetup_r+0xc6>
 80059f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059f8:	d1ba      	bne.n	8005970 <__swsetup_r+0x30>
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
 80059fc:	0781      	lsls	r1, r0, #30
 80059fe:	bf58      	it	pl
 8005a00:	6963      	ldrpl	r3, [r4, #20]
 8005a02:	60a3      	str	r3, [r4, #8]
 8005a04:	e7f4      	b.n	80059f0 <__swsetup_r+0xb0>
 8005a06:	2000      	movs	r0, #0
 8005a08:	e7f7      	b.n	80059fa <__swsetup_r+0xba>
 8005a0a:	bf00      	nop
 8005a0c:	2000000c 	.word	0x2000000c
 8005a10:	08005f1c 	.word	0x08005f1c
 8005a14:	08005f3c 	.word	0x08005f3c
 8005a18:	08005efc 	.word	0x08005efc

08005a1c <_close_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4d06      	ldr	r5, [pc, #24]	; (8005a38 <_close_r+0x1c>)
 8005a20:	2300      	movs	r3, #0
 8005a22:	4604      	mov	r4, r0
 8005a24:	4608      	mov	r0, r1
 8005a26:	602b      	str	r3, [r5, #0]
 8005a28:	f7fa ff13 	bl	8000852 <_close>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d102      	bne.n	8005a36 <_close_r+0x1a>
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	b103      	cbz	r3, 8005a36 <_close_r+0x1a>
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	bd38      	pop	{r3, r4, r5, pc}
 8005a38:	200001f0 	.word	0x200001f0

08005a3c <__sflush_r>:
 8005a3c:	898a      	ldrh	r2, [r1, #12]
 8005a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a42:	4605      	mov	r5, r0
 8005a44:	0710      	lsls	r0, r2, #28
 8005a46:	460c      	mov	r4, r1
 8005a48:	d458      	bmi.n	8005afc <__sflush_r+0xc0>
 8005a4a:	684b      	ldr	r3, [r1, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	dc05      	bgt.n	8005a5c <__sflush_r+0x20>
 8005a50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	dc02      	bgt.n	8005a5c <__sflush_r+0x20>
 8005a56:	2000      	movs	r0, #0
 8005a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a5e:	2e00      	cmp	r6, #0
 8005a60:	d0f9      	beq.n	8005a56 <__sflush_r+0x1a>
 8005a62:	2300      	movs	r3, #0
 8005a64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a68:	682f      	ldr	r7, [r5, #0]
 8005a6a:	602b      	str	r3, [r5, #0]
 8005a6c:	d032      	beq.n	8005ad4 <__sflush_r+0x98>
 8005a6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	075a      	lsls	r2, r3, #29
 8005a74:	d505      	bpl.n	8005a82 <__sflush_r+0x46>
 8005a76:	6863      	ldr	r3, [r4, #4]
 8005a78:	1ac0      	subs	r0, r0, r3
 8005a7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a7c:	b10b      	cbz	r3, 8005a82 <__sflush_r+0x46>
 8005a7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a80:	1ac0      	subs	r0, r0, r3
 8005a82:	2300      	movs	r3, #0
 8005a84:	4602      	mov	r2, r0
 8005a86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a88:	6a21      	ldr	r1, [r4, #32]
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	47b0      	blx	r6
 8005a8e:	1c43      	adds	r3, r0, #1
 8005a90:	89a3      	ldrh	r3, [r4, #12]
 8005a92:	d106      	bne.n	8005aa2 <__sflush_r+0x66>
 8005a94:	6829      	ldr	r1, [r5, #0]
 8005a96:	291d      	cmp	r1, #29
 8005a98:	d82c      	bhi.n	8005af4 <__sflush_r+0xb8>
 8005a9a:	4a2a      	ldr	r2, [pc, #168]	; (8005b44 <__sflush_r+0x108>)
 8005a9c:	40ca      	lsrs	r2, r1
 8005a9e:	07d6      	lsls	r6, r2, #31
 8005aa0:	d528      	bpl.n	8005af4 <__sflush_r+0xb8>
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	6062      	str	r2, [r4, #4]
 8005aa6:	04d9      	lsls	r1, r3, #19
 8005aa8:	6922      	ldr	r2, [r4, #16]
 8005aaa:	6022      	str	r2, [r4, #0]
 8005aac:	d504      	bpl.n	8005ab8 <__sflush_r+0x7c>
 8005aae:	1c42      	adds	r2, r0, #1
 8005ab0:	d101      	bne.n	8005ab6 <__sflush_r+0x7a>
 8005ab2:	682b      	ldr	r3, [r5, #0]
 8005ab4:	b903      	cbnz	r3, 8005ab8 <__sflush_r+0x7c>
 8005ab6:	6560      	str	r0, [r4, #84]	; 0x54
 8005ab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aba:	602f      	str	r7, [r5, #0]
 8005abc:	2900      	cmp	r1, #0
 8005abe:	d0ca      	beq.n	8005a56 <__sflush_r+0x1a>
 8005ac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ac4:	4299      	cmp	r1, r3
 8005ac6:	d002      	beq.n	8005ace <__sflush_r+0x92>
 8005ac8:	4628      	mov	r0, r5
 8005aca:	f000 f923 	bl	8005d14 <_free_r>
 8005ace:	2000      	movs	r0, #0
 8005ad0:	6360      	str	r0, [r4, #52]	; 0x34
 8005ad2:	e7c1      	b.n	8005a58 <__sflush_r+0x1c>
 8005ad4:	6a21      	ldr	r1, [r4, #32]
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	4628      	mov	r0, r5
 8005ada:	47b0      	blx	r6
 8005adc:	1c41      	adds	r1, r0, #1
 8005ade:	d1c7      	bne.n	8005a70 <__sflush_r+0x34>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0c4      	beq.n	8005a70 <__sflush_r+0x34>
 8005ae6:	2b1d      	cmp	r3, #29
 8005ae8:	d001      	beq.n	8005aee <__sflush_r+0xb2>
 8005aea:	2b16      	cmp	r3, #22
 8005aec:	d101      	bne.n	8005af2 <__sflush_r+0xb6>
 8005aee:	602f      	str	r7, [r5, #0]
 8005af0:	e7b1      	b.n	8005a56 <__sflush_r+0x1a>
 8005af2:	89a3      	ldrh	r3, [r4, #12]
 8005af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005af8:	81a3      	strh	r3, [r4, #12]
 8005afa:	e7ad      	b.n	8005a58 <__sflush_r+0x1c>
 8005afc:	690f      	ldr	r7, [r1, #16]
 8005afe:	2f00      	cmp	r7, #0
 8005b00:	d0a9      	beq.n	8005a56 <__sflush_r+0x1a>
 8005b02:	0793      	lsls	r3, r2, #30
 8005b04:	680e      	ldr	r6, [r1, #0]
 8005b06:	bf08      	it	eq
 8005b08:	694b      	ldreq	r3, [r1, #20]
 8005b0a:	600f      	str	r7, [r1, #0]
 8005b0c:	bf18      	it	ne
 8005b0e:	2300      	movne	r3, #0
 8005b10:	eba6 0807 	sub.w	r8, r6, r7
 8005b14:	608b      	str	r3, [r1, #8]
 8005b16:	f1b8 0f00 	cmp.w	r8, #0
 8005b1a:	dd9c      	ble.n	8005a56 <__sflush_r+0x1a>
 8005b1c:	6a21      	ldr	r1, [r4, #32]
 8005b1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b20:	4643      	mov	r3, r8
 8005b22:	463a      	mov	r2, r7
 8005b24:	4628      	mov	r0, r5
 8005b26:	47b0      	blx	r6
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	dc06      	bgt.n	8005b3a <__sflush_r+0xfe>
 8005b2c:	89a3      	ldrh	r3, [r4, #12]
 8005b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b32:	81a3      	strh	r3, [r4, #12]
 8005b34:	f04f 30ff 	mov.w	r0, #4294967295
 8005b38:	e78e      	b.n	8005a58 <__sflush_r+0x1c>
 8005b3a:	4407      	add	r7, r0
 8005b3c:	eba8 0800 	sub.w	r8, r8, r0
 8005b40:	e7e9      	b.n	8005b16 <__sflush_r+0xda>
 8005b42:	bf00      	nop
 8005b44:	20400001 	.word	0x20400001

08005b48 <_fflush_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	690b      	ldr	r3, [r1, #16]
 8005b4c:	4605      	mov	r5, r0
 8005b4e:	460c      	mov	r4, r1
 8005b50:	b913      	cbnz	r3, 8005b58 <_fflush_r+0x10>
 8005b52:	2500      	movs	r5, #0
 8005b54:	4628      	mov	r0, r5
 8005b56:	bd38      	pop	{r3, r4, r5, pc}
 8005b58:	b118      	cbz	r0, 8005b62 <_fflush_r+0x1a>
 8005b5a:	6983      	ldr	r3, [r0, #24]
 8005b5c:	b90b      	cbnz	r3, 8005b62 <_fflush_r+0x1a>
 8005b5e:	f7ff f8f3 	bl	8004d48 <__sinit>
 8005b62:	4b14      	ldr	r3, [pc, #80]	; (8005bb4 <_fflush_r+0x6c>)
 8005b64:	429c      	cmp	r4, r3
 8005b66:	d11b      	bne.n	8005ba0 <_fflush_r+0x58>
 8005b68:	686c      	ldr	r4, [r5, #4]
 8005b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0ef      	beq.n	8005b52 <_fflush_r+0xa>
 8005b72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b74:	07d0      	lsls	r0, r2, #31
 8005b76:	d404      	bmi.n	8005b82 <_fflush_r+0x3a>
 8005b78:	0599      	lsls	r1, r3, #22
 8005b7a:	d402      	bmi.n	8005b82 <_fflush_r+0x3a>
 8005b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b7e:	f7ff f981 	bl	8004e84 <__retarget_lock_acquire_recursive>
 8005b82:	4628      	mov	r0, r5
 8005b84:	4621      	mov	r1, r4
 8005b86:	f7ff ff59 	bl	8005a3c <__sflush_r>
 8005b8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b8c:	07da      	lsls	r2, r3, #31
 8005b8e:	4605      	mov	r5, r0
 8005b90:	d4e0      	bmi.n	8005b54 <_fflush_r+0xc>
 8005b92:	89a3      	ldrh	r3, [r4, #12]
 8005b94:	059b      	lsls	r3, r3, #22
 8005b96:	d4dd      	bmi.n	8005b54 <_fflush_r+0xc>
 8005b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b9a:	f7ff f974 	bl	8004e86 <__retarget_lock_release_recursive>
 8005b9e:	e7d9      	b.n	8005b54 <_fflush_r+0xc>
 8005ba0:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <_fflush_r+0x70>)
 8005ba2:	429c      	cmp	r4, r3
 8005ba4:	d101      	bne.n	8005baa <_fflush_r+0x62>
 8005ba6:	68ac      	ldr	r4, [r5, #8]
 8005ba8:	e7df      	b.n	8005b6a <_fflush_r+0x22>
 8005baa:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <_fflush_r+0x74>)
 8005bac:	429c      	cmp	r4, r3
 8005bae:	bf08      	it	eq
 8005bb0:	68ec      	ldreq	r4, [r5, #12]
 8005bb2:	e7da      	b.n	8005b6a <_fflush_r+0x22>
 8005bb4:	08005f1c 	.word	0x08005f1c
 8005bb8:	08005f3c 	.word	0x08005f3c
 8005bbc:	08005efc 	.word	0x08005efc

08005bc0 <_lseek_r>:
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4d07      	ldr	r5, [pc, #28]	; (8005be0 <_lseek_r+0x20>)
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	4608      	mov	r0, r1
 8005bc8:	4611      	mov	r1, r2
 8005bca:	2200      	movs	r2, #0
 8005bcc:	602a      	str	r2, [r5, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f7fa fe66 	bl	80008a0 <_lseek>
 8005bd4:	1c43      	adds	r3, r0, #1
 8005bd6:	d102      	bne.n	8005bde <_lseek_r+0x1e>
 8005bd8:	682b      	ldr	r3, [r5, #0]
 8005bda:	b103      	cbz	r3, 8005bde <_lseek_r+0x1e>
 8005bdc:	6023      	str	r3, [r4, #0]
 8005bde:	bd38      	pop	{r3, r4, r5, pc}
 8005be0:	200001f0 	.word	0x200001f0

08005be4 <__swhatbuf_r>:
 8005be4:	b570      	push	{r4, r5, r6, lr}
 8005be6:	460e      	mov	r6, r1
 8005be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bec:	2900      	cmp	r1, #0
 8005bee:	b096      	sub	sp, #88	; 0x58
 8005bf0:	4614      	mov	r4, r2
 8005bf2:	461d      	mov	r5, r3
 8005bf4:	da07      	bge.n	8005c06 <__swhatbuf_r+0x22>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	602b      	str	r3, [r5, #0]
 8005bfa:	89b3      	ldrh	r3, [r6, #12]
 8005bfc:	061a      	lsls	r2, r3, #24
 8005bfe:	d410      	bmi.n	8005c22 <__swhatbuf_r+0x3e>
 8005c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c04:	e00e      	b.n	8005c24 <__swhatbuf_r+0x40>
 8005c06:	466a      	mov	r2, sp
 8005c08:	f000 f90c 	bl	8005e24 <_fstat_r>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	dbf2      	blt.n	8005bf6 <__swhatbuf_r+0x12>
 8005c10:	9a01      	ldr	r2, [sp, #4]
 8005c12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c1a:	425a      	negs	r2, r3
 8005c1c:	415a      	adcs	r2, r3
 8005c1e:	602a      	str	r2, [r5, #0]
 8005c20:	e7ee      	b.n	8005c00 <__swhatbuf_r+0x1c>
 8005c22:	2340      	movs	r3, #64	; 0x40
 8005c24:	2000      	movs	r0, #0
 8005c26:	6023      	str	r3, [r4, #0]
 8005c28:	b016      	add	sp, #88	; 0x58
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}

08005c2c <__smakebuf_r>:
 8005c2c:	898b      	ldrh	r3, [r1, #12]
 8005c2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c30:	079d      	lsls	r5, r3, #30
 8005c32:	4606      	mov	r6, r0
 8005c34:	460c      	mov	r4, r1
 8005c36:	d507      	bpl.n	8005c48 <__smakebuf_r+0x1c>
 8005c38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	6123      	str	r3, [r4, #16]
 8005c40:	2301      	movs	r3, #1
 8005c42:	6163      	str	r3, [r4, #20]
 8005c44:	b002      	add	sp, #8
 8005c46:	bd70      	pop	{r4, r5, r6, pc}
 8005c48:	ab01      	add	r3, sp, #4
 8005c4a:	466a      	mov	r2, sp
 8005c4c:	f7ff ffca 	bl	8005be4 <__swhatbuf_r>
 8005c50:	9900      	ldr	r1, [sp, #0]
 8005c52:	4605      	mov	r5, r0
 8005c54:	4630      	mov	r0, r6
 8005c56:	f7ff f917 	bl	8004e88 <_malloc_r>
 8005c5a:	b948      	cbnz	r0, 8005c70 <__smakebuf_r+0x44>
 8005c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c60:	059a      	lsls	r2, r3, #22
 8005c62:	d4ef      	bmi.n	8005c44 <__smakebuf_r+0x18>
 8005c64:	f023 0303 	bic.w	r3, r3, #3
 8005c68:	f043 0302 	orr.w	r3, r3, #2
 8005c6c:	81a3      	strh	r3, [r4, #12]
 8005c6e:	e7e3      	b.n	8005c38 <__smakebuf_r+0xc>
 8005c70:	4b0d      	ldr	r3, [pc, #52]	; (8005ca8 <__smakebuf_r+0x7c>)
 8005c72:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	6020      	str	r0, [r4, #0]
 8005c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c7c:	81a3      	strh	r3, [r4, #12]
 8005c7e:	9b00      	ldr	r3, [sp, #0]
 8005c80:	6163      	str	r3, [r4, #20]
 8005c82:	9b01      	ldr	r3, [sp, #4]
 8005c84:	6120      	str	r0, [r4, #16]
 8005c86:	b15b      	cbz	r3, 8005ca0 <__smakebuf_r+0x74>
 8005c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f000 f8db 	bl	8005e48 <_isatty_r>
 8005c92:	b128      	cbz	r0, 8005ca0 <__smakebuf_r+0x74>
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	f023 0303 	bic.w	r3, r3, #3
 8005c9a:	f043 0301 	orr.w	r3, r3, #1
 8005c9e:	81a3      	strh	r3, [r4, #12]
 8005ca0:	89a0      	ldrh	r0, [r4, #12]
 8005ca2:	4305      	orrs	r5, r0
 8005ca4:	81a5      	strh	r5, [r4, #12]
 8005ca6:	e7cd      	b.n	8005c44 <__smakebuf_r+0x18>
 8005ca8:	08004ce1 	.word	0x08004ce1

08005cac <memcpy>:
 8005cac:	440a      	add	r2, r1
 8005cae:	4291      	cmp	r1, r2
 8005cb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cb4:	d100      	bne.n	8005cb8 <memcpy+0xc>
 8005cb6:	4770      	bx	lr
 8005cb8:	b510      	push	{r4, lr}
 8005cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cc2:	4291      	cmp	r1, r2
 8005cc4:	d1f9      	bne.n	8005cba <memcpy+0xe>
 8005cc6:	bd10      	pop	{r4, pc}

08005cc8 <memmove>:
 8005cc8:	4288      	cmp	r0, r1
 8005cca:	b510      	push	{r4, lr}
 8005ccc:	eb01 0402 	add.w	r4, r1, r2
 8005cd0:	d902      	bls.n	8005cd8 <memmove+0x10>
 8005cd2:	4284      	cmp	r4, r0
 8005cd4:	4623      	mov	r3, r4
 8005cd6:	d807      	bhi.n	8005ce8 <memmove+0x20>
 8005cd8:	1e43      	subs	r3, r0, #1
 8005cda:	42a1      	cmp	r1, r4
 8005cdc:	d008      	beq.n	8005cf0 <memmove+0x28>
 8005cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ce2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ce6:	e7f8      	b.n	8005cda <memmove+0x12>
 8005ce8:	4402      	add	r2, r0
 8005cea:	4601      	mov	r1, r0
 8005cec:	428a      	cmp	r2, r1
 8005cee:	d100      	bne.n	8005cf2 <memmove+0x2a>
 8005cf0:	bd10      	pop	{r4, pc}
 8005cf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cfa:	e7f7      	b.n	8005cec <memmove+0x24>

08005cfc <__malloc_lock>:
 8005cfc:	4801      	ldr	r0, [pc, #4]	; (8005d04 <__malloc_lock+0x8>)
 8005cfe:	f7ff b8c1 	b.w	8004e84 <__retarget_lock_acquire_recursive>
 8005d02:	bf00      	nop
 8005d04:	200001e8 	.word	0x200001e8

08005d08 <__malloc_unlock>:
 8005d08:	4801      	ldr	r0, [pc, #4]	; (8005d10 <__malloc_unlock+0x8>)
 8005d0a:	f7ff b8bc 	b.w	8004e86 <__retarget_lock_release_recursive>
 8005d0e:	bf00      	nop
 8005d10:	200001e8 	.word	0x200001e8

08005d14 <_free_r>:
 8005d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d16:	2900      	cmp	r1, #0
 8005d18:	d048      	beq.n	8005dac <_free_r+0x98>
 8005d1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d1e:	9001      	str	r0, [sp, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f1a1 0404 	sub.w	r4, r1, #4
 8005d26:	bfb8      	it	lt
 8005d28:	18e4      	addlt	r4, r4, r3
 8005d2a:	f7ff ffe7 	bl	8005cfc <__malloc_lock>
 8005d2e:	4a20      	ldr	r2, [pc, #128]	; (8005db0 <_free_r+0x9c>)
 8005d30:	9801      	ldr	r0, [sp, #4]
 8005d32:	6813      	ldr	r3, [r2, #0]
 8005d34:	4615      	mov	r5, r2
 8005d36:	b933      	cbnz	r3, 8005d46 <_free_r+0x32>
 8005d38:	6063      	str	r3, [r4, #4]
 8005d3a:	6014      	str	r4, [r2, #0]
 8005d3c:	b003      	add	sp, #12
 8005d3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d42:	f7ff bfe1 	b.w	8005d08 <__malloc_unlock>
 8005d46:	42a3      	cmp	r3, r4
 8005d48:	d90b      	bls.n	8005d62 <_free_r+0x4e>
 8005d4a:	6821      	ldr	r1, [r4, #0]
 8005d4c:	1862      	adds	r2, r4, r1
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	bf04      	itt	eq
 8005d52:	681a      	ldreq	r2, [r3, #0]
 8005d54:	685b      	ldreq	r3, [r3, #4]
 8005d56:	6063      	str	r3, [r4, #4]
 8005d58:	bf04      	itt	eq
 8005d5a:	1852      	addeq	r2, r2, r1
 8005d5c:	6022      	streq	r2, [r4, #0]
 8005d5e:	602c      	str	r4, [r5, #0]
 8005d60:	e7ec      	b.n	8005d3c <_free_r+0x28>
 8005d62:	461a      	mov	r2, r3
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	b10b      	cbz	r3, 8005d6c <_free_r+0x58>
 8005d68:	42a3      	cmp	r3, r4
 8005d6a:	d9fa      	bls.n	8005d62 <_free_r+0x4e>
 8005d6c:	6811      	ldr	r1, [r2, #0]
 8005d6e:	1855      	adds	r5, r2, r1
 8005d70:	42a5      	cmp	r5, r4
 8005d72:	d10b      	bne.n	8005d8c <_free_r+0x78>
 8005d74:	6824      	ldr	r4, [r4, #0]
 8005d76:	4421      	add	r1, r4
 8005d78:	1854      	adds	r4, r2, r1
 8005d7a:	42a3      	cmp	r3, r4
 8005d7c:	6011      	str	r1, [r2, #0]
 8005d7e:	d1dd      	bne.n	8005d3c <_free_r+0x28>
 8005d80:	681c      	ldr	r4, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	6053      	str	r3, [r2, #4]
 8005d86:	4421      	add	r1, r4
 8005d88:	6011      	str	r1, [r2, #0]
 8005d8a:	e7d7      	b.n	8005d3c <_free_r+0x28>
 8005d8c:	d902      	bls.n	8005d94 <_free_r+0x80>
 8005d8e:	230c      	movs	r3, #12
 8005d90:	6003      	str	r3, [r0, #0]
 8005d92:	e7d3      	b.n	8005d3c <_free_r+0x28>
 8005d94:	6825      	ldr	r5, [r4, #0]
 8005d96:	1961      	adds	r1, r4, r5
 8005d98:	428b      	cmp	r3, r1
 8005d9a:	bf04      	itt	eq
 8005d9c:	6819      	ldreq	r1, [r3, #0]
 8005d9e:	685b      	ldreq	r3, [r3, #4]
 8005da0:	6063      	str	r3, [r4, #4]
 8005da2:	bf04      	itt	eq
 8005da4:	1949      	addeq	r1, r1, r5
 8005da6:	6021      	streq	r1, [r4, #0]
 8005da8:	6054      	str	r4, [r2, #4]
 8005daa:	e7c7      	b.n	8005d3c <_free_r+0x28>
 8005dac:	b003      	add	sp, #12
 8005dae:	bd30      	pop	{r4, r5, pc}
 8005db0:	20000090 	.word	0x20000090

08005db4 <_realloc_r>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	4607      	mov	r7, r0
 8005db8:	4614      	mov	r4, r2
 8005dba:	460e      	mov	r6, r1
 8005dbc:	b921      	cbnz	r1, 8005dc8 <_realloc_r+0x14>
 8005dbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	f7ff b860 	b.w	8004e88 <_malloc_r>
 8005dc8:	b922      	cbnz	r2, 8005dd4 <_realloc_r+0x20>
 8005dca:	f7ff ffa3 	bl	8005d14 <_free_r>
 8005dce:	4625      	mov	r5, r4
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dd4:	f000 f848 	bl	8005e68 <_malloc_usable_size_r>
 8005dd8:	42a0      	cmp	r0, r4
 8005dda:	d20f      	bcs.n	8005dfc <_realloc_r+0x48>
 8005ddc:	4621      	mov	r1, r4
 8005dde:	4638      	mov	r0, r7
 8005de0:	f7ff f852 	bl	8004e88 <_malloc_r>
 8005de4:	4605      	mov	r5, r0
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d0f2      	beq.n	8005dd0 <_realloc_r+0x1c>
 8005dea:	4631      	mov	r1, r6
 8005dec:	4622      	mov	r2, r4
 8005dee:	f7ff ff5d 	bl	8005cac <memcpy>
 8005df2:	4631      	mov	r1, r6
 8005df4:	4638      	mov	r0, r7
 8005df6:	f7ff ff8d 	bl	8005d14 <_free_r>
 8005dfa:	e7e9      	b.n	8005dd0 <_realloc_r+0x1c>
 8005dfc:	4635      	mov	r5, r6
 8005dfe:	e7e7      	b.n	8005dd0 <_realloc_r+0x1c>

08005e00 <_read_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4d07      	ldr	r5, [pc, #28]	; (8005e20 <_read_r+0x20>)
 8005e04:	4604      	mov	r4, r0
 8005e06:	4608      	mov	r0, r1
 8005e08:	4611      	mov	r1, r2
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	602a      	str	r2, [r5, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f7fa fce6 	bl	80007e0 <_read>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d102      	bne.n	8005e1e <_read_r+0x1e>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	b103      	cbz	r3, 8005e1e <_read_r+0x1e>
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	200001f0 	.word	0x200001f0

08005e24 <_fstat_r>:
 8005e24:	b538      	push	{r3, r4, r5, lr}
 8005e26:	4d07      	ldr	r5, [pc, #28]	; (8005e44 <_fstat_r+0x20>)
 8005e28:	2300      	movs	r3, #0
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	4611      	mov	r1, r2
 8005e30:	602b      	str	r3, [r5, #0]
 8005e32:	f7fa fd1a 	bl	800086a <_fstat>
 8005e36:	1c43      	adds	r3, r0, #1
 8005e38:	d102      	bne.n	8005e40 <_fstat_r+0x1c>
 8005e3a:	682b      	ldr	r3, [r5, #0]
 8005e3c:	b103      	cbz	r3, 8005e40 <_fstat_r+0x1c>
 8005e3e:	6023      	str	r3, [r4, #0]
 8005e40:	bd38      	pop	{r3, r4, r5, pc}
 8005e42:	bf00      	nop
 8005e44:	200001f0 	.word	0x200001f0

08005e48 <_isatty_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	4d06      	ldr	r5, [pc, #24]	; (8005e64 <_isatty_r+0x1c>)
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	4604      	mov	r4, r0
 8005e50:	4608      	mov	r0, r1
 8005e52:	602b      	str	r3, [r5, #0]
 8005e54:	f7fa fd19 	bl	800088a <_isatty>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d102      	bne.n	8005e62 <_isatty_r+0x1a>
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	b103      	cbz	r3, 8005e62 <_isatty_r+0x1a>
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	bd38      	pop	{r3, r4, r5, pc}
 8005e64:	200001f0 	.word	0x200001f0

08005e68 <_malloc_usable_size_r>:
 8005e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e6c:	1f18      	subs	r0, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	bfbc      	itt	lt
 8005e72:	580b      	ldrlt	r3, [r1, r0]
 8005e74:	18c0      	addlt	r0, r0, r3
 8005e76:	4770      	bx	lr

08005e78 <_init>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr

08005e84 <_fini>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	bf00      	nop
 8005e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8a:	bc08      	pop	{r3}
 8005e8c:	469e      	mov	lr, r3
 8005e8e:	4770      	bx	lr
