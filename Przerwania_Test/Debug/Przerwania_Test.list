
Przerwania_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080070dc  080070dc  000170dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800721c  0800721c  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007224  08007224  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007224  08007224  00017224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800722c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  200000b8  080072e4  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080072e4  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018385  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb0  00000000  00000000  0003846d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  0003b420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  0003c338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a17f  00000000  00000000  0003d108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135d0  00000000  00000000  00067287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feabc  00000000  00000000  0007a857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00179313  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044dc  00000000  00000000  00179368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070c4 	.word	0x080070c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	080070c4 	.word	0x080070c4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
 80005b8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ba:	4b30      	ldr	r3, [pc, #192]	; (800067c <MX_ADC1_Init+0xe4>)
 80005bc:	4a30      	ldr	r2, [pc, #192]	; (8000680 <MX_ADC1_Init+0xe8>)
 80005be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005c0:	4b2e      	ldr	r3, [pc, #184]	; (800067c <MX_ADC1_Init+0xe4>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <MX_ADC1_Init+0xe4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005cc:	4b2b      	ldr	r3, [pc, #172]	; (800067c <MX_ADC1_Init+0xe4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005d2:	4b2a      	ldr	r3, [pc, #168]	; (800067c <MX_ADC1_Init+0xe4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d8:	4b28      	ldr	r3, [pc, #160]	; (800067c <MX_ADC1_Init+0xe4>)
 80005da:	2204      	movs	r2, #4
 80005dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005de:	4b27      	ldr	r3, [pc, #156]	; (800067c <MX_ADC1_Init+0xe4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005e4:	4b25      	ldr	r3, [pc, #148]	; (800067c <MX_ADC1_Init+0xe4>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005ea:	4b24      	ldr	r3, [pc, #144]	; (800067c <MX_ADC1_Init+0xe4>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <MX_ADC1_Init+0xe4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <MX_ADC1_Init+0xe4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <MX_ADC1_Init+0xe4>)
 8000600:	2200      	movs	r2, #0
 8000602:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <MX_ADC1_Init+0xe4>)
 8000606:	2201      	movs	r2, #1
 8000608:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MX_ADC1_Init+0xe4>)
 800060e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000612:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_ADC1_Init+0xe4>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800061c:	4817      	ldr	r0, [pc, #92]	; (800067c <MX_ADC1_Init+0xe4>)
 800061e:	f000 ff6b 	bl	80014f8 <HAL_ADC_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000628:	f000 fa6c 	bl	8000b04 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4619      	mov	r1, r3
 8000636:	4811      	ldr	r0, [pc, #68]	; (800067c <MX_ADC1_Init+0xe4>)
 8000638:	f001 ffaa 	bl	8002590 <HAL_ADCEx_MultiModeConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000642:	f000 fa5f 	bl	8000b04 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0xec>)
 8000648:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800064a:	2306      	movs	r3, #6
 800064c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800064e:	2307      	movs	r3, #7
 8000650:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000652:	237f      	movs	r3, #127	; 0x7f
 8000654:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000656:	2304      	movs	r3, #4
 8000658:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4619      	mov	r1, r3
 8000662:	4806      	ldr	r0, [pc, #24]	; (800067c <MX_ADC1_Init+0xe4>)
 8000664:	f001 f978 	bl	8001958 <HAL_ADC_ConfigChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800066e:	f000 fa49 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	3728      	adds	r7, #40	; 0x28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000144 	.word	0x20000144
 8000680:	50040000 	.word	0x50040000
 8000684:	04300002 	.word	0x04300002

08000688 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b0ac      	sub	sp, #176	; 0xb0
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2288      	movs	r2, #136	; 0x88
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f005 fd37 	bl	800611c <memset>
  if(adcHandle->Instance==ADC1)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a3c      	ldr	r2, [pc, #240]	; (80007a4 <HAL_ADC_MspInit+0x11c>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d171      	bne.n	800079c <HAL_ADC_MspInit+0x114>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006bc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006c6:	2301      	movs	r3, #1
 80006c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80006ce:	2310      	movs	r3, #16
 80006d0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006d2:	2307      	movs	r3, #7
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 fbc5 	bl	8003e78 <HAL_RCCEx_PeriphCLKConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006f4:	f000 fa06 	bl	8000b04 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006f8:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <HAL_ADC_MspInit+0x120>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fc:	4a2a      	ldr	r2, [pc, #168]	; (80007a8 <HAL_ADC_MspInit+0x120>)
 80006fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000702:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000704:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <HAL_ADC_MspInit+0x120>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000710:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <HAL_ADC_MspInit+0x120>)
 8000712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000714:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <HAL_ADC_MspInit+0x120>)
 8000716:	f043 0304 	orr.w	r3, r3, #4
 800071a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <HAL_ADC_MspInit+0x120>)
 800071e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000720:	f003 0304 	and.w	r3, r3, #4
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000728:	2301      	movs	r3, #1
 800072a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800072e:	230b      	movs	r3, #11
 8000730:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800073e:	4619      	mov	r1, r3
 8000740:	481a      	ldr	r0, [pc, #104]	; (80007ac <HAL_ADC_MspInit+0x124>)
 8000742:	f002 fb5d 	bl	8002e00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <HAL_ADC_MspInit+0x128>)
 8000748:	4a1a      	ldr	r2, [pc, #104]	; (80007b4 <HAL_ADC_MspInit+0x12c>)
 800074a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_ADC_MspInit+0x128>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <HAL_ADC_MspInit+0x128>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_ADC_MspInit+0x128>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <HAL_ADC_MspInit+0x128>)
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_ADC_MspInit+0x128>)
 8000766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <HAL_ADC_MspInit+0x128>)
 800076e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000772:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_ADC_MspInit+0x128>)
 8000776:	2220      	movs	r2, #32
 8000778:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <HAL_ADC_MspInit+0x128>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000780:	480b      	ldr	r0, [pc, #44]	; (80007b0 <HAL_ADC_MspInit+0x128>)
 8000782:	f002 f8c7 	bl	8002914 <HAL_DMA_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 800078c:	f000 f9ba 	bl	8000b04 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_ADC_MspInit+0x128>)
 8000794:	64da      	str	r2, [r3, #76]	; 0x4c
 8000796:	4a06      	ldr	r2, [pc, #24]	; (80007b0 <HAL_ADC_MspInit+0x128>)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800079c:	bf00      	nop
 800079e:	37b0      	adds	r7, #176	; 0xb0
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	50040000 	.word	0x50040000
 80007a8:	40021000 	.word	0x40021000
 80007ac:	48000800 	.word	0x48000800
 80007b0:	200001a8 	.word	0x200001a8
 80007b4:	40020008 	.word	0x40020008

080007b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_DMA_Init+0x38>)
 80007c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <MX_DMA_Init+0x38>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6493      	str	r3, [r2, #72]	; 0x48
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_DMA_Init+0x38>)
 80007cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2102      	movs	r1, #2
 80007da:	200b      	movs	r0, #11
 80007dc:	f002 f863 	bl	80028a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007e0:	200b      	movs	r0, #11
 80007e2:	f002 f87c 	bl	80028de <HAL_NVIC_EnableIRQ>

}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b23      	ldr	r3, [pc, #140]	; (8000898 <MX_GPIO_Init+0xa4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a22      	ldr	r2, [pc, #136]	; (8000898 <MX_GPIO_Init+0xa4>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_GPIO_Init+0xa4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_GPIO_Init+0xa4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a1c      	ldr	r2, [pc, #112]	; (8000898 <MX_GPIO_Init+0xa4>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_GPIO_Init+0xa4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2120      	movs	r1, #32
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f002 fc87 	bl	8003154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Btn_Pin;
 8000846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Btn_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	4619      	mov	r1, r3
 800085c:	480f      	ldr	r0, [pc, #60]	; (800089c <MX_GPIO_Init+0xa8>)
 800085e:	f002 facf 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000862:	2320      	movs	r3, #32
 8000864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	4619      	mov	r1, r3
 8000878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087c:	f002 fac0 	bl	8002e00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2108      	movs	r1, #8
 8000884:	2028      	movs	r0, #40	; 0x28
 8000886:	f002 f80e 	bl	80028a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800088a:	2028      	movs	r0, #40	; 0x28
 800088c:	f002 f827 	bl	80028de <HAL_NVIC_EnableIRQ>

}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	48000800 	.word	0x48000800

080008a0 <send_message>:
}sender_state;

sender_state message_number = MESSAGE_1;

void send_message(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	static char message[] = "Hello World!\r\n";
	static char message2[] = "Forbot jest super!\r\n";
	static char message3[] = "Za trzecim razem zadziala!\r\n";

	switch (message_number) {
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <send_message+0x74>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d022      	beq.n	80008f2 <send_message+0x52>
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	dc2e      	bgt.n	800090e <send_message+0x6e>
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <send_message+0x1a>
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d00e      	beq.n	80008d6 <send_message+0x36>
		case MESSAGE_3:
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)message3, strlen(message3));
			message_number = DONE;
			break;
		default:
			break;
 80008b8:	e029      	b.n	800090e <send_message+0x6e>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)message, strlen(message));
 80008ba:	4817      	ldr	r0, [pc, #92]	; (8000918 <send_message+0x78>)
 80008bc:	f7ff fc92 	bl	80001e4 <strlen>
 80008c0:	4603      	mov	r3, r0
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	461a      	mov	r2, r3
 80008c6:	4914      	ldr	r1, [pc, #80]	; (8000918 <send_message+0x78>)
 80008c8:	4814      	ldr	r0, [pc, #80]	; (800091c <send_message+0x7c>)
 80008ca:	f004 f873 	bl	80049b4 <HAL_UART_Transmit_IT>
			message_number = MESSAGE_2;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <send_message+0x74>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
			break;
 80008d4:	e01c      	b.n	8000910 <send_message+0x70>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)message2, strlen(message2));
 80008d6:	4812      	ldr	r0, [pc, #72]	; (8000920 <send_message+0x80>)
 80008d8:	f7ff fc84 	bl	80001e4 <strlen>
 80008dc:	4603      	mov	r3, r0
 80008de:	b29b      	uxth	r3, r3
 80008e0:	461a      	mov	r2, r3
 80008e2:	490f      	ldr	r1, [pc, #60]	; (8000920 <send_message+0x80>)
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <send_message+0x7c>)
 80008e6:	f004 f865 	bl	80049b4 <HAL_UART_Transmit_IT>
			message_number = MESSAGE_3;
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <send_message+0x74>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	701a      	strb	r2, [r3, #0]
			break;
 80008f0:	e00e      	b.n	8000910 <send_message+0x70>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)message3, strlen(message3));
 80008f2:	480c      	ldr	r0, [pc, #48]	; (8000924 <send_message+0x84>)
 80008f4:	f7ff fc76 	bl	80001e4 <strlen>
 80008f8:	4603      	mov	r3, r0
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	4909      	ldr	r1, [pc, #36]	; (8000924 <send_message+0x84>)
 8000900:	4806      	ldr	r0, [pc, #24]	; (800091c <send_message+0x7c>)
 8000902:	f004 f857 	bl	80049b4 <HAL_UART_Transmit_IT>
			message_number = DONE;
 8000906:	4b03      	ldr	r3, [pc, #12]	; (8000914 <send_message+0x74>)
 8000908:	2203      	movs	r2, #3
 800090a:	701a      	strb	r2, [r3, #0]
			break;
 800090c:	e000      	b.n	8000910 <send_message+0x70>
			break;
 800090e:	bf00      	nop
	}
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200000d4 	.word	0x200000d4
 8000918:	20000000 	.word	0x20000000
 800091c:	200001f8 	.word	0x200001f8
 8000920:	20000010 	.word	0x20000010
 8000924:	20000028 	.word	0x20000028

08000928 <HAL_UART_RxCpltCallback>:

uint8_t uart_rx_buffer;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_UART_RxCpltCallback+0x2c>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d109      	bne.n	800094c <HAL_UART_RxCpltCallback+0x24>
	{
		line_append(uart_rx_buffer);
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <HAL_UART_RxCpltCallback+0x30>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f000 f8ff 	bl	8000b40 <line_append>
		HAL_UART_Receive_IT(&huart2, &uart_rx_buffer, 1);
 8000942:	2201      	movs	r2, #1
 8000944:	4904      	ldr	r1, [pc, #16]	; (8000958 <HAL_UART_RxCpltCallback+0x30>)
 8000946:	4803      	ldr	r0, [pc, #12]	; (8000954 <HAL_UART_RxCpltCallback+0x2c>)
 8000948:	f004 f8a2 	bl	8004a90 <HAL_UART_Receive_IT>
	}
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200001f8 	.word	0x200001f8
 8000958:	200001f4 	.word	0x200001f4

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000960:	f000 fb35 	bl	8000fce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000964:	f000 f854 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000968:	f7ff ff44 	bl	80007f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800096c:	f000 fa72 	bl	8000e54 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000970:	f7ff ff22 	bl	80007b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000974:	f7ff fe10 	bl	8000598 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//volatile ponieważ program nie modyfikuje zmiennej w glownej petli, static poniewaz zmienna ma byc traktowana jak globalna i nie moze zostac nadpisana
  volatile static uint32_t measure;
  send_message();
 8000978:	f7ff ff92 	bl	80008a0 <send_message>
  HAL_UART_Receive_IT(&huart2, &uart_rx_buffer, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	491b      	ldr	r1, [pc, #108]	; (80009ec <main+0x90>)
 8000980:	481b      	ldr	r0, [pc, #108]	; (80009f0 <main+0x94>)
 8000982:	f004 f885 	bl	8004a90 <HAL_UART_Receive_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000986:	217f      	movs	r1, #127	; 0x7f
 8000988:	481a      	ldr	r0, [pc, #104]	; (80009f4 <main+0x98>)
 800098a:	f001 fda1 	bl	80024d0 <HAL_ADCEx_Calibration_Start>
 //HAL_ADC_Start(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, &measure, 1);
 800098e:	2201      	movs	r2, #1
 8000990:	4919      	ldr	r1, [pc, #100]	; (80009f8 <main+0x9c>)
 8000992:	4818      	ldr	r0, [pc, #96]	; (80009f4 <main+0x98>)
 8000994:	f000 ff06 	bl	80017a4 <HAL_ADC_Start_DMA>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	 if(BtnCounter != BtnCounter_Old)
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <main+0xa0>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <main+0xa4>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d018      	beq.n	80009d8 <main+0x7c>
	 {
		if(BtnCounter == 1)
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <main+0xa0>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d107      	bne.n	80009c0 <main+0x64>
		{
			printf("Wcisnieto przycisk tylko %d raz\n", BtnCounter);
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <main+0xa0>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	4619      	mov	r1, r3
 80009b8:	4812      	ldr	r0, [pc, #72]	; (8000a04 <main+0xa8>)
 80009ba:	f005 fbb7 	bl	800612c <iprintf>
 80009be:	e006      	b.n	80009ce <main+0x72>
		}else{
		printf("Wcisnieto przycisk juz %d razy\n", BtnCounter);
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <main+0xa0>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	4619      	mov	r1, r3
 80009c8:	480f      	ldr	r0, [pc, #60]	; (8000a08 <main+0xac>)
 80009ca:	f005 fbaf 	bl	800612c <iprintf>
		}
		BtnCounter_Old = BtnCounter;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <main+0xa0>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <main+0xa4>)
 80009d6:	801a      	strh	r2, [r3, #0]
	 }

//	 measure = HAL_ADC_GetValue(&hadc1);
	 printf("ADC = %u\n", measure);
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <main+0x9c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	480b      	ldr	r0, [pc, #44]	; (8000a0c <main+0xb0>)
 80009e0:	f005 fba4 	bl	800612c <iprintf>

	 HAL_Delay(250);
 80009e4:	20fa      	movs	r0, #250	; 0xfa
 80009e6:	f000 fb67 	bl	80010b8 <HAL_Delay>
	 if(BtnCounter != BtnCounter_Old)
 80009ea:	e7d5      	b.n	8000998 <main+0x3c>
 80009ec:	200001f4 	.word	0x200001f4
 80009f0:	200001f8 	.word	0x200001f8
 80009f4:	20000144 	.word	0x20000144
 80009f8:	200000d8 	.word	0x200000d8
 80009fc:	200001f0 	.word	0x200001f0
 8000a00:	200001f2 	.word	0x200001f2
 8000a04:	080070dc 	.word	0x080070dc
 8000a08:	08007100 	.word	0x08007100
 8000a0c:	08007120 	.word	0x08007120

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b096      	sub	sp, #88	; 0x58
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	2244      	movs	r2, #68	; 0x44
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f005 fb7c 	bl	800611c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	463b      	mov	r3, r7
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a36:	f002 fbcb 	bl	80031d0 <HAL_PWREx_ControlVoltageScaling>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a40:	f000 f860 	bl	8000b04 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a44:	2310      	movs	r3, #16
 8000a46:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a50:	2360      	movs	r3, #96	; 0x60
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a54:	2302      	movs	r3, #2
 8000a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a60:	2328      	movs	r3, #40	; 0x28
 8000a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a64:	2307      	movs	r3, #7
 8000a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4618      	mov	r0, r3
 8000a76:	f002 fc01 	bl	800327c <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000a80:	f000 f840 	bl	8000b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a84:	230f      	movs	r3, #15
 8000a86:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a98:	463b      	mov	r3, r7
 8000a9a:	2104      	movs	r1, #4
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 ffc7 	bl	8003a30 <HAL_RCC_ClockConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000aa8:	f000 f82c 	bl	8000b04 <Error_Handler>
  }
}
 8000aac:	bf00      	nop
 8000aae:	3758      	adds	r7, #88	; 0x58
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Btn_Pin)
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ac4:	d106      	bne.n	8000ad4 <HAL_GPIO_EXTI_Callback+0x20>
	{
		BtnCounter ++;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	3301      	adds	r3, #1
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000ad2:	801a      	strh	r2, [r3, #0]

	}
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	200001f0 	.word	0x200001f0

08000ae4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_UART_TxCpltCallback+0x1c>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d101      	bne.n	8000af8 <HAL_UART_TxCpltCallback+0x14>
	{
		send_message();
 8000af4:	f7ff fed4 	bl	80008a0 <send_message>
	}

}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200001f8 	.word	0x200001f8

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <Error_Handler+0x8>
	...

08000b10 <__io_putchar>:
#include <stdio.h>
#include <printf_uart.h>
#include "usart.h"

int __io_putchar(int ch)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b0a      	cmp	r3, #10
 8000b1c:	d102      	bne.n	8000b24 <__io_putchar+0x14>
    __io_putchar('\r');
 8000b1e:	200d      	movs	r0, #13
 8000b20:	f7ff fff6 	bl	8000b10 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000b24:	1d39      	adds	r1, r7, #4
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4803      	ldr	r0, [pc, #12]	; (8000b3c <__io_putchar+0x2c>)
 8000b2e:	f003 fead 	bl	800488c <HAL_UART_Transmit>

  return 1;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200001f8 	.word	0x200001f8

08000b40 <line_append>:
static char line_buffer[LINE_MAX_LENGTH + 1];
static uint32_t line_length;


void line_append(uint8_t value)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]

	if(value =='\r' || value == '\n')
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b0d      	cmp	r3, #13
 8000b4e:	d002      	beq.n	8000b56 <line_append+0x16>
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	2b0a      	cmp	r3, #10
 8000b54:	d12d      	bne.n	8000bb2 <line_append+0x72>
	{

		if(line_length > 0)
 8000b56:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <line_append+0x9c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d039      	beq.n	8000bd2 <line_append+0x92>
		{
			line_buffer[line_length] = '\0';
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <line_append+0x9c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a1f      	ldr	r2, [pc, #124]	; (8000be0 <line_append+0xa0>)
 8000b64:	2100      	movs	r1, #0
 8000b66:	54d1      	strb	r1, [r2, r3]

			if(strcmp(line_buffer, "on") == 0)
 8000b68:	491e      	ldr	r1, [pc, #120]	; (8000be4 <line_append+0xa4>)
 8000b6a:	481d      	ldr	r0, [pc, #116]	; (8000be0 <line_append+0xa0>)
 8000b6c:	f7ff fb30 	bl	80001d0 <strcmp>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d109      	bne.n	8000b8a <line_append+0x4a>
			{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2120      	movs	r1, #32
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7e:	f002 fae9 	bl	8003154 <HAL_GPIO_WritePin>
				printf("On\n");
 8000b82:	4819      	ldr	r0, [pc, #100]	; (8000be8 <line_append+0xa8>)
 8000b84:	f005 fb58 	bl	8006238 <puts>
 8000b88:	e00f      	b.n	8000baa <line_append+0x6a>
			}else if(strcmp(line_buffer, "off") == 0)
 8000b8a:	4918      	ldr	r1, [pc, #96]	; (8000bec <line_append+0xac>)
 8000b8c:	4814      	ldr	r0, [pc, #80]	; (8000be0 <line_append+0xa0>)
 8000b8e:	f7ff fb1f 	bl	80001d0 <strcmp>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d108      	bne.n	8000baa <line_append+0x6a>
			{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2120      	movs	r1, #32
 8000b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba0:	f002 fad8 	bl	8003154 <HAL_GPIO_WritePin>
				printf("Off\n");
 8000ba4:	4812      	ldr	r0, [pc, #72]	; (8000bf0 <line_append+0xb0>)
 8000ba6:	f005 fb47 	bl	8006238 <puts>
			}

			line_length = 0;
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <line_append+0x9c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
		if(line_length > 0)
 8000bb0:	e00f      	b.n	8000bd2 <line_append+0x92>
		}
	}else{
		if(line_length >= LINE_MAX_LENGTH)
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <line_append+0x9c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b4f      	cmp	r3, #79	; 0x4f
 8000bb8:	d902      	bls.n	8000bc0 <line_append+0x80>
		{
			line_length = 0;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <line_append+0x9c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
		}

		line_buffer[line_length++] = value;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <line_append+0x9c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	1c5a      	adds	r2, r3, #1
 8000bc6:	4905      	ldr	r1, [pc, #20]	; (8000bdc <line_append+0x9c>)
 8000bc8:	600a      	str	r2, [r1, #0]
 8000bca:	4905      	ldr	r1, [pc, #20]	; (8000be0 <line_append+0xa0>)
 8000bcc:	79fa      	ldrb	r2, [r7, #7]
 8000bce:	54ca      	strb	r2, [r1, r3]
	}
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000130 	.word	0x20000130
 8000be0:	200000dc 	.word	0x200000dc
 8000be4:	0800712c 	.word	0x0800712c
 8000be8:	08007130 	.word	0x08007130
 8000bec:	08007134 	.word	0x08007134
 8000bf0:	08007138 	.word	0x08007138

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_MspInit+0x44>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <HAL_MspInit+0x44>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6613      	str	r3, [r2, #96]	; 0x60
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_MspInit+0x44>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_MspInit+0x44>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <HAL_MspInit+0x44>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_MspInit+0x44>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	static int clk_div;

	clk_div++;
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <SysTick_Handler+0x28>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	4a07      	ldr	r2, [pc, #28]	; (8000cac <SysTick_Handler+0x28>)
 8000c90:	6013      	str	r3, [r2, #0]

	if(clk_div >= 500)
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SysTick_Handler+0x28>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c9a:	db02      	blt.n	8000ca2 <SysTick_Handler+0x1e>
	{
	//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		clk_div = 0;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <SysTick_Handler+0x28>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
	}



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca2:	f000 f9e9 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000134 	.word	0x20000134

08000cb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <DMA1_Channel1_IRQHandler+0x10>)
 8000cb6:	f001 ffc4 	bl	8002c42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200001a8 	.word	0x200001a8

08000cc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <USART2_IRQHandler+0x10>)
 8000cca:	f003 ff37 	bl	8004b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200001f8 	.word	0x200001f8

08000cd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Pin);
 8000cdc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ce0:	f002 fa50 	bl	8003184 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e00a      	b.n	8000d10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cfa:	f3af 8000 	nop.w
 8000cfe:	4601      	mov	r1, r0
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60ba      	str	r2, [r7, #8]
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf0      	blt.n	8000cfa <_read+0x12>
	}

return len;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e009      	b.n	8000d48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	60ba      	str	r2, [r7, #8]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fee7 	bl	8000b10 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbf1      	blt.n	8000d34 <_write+0x12>
	}
	return len;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_close>:

int _close(int file)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
	return -1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d82:	605a      	str	r2, [r3, #4]
	return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <_isatty>:

int _isatty(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
	return 1;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
	return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f005 f968 	bl	80060c8 <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20018000 	.word	0x20018000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	20000138 	.word	0x20000138
 8000e2c:	20000290 	.word	0x20000290

08000e30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e5a:	4a15      	ldr	r2, [pc, #84]	; (8000eb0 <MX_USART2_UART_Init+0x5c>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e98:	f003 fcaa 	bl	80047f0 <HAL_UART_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ea2:	f7ff fe2f 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200001f8 	.word	0x200001f8
 8000eb0:	40004400 	.word	0x40004400

08000eb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0ac      	sub	sp, #176	; 0xb0
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2288      	movs	r2, #136	; 0x88
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f005 f921 	bl	800611c <memset>
  if(uartHandle->Instance==USART2)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a25      	ldr	r2, [pc, #148]	; (8000f74 <HAL_UART_MspInit+0xc0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d143      	bne.n	8000f6c <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f002 ffc1 	bl	8003e78 <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000efc:	f7ff fe02 	bl	8000b04 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f04:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	4a16      	ldr	r2, [pc, #88]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f30:	230c      	movs	r3, #12
 8000f32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f48:	2307      	movs	r3, #7
 8000f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f58:	f001 ff52 	bl	8002e00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	210c      	movs	r1, #12
 8000f60:	2026      	movs	r0, #38	; 0x26
 8000f62:	f001 fca0 	bl	80028a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f66:	2026      	movs	r0, #38	; 0x26
 8000f68:	f001 fcb9 	bl	80028de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	37b0      	adds	r7, #176	; 0xb0
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40004400 	.word	0x40004400
 8000f78:	40021000 	.word	0x40021000

08000f7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f80:	f7ff ff56 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f86:	490d      	ldr	r1, [pc, #52]	; (8000fbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <LoopForever+0xe>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f9c:	4c0a      	ldr	r4, [pc, #40]	; (8000fc8 <LoopForever+0x16>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000faa:	f005 f893 	bl	80060d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fae:	f7ff fcd5 	bl	800095c <main>

08000fb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fb2:	e7fe      	b.n	8000fb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8000fc0:	0800722c 	.word	0x0800722c
  ldr r2, =_sbss
 8000fc4:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8000fc8:	20000290 	.word	0x20000290

08000fcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC1_2_IRQHandler>

08000fce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f001 fc59 	bl	8002890 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fde:	200f      	movs	r0, #15
 8000fe0:	f000 f80e 	bl	8001000 <HAL_InitTick>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d002      	beq.n	8000ff0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	e001      	b.n	8000ff4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ff0:	f7ff fe00 	bl	8000bf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <HAL_InitTick+0x6c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d023      	beq.n	800105c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_InitTick+0x70>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_InitTick+0x6c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f001 fc65 	bl	80028fa <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10f      	bne.n	8001056 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d809      	bhi.n	8001050 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f001 fc2f 	bl	80028a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <HAL_InitTick+0x74>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	e007      	b.n	8001060 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e004      	b.n	8001060 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	e001      	b.n	8001060 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000050 	.word	0x20000050
 8001070:	20000048 	.word	0x20000048
 8001074:	2000004c 	.word	0x2000004c

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000050 	.word	0x20000050
 800109c:	2000027c 	.word	0x2000027c

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	2000027c 	.word	0x2000027c

080010b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff ffee 	bl	80010a0 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d0:	d005      	beq.n	80010de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_Delay+0x44>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010de:	bf00      	nop
 80010e0:	f7ff ffde 	bl	80010a0 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8f7      	bhi.n	80010e0 <HAL_Delay+0x28>
  {
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000050 	.word	0x20000050

08001100 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	431a      	orrs	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	609a      	str	r2, [r3, #8]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	609a      	str	r2, [r3, #8]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001168:	b480      	push	{r7}
 800116a:	b087      	sub	sp, #28
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3360      	adds	r3, #96	; 0x60
 800117a:	461a      	mov	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <LL_ADC_SetOffset+0x44>)
 800118a:	4013      	ands	r3, r2
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	430a      	orrs	r2, r1
 8001196:	4313      	orrs	r3, r2
 8001198:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011a0:	bf00      	nop
 80011a2:	371c      	adds	r7, #28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	03fff000 	.word	0x03fff000

080011b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3360      	adds	r3, #96	; 0x60
 80011be:	461a      	mov	r2, r3
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	3360      	adds	r3, #96	; 0x60
 80011ec:	461a      	mov	r2, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	431a      	orrs	r2, r3
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001206:	bf00      	nop
 8001208:	371c      	adds	r7, #28
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	3330      	adds	r3, #48	; 0x30
 8001248:	461a      	mov	r2, r3
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	f003 030c 	and.w	r3, r3, #12
 8001254:	4413      	add	r3, r2
 8001256:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	f003 031f 	and.w	r3, r3, #31
 8001262:	211f      	movs	r1, #31
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	401a      	ands	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	0e9b      	lsrs	r3, r3, #26
 8001270:	f003 011f 	and.w	r1, r3, #31
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	431a      	orrs	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001284:	bf00      	nop
 8001286:	371c      	adds	r7, #28
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3314      	adds	r3, #20
 80012a0:	461a      	mov	r2, r3
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	0e5b      	lsrs	r3, r3, #25
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	4413      	add	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	0d1b      	lsrs	r3, r3, #20
 80012b8:	f003 031f 	and.w	r3, r3, #31
 80012bc:	2107      	movs	r1, #7
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	401a      	ands	r2, r3
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	0d1b      	lsrs	r3, r3, #20
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	431a      	orrs	r2, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012da:	bf00      	nop
 80012dc:	371c      	adds	r7, #28
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001300:	43db      	mvns	r3, r3
 8001302:	401a      	ands	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0318 	and.w	r3, r3, #24
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <LL_ADC_SetChannelSingleDiff+0x44>)
 800130c:	40d9      	lsrs	r1, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	400b      	ands	r3, r1
 8001312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001316:	431a      	orrs	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	0007ffff 	.word	0x0007ffff

08001330 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 031f 	and.w	r3, r3, #31
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800135c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6093      	str	r3, [r2, #8]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001384:	d101      	bne.n	800138a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013d4:	d101      	bne.n	80013da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013fc:	f043 0201 	orr.w	r2, r3, #1
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001420:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001424:	f043 0202 	orr.w	r2, r3, #2
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <LL_ADC_IsEnabled+0x18>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <LL_ADC_IsEnabled+0x1a>
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b02      	cmp	r3, #2
 8001470:	d101      	bne.n	8001476 <LL_ADC_IsDisableOngoing+0x18>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <LL_ADC_IsDisableOngoing+0x1a>
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001498:	f043 0204 	orr.w	r2, r3, #4
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d101      	bne.n	80014c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d101      	bne.n	80014ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e136      	b.n	8001780 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800151c:	2b00      	cmp	r3, #0
 800151e:	d109      	bne.n	8001534 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff f8b1 	bl	8000688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff19 	bl	8001370 <LL_ADC_IsDeepPowerDownEnabled>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d004      	beq.n	800154e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff feff 	bl	800134c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff34 	bl	80013c0 <LL_ADC_IsInternalRegulatorEnabled>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d115      	bne.n	800158a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff18 	bl	8001398 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001568:	4b87      	ldr	r3, [pc, #540]	; (8001788 <HAL_ADC_Init+0x290>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	099b      	lsrs	r3, r3, #6
 800156e:	4a87      	ldr	r2, [pc, #540]	; (800178c <HAL_ADC_Init+0x294>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	099b      	lsrs	r3, r3, #6
 8001576:	3301      	adds	r3, #1
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800157c:	e002      	b.n	8001584 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	3b01      	subs	r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f9      	bne.n	800157e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff16 	bl	80013c0 <LL_ADC_IsInternalRegulatorEnabled>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10d      	bne.n	80015b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159e:	f043 0210 	orr.w	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	f043 0201 	orr.w	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ff76 	bl	80014ac <LL_ADC_REG_IsConversionOngoing>
 80015c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 80cf 	bne.w	800176e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f040 80cb 	bne.w	800176e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015e0:	f043 0202 	orr.w	r2, r3, #2
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff23 	bl	8001438 <LL_ADC_IsEnabled>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d115      	bne.n	8001624 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015f8:	4865      	ldr	r0, [pc, #404]	; (8001790 <HAL_ADC_Init+0x298>)
 80015fa:	f7ff ff1d 	bl	8001438 <LL_ADC_IsEnabled>
 80015fe:	4604      	mov	r4, r0
 8001600:	4864      	ldr	r0, [pc, #400]	; (8001794 <HAL_ADC_Init+0x29c>)
 8001602:	f7ff ff19 	bl	8001438 <LL_ADC_IsEnabled>
 8001606:	4603      	mov	r3, r0
 8001608:	431c      	orrs	r4, r3
 800160a:	4863      	ldr	r0, [pc, #396]	; (8001798 <HAL_ADC_Init+0x2a0>)
 800160c:	f7ff ff14 	bl	8001438 <LL_ADC_IsEnabled>
 8001610:	4603      	mov	r3, r0
 8001612:	4323      	orrs	r3, r4
 8001614:	2b00      	cmp	r3, #0
 8001616:	d105      	bne.n	8001624 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	4619      	mov	r1, r3
 800161e:	485f      	ldr	r0, [pc, #380]	; (800179c <HAL_ADC_Init+0x2a4>)
 8001620:	f7ff fd6e 	bl	8001100 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7e5b      	ldrb	r3, [r3, #25]
 8001628:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800162e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001634:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800163a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001642:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d106      	bne.n	8001660 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	3b01      	subs	r3, #1
 8001658:	045b      	lsls	r3, r3, #17
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	2b00      	cmp	r3, #0
 8001666:	d009      	beq.n	800167c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <HAL_ADC_Init+0x2a8>)
 8001684:	4013      	ands	r3, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	69b9      	ldr	r1, [r7, #24]
 800168c:	430b      	orrs	r3, r1
 800168e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff09 	bl	80014ac <LL_ADC_REG_IsConversionOngoing>
 800169a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff16 	bl	80014d2 <LL_ADC_INJ_IsConversionOngoing>
 80016a6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d13d      	bne.n	800172a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d13a      	bne.n	800172a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016b8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016c0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016d0:	f023 0302 	bic.w	r3, r3, #2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	69b9      	ldr	r1, [r7, #24]
 80016da:	430b      	orrs	r3, r1
 80016dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d118      	bne.n	800171a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016f2:	f023 0304 	bic.w	r3, r3, #4
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016fe:	4311      	orrs	r1, r2
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001704:	4311      	orrs	r1, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800170a:	430a      	orrs	r2, r1
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	e007      	b.n	800172a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d10c      	bne.n	800174c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	f023 010f 	bic.w	r1, r3, #15
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	1e5a      	subs	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
 800174a:	e007      	b.n	800175c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 020f 	bic.w	r2, r2, #15
 800175a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001760:	f023 0303 	bic.w	r3, r3, #3
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	655a      	str	r2, [r3, #84]	; 0x54
 800176c:	e007      	b.n	800177e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001772:	f043 0210 	orr.w	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800177e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3724      	adds	r7, #36	; 0x24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	20000048 	.word	0x20000048
 800178c:	053e2d63 	.word	0x053e2d63
 8001790:	50040000 	.word	0x50040000
 8001794:	50040100 	.word	0x50040100
 8001798:	50040200 	.word	0x50040200
 800179c:	50040300 	.word	0x50040300
 80017a0:	fff0c007 	.word	0xfff0c007

080017a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017b0:	4853      	ldr	r0, [pc, #332]	; (8001900 <HAL_ADC_Start_DMA+0x15c>)
 80017b2:	f7ff fdbd 	bl	8001330 <LL_ADC_GetMultimode>
 80017b6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fe75 	bl	80014ac <LL_ADC_REG_IsConversionOngoing>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f040 8093 	bne.w	80018f0 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_ADC_Start_DMA+0x34>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e08e      	b.n	80018f6 <HAL_ADC_Start_DMA+0x152>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a47      	ldr	r2, [pc, #284]	; (8001904 <HAL_ADC_Start_DMA+0x160>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d008      	beq.n	80017fc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	2b05      	cmp	r3, #5
 80017f4:	d002      	beq.n	80017fc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	2b09      	cmp	r3, #9
 80017fa:	d172      	bne.n	80018e2 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f000 fc9b 	bl	8002138 <ADC_Enable>
 8001802:	4603      	mov	r3, r0
 8001804:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001806:	7dfb      	ldrb	r3, [r7, #23]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d165      	bne.n	80018d8 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001810:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001814:	f023 0301 	bic.w	r3, r3, #1
 8001818:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a38      	ldr	r2, [pc, #224]	; (8001908 <HAL_ADC_Start_DMA+0x164>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d002      	beq.n	8001830 <HAL_ADC_Start_DMA+0x8c>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	e000      	b.n	8001832 <HAL_ADC_Start_DMA+0x8e>
 8001830:	4b36      	ldr	r3, [pc, #216]	; (800190c <HAL_ADC_Start_DMA+0x168>)
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	4293      	cmp	r3, r2
 8001838:	d002      	beq.n	8001840 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d105      	bne.n	800184c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001844:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185c:	f023 0206 	bic.w	r2, r3, #6
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	659a      	str	r2, [r3, #88]	; 0x58
 8001864:	e002      	b.n	800186c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001870:	4a27      	ldr	r2, [pc, #156]	; (8001910 <HAL_ADC_Start_DMA+0x16c>)
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	4a26      	ldr	r2, [pc, #152]	; (8001914 <HAL_ADC_Start_DMA+0x170>)
 800187a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001880:	4a25      	ldr	r2, [pc, #148]	; (8001918 <HAL_ADC_Start_DMA+0x174>)
 8001882:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	221c      	movs	r2, #28
 800188a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0210 	orr.w	r2, r2, #16
 80018a2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	3340      	adds	r3, #64	; 0x40
 80018be:	4619      	mov	r1, r3
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f001 f8de 	bl	8002a84 <HAL_DMA_Start_IT>
 80018c8:	4603      	mov	r3, r0
 80018ca:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fdd7 	bl	8001484 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80018d6:	e00d      	b.n	80018f4 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80018e0:	e008      	b.n	80018f4 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80018ee:	e001      	b.n	80018f4 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018f0:	2302      	movs	r3, #2
 80018f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	50040300 	.word	0x50040300
 8001904:	50040200 	.word	0x50040200
 8001908:	50040100 	.word	0x50040100
 800190c:	50040000 	.word	0x50040000
 8001910:	08002303 	.word	0x08002303
 8001914:	080023db 	.word	0x080023db
 8001918:	080023f7 	.word	0x080023f7

0800191c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b0b6      	sub	sp, #216	; 0xd8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_ADC_ConfigChannel+0x22>
 8001976:	2302      	movs	r3, #2
 8001978:	e3c7      	b.n	800210a <HAL_ADC_ConfigChannel+0x7b2>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fd90 	bl	80014ac <LL_ADC_REG_IsConversionOngoing>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	f040 83a8 	bne.w	80020e4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b05      	cmp	r3, #5
 800199a:	d824      	bhi.n	80019e6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	3b02      	subs	r3, #2
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d81b      	bhi.n	80019de <HAL_ADC_ConfigChannel+0x86>
 80019a6:	a201      	add	r2, pc, #4	; (adr r2, 80019ac <HAL_ADC_ConfigChannel+0x54>)
 80019a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ac:	080019bd 	.word	0x080019bd
 80019b0:	080019c5 	.word	0x080019c5
 80019b4:	080019cd 	.word	0x080019cd
 80019b8:	080019d5 	.word	0x080019d5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	220c      	movs	r2, #12
 80019c0:	605a      	str	r2, [r3, #4]
          break;
 80019c2:	e011      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2212      	movs	r2, #18
 80019c8:	605a      	str	r2, [r3, #4]
          break;
 80019ca:	e00d      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2218      	movs	r2, #24
 80019d0:	605a      	str	r2, [r3, #4]
          break;
 80019d2:	e009      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019da:	605a      	str	r2, [r3, #4]
          break;
 80019dc:	e004      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2206      	movs	r2, #6
 80019e2:	605a      	str	r2, [r3, #4]
          break;
 80019e4:	e000      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80019e6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	f7ff fc1f 	bl	8001238 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fd54 	bl	80014ac <LL_ADC_REG_IsConversionOngoing>
 8001a04:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fd60 	bl	80014d2 <LL_ADC_INJ_IsConversionOngoing>
 8001a12:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f040 81a6 	bne.w	8001d6c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f040 81a1 	bne.w	8001d6c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6819      	ldr	r1, [r3, #0]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	461a      	mov	r2, r3
 8001a38:	f7ff fc2a 	bl	8001290 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	08db      	lsrs	r3, r3, #3
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d00a      	beq.n	8001a74 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	6919      	ldr	r1, [r3, #16]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a6e:	f7ff fb7b 	bl	8001168 <LL_ADC_SetOffset>
 8001a72:	e17b      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fb98 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10a      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x148>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fb8d 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	0e9b      	lsrs	r3, r3, #26
 8001a9a:	f003 021f 	and.w	r2, r3, #31
 8001a9e:	e01e      	b.n	8001ade <HAL_ADC_ConfigChannel+0x186>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fb82 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001abe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ac6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001ace:	2320      	movs	r3, #32
 8001ad0:	e004      	b.n	8001adc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001ad2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d105      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x19e>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	0e9b      	lsrs	r3, r3, #26
 8001af0:	f003 031f 	and.w	r3, r3, #31
 8001af4:	e018      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b02:	fa93 f3a3 	rbit	r3, r3
 8001b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001b1a:	2320      	movs	r3, #32
 8001b1c:	e004      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001b1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b22:	fab3 f383 	clz	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d106      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2200      	movs	r2, #0
 8001b32:	2100      	movs	r1, #0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fb51 	bl	80011dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2101      	movs	r1, #1
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fb35 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10a      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x20e>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2101      	movs	r1, #1
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fb2a 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	0e9b      	lsrs	r3, r3, #26
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	e01e      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x24c>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fb1f 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001b94:	2320      	movs	r3, #32
 8001b96:	e004      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001b98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b9c:	fab3 f383 	clz	r3, r3
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d105      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x264>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	0e9b      	lsrs	r3, r3, #26
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	e018      	b.n	8001bee <HAL_ADC_ConfigChannel+0x296>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001bd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001be0:	2320      	movs	r3, #32
 8001be2:	e004      	b.n	8001bee <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001be4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d106      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff faee 	bl	80011dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2102      	movs	r1, #2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fad2 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10a      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x2d4>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2102      	movs	r1, #2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fac7 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	0e9b      	lsrs	r3, r3, #26
 8001c26:	f003 021f 	and.w	r2, r3, #31
 8001c2a:	e01e      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x312>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2102      	movs	r1, #2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fabc 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	e004      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001c5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d105      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x32a>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	0e9b      	lsrs	r3, r3, #26
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	e016      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x358>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	e004      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001ca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d106      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2102      	movs	r1, #2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fa8d 	bl	80011dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2103      	movs	r1, #3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fa71 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10a      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x396>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2103      	movs	r1, #3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fa66 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	0e9b      	lsrs	r3, r3, #26
 8001ce8:	f003 021f 	and.w	r2, r3, #31
 8001cec:	e017      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x3c6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2103      	movs	r1, #3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fa5b 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d08:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001d10:	2320      	movs	r3, #32
 8001d12:	e003      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d16:	fab3 f383 	clz	r3, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d105      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x3de>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	0e9b      	lsrs	r3, r3, #26
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	e011      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x402>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d46:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	e003      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d106      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2200      	movs	r2, #0
 8001d64:	2103      	movs	r1, #3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fa38 	bl	80011dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fb61 	bl	8001438 <LL_ADC_IsEnabled>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 813f 	bne.w	8001ffc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	6819      	ldr	r1, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f7ff faac 	bl	80012e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4a8e      	ldr	r2, [pc, #568]	; (8001fd0 <HAL_ADC_ConfigChannel+0x678>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	f040 8130 	bne.w	8001ffc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10b      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x46c>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	0e9b      	lsrs	r3, r3, #26
 8001db2:	3301      	adds	r3, #1
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	2b09      	cmp	r3, #9
 8001dba:	bf94      	ite	ls
 8001dbc:	2301      	movls	r3, #1
 8001dbe:	2300      	movhi	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e019      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x4a0>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001dd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dd4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ddc:	2320      	movs	r3, #32
 8001dde:	e003      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	3301      	adds	r3, #1
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	2b09      	cmp	r3, #9
 8001df0:	bf94      	ite	ls
 8001df2:	2301      	movls	r3, #1
 8001df4:	2300      	movhi	r3, #0
 8001df6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d079      	beq.n	8001ef0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d107      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x4c0>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0e9b      	lsrs	r3, r3, #26
 8001e0e:	3301      	adds	r3, #1
 8001e10:	069b      	lsls	r3, r3, #26
 8001e12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e16:	e015      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x4ec>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e28:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001e30:	2320      	movs	r3, #32
 8001e32:	e003      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	069b      	lsls	r3, r3, #26
 8001e40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d109      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x50c>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0e9b      	lsrs	r3, r3, #26
 8001e56:	3301      	adds	r3, #1
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	e017      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x53c>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e74:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001e7c:	2320      	movs	r3, #32
 8001e7e:	e003      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	3301      	adds	r3, #1
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	2101      	movs	r1, #1
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	ea42 0103 	orr.w	r1, r2, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10a      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x562>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0e9b      	lsrs	r3, r3, #26
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	051b      	lsls	r3, r3, #20
 8001eb8:	e018      	b.n	8001eec <HAL_ADC_ConfigChannel+0x594>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	e003      	b.n	8001ede <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f003 021f 	and.w	r2, r3, #31
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eec:	430b      	orrs	r3, r1
 8001eee:	e080      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x5b4>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	0e9b      	lsrs	r3, r3, #26
 8001f02:	3301      	adds	r3, #1
 8001f04:	069b      	lsls	r3, r3, #26
 8001f06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f0a:	e015      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x5e0>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001f24:	2320      	movs	r3, #32
 8001f26:	e003      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	069b      	lsls	r3, r3, #26
 8001f34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d109      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x600>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0e9b      	lsrs	r3, r3, #26
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	2101      	movs	r1, #1
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	e017      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x630>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	61fb      	str	r3, [r7, #28]
  return result;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001f70:	2320      	movs	r3, #32
 8001f72:	e003      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	2101      	movs	r1, #1
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	ea42 0103 	orr.w	r1, r2, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10d      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x65c>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0e9b      	lsrs	r3, r3, #26
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	3b1e      	subs	r3, #30
 8001fac:	051b      	lsls	r3, r3, #20
 8001fae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	e01d      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x698>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	613b      	str	r3, [r7, #16]
  return result;
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d103      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001fcc:	2320      	movs	r3, #32
 8001fce:	e005      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x684>
 8001fd0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	f003 021f 	and.w	r2, r3, #31
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3b1e      	subs	r3, #30
 8001fea:	051b      	lsls	r3, r3, #20
 8001fec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	6892      	ldr	r2, [r2, #8]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f7ff f94a 	bl	8001290 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b44      	ldr	r3, [pc, #272]	; (8002114 <HAL_ADC_ConfigChannel+0x7bc>)
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d07a      	beq.n	80020fe <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002008:	4843      	ldr	r0, [pc, #268]	; (8002118 <HAL_ADC_ConfigChannel+0x7c0>)
 800200a:	f7ff f89f 	bl	800114c <LL_ADC_GetCommonPathInternalCh>
 800200e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a41      	ldr	r2, [pc, #260]	; (800211c <HAL_ADC_ConfigChannel+0x7c4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d12c      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800201c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d126      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a3c      	ldr	r2, [pc, #240]	; (8002120 <HAL_ADC_ConfigChannel+0x7c8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d004      	beq.n	800203c <HAL_ADC_ConfigChannel+0x6e4>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a3b      	ldr	r2, [pc, #236]	; (8002124 <HAL_ADC_ConfigChannel+0x7cc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d15d      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800203c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002040:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002044:	4619      	mov	r1, r3
 8002046:	4834      	ldr	r0, [pc, #208]	; (8002118 <HAL_ADC_ConfigChannel+0x7c0>)
 8002048:	f7ff f86d 	bl	8001126 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800204c:	4b36      	ldr	r3, [pc, #216]	; (8002128 <HAL_ADC_ConfigChannel+0x7d0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	4a36      	ldr	r2, [pc, #216]	; (800212c <HAL_ADC_ConfigChannel+0x7d4>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	099b      	lsrs	r3, r3, #6
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	4613      	mov	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002066:	e002      	b.n	800206e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3b01      	subs	r3, #1
 800206c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f9      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002074:	e040      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a2d      	ldr	r2, [pc, #180]	; (8002130 <HAL_ADC_ConfigChannel+0x7d8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d118      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x75a>
 8002080:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d112      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a23      	ldr	r2, [pc, #140]	; (8002120 <HAL_ADC_ConfigChannel+0x7c8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d004      	beq.n	80020a0 <HAL_ADC_ConfigChannel+0x748>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a22      	ldr	r2, [pc, #136]	; (8002124 <HAL_ADC_ConfigChannel+0x7cc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d12d      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a8:	4619      	mov	r1, r3
 80020aa:	481b      	ldr	r0, [pc, #108]	; (8002118 <HAL_ADC_ConfigChannel+0x7c0>)
 80020ac:	f7ff f83b 	bl	8001126 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020b0:	e024      	b.n	80020fc <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1f      	ldr	r2, [pc, #124]	; (8002134 <HAL_ADC_ConfigChannel+0x7dc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d120      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d11a      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a14      	ldr	r2, [pc, #80]	; (8002120 <HAL_ADC_ConfigChannel+0x7c8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d115      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020da:	4619      	mov	r1, r3
 80020dc:	480e      	ldr	r0, [pc, #56]	; (8002118 <HAL_ADC_ConfigChannel+0x7c0>)
 80020de:	f7ff f822 	bl	8001126 <LL_ADC_SetCommonPathInternalCh>
 80020e2:	e00c      	b.n	80020fe <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	f043 0220 	orr.w	r2, r3, #32
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80020f6:	e002      	b.n	80020fe <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020f8:	bf00      	nop
 80020fa:	e000      	b.n	80020fe <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002106:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800210a:	4618      	mov	r0, r3
 800210c:	37d8      	adds	r7, #216	; 0xd8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	80080000 	.word	0x80080000
 8002118:	50040300 	.word	0x50040300
 800211c:	c7520000 	.word	0xc7520000
 8002120:	50040000 	.word	0x50040000
 8002124:	50040200 	.word	0x50040200
 8002128:	20000048 	.word	0x20000048
 800212c:	053e2d63 	.word	0x053e2d63
 8002130:	cb840000 	.word	0xcb840000
 8002134:	80000001 	.word	0x80000001

08002138 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f975 	bl	8001438 <LL_ADC_IsEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d169      	bne.n	8002228 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	4b36      	ldr	r3, [pc, #216]	; (8002234 <ADC_Enable+0xfc>)
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00d      	beq.n	800217e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002166:	f043 0210 	orr.w	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002172:	f043 0201 	orr.w	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e055      	b.n	800222a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f930 	bl	80013e8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002188:	482b      	ldr	r0, [pc, #172]	; (8002238 <ADC_Enable+0x100>)
 800218a:	f7fe ffdf 	bl	800114c <LL_ADC_GetCommonPathInternalCh>
 800218e:	4603      	mov	r3, r0
 8002190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d013      	beq.n	80021c0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002198:	4b28      	ldr	r3, [pc, #160]	; (800223c <ADC_Enable+0x104>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	099b      	lsrs	r3, r3, #6
 800219e:	4a28      	ldr	r2, [pc, #160]	; (8002240 <ADC_Enable+0x108>)
 80021a0:	fba2 2303 	umull	r2, r3, r2, r3
 80021a4:	099b      	lsrs	r3, r3, #6
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80021b2:	e002      	b.n	80021ba <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f9      	bne.n	80021b4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021c0:	f7fe ff6e 	bl	80010a0 <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021c6:	e028      	b.n	800221a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff f933 	bl	8001438 <LL_ADC_IsEnabled>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d104      	bne.n	80021e2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff f903 	bl	80013e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021e2:	f7fe ff5d 	bl	80010a0 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d914      	bls.n	800221a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d00d      	beq.n	800221a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	f043 0210 	orr.w	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	f043 0201 	orr.w	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e007      	b.n	800222a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d1cf      	bne.n	80021c8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	8000003f 	.word	0x8000003f
 8002238:	50040300 	.word	0x50040300
 800223c:	20000048 	.word	0x20000048
 8002240:	053e2d63 	.word	0x053e2d63

08002244 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff f904 	bl	800145e <LL_ADC_IsDisableOngoing>
 8002256:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff f8eb 	bl	8001438 <LL_ADC_IsEnabled>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d047      	beq.n	80022f8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d144      	bne.n	80022f8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 030d 	and.w	r3, r3, #13
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10c      	bne.n	8002296 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff f8c5 	bl	8001410 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2203      	movs	r2, #3
 800228c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800228e:	f7fe ff07 	bl	80010a0 <HAL_GetTick>
 8002292:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002294:	e029      	b.n	80022ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229a:	f043 0210 	orr.w	r2, r3, #16
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	f043 0201 	orr.w	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e023      	b.n	80022fa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022b2:	f7fe fef5 	bl	80010a0 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d914      	bls.n	80022ea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00d      	beq.n	80022ea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d2:	f043 0210 	orr.w	r2, r3, #16
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	f043 0201 	orr.w	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e007      	b.n	80022fa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1dc      	bne.n	80022b2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002318:	2b00      	cmp	r3, #0
 800231a:	d14b      	bne.n	80023b4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d021      	beq.n	800237a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe ff69 	bl	8001212 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d032      	beq.n	80023ac <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d12b      	bne.n	80023ac <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d11f      	bne.n	80023ac <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002370:	f043 0201 	orr.w	r2, r3, #1
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	655a      	str	r2, [r3, #84]	; 0x54
 8002378:	e018      	b.n	80023ac <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d111      	bne.n	80023ac <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f7ff fab5 	bl	800191c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023b2:	e00e      	b.n	80023d2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b8:	f003 0310 	and.w	r3, r3, #16
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f7ff fabf 	bl	8001944 <HAL_ADC_ErrorCallback>
}
 80023c6:	e004      	b.n	80023d2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	4798      	blx	r3
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f7ff faa1 	bl	8001930 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	f043 0204 	orr.w	r2, r3, #4
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f7ff fa91 	bl	8001944 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <LL_ADC_IsEnabled>:
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <LL_ADC_IsEnabled+0x18>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <LL_ADC_IsEnabled+0x1a>
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_ADC_StartCalibration>:
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002462:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800246c:	4313      	orrs	r3, r2
 800246e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	609a      	str	r2, [r3, #8]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_ADC_IsCalibrationOnGoing>:
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002496:	d101      	bne.n	800249c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_ADC_REG_IsConversionOngoing>:
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d101      	bne.n	80024c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_ADCEx_Calibration_Start+0x1c>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e04d      	b.n	8002588 <HAL_ADCEx_Calibration_Start+0xb8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff fea5 	bl	8002244 <ADC_Disable>
 80024fa:	4603      	mov	r3, r0
 80024fc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d136      	bne.n	8002572 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002508:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800250c:	f023 0302 	bic.w	r3, r3, #2
 8002510:	f043 0202 	orr.w	r2, r3, #2
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6839      	ldr	r1, [r7, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff96 	bl	8002450 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002524:	e014      	b.n	8002550 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	3301      	adds	r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002532:	d30d      	bcc.n	8002550 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002538:	f023 0312 	bic.w	r3, r3, #18
 800253c:	f043 0210 	orr.w	r2, r3, #16
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e01b      	b.n	8002588 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff94 	bl	8002482 <LL_ADC_IsCalibrationOnGoing>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1e2      	bne.n	8002526 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002564:	f023 0303 	bic.w	r3, r3, #3
 8002568:	f043 0201 	orr.w	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	655a      	str	r2, [r3, #84]	; 0x54
 8002570:	e005      	b.n	800257e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	f043 0210 	orr.w	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002586:	7bfb      	ldrb	r3, [r7, #15]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b09f      	sub	sp, #124	; 0x7c
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e093      	b.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80025b6:	2300      	movs	r3, #0
 80025b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80025ba:	2300      	movs	r3, #0
 80025bc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a47      	ldr	r2, [pc, #284]	; (80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d102      	bne.n	80025ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80025c8:	4b46      	ldr	r3, [pc, #280]	; (80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	e001      	b.n	80025d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025dc:	f043 0220 	orr.w	r2, r3, #32
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e072      	b.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ff59 	bl	80024aa <LL_ADC_REG_IsConversionOngoing>
 80025f8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff53 	bl	80024aa <LL_ADC_REG_IsConversionOngoing>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d154      	bne.n	80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800260a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800260c:	2b00      	cmp	r3, #0
 800260e:	d151      	bne.n	80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002610:	4b35      	ldr	r3, [pc, #212]	; (80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002612:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d02c      	beq.n	8002676 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800261c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800262e:	035b      	lsls	r3, r3, #13
 8002630:	430b      	orrs	r3, r1
 8002632:	431a      	orrs	r2, r3
 8002634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002636:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002638:	4829      	ldr	r0, [pc, #164]	; (80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800263a:	f7ff fef6 	bl	800242a <LL_ADC_IsEnabled>
 800263e:	4604      	mov	r4, r0
 8002640:	4828      	ldr	r0, [pc, #160]	; (80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002642:	f7ff fef2 	bl	800242a <LL_ADC_IsEnabled>
 8002646:	4603      	mov	r3, r0
 8002648:	431c      	orrs	r4, r3
 800264a:	4828      	ldr	r0, [pc, #160]	; (80026ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800264c:	f7ff feed 	bl	800242a <LL_ADC_IsEnabled>
 8002650:	4603      	mov	r3, r0
 8002652:	4323      	orrs	r3, r4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d137      	bne.n	80026c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002660:	f023 030f 	bic.w	r3, r3, #15
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	6811      	ldr	r1, [r2, #0]
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	6892      	ldr	r2, [r2, #8]
 800266c:	430a      	orrs	r2, r1
 800266e:	431a      	orrs	r2, r3
 8002670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002672:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002674:	e028      	b.n	80026c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800267e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002680:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002682:	4817      	ldr	r0, [pc, #92]	; (80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002684:	f7ff fed1 	bl	800242a <LL_ADC_IsEnabled>
 8002688:	4604      	mov	r4, r0
 800268a:	4816      	ldr	r0, [pc, #88]	; (80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800268c:	f7ff fecd 	bl	800242a <LL_ADC_IsEnabled>
 8002690:	4603      	mov	r3, r0
 8002692:	431c      	orrs	r4, r3
 8002694:	4815      	ldr	r0, [pc, #84]	; (80026ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002696:	f7ff fec8 	bl	800242a <LL_ADC_IsEnabled>
 800269a:	4603      	mov	r3, r0
 800269c:	4323      	orrs	r3, r4
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d112      	bne.n	80026c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80026a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026aa:	f023 030f 	bic.w	r3, r3, #15
 80026ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026b2:	e009      	b.n	80026c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b8:	f043 0220 	orr.w	r2, r3, #32
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80026c6:	e000      	b.n	80026ca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80026d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	377c      	adds	r7, #124	; 0x7c
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd90      	pop	{r4, r7, pc}
 80026de:	bf00      	nop
 80026e0:	50040000 	.word	0x50040000
 80026e4:	50040100 	.word	0x50040100
 80026e8:	50040300 	.word	0x50040300
 80026ec:	50040200 	.word	0x50040200

080026f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800270c:	4013      	ands	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800271c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002722:	4a04      	ldr	r2, [pc, #16]	; (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	60d3      	str	r3, [r2, #12]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <__NVIC_GetPriorityGrouping+0x18>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	f003 0307 	and.w	r3, r3, #7
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	2b00      	cmp	r3, #0
 8002764:	db0b      	blt.n	800277e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4907      	ldr	r1, [pc, #28]	; (800278c <__NVIC_EnableIRQ+0x38>)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2001      	movs	r0, #1
 8002776:	fa00 f202 	lsl.w	r2, r0, r2
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000e100 	.word	0xe000e100

08002790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	db0a      	blt.n	80027ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	490c      	ldr	r1, [pc, #48]	; (80027dc <__NVIC_SetPriority+0x4c>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	0112      	lsls	r2, r2, #4
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	440b      	add	r3, r1
 80027b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b8:	e00a      	b.n	80027d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4908      	ldr	r1, [pc, #32]	; (80027e0 <__NVIC_SetPriority+0x50>)
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3b04      	subs	r3, #4
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	761a      	strb	r2, [r3, #24]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000e100 	.word	0xe000e100
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	; 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f1c3 0307 	rsb	r3, r3, #7
 80027fe:	2b04      	cmp	r3, #4
 8002800:	bf28      	it	cs
 8002802:	2304      	movcs	r3, #4
 8002804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3304      	adds	r3, #4
 800280a:	2b06      	cmp	r3, #6
 800280c:	d902      	bls.n	8002814 <NVIC_EncodePriority+0x30>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3b03      	subs	r3, #3
 8002812:	e000      	b.n	8002816 <NVIC_EncodePriority+0x32>
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	f04f 32ff 	mov.w	r2, #4294967295
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	401a      	ands	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800282c:	f04f 31ff 	mov.w	r1, #4294967295
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43d9      	mvns	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	4313      	orrs	r3, r2
         );
}
 800283e:	4618      	mov	r0, r3
 8002840:	3724      	adds	r7, #36	; 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800285c:	d301      	bcc.n	8002862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285e:	2301      	movs	r3, #1
 8002860:	e00f      	b.n	8002882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002862:	4a0a      	ldr	r2, [pc, #40]	; (800288c <SysTick_Config+0x40>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286a:	210f      	movs	r1, #15
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	f7ff ff8e 	bl	8002790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <SysTick_Config+0x40>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287a:	4b04      	ldr	r3, [pc, #16]	; (800288c <SysTick_Config+0x40>)
 800287c:	2207      	movs	r2, #7
 800287e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	e000e010 	.word	0xe000e010

08002890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff29 	bl	80026f0 <__NVIC_SetPriorityGrouping>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028b8:	f7ff ff3e 	bl	8002738 <__NVIC_GetPriorityGrouping>
 80028bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	6978      	ldr	r0, [r7, #20]
 80028c4:	f7ff ff8e 	bl	80027e4 <NVIC_EncodePriority>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff5d 	bl	8002790 <__NVIC_SetPriority>
}
 80028d6:	bf00      	nop
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff31 	bl	8002754 <__NVIC_EnableIRQ>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff ffa2 	bl	800284c <SysTick_Config>
 8002908:	4603      	mov	r3, r0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e098      	b.n	8002a58 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	4b4d      	ldr	r3, [pc, #308]	; (8002a64 <HAL_DMA_Init+0x150>)
 800292e:	429a      	cmp	r2, r3
 8002930:	d80f      	bhi.n	8002952 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	4b4b      	ldr	r3, [pc, #300]	; (8002a68 <HAL_DMA_Init+0x154>)
 800293a:	4413      	add	r3, r2
 800293c:	4a4b      	ldr	r2, [pc, #300]	; (8002a6c <HAL_DMA_Init+0x158>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	009a      	lsls	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a48      	ldr	r2, [pc, #288]	; (8002a70 <HAL_DMA_Init+0x15c>)
 800294e:	641a      	str	r2, [r3, #64]	; 0x40
 8002950:	e00e      	b.n	8002970 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	4b46      	ldr	r3, [pc, #280]	; (8002a74 <HAL_DMA_Init+0x160>)
 800295a:	4413      	add	r3, r2
 800295c:	4a43      	ldr	r2, [pc, #268]	; (8002a6c <HAL_DMA_Init+0x158>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	009a      	lsls	r2, r3, #2
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a42      	ldr	r2, [pc, #264]	; (8002a78 <HAL_DMA_Init+0x164>)
 800296e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002994:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ca:	d039      	beq.n	8002a40 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	4a27      	ldr	r2, [pc, #156]	; (8002a70 <HAL_DMA_Init+0x15c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d11a      	bne.n	8002a0c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80029d6:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <HAL_DMA_Init+0x168>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f003 031c 	and.w	r3, r3, #28
 80029e2:	210f      	movs	r1, #15
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	4924      	ldr	r1, [pc, #144]	; (8002a7c <HAL_DMA_Init+0x168>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80029f0:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <HAL_DMA_Init+0x168>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	f003 031c 	and.w	r3, r3, #28
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	491d      	ldr	r1, [pc, #116]	; (8002a7c <HAL_DMA_Init+0x168>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]
 8002a0a:	e019      	b.n	8002a40 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a0c:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <HAL_DMA_Init+0x16c>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	f003 031c 	and.w	r3, r3, #28
 8002a18:	210f      	movs	r1, #15
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	4917      	ldr	r1, [pc, #92]	; (8002a80 <HAL_DMA_Init+0x16c>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a26:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <HAL_DMA_Init+0x16c>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6859      	ldr	r1, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f003 031c 	and.w	r3, r3, #28
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	4911      	ldr	r1, [pc, #68]	; (8002a80 <HAL_DMA_Init+0x16c>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	40020407 	.word	0x40020407
 8002a68:	bffdfff8 	.word	0xbffdfff8
 8002a6c:	cccccccd 	.word	0xcccccccd
 8002a70:	40020000 	.word	0x40020000
 8002a74:	bffdfbf8 	.word	0xbffdfbf8
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	400200a8 	.word	0x400200a8
 8002a80:	400204a8 	.word	0x400204a8

08002a84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_DMA_Start_IT+0x20>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e04b      	b.n	8002b3c <HAL_DMA_Start_IT+0xb8>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d13a      	bne.n	8002b2e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f95f 	bl	8002da0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 020e 	orr.w	r2, r2, #14
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e00f      	b.n	8002b1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0204 	bic.w	r2, r2, #4
 8002b0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 020a 	orr.w	r2, r2, #10
 8002b1a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	e005      	b.n	8002b3a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b36:	2302      	movs	r3, #2
 8002b38:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d008      	beq.n	8002b6e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2204      	movs	r2, #4
 8002b60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e022      	b.n	8002bb4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 020e 	bic.w	r2, r2, #14
 8002b7c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0201 	bic.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	f003 021c 	and.w	r2, r3, #28
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d005      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2204      	movs	r2, #4
 8002bdc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
 8002be2:	e029      	b.n	8002c38 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 020e 	bic.w	r2, r2, #14
 8002bf2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c08:	f003 021c 	and.w	r2, r3, #28
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	2101      	movs	r1, #1
 8002c12:	fa01 f202 	lsl.w	r2, r1, r2
 8002c16:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	4798      	blx	r3
    }
  }
  return status;
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f003 031c 	and.w	r3, r3, #28
 8002c62:	2204      	movs	r2, #4
 8002c64:	409a      	lsls	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d026      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x7a>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d021      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d107      	bne.n	8002c96 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0204 	bic.w	r2, r2, #4
 8002c94:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f003 021c 	and.w	r2, r3, #28
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	2104      	movs	r1, #4
 8002ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d071      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002cba:	e06c      	b.n	8002d96 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	f003 031c 	and.w	r3, r3, #28
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d02e      	beq.n	8002d2e <HAL_DMA_IRQHandler+0xec>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d029      	beq.n	8002d2e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10b      	bne.n	8002d00 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 020a 	bic.w	r2, r2, #10
 8002cf6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	f003 021c 	and.w	r2, r3, #28
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d12:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d038      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d2c:	e033      	b.n	8002d96 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f003 031c 	and.w	r3, r3, #28
 8002d36:	2208      	movs	r2, #8
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d02a      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x156>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d025      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 020e 	bic.w	r2, r2, #14
 8002d5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	f003 021c 	and.w	r2, r3, #28
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	2101      	movs	r1, #1
 8002d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d004      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d96:	bf00      	nop
 8002d98:	bf00      	nop
}
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f003 021c 	and.w	r2, r3, #28
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	2101      	movs	r1, #1
 8002dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b10      	cmp	r3, #16
 8002dd0:	d108      	bne.n	8002de4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002de2:	e007      	b.n	8002df4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	60da      	str	r2, [r3, #12]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e0e:	e17f      	b.n	8003110 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 8171 	beq.w	800310a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d005      	beq.n	8002e40 <HAL_GPIO_Init+0x40>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d130      	bne.n	8002ea2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e76:	2201      	movs	r2, #1
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4013      	ands	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	f003 0201 	and.w	r2, r3, #1
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d118      	bne.n	8002ee0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	08db      	lsrs	r3, r3, #3
 8002eca:	f003 0201 	and.w	r2, r3, #1
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d017      	beq.n	8002f1c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d123      	bne.n	8002f70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	08da      	lsrs	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3208      	adds	r2, #8
 8002f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	220f      	movs	r2, #15
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	08da      	lsrs	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3208      	adds	r2, #8
 8002f6a:	6939      	ldr	r1, [r7, #16]
 8002f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0203 	and.w	r2, r3, #3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80ac 	beq.w	800310a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb2:	4b5f      	ldr	r3, [pc, #380]	; (8003130 <HAL_GPIO_Init+0x330>)
 8002fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb6:	4a5e      	ldr	r2, [pc, #376]	; (8003130 <HAL_GPIO_Init+0x330>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	6613      	str	r3, [r2, #96]	; 0x60
 8002fbe:	4b5c      	ldr	r3, [pc, #368]	; (8003130 <HAL_GPIO_Init+0x330>)
 8002fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fca:	4a5a      	ldr	r2, [pc, #360]	; (8003134 <HAL_GPIO_Init+0x334>)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	220f      	movs	r2, #15
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ff4:	d025      	beq.n	8003042 <HAL_GPIO_Init+0x242>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a4f      	ldr	r2, [pc, #316]	; (8003138 <HAL_GPIO_Init+0x338>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d01f      	beq.n	800303e <HAL_GPIO_Init+0x23e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a4e      	ldr	r2, [pc, #312]	; (800313c <HAL_GPIO_Init+0x33c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d019      	beq.n	800303a <HAL_GPIO_Init+0x23a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a4d      	ldr	r2, [pc, #308]	; (8003140 <HAL_GPIO_Init+0x340>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d013      	beq.n	8003036 <HAL_GPIO_Init+0x236>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a4c      	ldr	r2, [pc, #304]	; (8003144 <HAL_GPIO_Init+0x344>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00d      	beq.n	8003032 <HAL_GPIO_Init+0x232>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a4b      	ldr	r2, [pc, #300]	; (8003148 <HAL_GPIO_Init+0x348>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d007      	beq.n	800302e <HAL_GPIO_Init+0x22e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a4a      	ldr	r2, [pc, #296]	; (800314c <HAL_GPIO_Init+0x34c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d101      	bne.n	800302a <HAL_GPIO_Init+0x22a>
 8003026:	2306      	movs	r3, #6
 8003028:	e00c      	b.n	8003044 <HAL_GPIO_Init+0x244>
 800302a:	2307      	movs	r3, #7
 800302c:	e00a      	b.n	8003044 <HAL_GPIO_Init+0x244>
 800302e:	2305      	movs	r3, #5
 8003030:	e008      	b.n	8003044 <HAL_GPIO_Init+0x244>
 8003032:	2304      	movs	r3, #4
 8003034:	e006      	b.n	8003044 <HAL_GPIO_Init+0x244>
 8003036:	2303      	movs	r3, #3
 8003038:	e004      	b.n	8003044 <HAL_GPIO_Init+0x244>
 800303a:	2302      	movs	r3, #2
 800303c:	e002      	b.n	8003044 <HAL_GPIO_Init+0x244>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <HAL_GPIO_Init+0x244>
 8003042:	2300      	movs	r3, #0
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	f002 0203 	and.w	r2, r2, #3
 800304a:	0092      	lsls	r2, r2, #2
 800304c:	4093      	lsls	r3, r2
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003054:	4937      	ldr	r1, [pc, #220]	; (8003134 <HAL_GPIO_Init+0x334>)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	089b      	lsrs	r3, r3, #2
 800305a:	3302      	adds	r3, #2
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003062:	4b3b      	ldr	r3, [pc, #236]	; (8003150 <HAL_GPIO_Init+0x350>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	43db      	mvns	r3, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003086:	4a32      	ldr	r2, [pc, #200]	; (8003150 <HAL_GPIO_Init+0x350>)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800308c:	4b30      	ldr	r3, [pc, #192]	; (8003150 <HAL_GPIO_Init+0x350>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	43db      	mvns	r3, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030b0:	4a27      	ldr	r2, [pc, #156]	; (8003150 <HAL_GPIO_Init+0x350>)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030b6:	4b26      	ldr	r3, [pc, #152]	; (8003150 <HAL_GPIO_Init+0x350>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030da:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <HAL_GPIO_Init+0x350>)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80030e0:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <HAL_GPIO_Init+0x350>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003104:	4a12      	ldr	r2, [pc, #72]	; (8003150 <HAL_GPIO_Init+0x350>)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	3301      	adds	r3, #1
 800310e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	f47f ae78 	bne.w	8002e10 <HAL_GPIO_Init+0x10>
  }
}
 8003120:	bf00      	nop
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	40010000 	.word	0x40010000
 8003138:	48000400 	.word	0x48000400
 800313c:	48000800 	.word	0x48000800
 8003140:	48000c00 	.word	0x48000c00
 8003144:	48001000 	.word	0x48001000
 8003148:	48001400 	.word	0x48001400
 800314c:	48001800 	.word	0x48001800
 8003150:	40010400 	.word	0x40010400

08003154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	807b      	strh	r3, [r7, #2]
 8003160:	4613      	mov	r3, r2
 8003162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003164:	787b      	ldrb	r3, [r7, #1]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800316a:	887a      	ldrh	r2, [r7, #2]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003170:	e002      	b.n	8003178 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d006      	beq.n	80031a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800319a:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fd fc86 	bl	8000ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40010400 	.word	0x40010400

080031b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80031b8:	4b04      	ldr	r3, [pc, #16]	; (80031cc <HAL_PWREx_GetVoltageRange+0x18>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40007000 	.word	0x40007000

080031d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031de:	d130      	bne.n	8003242 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80031e0:	4b23      	ldr	r3, [pc, #140]	; (8003270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ec:	d038      	beq.n	8003260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ee:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031f6:	4a1e      	ldr	r2, [pc, #120]	; (8003270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031fe:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2232      	movs	r2, #50	; 0x32
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	4a1b      	ldr	r2, [pc, #108]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	0c9b      	lsrs	r3, r3, #18
 8003210:	3301      	adds	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003214:	e002      	b.n	800321c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3b01      	subs	r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800321c:	4b14      	ldr	r3, [pc, #80]	; (8003270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003228:	d102      	bne.n	8003230 <HAL_PWREx_ControlVoltageScaling+0x60>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f2      	bne.n	8003216 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003230:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323c:	d110      	bne.n	8003260 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e00f      	b.n	8003262 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800324a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324e:	d007      	beq.n	8003260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003250:	4b07      	ldr	r3, [pc, #28]	; (8003270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003258:	4a05      	ldr	r2, [pc, #20]	; (8003270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800325a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800325e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40007000 	.word	0x40007000
 8003274:	20000048 	.word	0x20000048
 8003278:	431bde83 	.word	0x431bde83

0800327c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e3c6      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800328e:	4ba1      	ldr	r3, [pc, #644]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003298:	4b9e      	ldr	r3, [pc, #632]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 80e4 	beq.w	8003478 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <HAL_RCC_OscConfig+0x4a>
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	2b0c      	cmp	r3, #12
 80032ba:	f040 808b 	bne.w	80033d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	f040 8087 	bne.w	80033d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032c6:	4b93      	ldr	r3, [pc, #588]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_RCC_OscConfig+0x62>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e39e      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1a      	ldr	r2, [r3, #32]
 80032e2:	4b8c      	ldr	r3, [pc, #560]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d004      	beq.n	80032f8 <HAL_RCC_OscConfig+0x7c>
 80032ee:	4b89      	ldr	r3, [pc, #548]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032f6:	e005      	b.n	8003304 <HAL_RCC_OscConfig+0x88>
 80032f8:	4b86      	ldr	r3, [pc, #536]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 80032fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032fe:	091b      	lsrs	r3, r3, #4
 8003300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003304:	4293      	cmp	r3, r2
 8003306:	d223      	bcs.n	8003350 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fd53 	bl	8003db8 <RCC_SetFlashLatencyFromMSIRange>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e37f      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800331c:	4b7d      	ldr	r3, [pc, #500]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a7c      	ldr	r2, [pc, #496]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 8003322:	f043 0308 	orr.w	r3, r3, #8
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4b7a      	ldr	r3, [pc, #488]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4977      	ldr	r1, [pc, #476]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800333a:	4b76      	ldr	r3, [pc, #472]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	4972      	ldr	r1, [pc, #456]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 800334a:	4313      	orrs	r3, r2
 800334c:	604b      	str	r3, [r1, #4]
 800334e:	e025      	b.n	800339c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003350:	4b70      	ldr	r3, [pc, #448]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a6f      	ldr	r2, [pc, #444]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 8003356:	f043 0308 	orr.w	r3, r3, #8
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	4b6d      	ldr	r3, [pc, #436]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	496a      	ldr	r1, [pc, #424]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800336e:	4b69      	ldr	r3, [pc, #420]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	4965      	ldr	r1, [pc, #404]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fd13 	bl	8003db8 <RCC_SetFlashLatencyFromMSIRange>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e33f      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800339c:	f000 fc48 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b5c      	ldr	r3, [pc, #368]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	091b      	lsrs	r3, r3, #4
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	495a      	ldr	r1, [pc, #360]	; (8003518 <HAL_RCC_OscConfig+0x29c>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
 80033b8:	4a58      	ldr	r2, [pc, #352]	; (800351c <HAL_RCC_OscConfig+0x2a0>)
 80033ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033bc:	4b58      	ldr	r3, [pc, #352]	; (8003520 <HAL_RCC_OscConfig+0x2a4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fd fe1d 	bl	8001000 <HAL_InitTick>
 80033c6:	4603      	mov	r3, r0
 80033c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d052      	beq.n	8003476 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	e323      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d032      	beq.n	8003442 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033dc:	4b4d      	ldr	r3, [pc, #308]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a4c      	ldr	r2, [pc, #304]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033e8:	f7fd fe5a 	bl	80010a0 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033f0:	f7fd fe56 	bl	80010a0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e30c      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003402:	4b44      	ldr	r3, [pc, #272]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800340e:	4b41      	ldr	r3, [pc, #260]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a40      	ldr	r2, [pc, #256]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 8003414:	f043 0308 	orr.w	r3, r3, #8
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b3e      	ldr	r3, [pc, #248]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	493b      	ldr	r1, [pc, #236]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 8003428:	4313      	orrs	r3, r2
 800342a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800342c:	4b39      	ldr	r3, [pc, #228]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	4936      	ldr	r1, [pc, #216]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
 8003440:	e01a      	b.n	8003478 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003442:	4b34      	ldr	r3, [pc, #208]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a33      	ldr	r2, [pc, #204]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800344e:	f7fd fe27 	bl	80010a0 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003456:	f7fd fe23 	bl	80010a0 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e2d9      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003468:	4b2a      	ldr	r3, [pc, #168]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f0      	bne.n	8003456 <HAL_RCC_OscConfig+0x1da>
 8003474:	e000      	b.n	8003478 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003476:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d074      	beq.n	800356e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b08      	cmp	r3, #8
 8003488:	d005      	beq.n	8003496 <HAL_RCC_OscConfig+0x21a>
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	d10e      	bne.n	80034ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d10b      	bne.n	80034ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003496:	4b1f      	ldr	r3, [pc, #124]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d064      	beq.n	800356c <HAL_RCC_OscConfig+0x2f0>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d160      	bne.n	800356c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e2b6      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b6:	d106      	bne.n	80034c6 <HAL_RCC_OscConfig+0x24a>
 80034b8:	4b16      	ldr	r3, [pc, #88]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a15      	ldr	r2, [pc, #84]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 80034be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	e01d      	b.n	8003502 <HAL_RCC_OscConfig+0x286>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ce:	d10c      	bne.n	80034ea <HAL_RCC_OscConfig+0x26e>
 80034d0:	4b10      	ldr	r3, [pc, #64]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a0f      	ldr	r2, [pc, #60]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 80034d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0c      	ldr	r2, [pc, #48]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 80034e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	e00b      	b.n	8003502 <HAL_RCC_OscConfig+0x286>
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a09      	ldr	r2, [pc, #36]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 80034f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a06      	ldr	r2, [pc, #24]	; (8003514 <HAL_RCC_OscConfig+0x298>)
 80034fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003500:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d01c      	beq.n	8003544 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7fd fdc9 	bl	80010a0 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003510:	e011      	b.n	8003536 <HAL_RCC_OscConfig+0x2ba>
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	0800713c 	.word	0x0800713c
 800351c:	20000048 	.word	0x20000048
 8003520:	2000004c 	.word	0x2000004c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003524:	f7fd fdbc 	bl	80010a0 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	; 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e272      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003536:	4baf      	ldr	r3, [pc, #700]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x2a8>
 8003542:	e014      	b.n	800356e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fd fdac 	bl	80010a0 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800354c:	f7fd fda8 	bl	80010a0 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	; 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e25e      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800355e:	4ba5      	ldr	r3, [pc, #660]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x2d0>
 800356a:	e000      	b.n	800356e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d060      	beq.n	800363c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b04      	cmp	r3, #4
 800357e:	d005      	beq.n	800358c <HAL_RCC_OscConfig+0x310>
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b0c      	cmp	r3, #12
 8003584:	d119      	bne.n	80035ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d116      	bne.n	80035ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800358c:	4b99      	ldr	r3, [pc, #612]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_OscConfig+0x328>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e23b      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a4:	4b93      	ldr	r3, [pc, #588]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	061b      	lsls	r3, r3, #24
 80035b2:	4990      	ldr	r1, [pc, #576]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035b8:	e040      	b.n	800363c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d023      	beq.n	800360a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c2:	4b8c      	ldr	r3, [pc, #560]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a8b      	ldr	r2, [pc, #556]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 80035c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ce:	f7fd fd67 	bl	80010a0 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d6:	f7fd fd63 	bl	80010a0 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e219      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035e8:	4b82      	ldr	r3, [pc, #520]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f4:	4b7f      	ldr	r3, [pc, #508]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	497c      	ldr	r1, [pc, #496]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
 8003608:	e018      	b.n	800363c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800360a:	4b7a      	ldr	r3, [pc, #488]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a79      	ldr	r2, [pc, #484]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 8003610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003616:	f7fd fd43 	bl	80010a0 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800361e:	f7fd fd3f 	bl	80010a0 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e1f5      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003630:	4b70      	ldr	r3, [pc, #448]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f0      	bne.n	800361e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d03c      	beq.n	80036c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01c      	beq.n	800368a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003650:	4b68      	ldr	r3, [pc, #416]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 8003652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003656:	4a67      	ldr	r2, [pc, #412]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003660:	f7fd fd1e 	bl	80010a0 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003668:	f7fd fd1a 	bl	80010a0 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e1d0      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800367a:	4b5e      	ldr	r3, [pc, #376]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 800367c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0ef      	beq.n	8003668 <HAL_RCC_OscConfig+0x3ec>
 8003688:	e01b      	b.n	80036c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800368a:	4b5a      	ldr	r3, [pc, #360]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 800368c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003690:	4a58      	ldr	r2, [pc, #352]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369a:	f7fd fd01 	bl	80010a0 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a2:	f7fd fcfd 	bl	80010a0 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e1b3      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036b4:	4b4f      	ldr	r3, [pc, #316]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 80036b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1ef      	bne.n	80036a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80a6 	beq.w	800381c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d0:	2300      	movs	r3, #0
 80036d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036d4:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10d      	bne.n	80036fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e0:	4b44      	ldr	r3, [pc, #272]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	4a43      	ldr	r2, [pc, #268]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 80036e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ea:	6593      	str	r3, [r2, #88]	; 0x58
 80036ec:	4b41      	ldr	r3, [pc, #260]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 80036ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f8:	2301      	movs	r3, #1
 80036fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036fc:	4b3e      	ldr	r3, [pc, #248]	; (80037f8 <HAL_RCC_OscConfig+0x57c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d118      	bne.n	800373a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003708:	4b3b      	ldr	r3, [pc, #236]	; (80037f8 <HAL_RCC_OscConfig+0x57c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a3a      	ldr	r2, [pc, #232]	; (80037f8 <HAL_RCC_OscConfig+0x57c>)
 800370e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003712:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003714:	f7fd fcc4 	bl	80010a0 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371c:	f7fd fcc0 	bl	80010a0 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e176      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800372e:	4b32      	ldr	r3, [pc, #200]	; (80037f8 <HAL_RCC_OscConfig+0x57c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d108      	bne.n	8003754 <HAL_RCC_OscConfig+0x4d8>
 8003742:	4b2c      	ldr	r3, [pc, #176]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003748:	4a2a      	ldr	r2, [pc, #168]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003752:	e024      	b.n	800379e <HAL_RCC_OscConfig+0x522>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b05      	cmp	r3, #5
 800375a:	d110      	bne.n	800377e <HAL_RCC_OscConfig+0x502>
 800375c:	4b25      	ldr	r3, [pc, #148]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003762:	4a24      	ldr	r2, [pc, #144]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 8003764:	f043 0304 	orr.w	r3, r3, #4
 8003768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800376c:	4b21      	ldr	r3, [pc, #132]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003772:	4a20      	ldr	r2, [pc, #128]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800377c:	e00f      	b.n	800379e <HAL_RCC_OscConfig+0x522>
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	4a1b      	ldr	r2, [pc, #108]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800378e:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003794:	4a17      	ldr	r2, [pc, #92]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 8003796:	f023 0304 	bic.w	r3, r3, #4
 800379a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d016      	beq.n	80037d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a6:	f7fd fc7b 	bl	80010a0 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ac:	e00a      	b.n	80037c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ae:	f7fd fc77 	bl	80010a0 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037bc:	4293      	cmp	r3, r2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e12b      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_OscConfig+0x578>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0ed      	beq.n	80037ae <HAL_RCC_OscConfig+0x532>
 80037d2:	e01a      	b.n	800380a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d4:	f7fd fc64 	bl	80010a0 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037da:	e00f      	b.n	80037fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037dc:	f7fd fc60 	bl	80010a0 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d906      	bls.n	80037fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e114      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037fc:	4b89      	ldr	r3, [pc, #548]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e8      	bne.n	80037dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800380a:	7ffb      	ldrb	r3, [r7, #31]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003810:	4b84      	ldr	r3, [pc, #528]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	4a83      	ldr	r2, [pc, #524]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 8003816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800381a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80fa 	beq.w	8003a1a <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	2b02      	cmp	r3, #2
 800382c:	f040 80d0 	bne.w	80039d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003830:	4b7c      	ldr	r3, [pc, #496]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0203 	and.w	r2, r3, #3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	429a      	cmp	r2, r3
 8003842:	d130      	bne.n	80038a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	3b01      	subs	r3, #1
 8003850:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d127      	bne.n	80038a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003860:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d11f      	bne.n	80038a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003870:	2a07      	cmp	r2, #7
 8003872:	bf14      	ite	ne
 8003874:	2201      	movne	r2, #1
 8003876:	2200      	moveq	r2, #0
 8003878:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800387a:	4293      	cmp	r3, r2
 800387c:	d113      	bne.n	80038a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	3b01      	subs	r3, #1
 800388c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d109      	bne.n	80038a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	3b01      	subs	r3, #1
 80038a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d06e      	beq.n	8003984 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	2b0c      	cmp	r3, #12
 80038aa:	d069      	beq.n	8003980 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038ac:	4b5d      	ldr	r3, [pc, #372]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d105      	bne.n	80038c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038b8:	4b5a      	ldr	r3, [pc, #360]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0a9      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038c8:	4b56      	ldr	r3, [pc, #344]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a55      	ldr	r2, [pc, #340]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 80038ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038d4:	f7fd fbe4 	bl	80010a0 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fd fbe0 	bl	80010a0 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e096      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ee:	4b4d      	ldr	r3, [pc, #308]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038fa:	4b4a      	ldr	r3, [pc, #296]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	4b4a      	ldr	r3, [pc, #296]	; (8003a28 <HAL_RCC_OscConfig+0x7ac>)
 8003900:	4013      	ands	r3, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800390a:	3a01      	subs	r2, #1
 800390c:	0112      	lsls	r2, r2, #4
 800390e:	4311      	orrs	r1, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003914:	0212      	lsls	r2, r2, #8
 8003916:	4311      	orrs	r1, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800391c:	0852      	lsrs	r2, r2, #1
 800391e:	3a01      	subs	r2, #1
 8003920:	0552      	lsls	r2, r2, #21
 8003922:	4311      	orrs	r1, r2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003928:	0852      	lsrs	r2, r2, #1
 800392a:	3a01      	subs	r2, #1
 800392c:	0652      	lsls	r2, r2, #25
 800392e:	4311      	orrs	r1, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003934:	0912      	lsrs	r2, r2, #4
 8003936:	0452      	lsls	r2, r2, #17
 8003938:	430a      	orrs	r2, r1
 800393a:	493a      	ldr	r1, [pc, #232]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 800393c:	4313      	orrs	r3, r2
 800393e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003940:	4b38      	ldr	r3, [pc, #224]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a37      	ldr	r2, [pc, #220]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 8003946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800394a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800394c:	4b35      	ldr	r3, [pc, #212]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4a34      	ldr	r2, [pc, #208]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 8003952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003956:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003958:	f7fd fba2 	bl	80010a0 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7fd fb9e 	bl	80010a0 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e054      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003972:	4b2c      	ldr	r3, [pc, #176]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800397e:	e04c      	b.n	8003a1a <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e04b      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003984:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d144      	bne.n	8003a1a <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003990:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a23      	ldr	r2, [pc, #140]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 8003996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800399a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800399c:	4b21      	ldr	r3, [pc, #132]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4a20      	ldr	r2, [pc, #128]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 80039a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039a8:	f7fd fb7a 	bl	80010a0 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b0:	f7fd fb76 	bl	80010a0 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e02c      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c2:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x734>
 80039ce:	e024      	b.n	8003a1a <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	d01f      	beq.n	8003a16 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d6:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a12      	ldr	r2, [pc, #72]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 80039dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e2:	f7fd fb5d 	bl	80010a0 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ea:	f7fd fb59 	bl	80010a0 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e00f      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f0      	bne.n	80039ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a08:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	4905      	ldr	r1, [pc, #20]	; (8003a24 <HAL_RCC_OscConfig+0x7a8>)
 8003a0e:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <HAL_RCC_OscConfig+0x7b0>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	60cb      	str	r3, [r1, #12]
 8003a14:	e001      	b.n	8003a1a <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3720      	adds	r7, #32
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	f99d808c 	.word	0xf99d808c
 8003a2c:	feeefffc 	.word	0xfeeefffc

08003a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0e7      	b.n	8003c14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a44:	4b75      	ldr	r3, [pc, #468]	; (8003c1c <HAL_RCC_ClockConfig+0x1ec>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d910      	bls.n	8003a74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b72      	ldr	r3, [pc, #456]	; (8003c1c <HAL_RCC_ClockConfig+0x1ec>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 0207 	bic.w	r2, r3, #7
 8003a5a:	4970      	ldr	r1, [pc, #448]	; (8003c1c <HAL_RCC_ClockConfig+0x1ec>)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a62:	4b6e      	ldr	r3, [pc, #440]	; (8003c1c <HAL_RCC_ClockConfig+0x1ec>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0cf      	b.n	8003c14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d010      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	4b66      	ldr	r3, [pc, #408]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d908      	bls.n	8003aa2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a90:	4b63      	ldr	r3, [pc, #396]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4960      	ldr	r1, [pc, #384]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d04c      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d107      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab6:	4b5a      	ldr	r3, [pc, #360]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d121      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e0a6      	b.n	8003c14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d107      	bne.n	8003ade <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ace:	4b54      	ldr	r3, [pc, #336]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d115      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e09a      	b.n	8003c14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d107      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ae6:	4b4e      	ldr	r3, [pc, #312]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e08e      	b.n	8003c14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003af6:	4b4a      	ldr	r3, [pc, #296]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e086      	b.n	8003c14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b06:	4b46      	ldr	r3, [pc, #280]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f023 0203 	bic.w	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4943      	ldr	r1, [pc, #268]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b18:	f7fd fac2 	bl	80010a0 <HAL_GetTick>
 8003b1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b20:	f7fd fabe 	bl	80010a0 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e06e      	b.n	8003c14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b36:	4b3a      	ldr	r3, [pc, #232]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 020c 	and.w	r2, r3, #12
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d1eb      	bne.n	8003b20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d010      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d208      	bcs.n	8003b76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b64:	4b2e      	ldr	r3, [pc, #184]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	492b      	ldr	r1, [pc, #172]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b76:	4b29      	ldr	r3, [pc, #164]	; (8003c1c <HAL_RCC_ClockConfig+0x1ec>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d210      	bcs.n	8003ba6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b84:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <HAL_RCC_ClockConfig+0x1ec>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f023 0207 	bic.w	r2, r3, #7
 8003b8c:	4923      	ldr	r1, [pc, #140]	; (8003c1c <HAL_RCC_ClockConfig+0x1ec>)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <HAL_RCC_ClockConfig+0x1ec>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d001      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e036      	b.n	8003c14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb2:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	4918      	ldr	r1, [pc, #96]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d009      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bd0:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4910      	ldr	r1, [pc, #64]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003be4:	f000 f824 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	490b      	ldr	r1, [pc, #44]	; (8003c24 <HAL_RCC_ClockConfig+0x1f4>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003c00:	4a09      	ldr	r2, [pc, #36]	; (8003c28 <HAL_RCC_ClockConfig+0x1f8>)
 8003c02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <HAL_RCC_ClockConfig+0x1fc>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fd f9f9 	bl	8001000 <HAL_InitTick>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c12:	7afb      	ldrb	r3, [r7, #11]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40022000 	.word	0x40022000
 8003c20:	40021000 	.word	0x40021000
 8003c24:	0800713c 	.word	0x0800713c
 8003c28:	20000048 	.word	0x20000048
 8003c2c:	2000004c 	.word	0x2000004c

08003c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b089      	sub	sp, #36	; 0x24
 8003c34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c3e:	4b3e      	ldr	r3, [pc, #248]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c48:	4b3b      	ldr	r3, [pc, #236]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x34>
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b0c      	cmp	r3, #12
 8003c5c:	d121      	bne.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d11e      	bne.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c64:	4b34      	ldr	r3, [pc, #208]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d107      	bne.n	8003c80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c70:	4b31      	ldr	r3, [pc, #196]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c76:	0a1b      	lsrs	r3, r3, #8
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	e005      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c80:	4b2d      	ldr	r3, [pc, #180]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c8c:	4a2b      	ldr	r2, [pc, #172]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10d      	bne.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ca0:	e00a      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d102      	bne.n	8003cae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ca8:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x110>)
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	e004      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cb4:	4b23      	ldr	r3, [pc, #140]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b0c      	cmp	r3, #12
 8003cbc:	d134      	bne.n	8003d28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cbe:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d003      	beq.n	8003cd6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d003      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0xac>
 8003cd4:	e005      	b.n	8003ce2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cd8:	617b      	str	r3, [r7, #20]
      break;
 8003cda:	e005      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cde:	617b      	str	r3, [r7, #20]
      break;
 8003ce0:	e002      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	617b      	str	r3, [r7, #20]
      break;
 8003ce6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ce8:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cf6:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	0a1b      	lsrs	r3, r3, #8
 8003cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	fb02 f203 	mul.w	r2, r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	0e5b      	lsrs	r3, r3, #25
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	3301      	adds	r3, #1
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d28:	69bb      	ldr	r3, [r7, #24]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3724      	adds	r7, #36	; 0x24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	08007154 	.word	0x08007154
 8003d40:	00f42400 	.word	0x00f42400
 8003d44:	007a1200 	.word	0x007a1200

08003d48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d4c:	4b03      	ldr	r3, [pc, #12]	; (8003d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	20000048 	.word	0x20000048

08003d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d64:	f7ff fff0 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	0a1b      	lsrs	r3, r3, #8
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	4904      	ldr	r1, [pc, #16]	; (8003d88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d76:	5ccb      	ldrb	r3, [r1, r3]
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40021000 	.word	0x40021000
 8003d88:	0800714c 	.word	0x0800714c

08003d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d90:	f7ff ffda 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003d94:	4602      	mov	r2, r0
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	0adb      	lsrs	r3, r3, #11
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	4904      	ldr	r1, [pc, #16]	; (8003db4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003da2:	5ccb      	ldrb	r3, [r1, r3]
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40021000 	.word	0x40021000
 8003db4:	0800714c 	.word	0x0800714c

08003db8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003dc4:	4b2a      	ldr	r3, [pc, #168]	; (8003e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003dd0:	f7ff f9f0 	bl	80031b4 <HAL_PWREx_GetVoltageRange>
 8003dd4:	6178      	str	r0, [r7, #20]
 8003dd6:	e014      	b.n	8003e02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dd8:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ddc:	4a24      	ldr	r2, [pc, #144]	; (8003e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de2:	6593      	str	r3, [r2, #88]	; 0x58
 8003de4:	4b22      	ldr	r3, [pc, #136]	; (8003e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003df0:	f7ff f9e0 	bl	80031b4 <HAL_PWREx_GetVoltageRange>
 8003df4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003df6:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfa:	4a1d      	ldr	r2, [pc, #116]	; (8003e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e08:	d10b      	bne.n	8003e22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b80      	cmp	r3, #128	; 0x80
 8003e0e:	d919      	bls.n	8003e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2ba0      	cmp	r3, #160	; 0xa0
 8003e14:	d902      	bls.n	8003e1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e16:	2302      	movs	r3, #2
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	e013      	b.n	8003e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	e010      	b.n	8003e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b80      	cmp	r3, #128	; 0x80
 8003e26:	d902      	bls.n	8003e2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e28:	2303      	movs	r3, #3
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	e00a      	b.n	8003e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b80      	cmp	r3, #128	; 0x80
 8003e32:	d102      	bne.n	8003e3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e34:	2302      	movs	r3, #2
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	e004      	b.n	8003e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b70      	cmp	r3, #112	; 0x70
 8003e3e:	d101      	bne.n	8003e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e40:	2301      	movs	r3, #1
 8003e42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f023 0207 	bic.w	r2, r3, #7
 8003e4c:	4909      	ldr	r1, [pc, #36]	; (8003e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e54:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d001      	beq.n	8003e66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40022000 	.word	0x40022000

08003e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e80:	2300      	movs	r3, #0
 8003e82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e84:	2300      	movs	r3, #0
 8003e86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d041      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e9c:	d02a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ea2:	d824      	bhi.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ea4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ea8:	d008      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003eaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eae:	d81e      	bhi.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eb8:	d010      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003eba:	e018      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ebc:	4b86      	ldr	r3, [pc, #536]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4a85      	ldr	r2, [pc, #532]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ec8:	e015      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fabb 	bl	800444c <RCCEx_PLLSAI1_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003eda:	e00c      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3320      	adds	r3, #32
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fba6 	bl	8004634 <RCCEx_PLLSAI2_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003eec:	e003      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ef2:	e000      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ef6:	7cfb      	ldrb	r3, [r7, #19]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10b      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003efc:	4b76      	ldr	r3, [pc, #472]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f0a:	4973      	ldr	r1, [pc, #460]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f12:	e001      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f14:	7cfb      	ldrb	r3, [r7, #19]
 8003f16:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d041      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f2c:	d02a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f32:	d824      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f38:	d008      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f3e:	d81e      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f48:	d010      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f4a:	e018      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f4c:	4b62      	ldr	r3, [pc, #392]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	4a61      	ldr	r2, [pc, #388]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f56:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f58:	e015      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fa73 	bl	800444c <RCCEx_PLLSAI1_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f6a:	e00c      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3320      	adds	r3, #32
 8003f70:	2100      	movs	r1, #0
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fb5e 	bl	8004634 <RCCEx_PLLSAI2_Config>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f7c:	e003      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	74fb      	strb	r3, [r7, #19]
      break;
 8003f82:	e000      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f86:	7cfb      	ldrb	r3, [r7, #19]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f8c:	4b52      	ldr	r3, [pc, #328]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f9a:	494f      	ldr	r1, [pc, #316]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fa2:	e001      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa4:	7cfb      	ldrb	r3, [r7, #19]
 8003fa6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80a0 	beq.w	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fba:	4b47      	ldr	r3, [pc, #284]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00d      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd0:	4b41      	ldr	r3, [pc, #260]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	4a40      	ldr	r2, [pc, #256]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fda:	6593      	str	r3, [r2, #88]	; 0x58
 8003fdc:	4b3e      	ldr	r3, [pc, #248]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fec:	4b3b      	ldr	r3, [pc, #236]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a3a      	ldr	r2, [pc, #232]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ff8:	f7fd f852 	bl	80010a0 <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ffe:	e009      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004000:	f7fd f84e 	bl	80010a0 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d902      	bls.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	74fb      	strb	r3, [r7, #19]
        break;
 8004012:	e005      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004014:	4b31      	ldr	r3, [pc, #196]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0ef      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004020:	7cfb      	ldrb	r3, [r7, #19]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d15c      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004026:	4b2c      	ldr	r3, [pc, #176]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004030:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01f      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	429a      	cmp	r2, r3
 8004042:	d019      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004044:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004050:	4b21      	ldr	r3, [pc, #132]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004056:	4a20      	ldr	r2, [pc, #128]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004060:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	4a1c      	ldr	r2, [pc, #112]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004070:	4a19      	ldr	r2, [pc, #100]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d016      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004082:	f7fd f80d 	bl	80010a0 <HAL_GetTick>
 8004086:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004088:	e00b      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408a:	f7fd f809 	bl	80010a0 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	f241 3288 	movw	r2, #5000	; 0x1388
 8004098:	4293      	cmp	r3, r2
 800409a:	d902      	bls.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	74fb      	strb	r3, [r7, #19]
            break;
 80040a0:	e006      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a2:	4b0d      	ldr	r3, [pc, #52]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0ec      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040b6:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c6:	4904      	ldr	r1, [pc, #16]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040ce:	e009      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040d0:	7cfb      	ldrb	r3, [r7, #19]
 80040d2:	74bb      	strb	r3, [r7, #18]
 80040d4:	e006      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80040d6:	bf00      	nop
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040e4:	7c7b      	ldrb	r3, [r7, #17]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d105      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ea:	4b9e      	ldr	r3, [pc, #632]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ee:	4a9d      	ldr	r2, [pc, #628]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004102:	4b98      	ldr	r3, [pc, #608]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004108:	f023 0203 	bic.w	r2, r3, #3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	4994      	ldr	r1, [pc, #592]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004124:	4b8f      	ldr	r3, [pc, #572]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412a:	f023 020c 	bic.w	r2, r3, #12
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	498c      	ldr	r1, [pc, #560]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004146:	4b87      	ldr	r3, [pc, #540]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	4983      	ldr	r1, [pc, #524]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004168:	4b7e      	ldr	r3, [pc, #504]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	497b      	ldr	r1, [pc, #492]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800418a:	4b76      	ldr	r3, [pc, #472]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004190:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004198:	4972      	ldr	r1, [pc, #456]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041ac:	4b6d      	ldr	r3, [pc, #436]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ba:	496a      	ldr	r1, [pc, #424]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ce:	4b65      	ldr	r3, [pc, #404]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041dc:	4961      	ldr	r1, [pc, #388]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041f0:	4b5c      	ldr	r3, [pc, #368]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041fe:	4959      	ldr	r1, [pc, #356]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004212:	4b54      	ldr	r3, [pc, #336]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004218:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004220:	4950      	ldr	r1, [pc, #320]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004234:	4b4b      	ldr	r3, [pc, #300]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004242:	4948      	ldr	r1, [pc, #288]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004256:	4b43      	ldr	r3, [pc, #268]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	493f      	ldr	r1, [pc, #252]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d028      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004278:	4b3a      	ldr	r3, [pc, #232]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004286:	4937      	ldr	r1, [pc, #220]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004292:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004296:	d106      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004298:	4b32      	ldr	r3, [pc, #200]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4a31      	ldr	r2, [pc, #196]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042a2:	60d3      	str	r3, [r2, #12]
 80042a4:	e011      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042ae:	d10c      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	2101      	movs	r1, #1
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 f8c8 	bl	800444c <RCCEx_PLLSAI1_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80042c6:	7cfb      	ldrb	r3, [r7, #19]
 80042c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d028      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042d6:	4b23      	ldr	r3, [pc, #140]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e4:	491f      	ldr	r1, [pc, #124]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042f4:	d106      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042f6:	4b1b      	ldr	r3, [pc, #108]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	4a1a      	ldr	r2, [pc, #104]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004300:	60d3      	str	r3, [r2, #12]
 8004302:	e011      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800430c:	d10c      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3304      	adds	r3, #4
 8004312:	2101      	movs	r1, #1
 8004314:	4618      	mov	r0, r3
 8004316:	f000 f899 	bl	800444c <RCCEx_PLLSAI1_Config>
 800431a:	4603      	mov	r3, r0
 800431c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800431e:	7cfb      	ldrb	r3, [r7, #19]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004324:	7cfb      	ldrb	r3, [r7, #19]
 8004326:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d02b      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004334:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004342:	4908      	ldr	r1, [pc, #32]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004352:	d109      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004354:	4b03      	ldr	r3, [pc, #12]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4a02      	ldr	r2, [pc, #8]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800435e:	60d3      	str	r3, [r2, #12]
 8004360:	e014      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004362:	bf00      	nop
 8004364:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800436c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004370:	d10c      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3304      	adds	r3, #4
 8004376:	2101      	movs	r1, #1
 8004378:	4618      	mov	r0, r3
 800437a:	f000 f867 	bl	800444c <RCCEx_PLLSAI1_Config>
 800437e:	4603      	mov	r3, r0
 8004380:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004382:	7cfb      	ldrb	r3, [r7, #19]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004388:	7cfb      	ldrb	r3, [r7, #19]
 800438a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d02f      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004398:	4b2b      	ldr	r3, [pc, #172]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a6:	4928      	ldr	r1, [pc, #160]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043b6:	d10d      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3304      	adds	r3, #4
 80043bc:	2102      	movs	r1, #2
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f844 	bl	800444c <RCCEx_PLLSAI1_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d014      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043ce:	7cfb      	ldrb	r3, [r7, #19]
 80043d0:	74bb      	strb	r3, [r7, #18]
 80043d2:	e011      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3320      	adds	r3, #32
 80043e2:	2102      	movs	r1, #2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 f925 	bl	8004634 <RCCEx_PLLSAI2_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ee:	7cfb      	ldrb	r3, [r7, #19]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043f4:	7cfb      	ldrb	r3, [r7, #19]
 80043f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004404:	4b10      	ldr	r3, [pc, #64]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004412:	490d      	ldr	r1, [pc, #52]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004436:	4904      	ldr	r1, [pc, #16]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800443e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40021000 	.word	0x40021000

0800444c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800445a:	4b75      	ldr	r3, [pc, #468]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d018      	beq.n	8004498 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004466:	4b72      	ldr	r3, [pc, #456]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 0203 	and.w	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d10d      	bne.n	8004492 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
       ||
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800447e:	4b6c      	ldr	r3, [pc, #432]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
       ||
 800448e:	429a      	cmp	r2, r3
 8004490:	d047      	beq.n	8004522 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
 8004496:	e044      	b.n	8004522 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b03      	cmp	r3, #3
 800449e:	d018      	beq.n	80044d2 <RCCEx_PLLSAI1_Config+0x86>
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d825      	bhi.n	80044f0 <RCCEx_PLLSAI1_Config+0xa4>
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d002      	beq.n	80044ae <RCCEx_PLLSAI1_Config+0x62>
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d009      	beq.n	80044c0 <RCCEx_PLLSAI1_Config+0x74>
 80044ac:	e020      	b.n	80044f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044ae:	4b60      	ldr	r3, [pc, #384]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d11d      	bne.n	80044f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044be:	e01a      	b.n	80044f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044c0:	4b5b      	ldr	r3, [pc, #364]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d116      	bne.n	80044fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d0:	e013      	b.n	80044fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044d2:	4b57      	ldr	r3, [pc, #348]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10f      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044de:	4b54      	ldr	r3, [pc, #336]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044ee:	e006      	b.n	80044fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
      break;
 80044f4:	e004      	b.n	8004500 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044f6:	bf00      	nop
 80044f8:	e002      	b.n	8004500 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044fa:	bf00      	nop
 80044fc:	e000      	b.n	8004500 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10d      	bne.n	8004522 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004506:	4b4a      	ldr	r3, [pc, #296]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6819      	ldr	r1, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	3b01      	subs	r3, #1
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	430b      	orrs	r3, r1
 800451c:	4944      	ldr	r1, [pc, #272]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800451e:	4313      	orrs	r3, r2
 8004520:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d17d      	bne.n	8004624 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004528:	4b41      	ldr	r3, [pc, #260]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a40      	ldr	r2, [pc, #256]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800452e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004534:	f7fc fdb4 	bl	80010a0 <HAL_GetTick>
 8004538:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800453a:	e009      	b.n	8004550 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800453c:	f7fc fdb0 	bl	80010a0 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d902      	bls.n	8004550 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	73fb      	strb	r3, [r7, #15]
        break;
 800454e:	e005      	b.n	800455c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004550:	4b37      	ldr	r3, [pc, #220]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1ef      	bne.n	800453c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d160      	bne.n	8004624 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d111      	bne.n	800458c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004568:	4b31      	ldr	r3, [pc, #196]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6892      	ldr	r2, [r2, #8]
 8004578:	0211      	lsls	r1, r2, #8
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	68d2      	ldr	r2, [r2, #12]
 800457e:	0912      	lsrs	r2, r2, #4
 8004580:	0452      	lsls	r2, r2, #17
 8004582:	430a      	orrs	r2, r1
 8004584:	492a      	ldr	r1, [pc, #168]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004586:	4313      	orrs	r3, r2
 8004588:	610b      	str	r3, [r1, #16]
 800458a:	e027      	b.n	80045dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d112      	bne.n	80045b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004592:	4b27      	ldr	r3, [pc, #156]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800459a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6892      	ldr	r2, [r2, #8]
 80045a2:	0211      	lsls	r1, r2, #8
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6912      	ldr	r2, [r2, #16]
 80045a8:	0852      	lsrs	r2, r2, #1
 80045aa:	3a01      	subs	r2, #1
 80045ac:	0552      	lsls	r2, r2, #21
 80045ae:	430a      	orrs	r2, r1
 80045b0:	491f      	ldr	r1, [pc, #124]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	610b      	str	r3, [r1, #16]
 80045b6:	e011      	b.n	80045dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045b8:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6892      	ldr	r2, [r2, #8]
 80045c8:	0211      	lsls	r1, r2, #8
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6952      	ldr	r2, [r2, #20]
 80045ce:	0852      	lsrs	r2, r2, #1
 80045d0:	3a01      	subs	r2, #1
 80045d2:	0652      	lsls	r2, r2, #25
 80045d4:	430a      	orrs	r2, r1
 80045d6:	4916      	ldr	r1, [pc, #88]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045dc:	4b14      	ldr	r3, [pc, #80]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a13      	ldr	r2, [pc, #76]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fc fd5a 	bl	80010a0 <HAL_GetTick>
 80045ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045ee:	e009      	b.n	8004604 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045f0:	f7fc fd56 	bl	80010a0 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d902      	bls.n	8004604 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	73fb      	strb	r3, [r7, #15]
          break;
 8004602:	e005      	b.n	8004610 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004604:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0ef      	beq.n	80045f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	4904      	ldr	r1, [pc, #16]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004620:	4313      	orrs	r3, r2
 8004622:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004624:	7bfb      	ldrb	r3, [r7, #15]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40021000 	.word	0x40021000

08004634 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004642:	4b6a      	ldr	r3, [pc, #424]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d018      	beq.n	8004680 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800464e:	4b67      	ldr	r3, [pc, #412]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0203 	and.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d10d      	bne.n	800467a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
       ||
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004666:	4b61      	ldr	r3, [pc, #388]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	091b      	lsrs	r3, r3, #4
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
       ||
 8004676:	429a      	cmp	r2, r3
 8004678:	d047      	beq.n	800470a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
 800467e:	e044      	b.n	800470a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b03      	cmp	r3, #3
 8004686:	d018      	beq.n	80046ba <RCCEx_PLLSAI2_Config+0x86>
 8004688:	2b03      	cmp	r3, #3
 800468a:	d825      	bhi.n	80046d8 <RCCEx_PLLSAI2_Config+0xa4>
 800468c:	2b01      	cmp	r3, #1
 800468e:	d002      	beq.n	8004696 <RCCEx_PLLSAI2_Config+0x62>
 8004690:	2b02      	cmp	r3, #2
 8004692:	d009      	beq.n	80046a8 <RCCEx_PLLSAI2_Config+0x74>
 8004694:	e020      	b.n	80046d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004696:	4b55      	ldr	r3, [pc, #340]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d11d      	bne.n	80046de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a6:	e01a      	b.n	80046de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046a8:	4b50      	ldr	r3, [pc, #320]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d116      	bne.n	80046e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b8:	e013      	b.n	80046e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046ba:	4b4c      	ldr	r3, [pc, #304]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10f      	bne.n	80046e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046c6:	4b49      	ldr	r3, [pc, #292]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046d6:	e006      	b.n	80046e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
      break;
 80046dc:	e004      	b.n	80046e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046de:	bf00      	nop
 80046e0:	e002      	b.n	80046e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046e2:	bf00      	nop
 80046e4:	e000      	b.n	80046e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10d      	bne.n	800470a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046ee:	4b3f      	ldr	r3, [pc, #252]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6819      	ldr	r1, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	3b01      	subs	r3, #1
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	430b      	orrs	r3, r1
 8004704:	4939      	ldr	r1, [pc, #228]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004706:	4313      	orrs	r3, r2
 8004708:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d167      	bne.n	80047e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004710:	4b36      	ldr	r3, [pc, #216]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a35      	ldr	r2, [pc, #212]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800471a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800471c:	f7fc fcc0 	bl	80010a0 <HAL_GetTick>
 8004720:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004722:	e009      	b.n	8004738 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004724:	f7fc fcbc 	bl	80010a0 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d902      	bls.n	8004738 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	73fb      	strb	r3, [r7, #15]
        break;
 8004736:	e005      	b.n	8004744 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004738:	4b2c      	ldr	r3, [pc, #176]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1ef      	bne.n	8004724 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d14a      	bne.n	80047e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d111      	bne.n	8004774 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004750:	4b26      	ldr	r3, [pc, #152]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6892      	ldr	r2, [r2, #8]
 8004760:	0211      	lsls	r1, r2, #8
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	68d2      	ldr	r2, [r2, #12]
 8004766:	0912      	lsrs	r2, r2, #4
 8004768:	0452      	lsls	r2, r2, #17
 800476a:	430a      	orrs	r2, r1
 800476c:	491f      	ldr	r1, [pc, #124]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800476e:	4313      	orrs	r3, r2
 8004770:	614b      	str	r3, [r1, #20]
 8004772:	e011      	b.n	8004798 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004774:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800477c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6892      	ldr	r2, [r2, #8]
 8004784:	0211      	lsls	r1, r2, #8
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6912      	ldr	r2, [r2, #16]
 800478a:	0852      	lsrs	r2, r2, #1
 800478c:	3a01      	subs	r2, #1
 800478e:	0652      	lsls	r2, r2, #25
 8004790:	430a      	orrs	r2, r1
 8004792:	4916      	ldr	r1, [pc, #88]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004794:	4313      	orrs	r3, r2
 8004796:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004798:	4b14      	ldr	r3, [pc, #80]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a13      	ldr	r2, [pc, #76]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800479e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a4:	f7fc fc7c 	bl	80010a0 <HAL_GetTick>
 80047a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047aa:	e009      	b.n	80047c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047ac:	f7fc fc78 	bl	80010a0 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d902      	bls.n	80047c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	73fb      	strb	r3, [r7, #15]
          break;
 80047be:	e005      	b.n	80047cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047c0:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0ef      	beq.n	80047ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047d2:	4b06      	ldr	r3, [pc, #24]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	4904      	ldr	r1, [pc, #16]	; (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40021000 	.word	0x40021000

080047f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e040      	b.n	8004884 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fc fb4e 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2224      	movs	r2, #36	; 0x24
 800481c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0201 	bic.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fc7c 	bl	800512c <UART_SetConfig>
 8004834:	4603      	mov	r3, r0
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e022      	b.n	8004884 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fefa 	bl	8005640 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800485a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800486a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 ff81 	bl	8005784 <UART_CheckIdleState>
 8004882:	4603      	mov	r3, r0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08a      	sub	sp, #40	; 0x28
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	4613      	mov	r3, r2
 800489a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	f040 8082 	bne.w	80049aa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <HAL_UART_Transmit+0x26>
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e07a      	b.n	80049ac <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_UART_Transmit+0x38>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e073      	b.n	80049ac <HAL_UART_Transmit+0x120>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2221      	movs	r2, #33	; 0x21
 80048d8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048da:	f7fc fbe1 	bl	80010a0 <HAL_GetTick>
 80048de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	88fa      	ldrh	r2, [r7, #6]
 80048e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	88fa      	ldrh	r2, [r7, #6]
 80048ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f8:	d108      	bne.n	800490c <HAL_UART_Transmit+0x80>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d104      	bne.n	800490c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004902:	2300      	movs	r3, #0
 8004904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	e003      	b.n	8004914 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004910:	2300      	movs	r3, #0
 8004912:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800491c:	e02d      	b.n	800497a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2200      	movs	r2, #0
 8004926:	2180      	movs	r1, #128	; 0x80
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 ff74 	bl	8005816 <UART_WaitOnFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e039      	b.n	80049ac <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10b      	bne.n	8004956 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	881a      	ldrh	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800494a:	b292      	uxth	r2, r2
 800494c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	3302      	adds	r3, #2
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	e008      	b.n	8004968 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	781a      	ldrb	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	b292      	uxth	r2, r2
 8004960:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	3301      	adds	r3, #1
 8004966:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800496e:	b29b      	uxth	r3, r3
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1cb      	bne.n	800491e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2200      	movs	r2, #0
 800498e:	2140      	movs	r1, #64	; 0x40
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 ff40 	bl	8005816 <UART_WaitOnFlagUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e005      	b.n	80049ac <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	e000      	b.n	80049ac <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80049aa:	2302      	movs	r3, #2
  }
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3720      	adds	r7, #32
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b08b      	sub	sp, #44	; 0x2c
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	4613      	mov	r3, r2
 80049c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d156      	bne.n	8004a78 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <HAL_UART_Transmit_IT+0x22>
 80049d0:	88fb      	ldrh	r3, [r7, #6]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e04f      	b.n	8004a7a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_UART_Transmit_IT+0x34>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e048      	b.n	8004a7a <HAL_UART_Transmit_IT+0xc6>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	88fa      	ldrh	r2, [r7, #6]
 80049fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	88fa      	ldrh	r2, [r7, #6]
 8004a02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2221      	movs	r2, #33	; 0x21
 8004a18:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a22:	d107      	bne.n	8004a34 <HAL_UART_Transmit_IT+0x80>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d103      	bne.n	8004a34 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4a16      	ldr	r2, [pc, #88]	; (8004a88 <HAL_UART_Transmit_IT+0xd4>)
 8004a30:	669a      	str	r2, [r3, #104]	; 0x68
 8004a32:	e002      	b.n	8004a3a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4a15      	ldr	r2, [pc, #84]	; (8004a8c <HAL_UART_Transmit_IT+0xd8>)
 8004a38:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	623b      	str	r3, [r7, #32]
 8004a62:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a64:	69f9      	ldr	r1, [r7, #28]
 8004a66:	6a3a      	ldr	r2, [r7, #32]
 8004a68:	e841 2300 	strex	r3, r2, [r1]
 8004a6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1e6      	bne.n	8004a42 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	e000      	b.n	8004a7a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004a78:	2302      	movs	r3, #2
  }
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	372c      	adds	r7, #44	; 0x2c
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	08005cdf 	.word	0x08005cdf
 8004a8c:	08005c27 	.word	0x08005c27

08004a90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	; 0x28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aa2:	2b20      	cmp	r3, #32
 8004aa4:	d142      	bne.n	8004b2c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <HAL_UART_Receive_IT+0x22>
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e03b      	b.n	8004b2e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_UART_Receive_IT+0x34>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e034      	b.n	8004b2e <HAL_UART_Receive_IT+0x9e>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <HAL_UART_Receive_IT+0xa8>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d01f      	beq.n	8004b1c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d018      	beq.n	8004b1c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	613b      	str	r3, [r7, #16]
   return(result);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	623b      	str	r3, [r7, #32]
 8004b0a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0c:	69f9      	ldr	r1, [r7, #28]
 8004b0e:	6a3a      	ldr	r2, [r7, #32]
 8004b10:	e841 2300 	strex	r3, r2, [r1]
 8004b14:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e6      	bne.n	8004aea <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b1c:	88fb      	ldrh	r3, [r7, #6]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 ff3c 	bl	80059a0 <UART_Start_Receive_IT>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	e000      	b.n	8004b2e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004b2c:	2302      	movs	r3, #2
  }
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3728      	adds	r7, #40	; 0x28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40008000 	.word	0x40008000

08004b3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b0ba      	sub	sp, #232	; 0xe8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b66:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d115      	bne.n	8004ba4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00f      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d009      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 82a6 	beq.w	80050e6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	4798      	blx	r3
      }
      return;
 8004ba2:	e2a0      	b.n	80050e6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004ba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8117 	beq.w	8004ddc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004bba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004bbe:	4b85      	ldr	r3, [pc, #532]	; (8004dd4 <HAL_UART_IRQHandler+0x298>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 810a 	beq.w	8004ddc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d011      	beq.n	8004bf8 <HAL_UART_IRQHandler+0xbc>
 8004bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00b      	beq.n	8004bf8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2201      	movs	r2, #1
 8004be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bee:	f043 0201 	orr.w	r2, r3, #1
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d011      	beq.n	8004c28 <HAL_UART_IRQHandler+0xec>
 8004c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00b      	beq.n	8004c28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2202      	movs	r2, #2
 8004c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c1e:	f043 0204 	orr.w	r2, r3, #4
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d011      	beq.n	8004c58 <HAL_UART_IRQHandler+0x11c>
 8004c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00b      	beq.n	8004c58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2204      	movs	r2, #4
 8004c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c4e:	f043 0202 	orr.w	r2, r3, #2
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d017      	beq.n	8004c94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d105      	bne.n	8004c7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00b      	beq.n	8004c94 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2208      	movs	r2, #8
 8004c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c8a:	f043 0208 	orr.w	r2, r3, #8
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d012      	beq.n	8004cc6 <HAL_UART_IRQHandler+0x18a>
 8004ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00c      	beq.n	8004cc6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cbc:	f043 0220 	orr.w	r2, r3, #32
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 820c 	beq.w	80050ea <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00d      	beq.n	8004cfa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d007      	beq.n	8004cfa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	2b40      	cmp	r3, #64	; 0x40
 8004d10:	d005      	beq.n	8004d1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d04f      	beq.n	8004dbe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 ff08 	bl	8005b34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b40      	cmp	r3, #64	; 0x40
 8004d30:	d141      	bne.n	8004db6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3308      	adds	r3, #8
 8004d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1d9      	bne.n	8004d32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d013      	beq.n	8004dae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8a:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <HAL_UART_IRQHandler+0x29c>)
 8004d8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fd ff14 	bl	8002bc0 <HAL_DMA_Abort_IT>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d017      	beq.n	8004dce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004da8:	4610      	mov	r0, r2
 8004daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dac:	e00f      	b.n	8004dce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f9a6 	bl	8005100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db4:	e00b      	b.n	8004dce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f9a2 	bl	8005100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dbc:	e007      	b.n	8004dce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f99e 	bl	8005100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004dcc:	e18d      	b.n	80050ea <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dce:	bf00      	nop
    return;
 8004dd0:	e18b      	b.n	80050ea <HAL_UART_IRQHandler+0x5ae>
 8004dd2:	bf00      	nop
 8004dd4:	04000120 	.word	0x04000120
 8004dd8:	08005bfb 	.word	0x08005bfb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	f040 8146 	bne.w	8005072 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dea:	f003 0310 	and.w	r3, r3, #16
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 813f 	beq.w	8005072 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8138 	beq.w	8005072 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2210      	movs	r2, #16
 8004e08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	f040 80b4 	bne.w	8004f82 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 815f 	beq.w	80050ee <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	f080 8157 	bcs.w	80050ee <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f040 8085 	bne.w	8004f66 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	461a      	mov	r2, r3
 8004e82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1da      	bne.n	8004e5c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004eca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ece:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ed2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e1      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3308      	adds	r3, #8
 8004f02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1e3      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f36:	f023 0310 	bic.w	r3, r3, #16
 8004f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f48:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f4a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e4      	bne.n	8004f26 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fd fdef 	bl	8002b44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	4619      	mov	r1, r3
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f8ca 	bl	8005114 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f80:	e0b5      	b.n	80050ee <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 80a7 	beq.w	80050f2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004fa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 80a2 	beq.w	80050f2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e4      	bne.n	8004fae <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3308      	adds	r3, #8
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	e853 3f00 	ldrex	r3, [r3]
 8004ff2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	f023 0301 	bic.w	r3, r3, #1
 8004ffa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3308      	adds	r3, #8
 8005004:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005008:	633a      	str	r2, [r7, #48]	; 0x30
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800500e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e3      	bne.n	8004fe4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2220      	movs	r2, #32
 8005020:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	e853 3f00 	ldrex	r3, [r3]
 800503a:	60fb      	str	r3, [r7, #12]
   return(result);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0310 	bic.w	r3, r3, #16
 8005042:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005050:	61fb      	str	r3, [r7, #28]
 8005052:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	69b9      	ldr	r1, [r7, #24]
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	e841 2300 	strex	r3, r2, [r1]
 800505c:	617b      	str	r3, [r7, #20]
   return(result);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e4      	bne.n	800502e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005064:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005068:	4619      	mov	r1, r3
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f852 	bl	8005114 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005070:	e03f      	b.n	80050f2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00e      	beq.n	800509c <HAL_UART_IRQHandler+0x560>
 800507e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d008      	beq.n	800509c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005092:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f001 f80c 	bl	80060b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800509a:	e02d      	b.n	80050f8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800509c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00e      	beq.n	80050c6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d008      	beq.n	80050c6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01c      	beq.n	80050f6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	4798      	blx	r3
    }
    return;
 80050c4:	e017      	b.n	80050f6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d012      	beq.n	80050f8 <HAL_UART_IRQHandler+0x5bc>
 80050d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00c      	beq.n	80050f8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fe5d 	bl	8005d9e <UART_EndTransmit_IT>
    return;
 80050e4:	e008      	b.n	80050f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80050e6:	bf00      	nop
 80050e8:	e006      	b.n	80050f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80050ea:	bf00      	nop
 80050ec:	e004      	b.n	80050f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80050ee:	bf00      	nop
 80050f0:	e002      	b.n	80050f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80050f2:	bf00      	nop
 80050f4:	e000      	b.n	80050f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80050f6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80050f8:	37e8      	adds	r7, #232	; 0xe8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop

08005100 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800512c:	b5b0      	push	{r4, r5, r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	4313      	orrs	r3, r2
 800514e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	4bad      	ldr	r3, [pc, #692]	; (800540c <UART_SetConfig+0x2e0>)
 8005158:	4013      	ands	r3, r2
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	69f9      	ldr	r1, [r7, #28]
 8005160:	430b      	orrs	r3, r1
 8005162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4aa2      	ldr	r2, [pc, #648]	; (8005410 <UART_SetConfig+0x2e4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d004      	beq.n	8005194 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	4313      	orrs	r3, r2
 8005192:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69fa      	ldr	r2, [r7, #28]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a99      	ldr	r2, [pc, #612]	; (8005414 <UART_SetConfig+0x2e8>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d121      	bne.n	80051f6 <UART_SetConfig+0xca>
 80051b2:	4b99      	ldr	r3, [pc, #612]	; (8005418 <UART_SetConfig+0x2ec>)
 80051b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b8:	f003 0303 	and.w	r3, r3, #3
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d817      	bhi.n	80051f0 <UART_SetConfig+0xc4>
 80051c0:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <UART_SetConfig+0x9c>)
 80051c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c6:	bf00      	nop
 80051c8:	080051d9 	.word	0x080051d9
 80051cc:	080051e5 	.word	0x080051e5
 80051d0:	080051df 	.word	0x080051df
 80051d4:	080051eb 	.word	0x080051eb
 80051d8:	2301      	movs	r3, #1
 80051da:	76fb      	strb	r3, [r7, #27]
 80051dc:	e0e7      	b.n	80053ae <UART_SetConfig+0x282>
 80051de:	2302      	movs	r3, #2
 80051e0:	76fb      	strb	r3, [r7, #27]
 80051e2:	e0e4      	b.n	80053ae <UART_SetConfig+0x282>
 80051e4:	2304      	movs	r3, #4
 80051e6:	76fb      	strb	r3, [r7, #27]
 80051e8:	e0e1      	b.n	80053ae <UART_SetConfig+0x282>
 80051ea:	2308      	movs	r3, #8
 80051ec:	76fb      	strb	r3, [r7, #27]
 80051ee:	e0de      	b.n	80053ae <UART_SetConfig+0x282>
 80051f0:	2310      	movs	r3, #16
 80051f2:	76fb      	strb	r3, [r7, #27]
 80051f4:	e0db      	b.n	80053ae <UART_SetConfig+0x282>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a88      	ldr	r2, [pc, #544]	; (800541c <UART_SetConfig+0x2f0>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d132      	bne.n	8005266 <UART_SetConfig+0x13a>
 8005200:	4b85      	ldr	r3, [pc, #532]	; (8005418 <UART_SetConfig+0x2ec>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005206:	f003 030c 	and.w	r3, r3, #12
 800520a:	2b0c      	cmp	r3, #12
 800520c:	d828      	bhi.n	8005260 <UART_SetConfig+0x134>
 800520e:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <UART_SetConfig+0xe8>)
 8005210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005214:	08005249 	.word	0x08005249
 8005218:	08005261 	.word	0x08005261
 800521c:	08005261 	.word	0x08005261
 8005220:	08005261 	.word	0x08005261
 8005224:	08005255 	.word	0x08005255
 8005228:	08005261 	.word	0x08005261
 800522c:	08005261 	.word	0x08005261
 8005230:	08005261 	.word	0x08005261
 8005234:	0800524f 	.word	0x0800524f
 8005238:	08005261 	.word	0x08005261
 800523c:	08005261 	.word	0x08005261
 8005240:	08005261 	.word	0x08005261
 8005244:	0800525b 	.word	0x0800525b
 8005248:	2300      	movs	r3, #0
 800524a:	76fb      	strb	r3, [r7, #27]
 800524c:	e0af      	b.n	80053ae <UART_SetConfig+0x282>
 800524e:	2302      	movs	r3, #2
 8005250:	76fb      	strb	r3, [r7, #27]
 8005252:	e0ac      	b.n	80053ae <UART_SetConfig+0x282>
 8005254:	2304      	movs	r3, #4
 8005256:	76fb      	strb	r3, [r7, #27]
 8005258:	e0a9      	b.n	80053ae <UART_SetConfig+0x282>
 800525a:	2308      	movs	r3, #8
 800525c:	76fb      	strb	r3, [r7, #27]
 800525e:	e0a6      	b.n	80053ae <UART_SetConfig+0x282>
 8005260:	2310      	movs	r3, #16
 8005262:	76fb      	strb	r3, [r7, #27]
 8005264:	e0a3      	b.n	80053ae <UART_SetConfig+0x282>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a6d      	ldr	r2, [pc, #436]	; (8005420 <UART_SetConfig+0x2f4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d120      	bne.n	80052b2 <UART_SetConfig+0x186>
 8005270:	4b69      	ldr	r3, [pc, #420]	; (8005418 <UART_SetConfig+0x2ec>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005276:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800527a:	2b30      	cmp	r3, #48	; 0x30
 800527c:	d013      	beq.n	80052a6 <UART_SetConfig+0x17a>
 800527e:	2b30      	cmp	r3, #48	; 0x30
 8005280:	d814      	bhi.n	80052ac <UART_SetConfig+0x180>
 8005282:	2b20      	cmp	r3, #32
 8005284:	d009      	beq.n	800529a <UART_SetConfig+0x16e>
 8005286:	2b20      	cmp	r3, #32
 8005288:	d810      	bhi.n	80052ac <UART_SetConfig+0x180>
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <UART_SetConfig+0x168>
 800528e:	2b10      	cmp	r3, #16
 8005290:	d006      	beq.n	80052a0 <UART_SetConfig+0x174>
 8005292:	e00b      	b.n	80052ac <UART_SetConfig+0x180>
 8005294:	2300      	movs	r3, #0
 8005296:	76fb      	strb	r3, [r7, #27]
 8005298:	e089      	b.n	80053ae <UART_SetConfig+0x282>
 800529a:	2302      	movs	r3, #2
 800529c:	76fb      	strb	r3, [r7, #27]
 800529e:	e086      	b.n	80053ae <UART_SetConfig+0x282>
 80052a0:	2304      	movs	r3, #4
 80052a2:	76fb      	strb	r3, [r7, #27]
 80052a4:	e083      	b.n	80053ae <UART_SetConfig+0x282>
 80052a6:	2308      	movs	r3, #8
 80052a8:	76fb      	strb	r3, [r7, #27]
 80052aa:	e080      	b.n	80053ae <UART_SetConfig+0x282>
 80052ac:	2310      	movs	r3, #16
 80052ae:	76fb      	strb	r3, [r7, #27]
 80052b0:	e07d      	b.n	80053ae <UART_SetConfig+0x282>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a5b      	ldr	r2, [pc, #364]	; (8005424 <UART_SetConfig+0x2f8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d120      	bne.n	80052fe <UART_SetConfig+0x1d2>
 80052bc:	4b56      	ldr	r3, [pc, #344]	; (8005418 <UART_SetConfig+0x2ec>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052c6:	2bc0      	cmp	r3, #192	; 0xc0
 80052c8:	d013      	beq.n	80052f2 <UART_SetConfig+0x1c6>
 80052ca:	2bc0      	cmp	r3, #192	; 0xc0
 80052cc:	d814      	bhi.n	80052f8 <UART_SetConfig+0x1cc>
 80052ce:	2b80      	cmp	r3, #128	; 0x80
 80052d0:	d009      	beq.n	80052e6 <UART_SetConfig+0x1ba>
 80052d2:	2b80      	cmp	r3, #128	; 0x80
 80052d4:	d810      	bhi.n	80052f8 <UART_SetConfig+0x1cc>
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <UART_SetConfig+0x1b4>
 80052da:	2b40      	cmp	r3, #64	; 0x40
 80052dc:	d006      	beq.n	80052ec <UART_SetConfig+0x1c0>
 80052de:	e00b      	b.n	80052f8 <UART_SetConfig+0x1cc>
 80052e0:	2300      	movs	r3, #0
 80052e2:	76fb      	strb	r3, [r7, #27]
 80052e4:	e063      	b.n	80053ae <UART_SetConfig+0x282>
 80052e6:	2302      	movs	r3, #2
 80052e8:	76fb      	strb	r3, [r7, #27]
 80052ea:	e060      	b.n	80053ae <UART_SetConfig+0x282>
 80052ec:	2304      	movs	r3, #4
 80052ee:	76fb      	strb	r3, [r7, #27]
 80052f0:	e05d      	b.n	80053ae <UART_SetConfig+0x282>
 80052f2:	2308      	movs	r3, #8
 80052f4:	76fb      	strb	r3, [r7, #27]
 80052f6:	e05a      	b.n	80053ae <UART_SetConfig+0x282>
 80052f8:	2310      	movs	r3, #16
 80052fa:	76fb      	strb	r3, [r7, #27]
 80052fc:	e057      	b.n	80053ae <UART_SetConfig+0x282>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a49      	ldr	r2, [pc, #292]	; (8005428 <UART_SetConfig+0x2fc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d125      	bne.n	8005354 <UART_SetConfig+0x228>
 8005308:	4b43      	ldr	r3, [pc, #268]	; (8005418 <UART_SetConfig+0x2ec>)
 800530a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005312:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005316:	d017      	beq.n	8005348 <UART_SetConfig+0x21c>
 8005318:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800531c:	d817      	bhi.n	800534e <UART_SetConfig+0x222>
 800531e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005322:	d00b      	beq.n	800533c <UART_SetConfig+0x210>
 8005324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005328:	d811      	bhi.n	800534e <UART_SetConfig+0x222>
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <UART_SetConfig+0x20a>
 800532e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005332:	d006      	beq.n	8005342 <UART_SetConfig+0x216>
 8005334:	e00b      	b.n	800534e <UART_SetConfig+0x222>
 8005336:	2300      	movs	r3, #0
 8005338:	76fb      	strb	r3, [r7, #27]
 800533a:	e038      	b.n	80053ae <UART_SetConfig+0x282>
 800533c:	2302      	movs	r3, #2
 800533e:	76fb      	strb	r3, [r7, #27]
 8005340:	e035      	b.n	80053ae <UART_SetConfig+0x282>
 8005342:	2304      	movs	r3, #4
 8005344:	76fb      	strb	r3, [r7, #27]
 8005346:	e032      	b.n	80053ae <UART_SetConfig+0x282>
 8005348:	2308      	movs	r3, #8
 800534a:	76fb      	strb	r3, [r7, #27]
 800534c:	e02f      	b.n	80053ae <UART_SetConfig+0x282>
 800534e:	2310      	movs	r3, #16
 8005350:	76fb      	strb	r3, [r7, #27]
 8005352:	e02c      	b.n	80053ae <UART_SetConfig+0x282>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a2d      	ldr	r2, [pc, #180]	; (8005410 <UART_SetConfig+0x2e4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d125      	bne.n	80053aa <UART_SetConfig+0x27e>
 800535e:	4b2e      	ldr	r3, [pc, #184]	; (8005418 <UART_SetConfig+0x2ec>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005364:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005368:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800536c:	d017      	beq.n	800539e <UART_SetConfig+0x272>
 800536e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005372:	d817      	bhi.n	80053a4 <UART_SetConfig+0x278>
 8005374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005378:	d00b      	beq.n	8005392 <UART_SetConfig+0x266>
 800537a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800537e:	d811      	bhi.n	80053a4 <UART_SetConfig+0x278>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <UART_SetConfig+0x260>
 8005384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005388:	d006      	beq.n	8005398 <UART_SetConfig+0x26c>
 800538a:	e00b      	b.n	80053a4 <UART_SetConfig+0x278>
 800538c:	2300      	movs	r3, #0
 800538e:	76fb      	strb	r3, [r7, #27]
 8005390:	e00d      	b.n	80053ae <UART_SetConfig+0x282>
 8005392:	2302      	movs	r3, #2
 8005394:	76fb      	strb	r3, [r7, #27]
 8005396:	e00a      	b.n	80053ae <UART_SetConfig+0x282>
 8005398:	2304      	movs	r3, #4
 800539a:	76fb      	strb	r3, [r7, #27]
 800539c:	e007      	b.n	80053ae <UART_SetConfig+0x282>
 800539e:	2308      	movs	r3, #8
 80053a0:	76fb      	strb	r3, [r7, #27]
 80053a2:	e004      	b.n	80053ae <UART_SetConfig+0x282>
 80053a4:	2310      	movs	r3, #16
 80053a6:	76fb      	strb	r3, [r7, #27]
 80053a8:	e001      	b.n	80053ae <UART_SetConfig+0x282>
 80053aa:	2310      	movs	r3, #16
 80053ac:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a17      	ldr	r2, [pc, #92]	; (8005410 <UART_SetConfig+0x2e4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	f040 8087 	bne.w	80054c8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053ba:	7efb      	ldrb	r3, [r7, #27]
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d837      	bhi.n	8005430 <UART_SetConfig+0x304>
 80053c0:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <UART_SetConfig+0x29c>)
 80053c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c6:	bf00      	nop
 80053c8:	080053ed 	.word	0x080053ed
 80053cc:	08005431 	.word	0x08005431
 80053d0:	080053f5 	.word	0x080053f5
 80053d4:	08005431 	.word	0x08005431
 80053d8:	080053fb 	.word	0x080053fb
 80053dc:	08005431 	.word	0x08005431
 80053e0:	08005431 	.word	0x08005431
 80053e4:	08005431 	.word	0x08005431
 80053e8:	08005403 	.word	0x08005403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ec:	f7fe fcb8 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 80053f0:	6178      	str	r0, [r7, #20]
        break;
 80053f2:	e022      	b.n	800543a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053f4:	4b0d      	ldr	r3, [pc, #52]	; (800542c <UART_SetConfig+0x300>)
 80053f6:	617b      	str	r3, [r7, #20]
        break;
 80053f8:	e01f      	b.n	800543a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053fa:	f7fe fc19 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 80053fe:	6178      	str	r0, [r7, #20]
        break;
 8005400:	e01b      	b.n	800543a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005406:	617b      	str	r3, [r7, #20]
        break;
 8005408:	e017      	b.n	800543a <UART_SetConfig+0x30e>
 800540a:	bf00      	nop
 800540c:	efff69f3 	.word	0xefff69f3
 8005410:	40008000 	.word	0x40008000
 8005414:	40013800 	.word	0x40013800
 8005418:	40021000 	.word	0x40021000
 800541c:	40004400 	.word	0x40004400
 8005420:	40004800 	.word	0x40004800
 8005424:	40004c00 	.word	0x40004c00
 8005428:	40005000 	.word	0x40005000
 800542c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	76bb      	strb	r3, [r7, #26]
        break;
 8005438:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 80f1 	beq.w	8005624 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	4413      	add	r3, r2
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	429a      	cmp	r2, r3
 8005450:	d305      	bcc.n	800545e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	429a      	cmp	r2, r3
 800545c:	d902      	bls.n	8005464 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	76bb      	strb	r3, [r7, #26]
 8005462:	e0df      	b.n	8005624 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	4618      	mov	r0, r3
 8005468:	f04f 0100 	mov.w	r1, #0
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	020b      	lsls	r3, r1, #8
 8005476:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800547a:	0202      	lsls	r2, r0, #8
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	6849      	ldr	r1, [r1, #4]
 8005480:	0849      	lsrs	r1, r1, #1
 8005482:	4608      	mov	r0, r1
 8005484:	f04f 0100 	mov.w	r1, #0
 8005488:	1814      	adds	r4, r2, r0
 800548a:	eb43 0501 	adc.w	r5, r3, r1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	461a      	mov	r2, r3
 8005494:	f04f 0300 	mov.w	r3, #0
 8005498:	4620      	mov	r0, r4
 800549a:	4629      	mov	r1, r5
 800549c:	f7fa ff00 	bl	80002a0 <__aeabi_uldivmod>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4613      	mov	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054ae:	d308      	bcc.n	80054c2 <UART_SetConfig+0x396>
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054b6:	d204      	bcs.n	80054c2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	60da      	str	r2, [r3, #12]
 80054c0:	e0b0      	b.n	8005624 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	76bb      	strb	r3, [r7, #26]
 80054c6:	e0ad      	b.n	8005624 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d0:	d15b      	bne.n	800558a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80054d2:	7efb      	ldrb	r3, [r7, #27]
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d828      	bhi.n	800552a <UART_SetConfig+0x3fe>
 80054d8:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <UART_SetConfig+0x3b4>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	08005505 	.word	0x08005505
 80054e4:	0800550d 	.word	0x0800550d
 80054e8:	08005515 	.word	0x08005515
 80054ec:	0800552b 	.word	0x0800552b
 80054f0:	0800551b 	.word	0x0800551b
 80054f4:	0800552b 	.word	0x0800552b
 80054f8:	0800552b 	.word	0x0800552b
 80054fc:	0800552b 	.word	0x0800552b
 8005500:	08005523 	.word	0x08005523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005504:	f7fe fc2c 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 8005508:	6178      	str	r0, [r7, #20]
        break;
 800550a:	e013      	b.n	8005534 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800550c:	f7fe fc3e 	bl	8003d8c <HAL_RCC_GetPCLK2Freq>
 8005510:	6178      	str	r0, [r7, #20]
        break;
 8005512:	e00f      	b.n	8005534 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005514:	4b49      	ldr	r3, [pc, #292]	; (800563c <UART_SetConfig+0x510>)
 8005516:	617b      	str	r3, [r7, #20]
        break;
 8005518:	e00c      	b.n	8005534 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800551a:	f7fe fb89 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 800551e:	6178      	str	r0, [r7, #20]
        break;
 8005520:	e008      	b.n	8005534 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005526:	617b      	str	r3, [r7, #20]
        break;
 8005528:	e004      	b.n	8005534 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	76bb      	strb	r3, [r7, #26]
        break;
 8005532:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d074      	beq.n	8005624 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	005a      	lsls	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	085b      	lsrs	r3, r3, #1
 8005544:	441a      	add	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b0f      	cmp	r3, #15
 8005554:	d916      	bls.n	8005584 <UART_SetConfig+0x458>
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800555c:	d212      	bcs.n	8005584 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	b29b      	uxth	r3, r3
 8005562:	f023 030f 	bic.w	r3, r3, #15
 8005566:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	085b      	lsrs	r3, r3, #1
 800556c:	b29b      	uxth	r3, r3
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	b29a      	uxth	r2, r3
 8005574:	89fb      	ldrh	r3, [r7, #14]
 8005576:	4313      	orrs	r3, r2
 8005578:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	89fa      	ldrh	r2, [r7, #14]
 8005580:	60da      	str	r2, [r3, #12]
 8005582:	e04f      	b.n	8005624 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	76bb      	strb	r3, [r7, #26]
 8005588:	e04c      	b.n	8005624 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800558a:	7efb      	ldrb	r3, [r7, #27]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d828      	bhi.n	80055e2 <UART_SetConfig+0x4b6>
 8005590:	a201      	add	r2, pc, #4	; (adr r2, 8005598 <UART_SetConfig+0x46c>)
 8005592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005596:	bf00      	nop
 8005598:	080055bd 	.word	0x080055bd
 800559c:	080055c5 	.word	0x080055c5
 80055a0:	080055cd 	.word	0x080055cd
 80055a4:	080055e3 	.word	0x080055e3
 80055a8:	080055d3 	.word	0x080055d3
 80055ac:	080055e3 	.word	0x080055e3
 80055b0:	080055e3 	.word	0x080055e3
 80055b4:	080055e3 	.word	0x080055e3
 80055b8:	080055db 	.word	0x080055db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055bc:	f7fe fbd0 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 80055c0:	6178      	str	r0, [r7, #20]
        break;
 80055c2:	e013      	b.n	80055ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055c4:	f7fe fbe2 	bl	8003d8c <HAL_RCC_GetPCLK2Freq>
 80055c8:	6178      	str	r0, [r7, #20]
        break;
 80055ca:	e00f      	b.n	80055ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055cc:	4b1b      	ldr	r3, [pc, #108]	; (800563c <UART_SetConfig+0x510>)
 80055ce:	617b      	str	r3, [r7, #20]
        break;
 80055d0:	e00c      	b.n	80055ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055d2:	f7fe fb2d 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 80055d6:	6178      	str	r0, [r7, #20]
        break;
 80055d8:	e008      	b.n	80055ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055de:	617b      	str	r3, [r7, #20]
        break;
 80055e0:	e004      	b.n	80055ec <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	76bb      	strb	r3, [r7, #26]
        break;
 80055ea:	bf00      	nop
    }

    if (pclk != 0U)
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d018      	beq.n	8005624 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	085a      	lsrs	r2, r3, #1
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	441a      	add	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	fbb2 f3f3 	udiv	r3, r2, r3
 8005604:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b0f      	cmp	r3, #15
 800560a:	d909      	bls.n	8005620 <UART_SetConfig+0x4f4>
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005612:	d205      	bcs.n	8005620 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	b29a      	uxth	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	60da      	str	r2, [r3, #12]
 800561e:	e001      	b.n	8005624 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005630:	7ebb      	ldrb	r3, [r7, #26]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3720      	adds	r7, #32
 8005636:	46bd      	mov	sp, r7
 8005638:	bdb0      	pop	{r4, r5, r7, pc}
 800563a:	bf00      	nop
 800563c:	00f42400 	.word	0x00f42400

08005640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01a      	beq.n	8005756 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800573e:	d10a      	bne.n	8005756 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	605a      	str	r2, [r3, #4]
  }
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af02      	add	r7, sp, #8
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005794:	f7fb fc84 	bl	80010a0 <HAL_GetTick>
 8005798:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d10e      	bne.n	80057c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f82d 	bl	8005816 <UART_WaitOnFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e023      	b.n	800580e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d10e      	bne.n	80057f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f817 	bl	8005816 <UART_WaitOnFlagUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e00d      	b.n	800580e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2220      	movs	r2, #32
 80057f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b09c      	sub	sp, #112	; 0x70
 800581a:	af00      	add	r7, sp, #0
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	603b      	str	r3, [r7, #0]
 8005822:	4613      	mov	r3, r2
 8005824:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005826:	e0a5      	b.n	8005974 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582e:	f000 80a1 	beq.w	8005974 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005832:	f7fb fc35 	bl	80010a0 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800583e:	429a      	cmp	r2, r3
 8005840:	d302      	bcc.n	8005848 <UART_WaitOnFlagUntilTimeout+0x32>
 8005842:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005844:	2b00      	cmp	r3, #0
 8005846:	d13e      	bne.n	80058c6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005858:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800585c:	667b      	str	r3, [r7, #100]	; 0x64
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005866:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005868:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800586c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e6      	bne.n	8005848 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3308      	adds	r3, #8
 8005880:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800588a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588c:	f023 0301 	bic.w	r3, r3, #1
 8005890:	663b      	str	r3, [r7, #96]	; 0x60
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3308      	adds	r3, #8
 8005898:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800589a:	64ba      	str	r2, [r7, #72]	; 0x48
 800589c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80058a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1e5      	bne.n	800587a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e067      	b.n	8005996 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d04f      	beq.n	8005974 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058e2:	d147      	bne.n	8005974 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058ec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	e853 3f00 	ldrex	r3, [r3]
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005902:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	461a      	mov	r2, r3
 800590a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800590c:	637b      	str	r3, [r7, #52]	; 0x34
 800590e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e6      	bne.n	80058ee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3308      	adds	r3, #8
 8005926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	e853 3f00 	ldrex	r3, [r3]
 800592e:	613b      	str	r3, [r7, #16]
   return(result);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f023 0301 	bic.w	r3, r3, #1
 8005936:	66bb      	str	r3, [r7, #104]	; 0x68
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3308      	adds	r3, #8
 800593e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005940:	623a      	str	r2, [r7, #32]
 8005942:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005944:	69f9      	ldr	r1, [r7, #28]
 8005946:	6a3a      	ldr	r2, [r7, #32]
 8005948:	e841 2300 	strex	r3, r2, [r1]
 800594c:	61bb      	str	r3, [r7, #24]
   return(result);
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1e5      	bne.n	8005920 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2220      	movs	r2, #32
 800595e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2220      	movs	r2, #32
 8005964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e010      	b.n	8005996 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	69da      	ldr	r2, [r3, #28]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4013      	ands	r3, r2
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	429a      	cmp	r2, r3
 8005982:	bf0c      	ite	eq
 8005984:	2301      	moveq	r3, #1
 8005986:	2300      	movne	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	461a      	mov	r2, r3
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	429a      	cmp	r2, r3
 8005990:	f43f af4a 	beq.w	8005828 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3770      	adds	r7, #112	; 0x70
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b097      	sub	sp, #92	; 0x5c
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	4613      	mov	r3, r2
 80059ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	88fa      	ldrh	r2, [r7, #6]
 80059b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	88fa      	ldrh	r2, [r7, #6]
 80059c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d2:	d10e      	bne.n	80059f2 <UART_Start_Receive_IT+0x52>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d105      	bne.n	80059e8 <UART_Start_Receive_IT+0x48>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80059e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059e6:	e02d      	b.n	8005a44 <UART_Start_Receive_IT+0xa4>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	22ff      	movs	r2, #255	; 0xff
 80059ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059f0:	e028      	b.n	8005a44 <UART_Start_Receive_IT+0xa4>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10d      	bne.n	8005a16 <UART_Start_Receive_IT+0x76>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d104      	bne.n	8005a0c <UART_Start_Receive_IT+0x6c>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	22ff      	movs	r2, #255	; 0xff
 8005a06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a0a:	e01b      	b.n	8005a44 <UART_Start_Receive_IT+0xa4>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	227f      	movs	r2, #127	; 0x7f
 8005a10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a14:	e016      	b.n	8005a44 <UART_Start_Receive_IT+0xa4>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a1e:	d10d      	bne.n	8005a3c <UART_Start_Receive_IT+0x9c>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d104      	bne.n	8005a32 <UART_Start_Receive_IT+0x92>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	227f      	movs	r2, #127	; 0x7f
 8005a2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a30:	e008      	b.n	8005a44 <UART_Start_Receive_IT+0xa4>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	223f      	movs	r2, #63	; 0x3f
 8005a36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a3a:	e003      	b.n	8005a44 <UART_Start_Receive_IT+0xa4>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2222      	movs	r2, #34	; 0x22
 8005a50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3308      	adds	r3, #8
 8005a58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a64:	f043 0301 	orr.w	r3, r3, #1
 8005a68:	657b      	str	r3, [r7, #84]	; 0x54
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a72:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e5      	bne.n	8005a52 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8e:	d107      	bne.n	8005aa0 <UART_Start_Receive_IT+0x100>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d103      	bne.n	8005aa0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4a24      	ldr	r2, [pc, #144]	; (8005b2c <UART_Start_Receive_IT+0x18c>)
 8005a9c:	665a      	str	r2, [r3, #100]	; 0x64
 8005a9e:	e002      	b.n	8005aa6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4a23      	ldr	r2, [pc, #140]	; (8005b30 <UART_Start_Receive_IT+0x190>)
 8005aa4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d019      	beq.n	8005aea <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	e853 3f00 	ldrex	r3, [r3]
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005adc:	e841 2300 	strex	r3, r2, [r1]
 8005ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e6      	bne.n	8005ab6 <UART_Start_Receive_IT+0x116>
 8005ae8:	e018      	b.n	8005b1c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	613b      	str	r3, [r7, #16]
   return(result);
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f043 0320 	orr.w	r3, r3, #32
 8005afe:	653b      	str	r3, [r7, #80]	; 0x50
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b08:	623b      	str	r3, [r7, #32]
 8005b0a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	69f9      	ldr	r1, [r7, #28]
 8005b0e:	6a3a      	ldr	r2, [r7, #32]
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e6      	bne.n	8005aea <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	375c      	adds	r7, #92	; 0x5c
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	08005f53 	.word	0x08005f53
 8005b30:	08005df3 	.word	0x08005df3

08005b34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b095      	sub	sp, #84	; 0x54
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e6      	bne.n	8005b3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3308      	adds	r3, #8
 8005b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	f023 0301 	bic.w	r3, r3, #1
 8005b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e5      	bne.n	8005b6e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d118      	bne.n	8005bdc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	e853 3f00 	ldrex	r3, [r3]
 8005bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f023 0310 	bic.w	r3, r3, #16
 8005bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	6979      	ldr	r1, [r7, #20]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e6      	bne.n	8005baa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005bee:	bf00      	nop
 8005bf0:	3754      	adds	r7, #84	; 0x54
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f7ff fa71 	bl	8005100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c1e:	bf00      	nop
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b08f      	sub	sp, #60	; 0x3c
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c32:	2b21      	cmp	r3, #33	; 0x21
 8005c34:	d14d      	bne.n	8005cd2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d132      	bne.n	8005ca8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c56:	637b      	str	r3, [r7, #52]	; 0x34
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c62:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e6      	bne.n	8005c42 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c88:	633b      	str	r3, [r7, #48]	; 0x30
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	61bb      	str	r3, [r7, #24]
 8005c94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6979      	ldr	r1, [r7, #20]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e6      	bne.n	8005c74 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005ca6:	e014      	b.n	8005cd2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cac:	781a      	ldrb	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	b292      	uxth	r2, r2
 8005cb4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005cd2:	bf00      	nop
 8005cd4:	373c      	adds	r7, #60	; 0x3c
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b091      	sub	sp, #68	; 0x44
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cea:	2b21      	cmp	r3, #33	; 0x21
 8005cec:	d151      	bne.n	8005d92 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d132      	bne.n	8005d60 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	e853 3f00 	ldrex	r3, [r3]
 8005d06:	623b      	str	r3, [r7, #32]
   return(result);
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	633b      	str	r3, [r7, #48]	; 0x30
 8005d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e6      	bne.n	8005cfa <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4a:	61fb      	str	r3, [r7, #28]
 8005d4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	69b9      	ldr	r1, [r7, #24]
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	e841 2300 	strex	r3, r2, [r1]
 8005d56:	617b      	str	r3, [r7, #20]
   return(result);
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e6      	bne.n	8005d2c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005d5e:	e018      	b.n	8005d92 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d64:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d68:	881a      	ldrh	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d72:	b292      	uxth	r2, r2
 8005d74:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d7a:	1c9a      	adds	r2, r3, #2
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005d92:	bf00      	nop
 8005d94:	3744      	adds	r7, #68	; 0x44
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b088      	sub	sp, #32
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dba:	61fb      	str	r3, [r7, #28]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	61bb      	str	r3, [r7, #24]
 8005dc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	6979      	ldr	r1, [r7, #20]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e6      	bne.n	8005da6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7fa fe7d 	bl	8000ae4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dea:	bf00      	nop
 8005dec:	3720      	adds	r7, #32
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b096      	sub	sp, #88	; 0x58
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e00:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e08:	2b22      	cmp	r3, #34	; 0x22
 8005e0a:	f040 8094 	bne.w	8005f36 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e14:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e18:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005e1c:	b2d9      	uxtb	r1, r3
 8005e1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	400a      	ands	r2, r1
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d179      	bne.n	8005f4a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5e:	e853 3f00 	ldrex	r3, [r3]
 8005e62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e6a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	461a      	mov	r2, r3
 8005e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e74:	647b      	str	r3, [r7, #68]	; 0x44
 8005e76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e7c:	e841 2300 	strex	r3, r2, [r1]
 8005e80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e6      	bne.n	8005e56 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3308      	adds	r3, #8
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	e853 3f00 	ldrex	r3, [r3]
 8005e96:	623b      	str	r3, [r7, #32]
   return(result);
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	f023 0301 	bic.w	r3, r3, #1
 8005e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ea8:	633a      	str	r2, [r7, #48]	; 0x30
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb0:	e841 2300 	strex	r3, r2, [r1]
 8005eb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e5      	bne.n	8005e88 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d12e      	bne.n	8005f2e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0310 	bic.w	r3, r3, #16
 8005eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ef4:	61fb      	str	r3, [r7, #28]
 8005ef6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef8:	69b9      	ldr	r1, [r7, #24]
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	e841 2300 	strex	r3, r2, [r1]
 8005f00:	617b      	str	r3, [r7, #20]
   return(result);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e6      	bne.n	8005ed6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	f003 0310 	and.w	r3, r3, #16
 8005f12:	2b10      	cmp	r3, #16
 8005f14:	d103      	bne.n	8005f1e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2210      	movs	r2, #16
 8005f1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff f8f4 	bl	8005114 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f2c:	e00d      	b.n	8005f4a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fa fcfa 	bl	8000928 <HAL_UART_RxCpltCallback>
}
 8005f34:	e009      	b.n	8005f4a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	8b1b      	ldrh	r3, [r3, #24]
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0208 	orr.w	r2, r2, #8
 8005f46:	b292      	uxth	r2, r2
 8005f48:	831a      	strh	r2, [r3, #24]
}
 8005f4a:	bf00      	nop
 8005f4c:	3758      	adds	r7, #88	; 0x58
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b096      	sub	sp, #88	; 0x58
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f60:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f68:	2b22      	cmp	r3, #34	; 0x22
 8005f6a:	f040 8094 	bne.w	8006096 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f74:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005f7e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005f82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f86:	4013      	ands	r3, r2
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f92:	1c9a      	adds	r2, r3, #2
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d179      	bne.n	80060aa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fd6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e6      	bne.n	8005fb6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3308      	adds	r3, #8
 8005fee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f023 0301 	bic.w	r3, r3, #1
 8005ffe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3308      	adds	r3, #8
 8006006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006008:	62fa      	str	r2, [r7, #44]	; 0x2c
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800600e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e5      	bne.n	8005fe8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602c:	2b01      	cmp	r3, #1
 800602e:	d12e      	bne.n	800608e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	60bb      	str	r3, [r7, #8]
   return(result);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f023 0310 	bic.w	r3, r3, #16
 800604a:	647b      	str	r3, [r7, #68]	; 0x44
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	6979      	ldr	r1, [r7, #20]
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	613b      	str	r3, [r7, #16]
   return(result);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e6      	bne.n	8006036 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f003 0310 	and.w	r3, r3, #16
 8006072:	2b10      	cmp	r3, #16
 8006074:	d103      	bne.n	800607e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2210      	movs	r2, #16
 800607c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff f844 	bl	8005114 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800608c:	e00d      	b.n	80060aa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fa fc4a 	bl	8000928 <HAL_UART_RxCpltCallback>
}
 8006094:	e009      	b.n	80060aa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	8b1b      	ldrh	r3, [r3, #24]
 800609c:	b29a      	uxth	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0208 	orr.w	r2, r2, #8
 80060a6:	b292      	uxth	r2, r2
 80060a8:	831a      	strh	r2, [r3, #24]
}
 80060aa:	bf00      	nop
 80060ac:	3758      	adds	r7, #88	; 0x58
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
	...

080060c8 <__errno>:
 80060c8:	4b01      	ldr	r3, [pc, #4]	; (80060d0 <__errno+0x8>)
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	20000054 	.word	0x20000054

080060d4 <__libc_init_array>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	4d0d      	ldr	r5, [pc, #52]	; (800610c <__libc_init_array+0x38>)
 80060d8:	4c0d      	ldr	r4, [pc, #52]	; (8006110 <__libc_init_array+0x3c>)
 80060da:	1b64      	subs	r4, r4, r5
 80060dc:	10a4      	asrs	r4, r4, #2
 80060de:	2600      	movs	r6, #0
 80060e0:	42a6      	cmp	r6, r4
 80060e2:	d109      	bne.n	80060f8 <__libc_init_array+0x24>
 80060e4:	4d0b      	ldr	r5, [pc, #44]	; (8006114 <__libc_init_array+0x40>)
 80060e6:	4c0c      	ldr	r4, [pc, #48]	; (8006118 <__libc_init_array+0x44>)
 80060e8:	f000 ffec 	bl	80070c4 <_init>
 80060ec:	1b64      	subs	r4, r4, r5
 80060ee:	10a4      	asrs	r4, r4, #2
 80060f0:	2600      	movs	r6, #0
 80060f2:	42a6      	cmp	r6, r4
 80060f4:	d105      	bne.n	8006102 <__libc_init_array+0x2e>
 80060f6:	bd70      	pop	{r4, r5, r6, pc}
 80060f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060fc:	4798      	blx	r3
 80060fe:	3601      	adds	r6, #1
 8006100:	e7ee      	b.n	80060e0 <__libc_init_array+0xc>
 8006102:	f855 3b04 	ldr.w	r3, [r5], #4
 8006106:	4798      	blx	r3
 8006108:	3601      	adds	r6, #1
 800610a:	e7f2      	b.n	80060f2 <__libc_init_array+0x1e>
 800610c:	08007224 	.word	0x08007224
 8006110:	08007224 	.word	0x08007224
 8006114:	08007224 	.word	0x08007224
 8006118:	08007228 	.word	0x08007228

0800611c <memset>:
 800611c:	4402      	add	r2, r0
 800611e:	4603      	mov	r3, r0
 8006120:	4293      	cmp	r3, r2
 8006122:	d100      	bne.n	8006126 <memset+0xa>
 8006124:	4770      	bx	lr
 8006126:	f803 1b01 	strb.w	r1, [r3], #1
 800612a:	e7f9      	b.n	8006120 <memset+0x4>

0800612c <iprintf>:
 800612c:	b40f      	push	{r0, r1, r2, r3}
 800612e:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <iprintf+0x2c>)
 8006130:	b513      	push	{r0, r1, r4, lr}
 8006132:	681c      	ldr	r4, [r3, #0]
 8006134:	b124      	cbz	r4, 8006140 <iprintf+0x14>
 8006136:	69a3      	ldr	r3, [r4, #24]
 8006138:	b913      	cbnz	r3, 8006140 <iprintf+0x14>
 800613a:	4620      	mov	r0, r4
 800613c:	f000 fa5e 	bl	80065fc <__sinit>
 8006140:	ab05      	add	r3, sp, #20
 8006142:	9a04      	ldr	r2, [sp, #16]
 8006144:	68a1      	ldr	r1, [r4, #8]
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	4620      	mov	r0, r4
 800614a:	f000 fc2f 	bl	80069ac <_vfiprintf_r>
 800614e:	b002      	add	sp, #8
 8006150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006154:	b004      	add	sp, #16
 8006156:	4770      	bx	lr
 8006158:	20000054 	.word	0x20000054

0800615c <_puts_r>:
 800615c:	b570      	push	{r4, r5, r6, lr}
 800615e:	460e      	mov	r6, r1
 8006160:	4605      	mov	r5, r0
 8006162:	b118      	cbz	r0, 800616c <_puts_r+0x10>
 8006164:	6983      	ldr	r3, [r0, #24]
 8006166:	b90b      	cbnz	r3, 800616c <_puts_r+0x10>
 8006168:	f000 fa48 	bl	80065fc <__sinit>
 800616c:	69ab      	ldr	r3, [r5, #24]
 800616e:	68ac      	ldr	r4, [r5, #8]
 8006170:	b913      	cbnz	r3, 8006178 <_puts_r+0x1c>
 8006172:	4628      	mov	r0, r5
 8006174:	f000 fa42 	bl	80065fc <__sinit>
 8006178:	4b2c      	ldr	r3, [pc, #176]	; (800622c <_puts_r+0xd0>)
 800617a:	429c      	cmp	r4, r3
 800617c:	d120      	bne.n	80061c0 <_puts_r+0x64>
 800617e:	686c      	ldr	r4, [r5, #4]
 8006180:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006182:	07db      	lsls	r3, r3, #31
 8006184:	d405      	bmi.n	8006192 <_puts_r+0x36>
 8006186:	89a3      	ldrh	r3, [r4, #12]
 8006188:	0598      	lsls	r0, r3, #22
 800618a:	d402      	bmi.n	8006192 <_puts_r+0x36>
 800618c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800618e:	f000 fad3 	bl	8006738 <__retarget_lock_acquire_recursive>
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	0719      	lsls	r1, r3, #28
 8006196:	d51d      	bpl.n	80061d4 <_puts_r+0x78>
 8006198:	6923      	ldr	r3, [r4, #16]
 800619a:	b1db      	cbz	r3, 80061d4 <_puts_r+0x78>
 800619c:	3e01      	subs	r6, #1
 800619e:	68a3      	ldr	r3, [r4, #8]
 80061a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80061a4:	3b01      	subs	r3, #1
 80061a6:	60a3      	str	r3, [r4, #8]
 80061a8:	bb39      	cbnz	r1, 80061fa <_puts_r+0x9e>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	da38      	bge.n	8006220 <_puts_r+0xc4>
 80061ae:	4622      	mov	r2, r4
 80061b0:	210a      	movs	r1, #10
 80061b2:	4628      	mov	r0, r5
 80061b4:	f000 f848 	bl	8006248 <__swbuf_r>
 80061b8:	3001      	adds	r0, #1
 80061ba:	d011      	beq.n	80061e0 <_puts_r+0x84>
 80061bc:	250a      	movs	r5, #10
 80061be:	e011      	b.n	80061e4 <_puts_r+0x88>
 80061c0:	4b1b      	ldr	r3, [pc, #108]	; (8006230 <_puts_r+0xd4>)
 80061c2:	429c      	cmp	r4, r3
 80061c4:	d101      	bne.n	80061ca <_puts_r+0x6e>
 80061c6:	68ac      	ldr	r4, [r5, #8]
 80061c8:	e7da      	b.n	8006180 <_puts_r+0x24>
 80061ca:	4b1a      	ldr	r3, [pc, #104]	; (8006234 <_puts_r+0xd8>)
 80061cc:	429c      	cmp	r4, r3
 80061ce:	bf08      	it	eq
 80061d0:	68ec      	ldreq	r4, [r5, #12]
 80061d2:	e7d5      	b.n	8006180 <_puts_r+0x24>
 80061d4:	4621      	mov	r1, r4
 80061d6:	4628      	mov	r0, r5
 80061d8:	f000 f888 	bl	80062ec <__swsetup_r>
 80061dc:	2800      	cmp	r0, #0
 80061de:	d0dd      	beq.n	800619c <_puts_r+0x40>
 80061e0:	f04f 35ff 	mov.w	r5, #4294967295
 80061e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061e6:	07da      	lsls	r2, r3, #31
 80061e8:	d405      	bmi.n	80061f6 <_puts_r+0x9a>
 80061ea:	89a3      	ldrh	r3, [r4, #12]
 80061ec:	059b      	lsls	r3, r3, #22
 80061ee:	d402      	bmi.n	80061f6 <_puts_r+0x9a>
 80061f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061f2:	f000 faa2 	bl	800673a <__retarget_lock_release_recursive>
 80061f6:	4628      	mov	r0, r5
 80061f8:	bd70      	pop	{r4, r5, r6, pc}
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	da04      	bge.n	8006208 <_puts_r+0xac>
 80061fe:	69a2      	ldr	r2, [r4, #24]
 8006200:	429a      	cmp	r2, r3
 8006202:	dc06      	bgt.n	8006212 <_puts_r+0xb6>
 8006204:	290a      	cmp	r1, #10
 8006206:	d004      	beq.n	8006212 <_puts_r+0xb6>
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	6022      	str	r2, [r4, #0]
 800620e:	7019      	strb	r1, [r3, #0]
 8006210:	e7c5      	b.n	800619e <_puts_r+0x42>
 8006212:	4622      	mov	r2, r4
 8006214:	4628      	mov	r0, r5
 8006216:	f000 f817 	bl	8006248 <__swbuf_r>
 800621a:	3001      	adds	r0, #1
 800621c:	d1bf      	bne.n	800619e <_puts_r+0x42>
 800621e:	e7df      	b.n	80061e0 <_puts_r+0x84>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	250a      	movs	r5, #10
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	6022      	str	r2, [r4, #0]
 8006228:	701d      	strb	r5, [r3, #0]
 800622a:	e7db      	b.n	80061e4 <_puts_r+0x88>
 800622c:	080071a8 	.word	0x080071a8
 8006230:	080071c8 	.word	0x080071c8
 8006234:	08007188 	.word	0x08007188

08006238 <puts>:
 8006238:	4b02      	ldr	r3, [pc, #8]	; (8006244 <puts+0xc>)
 800623a:	4601      	mov	r1, r0
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	f7ff bf8d 	b.w	800615c <_puts_r>
 8006242:	bf00      	nop
 8006244:	20000054 	.word	0x20000054

08006248 <__swbuf_r>:
 8006248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624a:	460e      	mov	r6, r1
 800624c:	4614      	mov	r4, r2
 800624e:	4605      	mov	r5, r0
 8006250:	b118      	cbz	r0, 800625a <__swbuf_r+0x12>
 8006252:	6983      	ldr	r3, [r0, #24]
 8006254:	b90b      	cbnz	r3, 800625a <__swbuf_r+0x12>
 8006256:	f000 f9d1 	bl	80065fc <__sinit>
 800625a:	4b21      	ldr	r3, [pc, #132]	; (80062e0 <__swbuf_r+0x98>)
 800625c:	429c      	cmp	r4, r3
 800625e:	d12b      	bne.n	80062b8 <__swbuf_r+0x70>
 8006260:	686c      	ldr	r4, [r5, #4]
 8006262:	69a3      	ldr	r3, [r4, #24]
 8006264:	60a3      	str	r3, [r4, #8]
 8006266:	89a3      	ldrh	r3, [r4, #12]
 8006268:	071a      	lsls	r2, r3, #28
 800626a:	d52f      	bpl.n	80062cc <__swbuf_r+0x84>
 800626c:	6923      	ldr	r3, [r4, #16]
 800626e:	b36b      	cbz	r3, 80062cc <__swbuf_r+0x84>
 8006270:	6923      	ldr	r3, [r4, #16]
 8006272:	6820      	ldr	r0, [r4, #0]
 8006274:	1ac0      	subs	r0, r0, r3
 8006276:	6963      	ldr	r3, [r4, #20]
 8006278:	b2f6      	uxtb	r6, r6
 800627a:	4283      	cmp	r3, r0
 800627c:	4637      	mov	r7, r6
 800627e:	dc04      	bgt.n	800628a <__swbuf_r+0x42>
 8006280:	4621      	mov	r1, r4
 8006282:	4628      	mov	r0, r5
 8006284:	f000 f926 	bl	80064d4 <_fflush_r>
 8006288:	bb30      	cbnz	r0, 80062d8 <__swbuf_r+0x90>
 800628a:	68a3      	ldr	r3, [r4, #8]
 800628c:	3b01      	subs	r3, #1
 800628e:	60a3      	str	r3, [r4, #8]
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	6022      	str	r2, [r4, #0]
 8006296:	701e      	strb	r6, [r3, #0]
 8006298:	6963      	ldr	r3, [r4, #20]
 800629a:	3001      	adds	r0, #1
 800629c:	4283      	cmp	r3, r0
 800629e:	d004      	beq.n	80062aa <__swbuf_r+0x62>
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	07db      	lsls	r3, r3, #31
 80062a4:	d506      	bpl.n	80062b4 <__swbuf_r+0x6c>
 80062a6:	2e0a      	cmp	r6, #10
 80062a8:	d104      	bne.n	80062b4 <__swbuf_r+0x6c>
 80062aa:	4621      	mov	r1, r4
 80062ac:	4628      	mov	r0, r5
 80062ae:	f000 f911 	bl	80064d4 <_fflush_r>
 80062b2:	b988      	cbnz	r0, 80062d8 <__swbuf_r+0x90>
 80062b4:	4638      	mov	r0, r7
 80062b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062b8:	4b0a      	ldr	r3, [pc, #40]	; (80062e4 <__swbuf_r+0x9c>)
 80062ba:	429c      	cmp	r4, r3
 80062bc:	d101      	bne.n	80062c2 <__swbuf_r+0x7a>
 80062be:	68ac      	ldr	r4, [r5, #8]
 80062c0:	e7cf      	b.n	8006262 <__swbuf_r+0x1a>
 80062c2:	4b09      	ldr	r3, [pc, #36]	; (80062e8 <__swbuf_r+0xa0>)
 80062c4:	429c      	cmp	r4, r3
 80062c6:	bf08      	it	eq
 80062c8:	68ec      	ldreq	r4, [r5, #12]
 80062ca:	e7ca      	b.n	8006262 <__swbuf_r+0x1a>
 80062cc:	4621      	mov	r1, r4
 80062ce:	4628      	mov	r0, r5
 80062d0:	f000 f80c 	bl	80062ec <__swsetup_r>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d0cb      	beq.n	8006270 <__swbuf_r+0x28>
 80062d8:	f04f 37ff 	mov.w	r7, #4294967295
 80062dc:	e7ea      	b.n	80062b4 <__swbuf_r+0x6c>
 80062de:	bf00      	nop
 80062e0:	080071a8 	.word	0x080071a8
 80062e4:	080071c8 	.word	0x080071c8
 80062e8:	08007188 	.word	0x08007188

080062ec <__swsetup_r>:
 80062ec:	4b32      	ldr	r3, [pc, #200]	; (80063b8 <__swsetup_r+0xcc>)
 80062ee:	b570      	push	{r4, r5, r6, lr}
 80062f0:	681d      	ldr	r5, [r3, #0]
 80062f2:	4606      	mov	r6, r0
 80062f4:	460c      	mov	r4, r1
 80062f6:	b125      	cbz	r5, 8006302 <__swsetup_r+0x16>
 80062f8:	69ab      	ldr	r3, [r5, #24]
 80062fa:	b913      	cbnz	r3, 8006302 <__swsetup_r+0x16>
 80062fc:	4628      	mov	r0, r5
 80062fe:	f000 f97d 	bl	80065fc <__sinit>
 8006302:	4b2e      	ldr	r3, [pc, #184]	; (80063bc <__swsetup_r+0xd0>)
 8006304:	429c      	cmp	r4, r3
 8006306:	d10f      	bne.n	8006328 <__swsetup_r+0x3c>
 8006308:	686c      	ldr	r4, [r5, #4]
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006310:	0719      	lsls	r1, r3, #28
 8006312:	d42c      	bmi.n	800636e <__swsetup_r+0x82>
 8006314:	06dd      	lsls	r5, r3, #27
 8006316:	d411      	bmi.n	800633c <__swsetup_r+0x50>
 8006318:	2309      	movs	r3, #9
 800631a:	6033      	str	r3, [r6, #0]
 800631c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006320:	81a3      	strh	r3, [r4, #12]
 8006322:	f04f 30ff 	mov.w	r0, #4294967295
 8006326:	e03e      	b.n	80063a6 <__swsetup_r+0xba>
 8006328:	4b25      	ldr	r3, [pc, #148]	; (80063c0 <__swsetup_r+0xd4>)
 800632a:	429c      	cmp	r4, r3
 800632c:	d101      	bne.n	8006332 <__swsetup_r+0x46>
 800632e:	68ac      	ldr	r4, [r5, #8]
 8006330:	e7eb      	b.n	800630a <__swsetup_r+0x1e>
 8006332:	4b24      	ldr	r3, [pc, #144]	; (80063c4 <__swsetup_r+0xd8>)
 8006334:	429c      	cmp	r4, r3
 8006336:	bf08      	it	eq
 8006338:	68ec      	ldreq	r4, [r5, #12]
 800633a:	e7e6      	b.n	800630a <__swsetup_r+0x1e>
 800633c:	0758      	lsls	r0, r3, #29
 800633e:	d512      	bpl.n	8006366 <__swsetup_r+0x7a>
 8006340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006342:	b141      	cbz	r1, 8006356 <__swsetup_r+0x6a>
 8006344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006348:	4299      	cmp	r1, r3
 800634a:	d002      	beq.n	8006352 <__swsetup_r+0x66>
 800634c:	4630      	mov	r0, r6
 800634e:	f000 fa59 	bl	8006804 <_free_r>
 8006352:	2300      	movs	r3, #0
 8006354:	6363      	str	r3, [r4, #52]	; 0x34
 8006356:	89a3      	ldrh	r3, [r4, #12]
 8006358:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800635c:	81a3      	strh	r3, [r4, #12]
 800635e:	2300      	movs	r3, #0
 8006360:	6063      	str	r3, [r4, #4]
 8006362:	6923      	ldr	r3, [r4, #16]
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	f043 0308 	orr.w	r3, r3, #8
 800636c:	81a3      	strh	r3, [r4, #12]
 800636e:	6923      	ldr	r3, [r4, #16]
 8006370:	b94b      	cbnz	r3, 8006386 <__swsetup_r+0x9a>
 8006372:	89a3      	ldrh	r3, [r4, #12]
 8006374:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800637c:	d003      	beq.n	8006386 <__swsetup_r+0x9a>
 800637e:	4621      	mov	r1, r4
 8006380:	4630      	mov	r0, r6
 8006382:	f000 f9ff 	bl	8006784 <__smakebuf_r>
 8006386:	89a0      	ldrh	r0, [r4, #12]
 8006388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800638c:	f010 0301 	ands.w	r3, r0, #1
 8006390:	d00a      	beq.n	80063a8 <__swsetup_r+0xbc>
 8006392:	2300      	movs	r3, #0
 8006394:	60a3      	str	r3, [r4, #8]
 8006396:	6963      	ldr	r3, [r4, #20]
 8006398:	425b      	negs	r3, r3
 800639a:	61a3      	str	r3, [r4, #24]
 800639c:	6923      	ldr	r3, [r4, #16]
 800639e:	b943      	cbnz	r3, 80063b2 <__swsetup_r+0xc6>
 80063a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063a4:	d1ba      	bne.n	800631c <__swsetup_r+0x30>
 80063a6:	bd70      	pop	{r4, r5, r6, pc}
 80063a8:	0781      	lsls	r1, r0, #30
 80063aa:	bf58      	it	pl
 80063ac:	6963      	ldrpl	r3, [r4, #20]
 80063ae:	60a3      	str	r3, [r4, #8]
 80063b0:	e7f4      	b.n	800639c <__swsetup_r+0xb0>
 80063b2:	2000      	movs	r0, #0
 80063b4:	e7f7      	b.n	80063a6 <__swsetup_r+0xba>
 80063b6:	bf00      	nop
 80063b8:	20000054 	.word	0x20000054
 80063bc:	080071a8 	.word	0x080071a8
 80063c0:	080071c8 	.word	0x080071c8
 80063c4:	08007188 	.word	0x08007188

080063c8 <__sflush_r>:
 80063c8:	898a      	ldrh	r2, [r1, #12]
 80063ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ce:	4605      	mov	r5, r0
 80063d0:	0710      	lsls	r0, r2, #28
 80063d2:	460c      	mov	r4, r1
 80063d4:	d458      	bmi.n	8006488 <__sflush_r+0xc0>
 80063d6:	684b      	ldr	r3, [r1, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	dc05      	bgt.n	80063e8 <__sflush_r+0x20>
 80063dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063de:	2b00      	cmp	r3, #0
 80063e0:	dc02      	bgt.n	80063e8 <__sflush_r+0x20>
 80063e2:	2000      	movs	r0, #0
 80063e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063ea:	2e00      	cmp	r6, #0
 80063ec:	d0f9      	beq.n	80063e2 <__sflush_r+0x1a>
 80063ee:	2300      	movs	r3, #0
 80063f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063f4:	682f      	ldr	r7, [r5, #0]
 80063f6:	602b      	str	r3, [r5, #0]
 80063f8:	d032      	beq.n	8006460 <__sflush_r+0x98>
 80063fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	075a      	lsls	r2, r3, #29
 8006400:	d505      	bpl.n	800640e <__sflush_r+0x46>
 8006402:	6863      	ldr	r3, [r4, #4]
 8006404:	1ac0      	subs	r0, r0, r3
 8006406:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006408:	b10b      	cbz	r3, 800640e <__sflush_r+0x46>
 800640a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800640c:	1ac0      	subs	r0, r0, r3
 800640e:	2300      	movs	r3, #0
 8006410:	4602      	mov	r2, r0
 8006412:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006414:	6a21      	ldr	r1, [r4, #32]
 8006416:	4628      	mov	r0, r5
 8006418:	47b0      	blx	r6
 800641a:	1c43      	adds	r3, r0, #1
 800641c:	89a3      	ldrh	r3, [r4, #12]
 800641e:	d106      	bne.n	800642e <__sflush_r+0x66>
 8006420:	6829      	ldr	r1, [r5, #0]
 8006422:	291d      	cmp	r1, #29
 8006424:	d82c      	bhi.n	8006480 <__sflush_r+0xb8>
 8006426:	4a2a      	ldr	r2, [pc, #168]	; (80064d0 <__sflush_r+0x108>)
 8006428:	40ca      	lsrs	r2, r1
 800642a:	07d6      	lsls	r6, r2, #31
 800642c:	d528      	bpl.n	8006480 <__sflush_r+0xb8>
 800642e:	2200      	movs	r2, #0
 8006430:	6062      	str	r2, [r4, #4]
 8006432:	04d9      	lsls	r1, r3, #19
 8006434:	6922      	ldr	r2, [r4, #16]
 8006436:	6022      	str	r2, [r4, #0]
 8006438:	d504      	bpl.n	8006444 <__sflush_r+0x7c>
 800643a:	1c42      	adds	r2, r0, #1
 800643c:	d101      	bne.n	8006442 <__sflush_r+0x7a>
 800643e:	682b      	ldr	r3, [r5, #0]
 8006440:	b903      	cbnz	r3, 8006444 <__sflush_r+0x7c>
 8006442:	6560      	str	r0, [r4, #84]	; 0x54
 8006444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006446:	602f      	str	r7, [r5, #0]
 8006448:	2900      	cmp	r1, #0
 800644a:	d0ca      	beq.n	80063e2 <__sflush_r+0x1a>
 800644c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006450:	4299      	cmp	r1, r3
 8006452:	d002      	beq.n	800645a <__sflush_r+0x92>
 8006454:	4628      	mov	r0, r5
 8006456:	f000 f9d5 	bl	8006804 <_free_r>
 800645a:	2000      	movs	r0, #0
 800645c:	6360      	str	r0, [r4, #52]	; 0x34
 800645e:	e7c1      	b.n	80063e4 <__sflush_r+0x1c>
 8006460:	6a21      	ldr	r1, [r4, #32]
 8006462:	2301      	movs	r3, #1
 8006464:	4628      	mov	r0, r5
 8006466:	47b0      	blx	r6
 8006468:	1c41      	adds	r1, r0, #1
 800646a:	d1c7      	bne.n	80063fc <__sflush_r+0x34>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0c4      	beq.n	80063fc <__sflush_r+0x34>
 8006472:	2b1d      	cmp	r3, #29
 8006474:	d001      	beq.n	800647a <__sflush_r+0xb2>
 8006476:	2b16      	cmp	r3, #22
 8006478:	d101      	bne.n	800647e <__sflush_r+0xb6>
 800647a:	602f      	str	r7, [r5, #0]
 800647c:	e7b1      	b.n	80063e2 <__sflush_r+0x1a>
 800647e:	89a3      	ldrh	r3, [r4, #12]
 8006480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006484:	81a3      	strh	r3, [r4, #12]
 8006486:	e7ad      	b.n	80063e4 <__sflush_r+0x1c>
 8006488:	690f      	ldr	r7, [r1, #16]
 800648a:	2f00      	cmp	r7, #0
 800648c:	d0a9      	beq.n	80063e2 <__sflush_r+0x1a>
 800648e:	0793      	lsls	r3, r2, #30
 8006490:	680e      	ldr	r6, [r1, #0]
 8006492:	bf08      	it	eq
 8006494:	694b      	ldreq	r3, [r1, #20]
 8006496:	600f      	str	r7, [r1, #0]
 8006498:	bf18      	it	ne
 800649a:	2300      	movne	r3, #0
 800649c:	eba6 0807 	sub.w	r8, r6, r7
 80064a0:	608b      	str	r3, [r1, #8]
 80064a2:	f1b8 0f00 	cmp.w	r8, #0
 80064a6:	dd9c      	ble.n	80063e2 <__sflush_r+0x1a>
 80064a8:	6a21      	ldr	r1, [r4, #32]
 80064aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064ac:	4643      	mov	r3, r8
 80064ae:	463a      	mov	r2, r7
 80064b0:	4628      	mov	r0, r5
 80064b2:	47b0      	blx	r6
 80064b4:	2800      	cmp	r0, #0
 80064b6:	dc06      	bgt.n	80064c6 <__sflush_r+0xfe>
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064be:	81a3      	strh	r3, [r4, #12]
 80064c0:	f04f 30ff 	mov.w	r0, #4294967295
 80064c4:	e78e      	b.n	80063e4 <__sflush_r+0x1c>
 80064c6:	4407      	add	r7, r0
 80064c8:	eba8 0800 	sub.w	r8, r8, r0
 80064cc:	e7e9      	b.n	80064a2 <__sflush_r+0xda>
 80064ce:	bf00      	nop
 80064d0:	20400001 	.word	0x20400001

080064d4 <_fflush_r>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	690b      	ldr	r3, [r1, #16]
 80064d8:	4605      	mov	r5, r0
 80064da:	460c      	mov	r4, r1
 80064dc:	b913      	cbnz	r3, 80064e4 <_fflush_r+0x10>
 80064de:	2500      	movs	r5, #0
 80064e0:	4628      	mov	r0, r5
 80064e2:	bd38      	pop	{r3, r4, r5, pc}
 80064e4:	b118      	cbz	r0, 80064ee <_fflush_r+0x1a>
 80064e6:	6983      	ldr	r3, [r0, #24]
 80064e8:	b90b      	cbnz	r3, 80064ee <_fflush_r+0x1a>
 80064ea:	f000 f887 	bl	80065fc <__sinit>
 80064ee:	4b14      	ldr	r3, [pc, #80]	; (8006540 <_fflush_r+0x6c>)
 80064f0:	429c      	cmp	r4, r3
 80064f2:	d11b      	bne.n	800652c <_fflush_r+0x58>
 80064f4:	686c      	ldr	r4, [r5, #4]
 80064f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0ef      	beq.n	80064de <_fflush_r+0xa>
 80064fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006500:	07d0      	lsls	r0, r2, #31
 8006502:	d404      	bmi.n	800650e <_fflush_r+0x3a>
 8006504:	0599      	lsls	r1, r3, #22
 8006506:	d402      	bmi.n	800650e <_fflush_r+0x3a>
 8006508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800650a:	f000 f915 	bl	8006738 <__retarget_lock_acquire_recursive>
 800650e:	4628      	mov	r0, r5
 8006510:	4621      	mov	r1, r4
 8006512:	f7ff ff59 	bl	80063c8 <__sflush_r>
 8006516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006518:	07da      	lsls	r2, r3, #31
 800651a:	4605      	mov	r5, r0
 800651c:	d4e0      	bmi.n	80064e0 <_fflush_r+0xc>
 800651e:	89a3      	ldrh	r3, [r4, #12]
 8006520:	059b      	lsls	r3, r3, #22
 8006522:	d4dd      	bmi.n	80064e0 <_fflush_r+0xc>
 8006524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006526:	f000 f908 	bl	800673a <__retarget_lock_release_recursive>
 800652a:	e7d9      	b.n	80064e0 <_fflush_r+0xc>
 800652c:	4b05      	ldr	r3, [pc, #20]	; (8006544 <_fflush_r+0x70>)
 800652e:	429c      	cmp	r4, r3
 8006530:	d101      	bne.n	8006536 <_fflush_r+0x62>
 8006532:	68ac      	ldr	r4, [r5, #8]
 8006534:	e7df      	b.n	80064f6 <_fflush_r+0x22>
 8006536:	4b04      	ldr	r3, [pc, #16]	; (8006548 <_fflush_r+0x74>)
 8006538:	429c      	cmp	r4, r3
 800653a:	bf08      	it	eq
 800653c:	68ec      	ldreq	r4, [r5, #12]
 800653e:	e7da      	b.n	80064f6 <_fflush_r+0x22>
 8006540:	080071a8 	.word	0x080071a8
 8006544:	080071c8 	.word	0x080071c8
 8006548:	08007188 	.word	0x08007188

0800654c <std>:
 800654c:	2300      	movs	r3, #0
 800654e:	b510      	push	{r4, lr}
 8006550:	4604      	mov	r4, r0
 8006552:	e9c0 3300 	strd	r3, r3, [r0]
 8006556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800655a:	6083      	str	r3, [r0, #8]
 800655c:	8181      	strh	r1, [r0, #12]
 800655e:	6643      	str	r3, [r0, #100]	; 0x64
 8006560:	81c2      	strh	r2, [r0, #14]
 8006562:	6183      	str	r3, [r0, #24]
 8006564:	4619      	mov	r1, r3
 8006566:	2208      	movs	r2, #8
 8006568:	305c      	adds	r0, #92	; 0x5c
 800656a:	f7ff fdd7 	bl	800611c <memset>
 800656e:	4b05      	ldr	r3, [pc, #20]	; (8006584 <std+0x38>)
 8006570:	6263      	str	r3, [r4, #36]	; 0x24
 8006572:	4b05      	ldr	r3, [pc, #20]	; (8006588 <std+0x3c>)
 8006574:	62a3      	str	r3, [r4, #40]	; 0x28
 8006576:	4b05      	ldr	r3, [pc, #20]	; (800658c <std+0x40>)
 8006578:	62e3      	str	r3, [r4, #44]	; 0x2c
 800657a:	4b05      	ldr	r3, [pc, #20]	; (8006590 <std+0x44>)
 800657c:	6224      	str	r4, [r4, #32]
 800657e:	6323      	str	r3, [r4, #48]	; 0x30
 8006580:	bd10      	pop	{r4, pc}
 8006582:	bf00      	nop
 8006584:	08006f55 	.word	0x08006f55
 8006588:	08006f77 	.word	0x08006f77
 800658c:	08006faf 	.word	0x08006faf
 8006590:	08006fd3 	.word	0x08006fd3

08006594 <_cleanup_r>:
 8006594:	4901      	ldr	r1, [pc, #4]	; (800659c <_cleanup_r+0x8>)
 8006596:	f000 b8af 	b.w	80066f8 <_fwalk_reent>
 800659a:	bf00      	nop
 800659c:	080064d5 	.word	0x080064d5

080065a0 <__sfmoreglue>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	1e4a      	subs	r2, r1, #1
 80065a4:	2568      	movs	r5, #104	; 0x68
 80065a6:	4355      	muls	r5, r2
 80065a8:	460e      	mov	r6, r1
 80065aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80065ae:	f000 f979 	bl	80068a4 <_malloc_r>
 80065b2:	4604      	mov	r4, r0
 80065b4:	b140      	cbz	r0, 80065c8 <__sfmoreglue+0x28>
 80065b6:	2100      	movs	r1, #0
 80065b8:	e9c0 1600 	strd	r1, r6, [r0]
 80065bc:	300c      	adds	r0, #12
 80065be:	60a0      	str	r0, [r4, #8]
 80065c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80065c4:	f7ff fdaa 	bl	800611c <memset>
 80065c8:	4620      	mov	r0, r4
 80065ca:	bd70      	pop	{r4, r5, r6, pc}

080065cc <__sfp_lock_acquire>:
 80065cc:	4801      	ldr	r0, [pc, #4]	; (80065d4 <__sfp_lock_acquire+0x8>)
 80065ce:	f000 b8b3 	b.w	8006738 <__retarget_lock_acquire_recursive>
 80065d2:	bf00      	nop
 80065d4:	20000288 	.word	0x20000288

080065d8 <__sfp_lock_release>:
 80065d8:	4801      	ldr	r0, [pc, #4]	; (80065e0 <__sfp_lock_release+0x8>)
 80065da:	f000 b8ae 	b.w	800673a <__retarget_lock_release_recursive>
 80065de:	bf00      	nop
 80065e0:	20000288 	.word	0x20000288

080065e4 <__sinit_lock_acquire>:
 80065e4:	4801      	ldr	r0, [pc, #4]	; (80065ec <__sinit_lock_acquire+0x8>)
 80065e6:	f000 b8a7 	b.w	8006738 <__retarget_lock_acquire_recursive>
 80065ea:	bf00      	nop
 80065ec:	20000283 	.word	0x20000283

080065f0 <__sinit_lock_release>:
 80065f0:	4801      	ldr	r0, [pc, #4]	; (80065f8 <__sinit_lock_release+0x8>)
 80065f2:	f000 b8a2 	b.w	800673a <__retarget_lock_release_recursive>
 80065f6:	bf00      	nop
 80065f8:	20000283 	.word	0x20000283

080065fc <__sinit>:
 80065fc:	b510      	push	{r4, lr}
 80065fe:	4604      	mov	r4, r0
 8006600:	f7ff fff0 	bl	80065e4 <__sinit_lock_acquire>
 8006604:	69a3      	ldr	r3, [r4, #24]
 8006606:	b11b      	cbz	r3, 8006610 <__sinit+0x14>
 8006608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800660c:	f7ff bff0 	b.w	80065f0 <__sinit_lock_release>
 8006610:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006614:	6523      	str	r3, [r4, #80]	; 0x50
 8006616:	4b13      	ldr	r3, [pc, #76]	; (8006664 <__sinit+0x68>)
 8006618:	4a13      	ldr	r2, [pc, #76]	; (8006668 <__sinit+0x6c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	62a2      	str	r2, [r4, #40]	; 0x28
 800661e:	42a3      	cmp	r3, r4
 8006620:	bf04      	itt	eq
 8006622:	2301      	moveq	r3, #1
 8006624:	61a3      	streq	r3, [r4, #24]
 8006626:	4620      	mov	r0, r4
 8006628:	f000 f820 	bl	800666c <__sfp>
 800662c:	6060      	str	r0, [r4, #4]
 800662e:	4620      	mov	r0, r4
 8006630:	f000 f81c 	bl	800666c <__sfp>
 8006634:	60a0      	str	r0, [r4, #8]
 8006636:	4620      	mov	r0, r4
 8006638:	f000 f818 	bl	800666c <__sfp>
 800663c:	2200      	movs	r2, #0
 800663e:	60e0      	str	r0, [r4, #12]
 8006640:	2104      	movs	r1, #4
 8006642:	6860      	ldr	r0, [r4, #4]
 8006644:	f7ff ff82 	bl	800654c <std>
 8006648:	68a0      	ldr	r0, [r4, #8]
 800664a:	2201      	movs	r2, #1
 800664c:	2109      	movs	r1, #9
 800664e:	f7ff ff7d 	bl	800654c <std>
 8006652:	68e0      	ldr	r0, [r4, #12]
 8006654:	2202      	movs	r2, #2
 8006656:	2112      	movs	r1, #18
 8006658:	f7ff ff78 	bl	800654c <std>
 800665c:	2301      	movs	r3, #1
 800665e:	61a3      	str	r3, [r4, #24]
 8006660:	e7d2      	b.n	8006608 <__sinit+0xc>
 8006662:	bf00      	nop
 8006664:	08007184 	.word	0x08007184
 8006668:	08006595 	.word	0x08006595

0800666c <__sfp>:
 800666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666e:	4607      	mov	r7, r0
 8006670:	f7ff ffac 	bl	80065cc <__sfp_lock_acquire>
 8006674:	4b1e      	ldr	r3, [pc, #120]	; (80066f0 <__sfp+0x84>)
 8006676:	681e      	ldr	r6, [r3, #0]
 8006678:	69b3      	ldr	r3, [r6, #24]
 800667a:	b913      	cbnz	r3, 8006682 <__sfp+0x16>
 800667c:	4630      	mov	r0, r6
 800667e:	f7ff ffbd 	bl	80065fc <__sinit>
 8006682:	3648      	adds	r6, #72	; 0x48
 8006684:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006688:	3b01      	subs	r3, #1
 800668a:	d503      	bpl.n	8006694 <__sfp+0x28>
 800668c:	6833      	ldr	r3, [r6, #0]
 800668e:	b30b      	cbz	r3, 80066d4 <__sfp+0x68>
 8006690:	6836      	ldr	r6, [r6, #0]
 8006692:	e7f7      	b.n	8006684 <__sfp+0x18>
 8006694:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006698:	b9d5      	cbnz	r5, 80066d0 <__sfp+0x64>
 800669a:	4b16      	ldr	r3, [pc, #88]	; (80066f4 <__sfp+0x88>)
 800669c:	60e3      	str	r3, [r4, #12]
 800669e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80066a2:	6665      	str	r5, [r4, #100]	; 0x64
 80066a4:	f000 f847 	bl	8006736 <__retarget_lock_init_recursive>
 80066a8:	f7ff ff96 	bl	80065d8 <__sfp_lock_release>
 80066ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80066b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80066b4:	6025      	str	r5, [r4, #0]
 80066b6:	61a5      	str	r5, [r4, #24]
 80066b8:	2208      	movs	r2, #8
 80066ba:	4629      	mov	r1, r5
 80066bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80066c0:	f7ff fd2c 	bl	800611c <memset>
 80066c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80066c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80066cc:	4620      	mov	r0, r4
 80066ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d0:	3468      	adds	r4, #104	; 0x68
 80066d2:	e7d9      	b.n	8006688 <__sfp+0x1c>
 80066d4:	2104      	movs	r1, #4
 80066d6:	4638      	mov	r0, r7
 80066d8:	f7ff ff62 	bl	80065a0 <__sfmoreglue>
 80066dc:	4604      	mov	r4, r0
 80066de:	6030      	str	r0, [r6, #0]
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d1d5      	bne.n	8006690 <__sfp+0x24>
 80066e4:	f7ff ff78 	bl	80065d8 <__sfp_lock_release>
 80066e8:	230c      	movs	r3, #12
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	e7ee      	b.n	80066cc <__sfp+0x60>
 80066ee:	bf00      	nop
 80066f0:	08007184 	.word	0x08007184
 80066f4:	ffff0001 	.word	0xffff0001

080066f8 <_fwalk_reent>:
 80066f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066fc:	4606      	mov	r6, r0
 80066fe:	4688      	mov	r8, r1
 8006700:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006704:	2700      	movs	r7, #0
 8006706:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800670a:	f1b9 0901 	subs.w	r9, r9, #1
 800670e:	d505      	bpl.n	800671c <_fwalk_reent+0x24>
 8006710:	6824      	ldr	r4, [r4, #0]
 8006712:	2c00      	cmp	r4, #0
 8006714:	d1f7      	bne.n	8006706 <_fwalk_reent+0xe>
 8006716:	4638      	mov	r0, r7
 8006718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800671c:	89ab      	ldrh	r3, [r5, #12]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d907      	bls.n	8006732 <_fwalk_reent+0x3a>
 8006722:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006726:	3301      	adds	r3, #1
 8006728:	d003      	beq.n	8006732 <_fwalk_reent+0x3a>
 800672a:	4629      	mov	r1, r5
 800672c:	4630      	mov	r0, r6
 800672e:	47c0      	blx	r8
 8006730:	4307      	orrs	r7, r0
 8006732:	3568      	adds	r5, #104	; 0x68
 8006734:	e7e9      	b.n	800670a <_fwalk_reent+0x12>

08006736 <__retarget_lock_init_recursive>:
 8006736:	4770      	bx	lr

08006738 <__retarget_lock_acquire_recursive>:
 8006738:	4770      	bx	lr

0800673a <__retarget_lock_release_recursive>:
 800673a:	4770      	bx	lr

0800673c <__swhatbuf_r>:
 800673c:	b570      	push	{r4, r5, r6, lr}
 800673e:	460e      	mov	r6, r1
 8006740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006744:	2900      	cmp	r1, #0
 8006746:	b096      	sub	sp, #88	; 0x58
 8006748:	4614      	mov	r4, r2
 800674a:	461d      	mov	r5, r3
 800674c:	da07      	bge.n	800675e <__swhatbuf_r+0x22>
 800674e:	2300      	movs	r3, #0
 8006750:	602b      	str	r3, [r5, #0]
 8006752:	89b3      	ldrh	r3, [r6, #12]
 8006754:	061a      	lsls	r2, r3, #24
 8006756:	d410      	bmi.n	800677a <__swhatbuf_r+0x3e>
 8006758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800675c:	e00e      	b.n	800677c <__swhatbuf_r+0x40>
 800675e:	466a      	mov	r2, sp
 8006760:	f000 fc5e 	bl	8007020 <_fstat_r>
 8006764:	2800      	cmp	r0, #0
 8006766:	dbf2      	blt.n	800674e <__swhatbuf_r+0x12>
 8006768:	9a01      	ldr	r2, [sp, #4]
 800676a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800676e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006772:	425a      	negs	r2, r3
 8006774:	415a      	adcs	r2, r3
 8006776:	602a      	str	r2, [r5, #0]
 8006778:	e7ee      	b.n	8006758 <__swhatbuf_r+0x1c>
 800677a:	2340      	movs	r3, #64	; 0x40
 800677c:	2000      	movs	r0, #0
 800677e:	6023      	str	r3, [r4, #0]
 8006780:	b016      	add	sp, #88	; 0x58
 8006782:	bd70      	pop	{r4, r5, r6, pc}

08006784 <__smakebuf_r>:
 8006784:	898b      	ldrh	r3, [r1, #12]
 8006786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006788:	079d      	lsls	r5, r3, #30
 800678a:	4606      	mov	r6, r0
 800678c:	460c      	mov	r4, r1
 800678e:	d507      	bpl.n	80067a0 <__smakebuf_r+0x1c>
 8006790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	6123      	str	r3, [r4, #16]
 8006798:	2301      	movs	r3, #1
 800679a:	6163      	str	r3, [r4, #20]
 800679c:	b002      	add	sp, #8
 800679e:	bd70      	pop	{r4, r5, r6, pc}
 80067a0:	ab01      	add	r3, sp, #4
 80067a2:	466a      	mov	r2, sp
 80067a4:	f7ff ffca 	bl	800673c <__swhatbuf_r>
 80067a8:	9900      	ldr	r1, [sp, #0]
 80067aa:	4605      	mov	r5, r0
 80067ac:	4630      	mov	r0, r6
 80067ae:	f000 f879 	bl	80068a4 <_malloc_r>
 80067b2:	b948      	cbnz	r0, 80067c8 <__smakebuf_r+0x44>
 80067b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067b8:	059a      	lsls	r2, r3, #22
 80067ba:	d4ef      	bmi.n	800679c <__smakebuf_r+0x18>
 80067bc:	f023 0303 	bic.w	r3, r3, #3
 80067c0:	f043 0302 	orr.w	r3, r3, #2
 80067c4:	81a3      	strh	r3, [r4, #12]
 80067c6:	e7e3      	b.n	8006790 <__smakebuf_r+0xc>
 80067c8:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <__smakebuf_r+0x7c>)
 80067ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80067cc:	89a3      	ldrh	r3, [r4, #12]
 80067ce:	6020      	str	r0, [r4, #0]
 80067d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d4:	81a3      	strh	r3, [r4, #12]
 80067d6:	9b00      	ldr	r3, [sp, #0]
 80067d8:	6163      	str	r3, [r4, #20]
 80067da:	9b01      	ldr	r3, [sp, #4]
 80067dc:	6120      	str	r0, [r4, #16]
 80067de:	b15b      	cbz	r3, 80067f8 <__smakebuf_r+0x74>
 80067e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067e4:	4630      	mov	r0, r6
 80067e6:	f000 fc2d 	bl	8007044 <_isatty_r>
 80067ea:	b128      	cbz	r0, 80067f8 <__smakebuf_r+0x74>
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	f023 0303 	bic.w	r3, r3, #3
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	81a3      	strh	r3, [r4, #12]
 80067f8:	89a0      	ldrh	r0, [r4, #12]
 80067fa:	4305      	orrs	r5, r0
 80067fc:	81a5      	strh	r5, [r4, #12]
 80067fe:	e7cd      	b.n	800679c <__smakebuf_r+0x18>
 8006800:	08006595 	.word	0x08006595

08006804 <_free_r>:
 8006804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006806:	2900      	cmp	r1, #0
 8006808:	d048      	beq.n	800689c <_free_r+0x98>
 800680a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800680e:	9001      	str	r0, [sp, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	f1a1 0404 	sub.w	r4, r1, #4
 8006816:	bfb8      	it	lt
 8006818:	18e4      	addlt	r4, r4, r3
 800681a:	f000 fc35 	bl	8007088 <__malloc_lock>
 800681e:	4a20      	ldr	r2, [pc, #128]	; (80068a0 <_free_r+0x9c>)
 8006820:	9801      	ldr	r0, [sp, #4]
 8006822:	6813      	ldr	r3, [r2, #0]
 8006824:	4615      	mov	r5, r2
 8006826:	b933      	cbnz	r3, 8006836 <_free_r+0x32>
 8006828:	6063      	str	r3, [r4, #4]
 800682a:	6014      	str	r4, [r2, #0]
 800682c:	b003      	add	sp, #12
 800682e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006832:	f000 bc2f 	b.w	8007094 <__malloc_unlock>
 8006836:	42a3      	cmp	r3, r4
 8006838:	d90b      	bls.n	8006852 <_free_r+0x4e>
 800683a:	6821      	ldr	r1, [r4, #0]
 800683c:	1862      	adds	r2, r4, r1
 800683e:	4293      	cmp	r3, r2
 8006840:	bf04      	itt	eq
 8006842:	681a      	ldreq	r2, [r3, #0]
 8006844:	685b      	ldreq	r3, [r3, #4]
 8006846:	6063      	str	r3, [r4, #4]
 8006848:	bf04      	itt	eq
 800684a:	1852      	addeq	r2, r2, r1
 800684c:	6022      	streq	r2, [r4, #0]
 800684e:	602c      	str	r4, [r5, #0]
 8006850:	e7ec      	b.n	800682c <_free_r+0x28>
 8006852:	461a      	mov	r2, r3
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	b10b      	cbz	r3, 800685c <_free_r+0x58>
 8006858:	42a3      	cmp	r3, r4
 800685a:	d9fa      	bls.n	8006852 <_free_r+0x4e>
 800685c:	6811      	ldr	r1, [r2, #0]
 800685e:	1855      	adds	r5, r2, r1
 8006860:	42a5      	cmp	r5, r4
 8006862:	d10b      	bne.n	800687c <_free_r+0x78>
 8006864:	6824      	ldr	r4, [r4, #0]
 8006866:	4421      	add	r1, r4
 8006868:	1854      	adds	r4, r2, r1
 800686a:	42a3      	cmp	r3, r4
 800686c:	6011      	str	r1, [r2, #0]
 800686e:	d1dd      	bne.n	800682c <_free_r+0x28>
 8006870:	681c      	ldr	r4, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	6053      	str	r3, [r2, #4]
 8006876:	4421      	add	r1, r4
 8006878:	6011      	str	r1, [r2, #0]
 800687a:	e7d7      	b.n	800682c <_free_r+0x28>
 800687c:	d902      	bls.n	8006884 <_free_r+0x80>
 800687e:	230c      	movs	r3, #12
 8006880:	6003      	str	r3, [r0, #0]
 8006882:	e7d3      	b.n	800682c <_free_r+0x28>
 8006884:	6825      	ldr	r5, [r4, #0]
 8006886:	1961      	adds	r1, r4, r5
 8006888:	428b      	cmp	r3, r1
 800688a:	bf04      	itt	eq
 800688c:	6819      	ldreq	r1, [r3, #0]
 800688e:	685b      	ldreq	r3, [r3, #4]
 8006890:	6063      	str	r3, [r4, #4]
 8006892:	bf04      	itt	eq
 8006894:	1949      	addeq	r1, r1, r5
 8006896:	6021      	streq	r1, [r4, #0]
 8006898:	6054      	str	r4, [r2, #4]
 800689a:	e7c7      	b.n	800682c <_free_r+0x28>
 800689c:	b003      	add	sp, #12
 800689e:	bd30      	pop	{r4, r5, pc}
 80068a0:	2000013c 	.word	0x2000013c

080068a4 <_malloc_r>:
 80068a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a6:	1ccd      	adds	r5, r1, #3
 80068a8:	f025 0503 	bic.w	r5, r5, #3
 80068ac:	3508      	adds	r5, #8
 80068ae:	2d0c      	cmp	r5, #12
 80068b0:	bf38      	it	cc
 80068b2:	250c      	movcc	r5, #12
 80068b4:	2d00      	cmp	r5, #0
 80068b6:	4606      	mov	r6, r0
 80068b8:	db01      	blt.n	80068be <_malloc_r+0x1a>
 80068ba:	42a9      	cmp	r1, r5
 80068bc:	d903      	bls.n	80068c6 <_malloc_r+0x22>
 80068be:	230c      	movs	r3, #12
 80068c0:	6033      	str	r3, [r6, #0]
 80068c2:	2000      	movs	r0, #0
 80068c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c6:	f000 fbdf 	bl	8007088 <__malloc_lock>
 80068ca:	4921      	ldr	r1, [pc, #132]	; (8006950 <_malloc_r+0xac>)
 80068cc:	680a      	ldr	r2, [r1, #0]
 80068ce:	4614      	mov	r4, r2
 80068d0:	b99c      	cbnz	r4, 80068fa <_malloc_r+0x56>
 80068d2:	4f20      	ldr	r7, [pc, #128]	; (8006954 <_malloc_r+0xb0>)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	b923      	cbnz	r3, 80068e2 <_malloc_r+0x3e>
 80068d8:	4621      	mov	r1, r4
 80068da:	4630      	mov	r0, r6
 80068dc:	f000 fb2a 	bl	8006f34 <_sbrk_r>
 80068e0:	6038      	str	r0, [r7, #0]
 80068e2:	4629      	mov	r1, r5
 80068e4:	4630      	mov	r0, r6
 80068e6:	f000 fb25 	bl	8006f34 <_sbrk_r>
 80068ea:	1c43      	adds	r3, r0, #1
 80068ec:	d123      	bne.n	8006936 <_malloc_r+0x92>
 80068ee:	230c      	movs	r3, #12
 80068f0:	6033      	str	r3, [r6, #0]
 80068f2:	4630      	mov	r0, r6
 80068f4:	f000 fbce 	bl	8007094 <__malloc_unlock>
 80068f8:	e7e3      	b.n	80068c2 <_malloc_r+0x1e>
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	1b5b      	subs	r3, r3, r5
 80068fe:	d417      	bmi.n	8006930 <_malloc_r+0x8c>
 8006900:	2b0b      	cmp	r3, #11
 8006902:	d903      	bls.n	800690c <_malloc_r+0x68>
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	441c      	add	r4, r3
 8006908:	6025      	str	r5, [r4, #0]
 800690a:	e004      	b.n	8006916 <_malloc_r+0x72>
 800690c:	6863      	ldr	r3, [r4, #4]
 800690e:	42a2      	cmp	r2, r4
 8006910:	bf0c      	ite	eq
 8006912:	600b      	streq	r3, [r1, #0]
 8006914:	6053      	strne	r3, [r2, #4]
 8006916:	4630      	mov	r0, r6
 8006918:	f000 fbbc 	bl	8007094 <__malloc_unlock>
 800691c:	f104 000b 	add.w	r0, r4, #11
 8006920:	1d23      	adds	r3, r4, #4
 8006922:	f020 0007 	bic.w	r0, r0, #7
 8006926:	1ac2      	subs	r2, r0, r3
 8006928:	d0cc      	beq.n	80068c4 <_malloc_r+0x20>
 800692a:	1a1b      	subs	r3, r3, r0
 800692c:	50a3      	str	r3, [r4, r2]
 800692e:	e7c9      	b.n	80068c4 <_malloc_r+0x20>
 8006930:	4622      	mov	r2, r4
 8006932:	6864      	ldr	r4, [r4, #4]
 8006934:	e7cc      	b.n	80068d0 <_malloc_r+0x2c>
 8006936:	1cc4      	adds	r4, r0, #3
 8006938:	f024 0403 	bic.w	r4, r4, #3
 800693c:	42a0      	cmp	r0, r4
 800693e:	d0e3      	beq.n	8006908 <_malloc_r+0x64>
 8006940:	1a21      	subs	r1, r4, r0
 8006942:	4630      	mov	r0, r6
 8006944:	f000 faf6 	bl	8006f34 <_sbrk_r>
 8006948:	3001      	adds	r0, #1
 800694a:	d1dd      	bne.n	8006908 <_malloc_r+0x64>
 800694c:	e7cf      	b.n	80068ee <_malloc_r+0x4a>
 800694e:	bf00      	nop
 8006950:	2000013c 	.word	0x2000013c
 8006954:	20000140 	.word	0x20000140

08006958 <__sfputc_r>:
 8006958:	6893      	ldr	r3, [r2, #8]
 800695a:	3b01      	subs	r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	b410      	push	{r4}
 8006960:	6093      	str	r3, [r2, #8]
 8006962:	da08      	bge.n	8006976 <__sfputc_r+0x1e>
 8006964:	6994      	ldr	r4, [r2, #24]
 8006966:	42a3      	cmp	r3, r4
 8006968:	db01      	blt.n	800696e <__sfputc_r+0x16>
 800696a:	290a      	cmp	r1, #10
 800696c:	d103      	bne.n	8006976 <__sfputc_r+0x1e>
 800696e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006972:	f7ff bc69 	b.w	8006248 <__swbuf_r>
 8006976:	6813      	ldr	r3, [r2, #0]
 8006978:	1c58      	adds	r0, r3, #1
 800697a:	6010      	str	r0, [r2, #0]
 800697c:	7019      	strb	r1, [r3, #0]
 800697e:	4608      	mov	r0, r1
 8006980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006984:	4770      	bx	lr

08006986 <__sfputs_r>:
 8006986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006988:	4606      	mov	r6, r0
 800698a:	460f      	mov	r7, r1
 800698c:	4614      	mov	r4, r2
 800698e:	18d5      	adds	r5, r2, r3
 8006990:	42ac      	cmp	r4, r5
 8006992:	d101      	bne.n	8006998 <__sfputs_r+0x12>
 8006994:	2000      	movs	r0, #0
 8006996:	e007      	b.n	80069a8 <__sfputs_r+0x22>
 8006998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800699c:	463a      	mov	r2, r7
 800699e:	4630      	mov	r0, r6
 80069a0:	f7ff ffda 	bl	8006958 <__sfputc_r>
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	d1f3      	bne.n	8006990 <__sfputs_r+0xa>
 80069a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069ac <_vfiprintf_r>:
 80069ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b0:	460d      	mov	r5, r1
 80069b2:	b09d      	sub	sp, #116	; 0x74
 80069b4:	4614      	mov	r4, r2
 80069b6:	4698      	mov	r8, r3
 80069b8:	4606      	mov	r6, r0
 80069ba:	b118      	cbz	r0, 80069c4 <_vfiprintf_r+0x18>
 80069bc:	6983      	ldr	r3, [r0, #24]
 80069be:	b90b      	cbnz	r3, 80069c4 <_vfiprintf_r+0x18>
 80069c0:	f7ff fe1c 	bl	80065fc <__sinit>
 80069c4:	4b89      	ldr	r3, [pc, #548]	; (8006bec <_vfiprintf_r+0x240>)
 80069c6:	429d      	cmp	r5, r3
 80069c8:	d11b      	bne.n	8006a02 <_vfiprintf_r+0x56>
 80069ca:	6875      	ldr	r5, [r6, #4]
 80069cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069ce:	07d9      	lsls	r1, r3, #31
 80069d0:	d405      	bmi.n	80069de <_vfiprintf_r+0x32>
 80069d2:	89ab      	ldrh	r3, [r5, #12]
 80069d4:	059a      	lsls	r2, r3, #22
 80069d6:	d402      	bmi.n	80069de <_vfiprintf_r+0x32>
 80069d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069da:	f7ff fead 	bl	8006738 <__retarget_lock_acquire_recursive>
 80069de:	89ab      	ldrh	r3, [r5, #12]
 80069e0:	071b      	lsls	r3, r3, #28
 80069e2:	d501      	bpl.n	80069e8 <_vfiprintf_r+0x3c>
 80069e4:	692b      	ldr	r3, [r5, #16]
 80069e6:	b9eb      	cbnz	r3, 8006a24 <_vfiprintf_r+0x78>
 80069e8:	4629      	mov	r1, r5
 80069ea:	4630      	mov	r0, r6
 80069ec:	f7ff fc7e 	bl	80062ec <__swsetup_r>
 80069f0:	b1c0      	cbz	r0, 8006a24 <_vfiprintf_r+0x78>
 80069f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069f4:	07dc      	lsls	r4, r3, #31
 80069f6:	d50e      	bpl.n	8006a16 <_vfiprintf_r+0x6a>
 80069f8:	f04f 30ff 	mov.w	r0, #4294967295
 80069fc:	b01d      	add	sp, #116	; 0x74
 80069fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a02:	4b7b      	ldr	r3, [pc, #492]	; (8006bf0 <_vfiprintf_r+0x244>)
 8006a04:	429d      	cmp	r5, r3
 8006a06:	d101      	bne.n	8006a0c <_vfiprintf_r+0x60>
 8006a08:	68b5      	ldr	r5, [r6, #8]
 8006a0a:	e7df      	b.n	80069cc <_vfiprintf_r+0x20>
 8006a0c:	4b79      	ldr	r3, [pc, #484]	; (8006bf4 <_vfiprintf_r+0x248>)
 8006a0e:	429d      	cmp	r5, r3
 8006a10:	bf08      	it	eq
 8006a12:	68f5      	ldreq	r5, [r6, #12]
 8006a14:	e7da      	b.n	80069cc <_vfiprintf_r+0x20>
 8006a16:	89ab      	ldrh	r3, [r5, #12]
 8006a18:	0598      	lsls	r0, r3, #22
 8006a1a:	d4ed      	bmi.n	80069f8 <_vfiprintf_r+0x4c>
 8006a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a1e:	f7ff fe8c 	bl	800673a <__retarget_lock_release_recursive>
 8006a22:	e7e9      	b.n	80069f8 <_vfiprintf_r+0x4c>
 8006a24:	2300      	movs	r3, #0
 8006a26:	9309      	str	r3, [sp, #36]	; 0x24
 8006a28:	2320      	movs	r3, #32
 8006a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a32:	2330      	movs	r3, #48	; 0x30
 8006a34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006bf8 <_vfiprintf_r+0x24c>
 8006a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a3c:	f04f 0901 	mov.w	r9, #1
 8006a40:	4623      	mov	r3, r4
 8006a42:	469a      	mov	sl, r3
 8006a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a48:	b10a      	cbz	r2, 8006a4e <_vfiprintf_r+0xa2>
 8006a4a:	2a25      	cmp	r2, #37	; 0x25
 8006a4c:	d1f9      	bne.n	8006a42 <_vfiprintf_r+0x96>
 8006a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8006a52:	d00b      	beq.n	8006a6c <_vfiprintf_r+0xc0>
 8006a54:	465b      	mov	r3, fp
 8006a56:	4622      	mov	r2, r4
 8006a58:	4629      	mov	r1, r5
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	f7ff ff93 	bl	8006986 <__sfputs_r>
 8006a60:	3001      	adds	r0, #1
 8006a62:	f000 80aa 	beq.w	8006bba <_vfiprintf_r+0x20e>
 8006a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a68:	445a      	add	r2, fp
 8006a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80a2 	beq.w	8006bba <_vfiprintf_r+0x20e>
 8006a76:	2300      	movs	r3, #0
 8006a78:	f04f 32ff 	mov.w	r2, #4294967295
 8006a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a80:	f10a 0a01 	add.w	sl, sl, #1
 8006a84:	9304      	str	r3, [sp, #16]
 8006a86:	9307      	str	r3, [sp, #28]
 8006a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8006a8e:	4654      	mov	r4, sl
 8006a90:	2205      	movs	r2, #5
 8006a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a96:	4858      	ldr	r0, [pc, #352]	; (8006bf8 <_vfiprintf_r+0x24c>)
 8006a98:	f7f9 fbb2 	bl	8000200 <memchr>
 8006a9c:	9a04      	ldr	r2, [sp, #16]
 8006a9e:	b9d8      	cbnz	r0, 8006ad8 <_vfiprintf_r+0x12c>
 8006aa0:	06d1      	lsls	r1, r2, #27
 8006aa2:	bf44      	itt	mi
 8006aa4:	2320      	movmi	r3, #32
 8006aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aaa:	0713      	lsls	r3, r2, #28
 8006aac:	bf44      	itt	mi
 8006aae:	232b      	movmi	r3, #43	; 0x2b
 8006ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8006aba:	d015      	beq.n	8006ae8 <_vfiprintf_r+0x13c>
 8006abc:	9a07      	ldr	r2, [sp, #28]
 8006abe:	4654      	mov	r4, sl
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	f04f 0c0a 	mov.w	ip, #10
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006acc:	3b30      	subs	r3, #48	; 0x30
 8006ace:	2b09      	cmp	r3, #9
 8006ad0:	d94e      	bls.n	8006b70 <_vfiprintf_r+0x1c4>
 8006ad2:	b1b0      	cbz	r0, 8006b02 <_vfiprintf_r+0x156>
 8006ad4:	9207      	str	r2, [sp, #28]
 8006ad6:	e014      	b.n	8006b02 <_vfiprintf_r+0x156>
 8006ad8:	eba0 0308 	sub.w	r3, r0, r8
 8006adc:	fa09 f303 	lsl.w	r3, r9, r3
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	9304      	str	r3, [sp, #16]
 8006ae4:	46a2      	mov	sl, r4
 8006ae6:	e7d2      	b.n	8006a8e <_vfiprintf_r+0xe2>
 8006ae8:	9b03      	ldr	r3, [sp, #12]
 8006aea:	1d19      	adds	r1, r3, #4
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	9103      	str	r1, [sp, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	bfbb      	ittet	lt
 8006af4:	425b      	neglt	r3, r3
 8006af6:	f042 0202 	orrlt.w	r2, r2, #2
 8006afa:	9307      	strge	r3, [sp, #28]
 8006afc:	9307      	strlt	r3, [sp, #28]
 8006afe:	bfb8      	it	lt
 8006b00:	9204      	strlt	r2, [sp, #16]
 8006b02:	7823      	ldrb	r3, [r4, #0]
 8006b04:	2b2e      	cmp	r3, #46	; 0x2e
 8006b06:	d10c      	bne.n	8006b22 <_vfiprintf_r+0x176>
 8006b08:	7863      	ldrb	r3, [r4, #1]
 8006b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b0c:	d135      	bne.n	8006b7a <_vfiprintf_r+0x1ce>
 8006b0e:	9b03      	ldr	r3, [sp, #12]
 8006b10:	1d1a      	adds	r2, r3, #4
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	9203      	str	r2, [sp, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bfb8      	it	lt
 8006b1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b1e:	3402      	adds	r4, #2
 8006b20:	9305      	str	r3, [sp, #20]
 8006b22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c08 <_vfiprintf_r+0x25c>
 8006b26:	7821      	ldrb	r1, [r4, #0]
 8006b28:	2203      	movs	r2, #3
 8006b2a:	4650      	mov	r0, sl
 8006b2c:	f7f9 fb68 	bl	8000200 <memchr>
 8006b30:	b140      	cbz	r0, 8006b44 <_vfiprintf_r+0x198>
 8006b32:	2340      	movs	r3, #64	; 0x40
 8006b34:	eba0 000a 	sub.w	r0, r0, sl
 8006b38:	fa03 f000 	lsl.w	r0, r3, r0
 8006b3c:	9b04      	ldr	r3, [sp, #16]
 8006b3e:	4303      	orrs	r3, r0
 8006b40:	3401      	adds	r4, #1
 8006b42:	9304      	str	r3, [sp, #16]
 8006b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b48:	482c      	ldr	r0, [pc, #176]	; (8006bfc <_vfiprintf_r+0x250>)
 8006b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b4e:	2206      	movs	r2, #6
 8006b50:	f7f9 fb56 	bl	8000200 <memchr>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d03f      	beq.n	8006bd8 <_vfiprintf_r+0x22c>
 8006b58:	4b29      	ldr	r3, [pc, #164]	; (8006c00 <_vfiprintf_r+0x254>)
 8006b5a:	bb1b      	cbnz	r3, 8006ba4 <_vfiprintf_r+0x1f8>
 8006b5c:	9b03      	ldr	r3, [sp, #12]
 8006b5e:	3307      	adds	r3, #7
 8006b60:	f023 0307 	bic.w	r3, r3, #7
 8006b64:	3308      	adds	r3, #8
 8006b66:	9303      	str	r3, [sp, #12]
 8006b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6a:	443b      	add	r3, r7
 8006b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b6e:	e767      	b.n	8006a40 <_vfiprintf_r+0x94>
 8006b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b74:	460c      	mov	r4, r1
 8006b76:	2001      	movs	r0, #1
 8006b78:	e7a5      	b.n	8006ac6 <_vfiprintf_r+0x11a>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	3401      	adds	r4, #1
 8006b7e:	9305      	str	r3, [sp, #20]
 8006b80:	4619      	mov	r1, r3
 8006b82:	f04f 0c0a 	mov.w	ip, #10
 8006b86:	4620      	mov	r0, r4
 8006b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b8c:	3a30      	subs	r2, #48	; 0x30
 8006b8e:	2a09      	cmp	r2, #9
 8006b90:	d903      	bls.n	8006b9a <_vfiprintf_r+0x1ee>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0c5      	beq.n	8006b22 <_vfiprintf_r+0x176>
 8006b96:	9105      	str	r1, [sp, #20]
 8006b98:	e7c3      	b.n	8006b22 <_vfiprintf_r+0x176>
 8006b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e7f0      	b.n	8006b86 <_vfiprintf_r+0x1da>
 8006ba4:	ab03      	add	r3, sp, #12
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	462a      	mov	r2, r5
 8006baa:	4b16      	ldr	r3, [pc, #88]	; (8006c04 <_vfiprintf_r+0x258>)
 8006bac:	a904      	add	r1, sp, #16
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f3af 8000 	nop.w
 8006bb4:	4607      	mov	r7, r0
 8006bb6:	1c78      	adds	r0, r7, #1
 8006bb8:	d1d6      	bne.n	8006b68 <_vfiprintf_r+0x1bc>
 8006bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bbc:	07d9      	lsls	r1, r3, #31
 8006bbe:	d405      	bmi.n	8006bcc <_vfiprintf_r+0x220>
 8006bc0:	89ab      	ldrh	r3, [r5, #12]
 8006bc2:	059a      	lsls	r2, r3, #22
 8006bc4:	d402      	bmi.n	8006bcc <_vfiprintf_r+0x220>
 8006bc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bc8:	f7ff fdb7 	bl	800673a <__retarget_lock_release_recursive>
 8006bcc:	89ab      	ldrh	r3, [r5, #12]
 8006bce:	065b      	lsls	r3, r3, #25
 8006bd0:	f53f af12 	bmi.w	80069f8 <_vfiprintf_r+0x4c>
 8006bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bd6:	e711      	b.n	80069fc <_vfiprintf_r+0x50>
 8006bd8:	ab03      	add	r3, sp, #12
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	462a      	mov	r2, r5
 8006bde:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <_vfiprintf_r+0x258>)
 8006be0:	a904      	add	r1, sp, #16
 8006be2:	4630      	mov	r0, r6
 8006be4:	f000 f880 	bl	8006ce8 <_printf_i>
 8006be8:	e7e4      	b.n	8006bb4 <_vfiprintf_r+0x208>
 8006bea:	bf00      	nop
 8006bec:	080071a8 	.word	0x080071a8
 8006bf0:	080071c8 	.word	0x080071c8
 8006bf4:	08007188 	.word	0x08007188
 8006bf8:	080071e8 	.word	0x080071e8
 8006bfc:	080071f2 	.word	0x080071f2
 8006c00:	00000000 	.word	0x00000000
 8006c04:	08006987 	.word	0x08006987
 8006c08:	080071ee 	.word	0x080071ee

08006c0c <_printf_common>:
 8006c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c10:	4616      	mov	r6, r2
 8006c12:	4699      	mov	r9, r3
 8006c14:	688a      	ldr	r2, [r1, #8]
 8006c16:	690b      	ldr	r3, [r1, #16]
 8006c18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	bfb8      	it	lt
 8006c20:	4613      	movlt	r3, r2
 8006c22:	6033      	str	r3, [r6, #0]
 8006c24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c28:	4607      	mov	r7, r0
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	b10a      	cbz	r2, 8006c32 <_printf_common+0x26>
 8006c2e:	3301      	adds	r3, #1
 8006c30:	6033      	str	r3, [r6, #0]
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	0699      	lsls	r1, r3, #26
 8006c36:	bf42      	ittt	mi
 8006c38:	6833      	ldrmi	r3, [r6, #0]
 8006c3a:	3302      	addmi	r3, #2
 8006c3c:	6033      	strmi	r3, [r6, #0]
 8006c3e:	6825      	ldr	r5, [r4, #0]
 8006c40:	f015 0506 	ands.w	r5, r5, #6
 8006c44:	d106      	bne.n	8006c54 <_printf_common+0x48>
 8006c46:	f104 0a19 	add.w	sl, r4, #25
 8006c4a:	68e3      	ldr	r3, [r4, #12]
 8006c4c:	6832      	ldr	r2, [r6, #0]
 8006c4e:	1a9b      	subs	r3, r3, r2
 8006c50:	42ab      	cmp	r3, r5
 8006c52:	dc26      	bgt.n	8006ca2 <_printf_common+0x96>
 8006c54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c58:	1e13      	subs	r3, r2, #0
 8006c5a:	6822      	ldr	r2, [r4, #0]
 8006c5c:	bf18      	it	ne
 8006c5e:	2301      	movne	r3, #1
 8006c60:	0692      	lsls	r2, r2, #26
 8006c62:	d42b      	bmi.n	8006cbc <_printf_common+0xb0>
 8006c64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c68:	4649      	mov	r1, r9
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	47c0      	blx	r8
 8006c6e:	3001      	adds	r0, #1
 8006c70:	d01e      	beq.n	8006cb0 <_printf_common+0xa4>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	68e5      	ldr	r5, [r4, #12]
 8006c76:	6832      	ldr	r2, [r6, #0]
 8006c78:	f003 0306 	and.w	r3, r3, #6
 8006c7c:	2b04      	cmp	r3, #4
 8006c7e:	bf08      	it	eq
 8006c80:	1aad      	subeq	r5, r5, r2
 8006c82:	68a3      	ldr	r3, [r4, #8]
 8006c84:	6922      	ldr	r2, [r4, #16]
 8006c86:	bf0c      	ite	eq
 8006c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c8c:	2500      	movne	r5, #0
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	bfc4      	itt	gt
 8006c92:	1a9b      	subgt	r3, r3, r2
 8006c94:	18ed      	addgt	r5, r5, r3
 8006c96:	2600      	movs	r6, #0
 8006c98:	341a      	adds	r4, #26
 8006c9a:	42b5      	cmp	r5, r6
 8006c9c:	d11a      	bne.n	8006cd4 <_printf_common+0xc8>
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	e008      	b.n	8006cb4 <_printf_common+0xa8>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	4652      	mov	r2, sl
 8006ca6:	4649      	mov	r1, r9
 8006ca8:	4638      	mov	r0, r7
 8006caa:	47c0      	blx	r8
 8006cac:	3001      	adds	r0, #1
 8006cae:	d103      	bne.n	8006cb8 <_printf_common+0xac>
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb8:	3501      	adds	r5, #1
 8006cba:	e7c6      	b.n	8006c4a <_printf_common+0x3e>
 8006cbc:	18e1      	adds	r1, r4, r3
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	2030      	movs	r0, #48	; 0x30
 8006cc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cc6:	4422      	add	r2, r4
 8006cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ccc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cd0:	3302      	adds	r3, #2
 8006cd2:	e7c7      	b.n	8006c64 <_printf_common+0x58>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	4622      	mov	r2, r4
 8006cd8:	4649      	mov	r1, r9
 8006cda:	4638      	mov	r0, r7
 8006cdc:	47c0      	blx	r8
 8006cde:	3001      	adds	r0, #1
 8006ce0:	d0e6      	beq.n	8006cb0 <_printf_common+0xa4>
 8006ce2:	3601      	adds	r6, #1
 8006ce4:	e7d9      	b.n	8006c9a <_printf_common+0x8e>
	...

08006ce8 <_printf_i>:
 8006ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cec:	460c      	mov	r4, r1
 8006cee:	4691      	mov	r9, r2
 8006cf0:	7e27      	ldrb	r7, [r4, #24]
 8006cf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006cf4:	2f78      	cmp	r7, #120	; 0x78
 8006cf6:	4680      	mov	r8, r0
 8006cf8:	469a      	mov	sl, r3
 8006cfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cfe:	d807      	bhi.n	8006d10 <_printf_i+0x28>
 8006d00:	2f62      	cmp	r7, #98	; 0x62
 8006d02:	d80a      	bhi.n	8006d1a <_printf_i+0x32>
 8006d04:	2f00      	cmp	r7, #0
 8006d06:	f000 80d8 	beq.w	8006eba <_printf_i+0x1d2>
 8006d0a:	2f58      	cmp	r7, #88	; 0x58
 8006d0c:	f000 80a3 	beq.w	8006e56 <_printf_i+0x16e>
 8006d10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d18:	e03a      	b.n	8006d90 <_printf_i+0xa8>
 8006d1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d1e:	2b15      	cmp	r3, #21
 8006d20:	d8f6      	bhi.n	8006d10 <_printf_i+0x28>
 8006d22:	a001      	add	r0, pc, #4	; (adr r0, 8006d28 <_printf_i+0x40>)
 8006d24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006d28:	08006d81 	.word	0x08006d81
 8006d2c:	08006d95 	.word	0x08006d95
 8006d30:	08006d11 	.word	0x08006d11
 8006d34:	08006d11 	.word	0x08006d11
 8006d38:	08006d11 	.word	0x08006d11
 8006d3c:	08006d11 	.word	0x08006d11
 8006d40:	08006d95 	.word	0x08006d95
 8006d44:	08006d11 	.word	0x08006d11
 8006d48:	08006d11 	.word	0x08006d11
 8006d4c:	08006d11 	.word	0x08006d11
 8006d50:	08006d11 	.word	0x08006d11
 8006d54:	08006ea1 	.word	0x08006ea1
 8006d58:	08006dc5 	.word	0x08006dc5
 8006d5c:	08006e83 	.word	0x08006e83
 8006d60:	08006d11 	.word	0x08006d11
 8006d64:	08006d11 	.word	0x08006d11
 8006d68:	08006ec3 	.word	0x08006ec3
 8006d6c:	08006d11 	.word	0x08006d11
 8006d70:	08006dc5 	.word	0x08006dc5
 8006d74:	08006d11 	.word	0x08006d11
 8006d78:	08006d11 	.word	0x08006d11
 8006d7c:	08006e8b 	.word	0x08006e8b
 8006d80:	680b      	ldr	r3, [r1, #0]
 8006d82:	1d1a      	adds	r2, r3, #4
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	600a      	str	r2, [r1, #0]
 8006d88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d90:	2301      	movs	r3, #1
 8006d92:	e0a3      	b.n	8006edc <_printf_i+0x1f4>
 8006d94:	6825      	ldr	r5, [r4, #0]
 8006d96:	6808      	ldr	r0, [r1, #0]
 8006d98:	062e      	lsls	r6, r5, #24
 8006d9a:	f100 0304 	add.w	r3, r0, #4
 8006d9e:	d50a      	bpl.n	8006db6 <_printf_i+0xce>
 8006da0:	6805      	ldr	r5, [r0, #0]
 8006da2:	600b      	str	r3, [r1, #0]
 8006da4:	2d00      	cmp	r5, #0
 8006da6:	da03      	bge.n	8006db0 <_printf_i+0xc8>
 8006da8:	232d      	movs	r3, #45	; 0x2d
 8006daa:	426d      	negs	r5, r5
 8006dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006db0:	485e      	ldr	r0, [pc, #376]	; (8006f2c <_printf_i+0x244>)
 8006db2:	230a      	movs	r3, #10
 8006db4:	e019      	b.n	8006dea <_printf_i+0x102>
 8006db6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006dba:	6805      	ldr	r5, [r0, #0]
 8006dbc:	600b      	str	r3, [r1, #0]
 8006dbe:	bf18      	it	ne
 8006dc0:	b22d      	sxthne	r5, r5
 8006dc2:	e7ef      	b.n	8006da4 <_printf_i+0xbc>
 8006dc4:	680b      	ldr	r3, [r1, #0]
 8006dc6:	6825      	ldr	r5, [r4, #0]
 8006dc8:	1d18      	adds	r0, r3, #4
 8006dca:	6008      	str	r0, [r1, #0]
 8006dcc:	0628      	lsls	r0, r5, #24
 8006dce:	d501      	bpl.n	8006dd4 <_printf_i+0xec>
 8006dd0:	681d      	ldr	r5, [r3, #0]
 8006dd2:	e002      	b.n	8006dda <_printf_i+0xf2>
 8006dd4:	0669      	lsls	r1, r5, #25
 8006dd6:	d5fb      	bpl.n	8006dd0 <_printf_i+0xe8>
 8006dd8:	881d      	ldrh	r5, [r3, #0]
 8006dda:	4854      	ldr	r0, [pc, #336]	; (8006f2c <_printf_i+0x244>)
 8006ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8006dde:	bf0c      	ite	eq
 8006de0:	2308      	moveq	r3, #8
 8006de2:	230a      	movne	r3, #10
 8006de4:	2100      	movs	r1, #0
 8006de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dea:	6866      	ldr	r6, [r4, #4]
 8006dec:	60a6      	str	r6, [r4, #8]
 8006dee:	2e00      	cmp	r6, #0
 8006df0:	bfa2      	ittt	ge
 8006df2:	6821      	ldrge	r1, [r4, #0]
 8006df4:	f021 0104 	bicge.w	r1, r1, #4
 8006df8:	6021      	strge	r1, [r4, #0]
 8006dfa:	b90d      	cbnz	r5, 8006e00 <_printf_i+0x118>
 8006dfc:	2e00      	cmp	r6, #0
 8006dfe:	d04d      	beq.n	8006e9c <_printf_i+0x1b4>
 8006e00:	4616      	mov	r6, r2
 8006e02:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e06:	fb03 5711 	mls	r7, r3, r1, r5
 8006e0a:	5dc7      	ldrb	r7, [r0, r7]
 8006e0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e10:	462f      	mov	r7, r5
 8006e12:	42bb      	cmp	r3, r7
 8006e14:	460d      	mov	r5, r1
 8006e16:	d9f4      	bls.n	8006e02 <_printf_i+0x11a>
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	d10b      	bne.n	8006e34 <_printf_i+0x14c>
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	07df      	lsls	r7, r3, #31
 8006e20:	d508      	bpl.n	8006e34 <_printf_i+0x14c>
 8006e22:	6923      	ldr	r3, [r4, #16]
 8006e24:	6861      	ldr	r1, [r4, #4]
 8006e26:	4299      	cmp	r1, r3
 8006e28:	bfde      	ittt	le
 8006e2a:	2330      	movle	r3, #48	; 0x30
 8006e2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e34:	1b92      	subs	r2, r2, r6
 8006e36:	6122      	str	r2, [r4, #16]
 8006e38:	f8cd a000 	str.w	sl, [sp]
 8006e3c:	464b      	mov	r3, r9
 8006e3e:	aa03      	add	r2, sp, #12
 8006e40:	4621      	mov	r1, r4
 8006e42:	4640      	mov	r0, r8
 8006e44:	f7ff fee2 	bl	8006c0c <_printf_common>
 8006e48:	3001      	adds	r0, #1
 8006e4a:	d14c      	bne.n	8006ee6 <_printf_i+0x1fe>
 8006e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e50:	b004      	add	sp, #16
 8006e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e56:	4835      	ldr	r0, [pc, #212]	; (8006f2c <_printf_i+0x244>)
 8006e58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	680e      	ldr	r6, [r1, #0]
 8006e60:	061f      	lsls	r7, r3, #24
 8006e62:	f856 5b04 	ldr.w	r5, [r6], #4
 8006e66:	600e      	str	r6, [r1, #0]
 8006e68:	d514      	bpl.n	8006e94 <_printf_i+0x1ac>
 8006e6a:	07d9      	lsls	r1, r3, #31
 8006e6c:	bf44      	itt	mi
 8006e6e:	f043 0320 	orrmi.w	r3, r3, #32
 8006e72:	6023      	strmi	r3, [r4, #0]
 8006e74:	b91d      	cbnz	r5, 8006e7e <_printf_i+0x196>
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	f023 0320 	bic.w	r3, r3, #32
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	2310      	movs	r3, #16
 8006e80:	e7b0      	b.n	8006de4 <_printf_i+0xfc>
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	f043 0320 	orr.w	r3, r3, #32
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	2378      	movs	r3, #120	; 0x78
 8006e8c:	4828      	ldr	r0, [pc, #160]	; (8006f30 <_printf_i+0x248>)
 8006e8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e92:	e7e3      	b.n	8006e5c <_printf_i+0x174>
 8006e94:	065e      	lsls	r6, r3, #25
 8006e96:	bf48      	it	mi
 8006e98:	b2ad      	uxthmi	r5, r5
 8006e9a:	e7e6      	b.n	8006e6a <_printf_i+0x182>
 8006e9c:	4616      	mov	r6, r2
 8006e9e:	e7bb      	b.n	8006e18 <_printf_i+0x130>
 8006ea0:	680b      	ldr	r3, [r1, #0]
 8006ea2:	6826      	ldr	r6, [r4, #0]
 8006ea4:	6960      	ldr	r0, [r4, #20]
 8006ea6:	1d1d      	adds	r5, r3, #4
 8006ea8:	600d      	str	r5, [r1, #0]
 8006eaa:	0635      	lsls	r5, r6, #24
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	d501      	bpl.n	8006eb4 <_printf_i+0x1cc>
 8006eb0:	6018      	str	r0, [r3, #0]
 8006eb2:	e002      	b.n	8006eba <_printf_i+0x1d2>
 8006eb4:	0671      	lsls	r1, r6, #25
 8006eb6:	d5fb      	bpl.n	8006eb0 <_printf_i+0x1c8>
 8006eb8:	8018      	strh	r0, [r3, #0]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	6123      	str	r3, [r4, #16]
 8006ebe:	4616      	mov	r6, r2
 8006ec0:	e7ba      	b.n	8006e38 <_printf_i+0x150>
 8006ec2:	680b      	ldr	r3, [r1, #0]
 8006ec4:	1d1a      	adds	r2, r3, #4
 8006ec6:	600a      	str	r2, [r1, #0]
 8006ec8:	681e      	ldr	r6, [r3, #0]
 8006eca:	6862      	ldr	r2, [r4, #4]
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f7f9 f996 	bl	8000200 <memchr>
 8006ed4:	b108      	cbz	r0, 8006eda <_printf_i+0x1f2>
 8006ed6:	1b80      	subs	r0, r0, r6
 8006ed8:	6060      	str	r0, [r4, #4]
 8006eda:	6863      	ldr	r3, [r4, #4]
 8006edc:	6123      	str	r3, [r4, #16]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ee4:	e7a8      	b.n	8006e38 <_printf_i+0x150>
 8006ee6:	6923      	ldr	r3, [r4, #16]
 8006ee8:	4632      	mov	r2, r6
 8006eea:	4649      	mov	r1, r9
 8006eec:	4640      	mov	r0, r8
 8006eee:	47d0      	blx	sl
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d0ab      	beq.n	8006e4c <_printf_i+0x164>
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	079b      	lsls	r3, r3, #30
 8006ef8:	d413      	bmi.n	8006f22 <_printf_i+0x23a>
 8006efa:	68e0      	ldr	r0, [r4, #12]
 8006efc:	9b03      	ldr	r3, [sp, #12]
 8006efe:	4298      	cmp	r0, r3
 8006f00:	bfb8      	it	lt
 8006f02:	4618      	movlt	r0, r3
 8006f04:	e7a4      	b.n	8006e50 <_printf_i+0x168>
 8006f06:	2301      	movs	r3, #1
 8006f08:	4632      	mov	r2, r6
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	4640      	mov	r0, r8
 8006f0e:	47d0      	blx	sl
 8006f10:	3001      	adds	r0, #1
 8006f12:	d09b      	beq.n	8006e4c <_printf_i+0x164>
 8006f14:	3501      	adds	r5, #1
 8006f16:	68e3      	ldr	r3, [r4, #12]
 8006f18:	9903      	ldr	r1, [sp, #12]
 8006f1a:	1a5b      	subs	r3, r3, r1
 8006f1c:	42ab      	cmp	r3, r5
 8006f1e:	dcf2      	bgt.n	8006f06 <_printf_i+0x21e>
 8006f20:	e7eb      	b.n	8006efa <_printf_i+0x212>
 8006f22:	2500      	movs	r5, #0
 8006f24:	f104 0619 	add.w	r6, r4, #25
 8006f28:	e7f5      	b.n	8006f16 <_printf_i+0x22e>
 8006f2a:	bf00      	nop
 8006f2c:	080071f9 	.word	0x080071f9
 8006f30:	0800720a 	.word	0x0800720a

08006f34 <_sbrk_r>:
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	4d06      	ldr	r5, [pc, #24]	; (8006f50 <_sbrk_r+0x1c>)
 8006f38:	2300      	movs	r3, #0
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	602b      	str	r3, [r5, #0]
 8006f40:	f7f9 ff40 	bl	8000dc4 <_sbrk>
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	d102      	bne.n	8006f4e <_sbrk_r+0x1a>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	b103      	cbz	r3, 8006f4e <_sbrk_r+0x1a>
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}
 8006f50:	2000028c 	.word	0x2000028c

08006f54 <__sread>:
 8006f54:	b510      	push	{r4, lr}
 8006f56:	460c      	mov	r4, r1
 8006f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f5c:	f000 f8a0 	bl	80070a0 <_read_r>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	bfab      	itete	ge
 8006f64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f66:	89a3      	ldrhlt	r3, [r4, #12]
 8006f68:	181b      	addge	r3, r3, r0
 8006f6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f6e:	bfac      	ite	ge
 8006f70:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f72:	81a3      	strhlt	r3, [r4, #12]
 8006f74:	bd10      	pop	{r4, pc}

08006f76 <__swrite>:
 8006f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7a:	461f      	mov	r7, r3
 8006f7c:	898b      	ldrh	r3, [r1, #12]
 8006f7e:	05db      	lsls	r3, r3, #23
 8006f80:	4605      	mov	r5, r0
 8006f82:	460c      	mov	r4, r1
 8006f84:	4616      	mov	r6, r2
 8006f86:	d505      	bpl.n	8006f94 <__swrite+0x1e>
 8006f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f000 f868 	bl	8007064 <_lseek_r>
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f9e:	81a3      	strh	r3, [r4, #12]
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	463b      	mov	r3, r7
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006faa:	f000 b817 	b.w	8006fdc <_write_r>

08006fae <__sseek>:
 8006fae:	b510      	push	{r4, lr}
 8006fb0:	460c      	mov	r4, r1
 8006fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb6:	f000 f855 	bl	8007064 <_lseek_r>
 8006fba:	1c43      	adds	r3, r0, #1
 8006fbc:	89a3      	ldrh	r3, [r4, #12]
 8006fbe:	bf15      	itete	ne
 8006fc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fca:	81a3      	strheq	r3, [r4, #12]
 8006fcc:	bf18      	it	ne
 8006fce:	81a3      	strhne	r3, [r4, #12]
 8006fd0:	bd10      	pop	{r4, pc}

08006fd2 <__sclose>:
 8006fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd6:	f000 b813 	b.w	8007000 <_close_r>
	...

08006fdc <_write_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4d07      	ldr	r5, [pc, #28]	; (8006ffc <_write_r+0x20>)
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	4608      	mov	r0, r1
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	602a      	str	r2, [r5, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	f7f9 fe99 	bl	8000d22 <_write>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	d102      	bne.n	8006ffa <_write_r+0x1e>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	b103      	cbz	r3, 8006ffa <_write_r+0x1e>
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	2000028c 	.word	0x2000028c

08007000 <_close_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d06      	ldr	r5, [pc, #24]	; (800701c <_close_r+0x1c>)
 8007004:	2300      	movs	r3, #0
 8007006:	4604      	mov	r4, r0
 8007008:	4608      	mov	r0, r1
 800700a:	602b      	str	r3, [r5, #0]
 800700c:	f7f9 fea5 	bl	8000d5a <_close>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_close_r+0x1a>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_close_r+0x1a>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	2000028c 	.word	0x2000028c

08007020 <_fstat_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d07      	ldr	r5, [pc, #28]	; (8007040 <_fstat_r+0x20>)
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	4611      	mov	r1, r2
 800702c:	602b      	str	r3, [r5, #0]
 800702e:	f7f9 fea0 	bl	8000d72 <_fstat>
 8007032:	1c43      	adds	r3, r0, #1
 8007034:	d102      	bne.n	800703c <_fstat_r+0x1c>
 8007036:	682b      	ldr	r3, [r5, #0]
 8007038:	b103      	cbz	r3, 800703c <_fstat_r+0x1c>
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	bd38      	pop	{r3, r4, r5, pc}
 800703e:	bf00      	nop
 8007040:	2000028c 	.word	0x2000028c

08007044 <_isatty_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4d06      	ldr	r5, [pc, #24]	; (8007060 <_isatty_r+0x1c>)
 8007048:	2300      	movs	r3, #0
 800704a:	4604      	mov	r4, r0
 800704c:	4608      	mov	r0, r1
 800704e:	602b      	str	r3, [r5, #0]
 8007050:	f7f9 fe9f 	bl	8000d92 <_isatty>
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d102      	bne.n	800705e <_isatty_r+0x1a>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	b103      	cbz	r3, 800705e <_isatty_r+0x1a>
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	2000028c 	.word	0x2000028c

08007064 <_lseek_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4d07      	ldr	r5, [pc, #28]	; (8007084 <_lseek_r+0x20>)
 8007068:	4604      	mov	r4, r0
 800706a:	4608      	mov	r0, r1
 800706c:	4611      	mov	r1, r2
 800706e:	2200      	movs	r2, #0
 8007070:	602a      	str	r2, [r5, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	f7f9 fe98 	bl	8000da8 <_lseek>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_lseek_r+0x1e>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	b103      	cbz	r3, 8007082 <_lseek_r+0x1e>
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	2000028c 	.word	0x2000028c

08007088 <__malloc_lock>:
 8007088:	4801      	ldr	r0, [pc, #4]	; (8007090 <__malloc_lock+0x8>)
 800708a:	f7ff bb55 	b.w	8006738 <__retarget_lock_acquire_recursive>
 800708e:	bf00      	nop
 8007090:	20000284 	.word	0x20000284

08007094 <__malloc_unlock>:
 8007094:	4801      	ldr	r0, [pc, #4]	; (800709c <__malloc_unlock+0x8>)
 8007096:	f7ff bb50 	b.w	800673a <__retarget_lock_release_recursive>
 800709a:	bf00      	nop
 800709c:	20000284 	.word	0x20000284

080070a0 <_read_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	4d07      	ldr	r5, [pc, #28]	; (80070c0 <_read_r+0x20>)
 80070a4:	4604      	mov	r4, r0
 80070a6:	4608      	mov	r0, r1
 80070a8:	4611      	mov	r1, r2
 80070aa:	2200      	movs	r2, #0
 80070ac:	602a      	str	r2, [r5, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	f7f9 fe1a 	bl	8000ce8 <_read>
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	d102      	bne.n	80070be <_read_r+0x1e>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	b103      	cbz	r3, 80070be <_read_r+0x1e>
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	2000028c 	.word	0x2000028c

080070c4 <_init>:
 80070c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c6:	bf00      	nop
 80070c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ca:	bc08      	pop	{r3}
 80070cc:	469e      	mov	lr, r3
 80070ce:	4770      	bx	lr

080070d0 <_fini>:
 80070d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d2:	bf00      	nop
 80070d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070d6:	bc08      	pop	{r3}
 80070d8:	469e      	mov	lr, r3
 80070da:	4770      	bx	lr
