
SterowaniePWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002990  08002990  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002990  08002990  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002990  08002990  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002990  08002990  00012990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002994  08002994  00012994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080029a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080029a4  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b47e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000191b  00000000  00000000  0002b4ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0002cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  0002d908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002586f  00000000  00000000  0002e360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c157  00000000  00000000  00053bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea3ae  00000000  00000000  0005fd26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a0d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dac  00000000  00000000  0014a128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002938 	.word	0x08002938

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002938 	.word	0x08002938

080001c8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ce:	4b09      	ldr	r3, [pc, #36]	; (80001f4 <MX_GPIO_Init+0x2c>)
 80001d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001d2:	4a08      	ldr	r2, [pc, #32]	; (80001f4 <MX_GPIO_Init+0x2c>)
 80001d4:	f043 0301 	orr.w	r3, r3, #1
 80001d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001da:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <MX_GPIO_Init+0x2c>)
 80001dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001de:	f003 0301 	and.w	r3, r3, #1
 80001e2:	607b      	str	r3, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]

}
 80001e6:	bf00      	nop
 80001e8:	370c      	adds	r7, #12
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	40021000 	.word	0x40021000

080001f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
uint16_t jas = 0;
 80001fe:	2300      	movs	r3, #0
 8000200:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 f9e0 	bl	80005c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f81b 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f7ff ffdd 	bl	80001c8 <MX_GPIO_Init>
  MX_TIM3_Init();
 800020e:	f000 f8e3 	bl	80003d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000212:	2100      	movs	r1, #0
 8000214:	4809      	ldr	r0, [pc, #36]	; (800023c <main+0x44>)
 8000216:	f001 fbcf 	bl	80019b8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  jas +=1;
 800021a:	88fb      	ldrh	r3, [r7, #6]
 800021c:	3301      	adds	r3, #1
 800021e:	80fb      	strh	r3, [r7, #6]
	  if(jas >= 1000)
 8000220:	88fb      	ldrh	r3, [r7, #6]
 8000222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000226:	d301      	bcc.n	800022c <main+0x34>
	  {
		jas = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	80fb      	strh	r3, [r7, #6]
	  }
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, jas);
 800022c:	4b03      	ldr	r3, [pc, #12]	; (800023c <main+0x44>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	88fa      	ldrh	r2, [r7, #6]
 8000232:	635a      	str	r2, [r3, #52]	; 0x34
	 HAL_Delay(10);
 8000234:	200a      	movs	r0, #10
 8000236:	f000 fa3b 	bl	80006b0 <HAL_Delay>
	  jas +=1;
 800023a:	e7ee      	b.n	800021a <main+0x22>
 800023c:	20000028 	.word	0x20000028

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b096      	sub	sp, #88	; 0x58
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0314 	add.w	r3, r7, #20
 800024a:	2244      	movs	r2, #68	; 0x44
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fb6a 	bl	8002928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000262:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000266:	f000 fce5 	bl	8000c34 <HAL_PWREx_ControlVoltageScaling>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000270:	f000 f82c 	bl	80002cc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000274:	2310      	movs	r3, #16
 8000276:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000278:	2301      	movs	r3, #1
 800027a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000280:	2360      	movs	r3, #96	; 0x60
 8000282:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000284:	2300      	movs	r3, #0
 8000286:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0314 	add.w	r3, r7, #20
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fd27 	bl	8000ce0 <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000298:	f000 f818 	bl	80002cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002a0:	2300      	movs	r3, #0
 80002a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b0:	463b      	mov	r3, r7
 80002b2:	2100      	movs	r1, #0
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 f8f9 	bl	80014ac <HAL_RCC_ClockConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002c0:	f000 f804 	bl	80002cc <Error_Handler>
  }
}
 80002c4:	bf00      	nop
 80002c6:	3758      	adds	r7, #88	; 0x58
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002d0:	b672      	cpsid	i
}
 80002d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <Error_Handler+0x8>
	...

080002d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002de:	4b0f      	ldr	r3, [pc, #60]	; (800031c <HAL_MspInit+0x44>)
 80002e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002e2:	4a0e      	ldr	r2, [pc, #56]	; (800031c <HAL_MspInit+0x44>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	6613      	str	r3, [r2, #96]	; 0x60
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <HAL_MspInit+0x44>)
 80002ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <HAL_MspInit+0x44>)
 80002f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002fa:	4a08      	ldr	r2, [pc, #32]	; (800031c <HAL_MspInit+0x44>)
 80002fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000300:	6593      	str	r3, [r2, #88]	; 0x58
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <HAL_MspInit+0x44>)
 8000304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800030a:	603b      	str	r3, [r7, #0]
 800030c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000

08000320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000324:	e7fe      	b.n	8000324 <NMI_Handler+0x4>

08000326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800032a:	e7fe      	b.n	800032a <HardFault_Handler+0x4>

0800032c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000330:	e7fe      	b.n	8000330 <MemManage_Handler+0x4>

08000332 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000336:	e7fe      	b.n	8000336 <BusFault_Handler+0x4>

08000338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800033c:	e7fe      	b.n	800033c <UsageFault_Handler+0x4>

0800033e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr

0800035a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800036c:	f000 f980 	bl	8000670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}

08000374 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000378:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <SystemInit+0x5c>)
 800037a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800037e:	4a14      	ldr	r2, [pc, #80]	; (80003d0 <SystemInit+0x5c>)
 8000380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <SystemInit+0x60>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a11      	ldr	r2, [pc, #68]	; (80003d4 <SystemInit+0x60>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <SystemInit+0x60>)
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <SystemInit+0x60>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <SystemInit+0x60>)
 80003a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80003a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80003a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80003aa:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <SystemInit+0x60>)
 80003ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <SystemInit+0x60>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a07      	ldr	r2, [pc, #28]	; (80003d4 <SystemInit+0x60>)
 80003b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80003be:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <SystemInit+0x60>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	e000ed00 	.word	0xe000ed00
 80003d4:	40021000 	.word	0x40021000

080003d8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08e      	sub	sp, #56	; 0x38
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ec:	f107 031c 	add.w	r3, r7, #28
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003f8:	463b      	mov	r3, r7
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]
 8000406:	615a      	str	r2, [r3, #20]
 8000408:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800040a:	4b2d      	ldr	r3, [pc, #180]	; (80004c0 <MX_TIM3_Init+0xe8>)
 800040c:	4a2d      	ldr	r2, [pc, #180]	; (80004c4 <MX_TIM3_Init+0xec>)
 800040e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8000410:	4b2b      	ldr	r3, [pc, #172]	; (80004c0 <MX_TIM3_Init+0xe8>)
 8000412:	2203      	movs	r2, #3
 8000414:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000416:	4b2a      	ldr	r3, [pc, #168]	; (80004c0 <MX_TIM3_Init+0xe8>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800041c:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <MX_TIM3_Init+0xe8>)
 800041e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000422:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000424:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <MX_TIM3_Init+0xe8>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800042a:	4b25      	ldr	r3, [pc, #148]	; (80004c0 <MX_TIM3_Init+0xe8>)
 800042c:	2280      	movs	r2, #128	; 0x80
 800042e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000430:	4823      	ldr	r0, [pc, #140]	; (80004c0 <MX_TIM3_Init+0xe8>)
 8000432:	f001 fa09 	bl	8001848 <HAL_TIM_Base_Init>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800043c:	f7ff ff46 	bl	80002cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000444:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800044a:	4619      	mov	r1, r3
 800044c:	481c      	ldr	r0, [pc, #112]	; (80004c0 <MX_TIM3_Init+0xe8>)
 800044e:	f001 fcc9 	bl	8001de4 <HAL_TIM_ConfigClockSource>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000458:	f7ff ff38 	bl	80002cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800045c:	4818      	ldr	r0, [pc, #96]	; (80004c0 <MX_TIM3_Init+0xe8>)
 800045e:	f001 fa4a 	bl	80018f6 <HAL_TIM_PWM_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000468:	f7ff ff30 	bl	80002cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800046c:	2300      	movs	r3, #0
 800046e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000470:	2300      	movs	r3, #0
 8000472:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000474:	f107 031c 	add.w	r3, r7, #28
 8000478:	4619      	mov	r1, r3
 800047a:	4811      	ldr	r0, [pc, #68]	; (80004c0 <MX_TIM3_Init+0xe8>)
 800047c:	f002 f9a8 	bl	80027d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000486:	f7ff ff21 	bl	80002cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800048a:	2360      	movs	r3, #96	; 0x60
 800048c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000492:	2300      	movs	r3, #0
 8000494:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000496:	2300      	movs	r3, #0
 8000498:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800049a:	463b      	mov	r3, r7
 800049c:	2200      	movs	r2, #0
 800049e:	4619      	mov	r1, r3
 80004a0:	4807      	ldr	r0, [pc, #28]	; (80004c0 <MX_TIM3_Init+0xe8>)
 80004a2:	f001 fb8f 	bl	8001bc4 <HAL_TIM_PWM_ConfigChannel>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80004ac:	f7ff ff0e 	bl	80002cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004b0:	4803      	ldr	r0, [pc, #12]	; (80004c0 <MX_TIM3_Init+0xe8>)
 80004b2:	f000 f829 	bl	8000508 <HAL_TIM_MspPostInit>

}
 80004b6:	bf00      	nop
 80004b8:	3738      	adds	r7, #56	; 0x38
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000028 	.word	0x20000028
 80004c4:	40000400 	.word	0x40000400

080004c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a0a      	ldr	r2, [pc, #40]	; (8000500 <HAL_TIM_Base_MspInit+0x38>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d10b      	bne.n	80004f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <HAL_TIM_Base_MspInit+0x3c>)
 80004dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004de:	4a09      	ldr	r2, [pc, #36]	; (8000504 <HAL_TIM_Base_MspInit+0x3c>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	6593      	str	r3, [r2, #88]	; 0x58
 80004e6:	4b07      	ldr	r3, [pc, #28]	; (8000504 <HAL_TIM_Base_MspInit+0x3c>)
 80004e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ea:	f003 0302 	and.w	r3, r3, #2
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40000400 	.word	0x40000400
 8000504:	40021000 	.word	0x40021000

08000508 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a11      	ldr	r2, [pc, #68]	; (800056c <HAL_TIM_MspPostInit+0x64>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d11c      	bne.n	8000564 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <HAL_TIM_MspPostInit+0x68>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a10      	ldr	r2, [pc, #64]	; (8000570 <HAL_TIM_MspPostInit+0x68>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <HAL_TIM_MspPostInit+0x68>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000542:	2340      	movs	r3, #64	; 0x40
 8000544:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000546:	2302      	movs	r3, #2
 8000548:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	2300      	movs	r3, #0
 8000550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000552:	2302      	movs	r3, #2
 8000554:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	4619      	mov	r1, r3
 800055c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000560:	f000 f9b0 	bl	80008c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000564:	bf00      	nop
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40000400 	.word	0x40000400
 8000570:	40021000 	.word	0x40021000

08000574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000578:	f7ff fefc 	bl	8000374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800057c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800057e:	e003      	b.n	8000588 <LoopCopyDataInit>

08000580 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000582:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000584:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000586:	3104      	adds	r1, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000588:	480a      	ldr	r0, [pc, #40]	; (80005b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800058c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800058e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000590:	d3f6      	bcc.n	8000580 <CopyDataInit>
	ldr	r2, =_sbss
 8000592:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000594:	e002      	b.n	800059c <LoopFillZerobss>

08000596 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000596:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000598:	f842 3b04 	str.w	r3, [r2], #4

0800059c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <LoopForever+0x16>)
	cmp	r2, r3
 800059e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005a0:	d3f9      	bcc.n	8000596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005a2:	f002 f99d 	bl	80028e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005a6:	f7ff fe27 	bl	80001f8 <main>

080005aa <LoopForever>:

LoopForever:
    b LoopForever
 80005aa:	e7fe      	b.n	80005aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005ac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80005b0:	08002998 	.word	0x08002998
	ldr	r0, =_sdata
 80005b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005b8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80005bc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80005c0:	20000078 	.word	0x20000078

080005c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC1_2_IRQHandler>

080005c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005cc:	2300      	movs	r3, #0
 80005ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d0:	2003      	movs	r0, #3
 80005d2:	f000 f943 	bl	800085c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005d6:	200f      	movs	r0, #15
 80005d8:	f000 f80e 	bl	80005f8 <HAL_InitTick>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d002      	beq.n	80005e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	e001      	b.n	80005ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005e8:	f7ff fe76 	bl	80002d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005ec:	79fb      	ldrb	r3, [r7, #7]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000600:	2300      	movs	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <HAL_InitTick+0x6c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d023      	beq.n	8000654 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800060c:	4b16      	ldr	r3, [pc, #88]	; (8000668 <HAL_InitTick+0x70>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <HAL_InitTick+0x6c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f941 	bl	80008aa <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d10f      	bne.n	800064e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	d809      	bhi.n	8000648 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000634:	2200      	movs	r2, #0
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	f04f 30ff 	mov.w	r0, #4294967295
 800063c:	f000 f919 	bl	8000872 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000640:	4a0a      	ldr	r2, [pc, #40]	; (800066c <HAL_InitTick+0x74>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	e007      	b.n	8000658 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000648:	2301      	movs	r3, #1
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	e004      	b.n	8000658 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]
 8000652:	e001      	b.n	8000658 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000654:	2301      	movs	r3, #1
 8000656:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000658:	7bfb      	ldrb	r3, [r7, #15]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000008 	.word	0x20000008
 8000668:	20000000 	.word	0x20000000
 800066c:	20000004 	.word	0x20000004

08000670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_IncTick+0x20>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_IncTick+0x24>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4413      	add	r3, r2
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <HAL_IncTick+0x24>)
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000008 	.word	0x20000008
 8000694:	20000074 	.word	0x20000074

08000698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  return uwTick;
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <HAL_GetTick+0x14>)
 800069e:	681b      	ldr	r3, [r3, #0]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000074 	.word	0x20000074

080006b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006b8:	f7ff ffee 	bl	8000698 <HAL_GetTick>
 80006bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c8:	d005      	beq.n	80006d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <HAL_Delay+0x44>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	461a      	mov	r2, r3
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4413      	add	r3, r2
 80006d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006d6:	bf00      	nop
 80006d8:	f7ff ffde 	bl	8000698 <HAL_GetTick>
 80006dc:	4602      	mov	r2, r0
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d8f7      	bhi.n	80006d8 <HAL_Delay+0x28>
  {
  }
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000008 	.word	0x20000008

080006f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000714:	4013      	ands	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072a:	4a04      	ldr	r2, [pc, #16]	; (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	60d3      	str	r3, [r2, #12]
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <__NVIC_GetPriorityGrouping+0x18>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	f003 0307 	and.w	r3, r3, #7
}
 800074e:	4618      	mov	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076c:	2b00      	cmp	r3, #0
 800076e:	db0a      	blt.n	8000786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	b2da      	uxtb	r2, r3
 8000774:	490c      	ldr	r1, [pc, #48]	; (80007a8 <__NVIC_SetPriority+0x4c>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	0112      	lsls	r2, r2, #4
 800077c:	b2d2      	uxtb	r2, r2
 800077e:	440b      	add	r3, r1
 8000780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000784:	e00a      	b.n	800079c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4908      	ldr	r1, [pc, #32]	; (80007ac <__NVIC_SetPriority+0x50>)
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	f003 030f 	and.w	r3, r3, #15
 8000792:	3b04      	subs	r3, #4
 8000794:	0112      	lsls	r2, r2, #4
 8000796:	b2d2      	uxtb	r2, r2
 8000798:	440b      	add	r3, r1
 800079a:	761a      	strb	r2, [r3, #24]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	e000e100 	.word	0xe000e100
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b089      	sub	sp, #36	; 0x24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	f1c3 0307 	rsb	r3, r3, #7
 80007ca:	2b04      	cmp	r3, #4
 80007cc:	bf28      	it	cs
 80007ce:	2304      	movcs	r3, #4
 80007d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	3304      	adds	r3, #4
 80007d6:	2b06      	cmp	r3, #6
 80007d8:	d902      	bls.n	80007e0 <NVIC_EncodePriority+0x30>
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	3b03      	subs	r3, #3
 80007de:	e000      	b.n	80007e2 <NVIC_EncodePriority+0x32>
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	f04f 32ff 	mov.w	r2, #4294967295
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	43da      	mvns	r2, r3
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	401a      	ands	r2, r3
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f8:	f04f 31ff 	mov.w	r1, #4294967295
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	43d9      	mvns	r1, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	4313      	orrs	r3, r2
         );
}
 800080a:	4618      	mov	r0, r3
 800080c:	3724      	adds	r7, #36	; 0x24
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
	...

08000818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000828:	d301      	bcc.n	800082e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082a:	2301      	movs	r3, #1
 800082c:	e00f      	b.n	800084e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <SysTick_Config+0x40>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000836:	210f      	movs	r1, #15
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	f7ff ff8e 	bl	800075c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <SysTick_Config+0x40>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <SysTick_Config+0x40>)
 8000848:	2207      	movs	r2, #7
 800084a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	e000e010 	.word	0xe000e010

0800085c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ff47 	bl	80006f8 <__NVIC_SetPriorityGrouping>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000884:	f7ff ff5c 	bl	8000740 <__NVIC_GetPriorityGrouping>
 8000888:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	68b9      	ldr	r1, [r7, #8]
 800088e:	6978      	ldr	r0, [r7, #20]
 8000890:	f7ff ff8e 	bl	80007b0 <NVIC_EncodePriority>
 8000894:	4602      	mov	r2, r0
 8000896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff5d 	bl	800075c <__NVIC_SetPriority>
}
 80008a2:	bf00      	nop
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff ffb0 	bl	8000818 <SysTick_Config>
 80008b8:	4603      	mov	r3, r0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008d2:	e17f      	b.n	8000bd4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	2101      	movs	r1, #1
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	fa01 f303 	lsl.w	r3, r1, r3
 80008e0:	4013      	ands	r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f000 8171 	beq.w	8000bce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d00b      	beq.n	800090c <HAL_GPIO_Init+0x48>
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d007      	beq.n	800090c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000900:	2b11      	cmp	r3, #17
 8000902:	d003      	beq.n	800090c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	2b12      	cmp	r3, #18
 800090a:	d130      	bne.n	800096e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	2203      	movs	r2, #3
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	4013      	ands	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	68da      	ldr	r2, [r3, #12]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	4313      	orrs	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000942:	2201      	movs	r2, #1
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	4013      	ands	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	091b      	lsrs	r3, r3, #4
 8000958:	f003 0201 	and.w	r2, r3, #1
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4313      	orrs	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	2b03      	cmp	r3, #3
 8000978:	d118      	bne.n	80009ac <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000980:	2201      	movs	r2, #1
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4013      	ands	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	08db      	lsrs	r3, r3, #3
 8000996:	f003 0201 	and.w	r2, r3, #1
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	2203      	movs	r2, #3
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	689a      	ldr	r2, [r3, #8]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d003      	beq.n	80009ec <HAL_GPIO_Init+0x128>
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2b12      	cmp	r3, #18
 80009ea:	d123      	bne.n	8000a34 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	08da      	lsrs	r2, r3, #3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3208      	adds	r2, #8
 80009f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	f003 0307 	and.w	r3, r3, #7
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	220f      	movs	r2, #15
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	691a      	ldr	r2, [r3, #16]
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	08da      	lsrs	r2, r3, #3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3208      	adds	r2, #8
 8000a2e:	6939      	ldr	r1, [r7, #16]
 8000a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	2203      	movs	r2, #3
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f003 0203 	and.w	r2, r3, #3
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f000 80ac 	beq.w	8000bce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b5f      	ldr	r3, [pc, #380]	; (8000bf4 <HAL_GPIO_Init+0x330>)
 8000a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7a:	4a5e      	ldr	r2, [pc, #376]	; (8000bf4 <HAL_GPIO_Init+0x330>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6613      	str	r3, [r2, #96]	; 0x60
 8000a82:	4b5c      	ldr	r3, [pc, #368]	; (8000bf4 <HAL_GPIO_Init+0x330>)
 8000a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a8e:	4a5a      	ldr	r2, [pc, #360]	; (8000bf8 <HAL_GPIO_Init+0x334>)
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	089b      	lsrs	r3, r3, #2
 8000a94:	3302      	adds	r3, #2
 8000a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	f003 0303 	and.w	r3, r3, #3
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	220f      	movs	r2, #15
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ab8:	d025      	beq.n	8000b06 <HAL_GPIO_Init+0x242>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a4f      	ldr	r2, [pc, #316]	; (8000bfc <HAL_GPIO_Init+0x338>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d01f      	beq.n	8000b02 <HAL_GPIO_Init+0x23e>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a4e      	ldr	r2, [pc, #312]	; (8000c00 <HAL_GPIO_Init+0x33c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d019      	beq.n	8000afe <HAL_GPIO_Init+0x23a>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a4d      	ldr	r2, [pc, #308]	; (8000c04 <HAL_GPIO_Init+0x340>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d013      	beq.n	8000afa <HAL_GPIO_Init+0x236>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a4c      	ldr	r2, [pc, #304]	; (8000c08 <HAL_GPIO_Init+0x344>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d00d      	beq.n	8000af6 <HAL_GPIO_Init+0x232>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a4b      	ldr	r2, [pc, #300]	; (8000c0c <HAL_GPIO_Init+0x348>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d007      	beq.n	8000af2 <HAL_GPIO_Init+0x22e>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a4a      	ldr	r2, [pc, #296]	; (8000c10 <HAL_GPIO_Init+0x34c>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_GPIO_Init+0x22a>
 8000aea:	2306      	movs	r3, #6
 8000aec:	e00c      	b.n	8000b08 <HAL_GPIO_Init+0x244>
 8000aee:	2307      	movs	r3, #7
 8000af0:	e00a      	b.n	8000b08 <HAL_GPIO_Init+0x244>
 8000af2:	2305      	movs	r3, #5
 8000af4:	e008      	b.n	8000b08 <HAL_GPIO_Init+0x244>
 8000af6:	2304      	movs	r3, #4
 8000af8:	e006      	b.n	8000b08 <HAL_GPIO_Init+0x244>
 8000afa:	2303      	movs	r3, #3
 8000afc:	e004      	b.n	8000b08 <HAL_GPIO_Init+0x244>
 8000afe:	2302      	movs	r3, #2
 8000b00:	e002      	b.n	8000b08 <HAL_GPIO_Init+0x244>
 8000b02:	2301      	movs	r3, #1
 8000b04:	e000      	b.n	8000b08 <HAL_GPIO_Init+0x244>
 8000b06:	2300      	movs	r3, #0
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	f002 0203 	and.w	r2, r2, #3
 8000b0e:	0092      	lsls	r2, r2, #2
 8000b10:	4093      	lsls	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b18:	4937      	ldr	r1, [pc, #220]	; (8000bf8 <HAL_GPIO_Init+0x334>)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	089b      	lsrs	r3, r3, #2
 8000b1e:	3302      	adds	r3, #2
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b26:	4b3b      	ldr	r3, [pc, #236]	; (8000c14 <HAL_GPIO_Init+0x350>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b4a:	4a32      	ldr	r2, [pc, #200]	; (8000c14 <HAL_GPIO_Init+0x350>)
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b50:	4b30      	ldr	r3, [pc, #192]	; (8000c14 <HAL_GPIO_Init+0x350>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d003      	beq.n	8000b74 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b74:	4a27      	ldr	r2, [pc, #156]	; (8000c14 <HAL_GPIO_Init+0x350>)
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b7a:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <HAL_GPIO_Init+0x350>)
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d003      	beq.n	8000b9e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b9e:	4a1d      	ldr	r2, [pc, #116]	; (8000c14 <HAL_GPIO_Init+0x350>)
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <HAL_GPIO_Init+0x350>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bc8:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <HAL_GPIO_Init+0x350>)
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa22 f303 	lsr.w	r3, r2, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f47f ae78 	bne.w	80008d4 <HAL_GPIO_Init+0x10>
  }
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	371c      	adds	r7, #28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40010000 	.word	0x40010000
 8000bfc:	48000400 	.word	0x48000400
 8000c00:	48000800 	.word	0x48000800
 8000c04:	48000c00 	.word	0x48000c00
 8000c08:	48001000 	.word	0x48001000
 8000c0c:	48001400 	.word	0x48001400
 8000c10:	48001800 	.word	0x48001800
 8000c14:	40010400 	.word	0x40010400

08000c18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40007000 	.word	0x40007000

08000c34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c42:	d130      	bne.n	8000ca6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c50:	d038      	beq.n	8000cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c5a:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2232      	movs	r2, #50	; 0x32
 8000c68:	fb02 f303 	mul.w	r3, r2, r3
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c72:	0c9b      	lsrs	r3, r3, #18
 8000c74:	3301      	adds	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c78:	e002      	b.n	8000c80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c8c:	d102      	bne.n	8000c94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f2      	bne.n	8000c7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ca0:	d110      	bne.n	8000cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e00f      	b.n	8000cc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cb2:	d007      	beq.n	8000cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cbc:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40007000 	.word	0x40007000
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	431bde83 	.word	0x431bde83

08000ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e3d4      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cf2:	4ba1      	ldr	r3, [pc, #644]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cfc:	4b9e      	ldr	r3, [pc, #632]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0310 	and.w	r3, r3, #16
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 80e4 	beq.w	8000edc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d007      	beq.n	8000d2a <HAL_RCC_OscConfig+0x4a>
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	2b0c      	cmp	r3, #12
 8000d1e:	f040 808b 	bne.w	8000e38 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	f040 8087 	bne.w	8000e38 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d2a:	4b93      	ldr	r3, [pc, #588]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d005      	beq.n	8000d42 <HAL_RCC_OscConfig+0x62>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e3ac      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a1a      	ldr	r2, [r3, #32]
 8000d46:	4b8c      	ldr	r3, [pc, #560]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d004      	beq.n	8000d5c <HAL_RCC_OscConfig+0x7c>
 8000d52:	4b89      	ldr	r3, [pc, #548]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d5a:	e005      	b.n	8000d68 <HAL_RCC_OscConfig+0x88>
 8000d5c:	4b86      	ldr	r3, [pc, #536]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d62:	091b      	lsrs	r3, r3, #4
 8000d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d223      	bcs.n	8000db4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a1b      	ldr	r3, [r3, #32]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 fd09 	bl	8001788 <RCC_SetFlashLatencyFromMSIRange>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e38d      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d80:	4b7d      	ldr	r3, [pc, #500]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a7c      	ldr	r2, [pc, #496]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	4b7a      	ldr	r3, [pc, #488]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	4977      	ldr	r1, [pc, #476]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d9e:	4b76      	ldr	r3, [pc, #472]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	4972      	ldr	r1, [pc, #456]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000dae:	4313      	orrs	r3, r2
 8000db0:	604b      	str	r3, [r1, #4]
 8000db2:	e025      	b.n	8000e00 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000db4:	4b70      	ldr	r3, [pc, #448]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a6f      	ldr	r2, [pc, #444]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4b6d      	ldr	r3, [pc, #436]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	496a      	ldr	r1, [pc, #424]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dd2:	4b69      	ldr	r3, [pc, #420]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	4965      	ldr	r1, [pc, #404]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d109      	bne.n	8000e00 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a1b      	ldr	r3, [r3, #32]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 fcc9 	bl	8001788 <RCC_SetFlashLatencyFromMSIRange>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e34d      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e00:	f000 fc36 	bl	8001670 <HAL_RCC_GetSysClockFreq>
 8000e04:	4602      	mov	r2, r0
 8000e06:	4b5c      	ldr	r3, [pc, #368]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	091b      	lsrs	r3, r3, #4
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	495a      	ldr	r1, [pc, #360]	; (8000f7c <HAL_RCC_OscConfig+0x29c>)
 8000e12:	5ccb      	ldrb	r3, [r1, r3]
 8000e14:	f003 031f 	and.w	r3, r3, #31
 8000e18:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1c:	4a58      	ldr	r2, [pc, #352]	; (8000f80 <HAL_RCC_OscConfig+0x2a0>)
 8000e1e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e20:	4b58      	ldr	r3, [pc, #352]	; (8000f84 <HAL_RCC_OscConfig+0x2a4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fbe7 	bl	80005f8 <HAL_InitTick>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d052      	beq.n	8000eda <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	e331      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d032      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e40:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a4c      	ldr	r2, [pc, #304]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fc24 	bl	8000698 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e54:	f7ff fc20 	bl	8000698 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e31a      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e66:	4b44      	ldr	r3, [pc, #272]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0f0      	beq.n	8000e54 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e72:	4b41      	ldr	r3, [pc, #260]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a40      	ldr	r2, [pc, #256]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	4b3e      	ldr	r3, [pc, #248]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	493b      	ldr	r1, [pc, #236]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e90:	4b39      	ldr	r3, [pc, #228]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69db      	ldr	r3, [r3, #28]
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	4936      	ldr	r1, [pc, #216]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	604b      	str	r3, [r1, #4]
 8000ea4:	e01a      	b.n	8000edc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a33      	ldr	r2, [pc, #204]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000eac:	f023 0301 	bic.w	r3, r3, #1
 8000eb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000eb2:	f7ff fbf1 	bl	8000698 <HAL_GetTick>
 8000eb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000eb8:	e008      	b.n	8000ecc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000eba:	f7ff fbed 	bl	8000698 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e2e7      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ecc:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1f0      	bne.n	8000eba <HAL_RCC_OscConfig+0x1da>
 8000ed8:	e000      	b.n	8000edc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eda:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d074      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	2b08      	cmp	r3, #8
 8000eec:	d005      	beq.n	8000efa <HAL_RCC_OscConfig+0x21a>
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	2b0c      	cmp	r3, #12
 8000ef2:	d10e      	bne.n	8000f12 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d10b      	bne.n	8000f12 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d064      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x2f0>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d160      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e2c4      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f1a:	d106      	bne.n	8000f2a <HAL_RCC_OscConfig+0x24a>
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a15      	ldr	r2, [pc, #84]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	e01d      	b.n	8000f66 <HAL_RCC_OscConfig+0x286>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f32:	d10c      	bne.n	8000f4e <HAL_RCC_OscConfig+0x26e>
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0f      	ldr	r2, [pc, #60]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000f3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	e00b      	b.n	8000f66 <HAL_RCC_OscConfig+0x286>
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <HAL_RCC_OscConfig+0x298>)
 8000f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f64:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d01c      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6e:	f7ff fb93 	bl	8000698 <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f74:	e011      	b.n	8000f9a <HAL_RCC_OscConfig+0x2ba>
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	08002950 	.word	0x08002950
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f88:	f7ff fb86 	bl	8000698 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b64      	cmp	r3, #100	; 0x64
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e280      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f9a:	4baf      	ldr	r3, [pc, #700]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f0      	beq.n	8000f88 <HAL_RCC_OscConfig+0x2a8>
 8000fa6:	e014      	b.n	8000fd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fb76 	bl	8000698 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fb72 	bl	8000698 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b64      	cmp	r3, #100	; 0x64
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e26c      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fc2:	4ba5      	ldr	r3, [pc, #660]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f0      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x2d0>
 8000fce:	e000      	b.n	8000fd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d060      	beq.n	80010a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d005      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x310>
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2b0c      	cmp	r3, #12
 8000fe8:	d119      	bne.n	800101e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d116      	bne.n	800101e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ff0:	4b99      	ldr	r3, [pc, #612]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <HAL_RCC_OscConfig+0x328>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e249      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001008:	4b93      	ldr	r3, [pc, #588]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	061b      	lsls	r3, r3, #24
 8001016:	4990      	ldr	r1, [pc, #576]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800101c:	e040      	b.n	80010a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d023      	beq.n	800106e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001026:	4b8c      	ldr	r3, [pc, #560]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a8b      	ldr	r2, [pc, #556]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001032:	f7ff fb31 	bl	8000698 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800103a:	f7ff fb2d 	bl	8000698 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e227      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800104c:	4b82      	ldr	r3, [pc, #520]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001058:	4b7f      	ldr	r3, [pc, #508]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	061b      	lsls	r3, r3, #24
 8001066:	497c      	ldr	r1, [pc, #496]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 8001068:	4313      	orrs	r3, r2
 800106a:	604b      	str	r3, [r1, #4]
 800106c:	e018      	b.n	80010a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106e:	4b7a      	ldr	r3, [pc, #488]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a79      	ldr	r2, [pc, #484]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 8001074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107a:	f7ff fb0d 	bl	8000698 <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001082:	f7ff fb09 	bl	8000698 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e203      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001094:	4b70      	ldr	r3, [pc, #448]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f0      	bne.n	8001082 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d03c      	beq.n	8001126 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d01c      	beq.n	80010ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010b4:	4b68      	ldr	r3, [pc, #416]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 80010b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ba:	4a67      	ldr	r2, [pc, #412]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c4:	f7ff fae8 	bl	8000698 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010cc:	f7ff fae4 	bl	8000698 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e1de      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010de:	4b5e      	ldr	r3, [pc, #376]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 80010e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0ef      	beq.n	80010cc <HAL_RCC_OscConfig+0x3ec>
 80010ec:	e01b      	b.n	8001126 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ee:	4b5a      	ldr	r3, [pc, #360]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 80010f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f4:	4a58      	ldr	r2, [pc, #352]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 80010f6:	f023 0301 	bic.w	r3, r3, #1
 80010fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010fe:	f7ff facb 	bl	8000698 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001106:	f7ff fac7 	bl	8000698 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e1c1      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001118:	4b4f      	ldr	r3, [pc, #316]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 800111a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1ef      	bne.n	8001106 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 80a6 	beq.w	8001280 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001134:	2300      	movs	r3, #0
 8001136:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001138:	4b47      	ldr	r3, [pc, #284]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 800113a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10d      	bne.n	8001160 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001144:	4b44      	ldr	r3, [pc, #272]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 8001146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001148:	4a43      	ldr	r2, [pc, #268]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 800114a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114e:	6593      	str	r3, [r2, #88]	; 0x58
 8001150:	4b41      	ldr	r3, [pc, #260]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 8001152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800115c:	2301      	movs	r3, #1
 800115e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001160:	4b3e      	ldr	r3, [pc, #248]	; (800125c <HAL_RCC_OscConfig+0x57c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001168:	2b00      	cmp	r3, #0
 800116a:	d118      	bne.n	800119e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800116c:	4b3b      	ldr	r3, [pc, #236]	; (800125c <HAL_RCC_OscConfig+0x57c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a3a      	ldr	r2, [pc, #232]	; (800125c <HAL_RCC_OscConfig+0x57c>)
 8001172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001176:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001178:	f7ff fa8e 	bl	8000698 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001180:	f7ff fa8a 	bl	8000698 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e184      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001192:	4b32      	ldr	r3, [pc, #200]	; (800125c <HAL_RCC_OscConfig+0x57c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d108      	bne.n	80011b8 <HAL_RCC_OscConfig+0x4d8>
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 80011a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ac:	4a2a      	ldr	r2, [pc, #168]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011b6:	e024      	b.n	8001202 <HAL_RCC_OscConfig+0x522>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b05      	cmp	r3, #5
 80011be:	d110      	bne.n	80011e2 <HAL_RCC_OscConfig+0x502>
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 80011c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c6:	4a24      	ldr	r2, [pc, #144]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011d0:	4b21      	ldr	r3, [pc, #132]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 80011d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d6:	4a20      	ldr	r2, [pc, #128]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011e0:	e00f      	b.n	8001202 <HAL_RCC_OscConfig+0x522>
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 80011e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011e8:	4a1b      	ldr	r2, [pc, #108]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 80011ea:	f023 0301 	bic.w	r3, r3, #1
 80011ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 80011f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011f8:	4a17      	ldr	r2, [pc, #92]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 80011fa:	f023 0304 	bic.w	r3, r3, #4
 80011fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d016      	beq.n	8001238 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120a:	f7ff fa45 	bl	8000698 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001210:	e00a      	b.n	8001228 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001212:	f7ff fa41 	bl	8000698 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001220:	4293      	cmp	r3, r2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e139      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_RCC_OscConfig+0x578>)
 800122a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0ed      	beq.n	8001212 <HAL_RCC_OscConfig+0x532>
 8001236:	e01a      	b.n	800126e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001238:	f7ff fa2e 	bl	8000698 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800123e:	e00f      	b.n	8001260 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001240:	f7ff fa2a 	bl	8000698 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	f241 3288 	movw	r2, #5000	; 0x1388
 800124e:	4293      	cmp	r3, r2
 8001250:	d906      	bls.n	8001260 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e122      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000
 800125c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001260:	4b90      	ldr	r3, [pc, #576]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 8001262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1e8      	bne.n	8001240 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800126e:	7ffb      	ldrb	r3, [r7, #31]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d105      	bne.n	8001280 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001274:	4b8b      	ldr	r3, [pc, #556]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 8001276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001278:	4a8a      	ldr	r2, [pc, #552]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 800127a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800127e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 8108 	beq.w	800149a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128e:	2b02      	cmp	r3, #2
 8001290:	f040 80d0 	bne.w	8001434 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001294:	4b83      	ldr	r3, [pc, #524]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f003 0203 	and.w	r2, r3, #3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d130      	bne.n	800130a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	3b01      	subs	r3, #1
 80012b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d127      	bne.n	800130a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d11f      	bne.n	800130a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012d4:	2a07      	cmp	r2, #7
 80012d6:	bf14      	ite	ne
 80012d8:	2201      	movne	r2, #1
 80012da:	2200      	moveq	r2, #0
 80012dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012de:	4293      	cmp	r3, r2
 80012e0:	d113      	bne.n	800130a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ec:	085b      	lsrs	r3, r3, #1
 80012ee:	3b01      	subs	r3, #1
 80012f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d109      	bne.n	800130a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	085b      	lsrs	r3, r3, #1
 8001302:	3b01      	subs	r3, #1
 8001304:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001306:	429a      	cmp	r2, r3
 8001308:	d06e      	beq.n	80013e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	2b0c      	cmp	r3, #12
 800130e:	d069      	beq.n	80013e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001310:	4b64      	ldr	r3, [pc, #400]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d105      	bne.n	8001328 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800131c:	4b61      	ldr	r3, [pc, #388]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e0b7      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800132c:	4b5d      	ldr	r3, [pc, #372]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a5c      	ldr	r2, [pc, #368]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 8001332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001336:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001338:	f7ff f9ae 	bl	8000698 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001340:	f7ff f9aa 	bl	8000698 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e0a4      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001352:	4b54      	ldr	r3, [pc, #336]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800135e:	4b51      	ldr	r3, [pc, #324]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	4b51      	ldr	r3, [pc, #324]	; (80014a8 <HAL_RCC_OscConfig+0x7c8>)
 8001364:	4013      	ands	r3, r2
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800136e:	3a01      	subs	r2, #1
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	4311      	orrs	r1, r2
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001378:	0212      	lsls	r2, r2, #8
 800137a:	4311      	orrs	r1, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001380:	0852      	lsrs	r2, r2, #1
 8001382:	3a01      	subs	r2, #1
 8001384:	0552      	lsls	r2, r2, #21
 8001386:	4311      	orrs	r1, r2
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800138c:	0852      	lsrs	r2, r2, #1
 800138e:	3a01      	subs	r2, #1
 8001390:	0652      	lsls	r2, r2, #25
 8001392:	4311      	orrs	r1, r2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001398:	0912      	lsrs	r2, r2, #4
 800139a:	0452      	lsls	r2, r2, #17
 800139c:	430a      	orrs	r2, r1
 800139e:	4941      	ldr	r1, [pc, #260]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013a4:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a3e      	ldr	r2, [pc, #248]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 80013aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013b0:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	4a3b      	ldr	r2, [pc, #236]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 80013b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013bc:	f7ff f96c 	bl	8000698 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c4:	f7ff f968 	bl	8000698 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e062      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d6:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013e2:	e05a      	b.n	800149a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e059      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013e8:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d152      	bne.n	800149a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013f4:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a2a      	ldr	r2, [pc, #168]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 80013fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	4a27      	ldr	r2, [pc, #156]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 8001406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800140a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800140c:	f7ff f944 	bl	8000698 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001414:	f7ff f940 	bl	8000698 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e03a      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x734>
 8001432:	e032      	b.n	800149a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2b0c      	cmp	r3, #12
 8001438:	d02d      	beq.n	8001496 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 8001440:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001444:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d105      	bne.n	800145e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 8001458:	f023 0303 	bic.w	r3, r3, #3
 800145c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 8001464:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff f913 	bl	8000698 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff f90f 	bl	8000698 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e009      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_RCC_OscConfig+0x7c4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f0      	bne.n	8001476 <HAL_RCC_OscConfig+0x796>
 8001494:	e001      	b.n	800149a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000
 80014a8:	f99d808c 	.word	0xf99d808c

080014ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0c8      	b.n	8001652 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014c0:	4b66      	ldr	r3, [pc, #408]	; (800165c <HAL_RCC_ClockConfig+0x1b0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d910      	bls.n	80014f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ce:	4b63      	ldr	r3, [pc, #396]	; (800165c <HAL_RCC_ClockConfig+0x1b0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 0207 	bic.w	r2, r3, #7
 80014d6:	4961      	ldr	r1, [pc, #388]	; (800165c <HAL_RCC_ClockConfig+0x1b0>)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014de:	4b5f      	ldr	r3, [pc, #380]	; (800165c <HAL_RCC_ClockConfig+0x1b0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d001      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0b0      	b.n	8001652 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d04c      	beq.n	8001596 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b03      	cmp	r3, #3
 8001502:	d107      	bne.n	8001514 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001504:	4b56      	ldr	r3, [pc, #344]	; (8001660 <HAL_RCC_ClockConfig+0x1b4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d121      	bne.n	8001554 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e09e      	b.n	8001652 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d107      	bne.n	800152c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800151c:	4b50      	ldr	r3, [pc, #320]	; (8001660 <HAL_RCC_ClockConfig+0x1b4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d115      	bne.n	8001554 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e092      	b.n	8001652 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d107      	bne.n	8001544 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001534:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <HAL_RCC_ClockConfig+0x1b4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d109      	bne.n	8001554 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e086      	b.n	8001652 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001544:	4b46      	ldr	r3, [pc, #280]	; (8001660 <HAL_RCC_ClockConfig+0x1b4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e07e      	b.n	8001652 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001554:	4b42      	ldr	r3, [pc, #264]	; (8001660 <HAL_RCC_ClockConfig+0x1b4>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f023 0203 	bic.w	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	493f      	ldr	r1, [pc, #252]	; (8001660 <HAL_RCC_ClockConfig+0x1b4>)
 8001562:	4313      	orrs	r3, r2
 8001564:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001566:	f7ff f897 	bl	8000698 <HAL_GetTick>
 800156a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156c:	e00a      	b.n	8001584 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156e:	f7ff f893 	bl	8000698 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	f241 3288 	movw	r2, #5000	; 0x1388
 800157c:	4293      	cmp	r3, r2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e066      	b.n	8001652 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001584:	4b36      	ldr	r3, [pc, #216]	; (8001660 <HAL_RCC_ClockConfig+0x1b4>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 020c 	and.w	r2, r3, #12
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	429a      	cmp	r2, r3
 8001594:	d1eb      	bne.n	800156e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d008      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a2:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <HAL_RCC_ClockConfig+0x1b4>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	492c      	ldr	r1, [pc, #176]	; (8001660 <HAL_RCC_ClockConfig+0x1b4>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <HAL_RCC_ClockConfig+0x1b0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d210      	bcs.n	80015e4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b26      	ldr	r3, [pc, #152]	; (800165c <HAL_RCC_ClockConfig+0x1b0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 0207 	bic.w	r2, r3, #7
 80015ca:	4924      	ldr	r1, [pc, #144]	; (800165c <HAL_RCC_ClockConfig+0x1b0>)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <HAL_RCC_ClockConfig+0x1b0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e036      	b.n	8001652 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_RCC_ClockConfig+0x1b4>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4918      	ldr	r1, [pc, #96]	; (8001660 <HAL_RCC_ClockConfig+0x1b4>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d009      	beq.n	8001622 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_RCC_ClockConfig+0x1b4>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4910      	ldr	r1, [pc, #64]	; (8001660 <HAL_RCC_ClockConfig+0x1b4>)
 800161e:	4313      	orrs	r3, r2
 8001620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001622:	f000 f825 	bl	8001670 <HAL_RCC_GetSysClockFreq>
 8001626:	4602      	mov	r2, r0
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_RCC_ClockConfig+0x1b4>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	490c      	ldr	r1, [pc, #48]	; (8001664 <HAL_RCC_ClockConfig+0x1b8>)
 8001634:	5ccb      	ldrb	r3, [r1, r3]
 8001636:	f003 031f 	and.w	r3, r3, #31
 800163a:	fa22 f303 	lsr.w	r3, r2, r3
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ffd6 	bl	80005f8 <HAL_InitTick>
 800164c:	4603      	mov	r3, r0
 800164e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001650:	7afb      	ldrb	r3, [r7, #11]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40022000 	.word	0x40022000
 8001660:	40021000 	.word	0x40021000
 8001664:	08002950 	.word	0x08002950
 8001668:	20000000 	.word	0x20000000
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800167e:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <HAL_RCC_GetSysClockFreq+0x108>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001688:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <HAL_RCC_GetSysClockFreq+0x108>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0x34>
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	2b0c      	cmp	r3, #12
 800169c:	d121      	bne.n	80016e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d11e      	bne.n	80016e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016a4:	4b34      	ldr	r3, [pc, #208]	; (8001778 <HAL_RCC_GetSysClockFreq+0x108>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d107      	bne.n	80016c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016b0:	4b31      	ldr	r3, [pc, #196]	; (8001778 <HAL_RCC_GetSysClockFreq+0x108>)
 80016b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	e005      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <HAL_RCC_GetSysClockFreq+0x108>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016cc:	4a2b      	ldr	r2, [pc, #172]	; (800177c <HAL_RCC_GetSysClockFreq+0x10c>)
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10d      	bne.n	80016f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d102      	bne.n	80016ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016e8:	4b25      	ldr	r3, [pc, #148]	; (8001780 <HAL_RCC_GetSysClockFreq+0x110>)
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	e004      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016f4:	4b23      	ldr	r3, [pc, #140]	; (8001784 <HAL_RCC_GetSysClockFreq+0x114>)
 80016f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	2b0c      	cmp	r3, #12
 80016fc:	d134      	bne.n	8001768 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016fe:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <HAL_RCC_GetSysClockFreq+0x108>)
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d003      	beq.n	8001716 <HAL_RCC_GetSysClockFreq+0xa6>
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	2b03      	cmp	r3, #3
 8001712:	d003      	beq.n	800171c <HAL_RCC_GetSysClockFreq+0xac>
 8001714:	e005      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <HAL_RCC_GetSysClockFreq+0x110>)
 8001718:	617b      	str	r3, [r7, #20]
      break;
 800171a:	e005      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_RCC_GetSysClockFreq+0x114>)
 800171e:	617b      	str	r3, [r7, #20]
      break;
 8001720:	e002      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	617b      	str	r3, [r7, #20]
      break;
 8001726:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_RCC_GetSysClockFreq+0x108>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	3301      	adds	r3, #1
 8001734:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_RCC_GetSysClockFreq+0x108>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	0a1b      	lsrs	r3, r3, #8
 800173c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	fb02 f203 	mul.w	r2, r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	fbb2 f3f3 	udiv	r3, r2, r3
 800174c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_RCC_GetSysClockFreq+0x108>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	0e5b      	lsrs	r3, r3, #25
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	3301      	adds	r3, #1
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	fbb2 f3f3 	udiv	r3, r2, r3
 8001766:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001768:	69bb      	ldr	r3, [r7, #24]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	08002960 	.word	0x08002960
 8001780:	00f42400 	.word	0x00f42400
 8001784:	007a1200 	.word	0x007a1200

08001788 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001794:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017a0:	f7ff fa3a 	bl	8000c18 <HAL_PWREx_GetVoltageRange>
 80017a4:	6178      	str	r0, [r7, #20]
 80017a6:	e014      	b.n	80017d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017a8:	4b25      	ldr	r3, [pc, #148]	; (8001840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ac:	4a24      	ldr	r2, [pc, #144]	; (8001840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b2:	6593      	str	r3, [r2, #88]	; 0x58
 80017b4:	4b22      	ldr	r3, [pc, #136]	; (8001840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017c0:	f7ff fa2a 	bl	8000c18 <HAL_PWREx_GetVoltageRange>
 80017c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017c6:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ca:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017d8:	d10b      	bne.n	80017f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b80      	cmp	r3, #128	; 0x80
 80017de:	d919      	bls.n	8001814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2ba0      	cmp	r3, #160	; 0xa0
 80017e4:	d902      	bls.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017e6:	2302      	movs	r3, #2
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	e013      	b.n	8001814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017ec:	2301      	movs	r3, #1
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	e010      	b.n	8001814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b80      	cmp	r3, #128	; 0x80
 80017f6:	d902      	bls.n	80017fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017f8:	2303      	movs	r3, #3
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	e00a      	b.n	8001814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b80      	cmp	r3, #128	; 0x80
 8001802:	d102      	bne.n	800180a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001804:	2302      	movs	r3, #2
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	e004      	b.n	8001814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b70      	cmp	r3, #112	; 0x70
 800180e:	d101      	bne.n	8001814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001810:	2301      	movs	r3, #1
 8001812:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f023 0207 	bic.w	r2, r3, #7
 800181c:	4909      	ldr	r1, [pc, #36]	; (8001844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	429a      	cmp	r2, r3
 8001830:	d001      	beq.n	8001836 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	40022000 	.word	0x40022000

08001848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e049      	b.n	80018ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d106      	bne.n	8001874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7fe fe2a 	bl	80004c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2202      	movs	r2, #2
 8001878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3304      	adds	r3, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4610      	mov	r0, r2
 8001888:	f000 fb72 	bl	8001f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e049      	b.n	800199c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d106      	bne.n	8001922 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f841 	bl	80019a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2202      	movs	r2, #2
 8001926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3304      	adds	r3, #4
 8001932:	4619      	mov	r1, r3
 8001934:	4610      	mov	r0, r2
 8001936:	f000 fb1b 	bl	8001f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d109      	bne.n	80019dc <HAL_TIM_PWM_Start+0x24>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	bf14      	ite	ne
 80019d4:	2301      	movne	r3, #1
 80019d6:	2300      	moveq	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e03c      	b.n	8001a56 <HAL_TIM_PWM_Start+0x9e>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d109      	bne.n	80019f6 <HAL_TIM_PWM_Start+0x3e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	bf14      	ite	ne
 80019ee:	2301      	movne	r3, #1
 80019f0:	2300      	moveq	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	e02f      	b.n	8001a56 <HAL_TIM_PWM_Start+0x9e>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d109      	bne.n	8001a10 <HAL_TIM_PWM_Start+0x58>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	bf14      	ite	ne
 8001a08:	2301      	movne	r3, #1
 8001a0a:	2300      	moveq	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	e022      	b.n	8001a56 <HAL_TIM_PWM_Start+0x9e>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	2b0c      	cmp	r3, #12
 8001a14:	d109      	bne.n	8001a2a <HAL_TIM_PWM_Start+0x72>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	bf14      	ite	ne
 8001a22:	2301      	movne	r3, #1
 8001a24:	2300      	moveq	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	e015      	b.n	8001a56 <HAL_TIM_PWM_Start+0x9e>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b10      	cmp	r3, #16
 8001a2e:	d109      	bne.n	8001a44 <HAL_TIM_PWM_Start+0x8c>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	bf14      	ite	ne
 8001a3c:	2301      	movne	r3, #1
 8001a3e:	2300      	moveq	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	e008      	b.n	8001a56 <HAL_TIM_PWM_Start+0x9e>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	bf14      	ite	ne
 8001a50:	2301      	movne	r3, #1
 8001a52:	2300      	moveq	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e09c      	b.n	8001b98 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d104      	bne.n	8001a6e <HAL_TIM_PWM_Start+0xb6>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a6c:	e023      	b.n	8001ab6 <HAL_TIM_PWM_Start+0xfe>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d104      	bne.n	8001a7e <HAL_TIM_PWM_Start+0xc6>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2202      	movs	r2, #2
 8001a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a7c:	e01b      	b.n	8001ab6 <HAL_TIM_PWM_Start+0xfe>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d104      	bne.n	8001a8e <HAL_TIM_PWM_Start+0xd6>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a8c:	e013      	b.n	8001ab6 <HAL_TIM_PWM_Start+0xfe>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b0c      	cmp	r3, #12
 8001a92:	d104      	bne.n	8001a9e <HAL_TIM_PWM_Start+0xe6>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a9c:	e00b      	b.n	8001ab6 <HAL_TIM_PWM_Start+0xfe>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2b10      	cmp	r3, #16
 8001aa2:	d104      	bne.n	8001aae <HAL_TIM_PWM_Start+0xf6>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001aac:	e003      	b.n	8001ab6 <HAL_TIM_PWM_Start+0xfe>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2201      	movs	r2, #1
 8001abc:	6839      	ldr	r1, [r7, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 fe60 	bl	8002784 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a35      	ldr	r2, [pc, #212]	; (8001ba0 <HAL_TIM_PWM_Start+0x1e8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_TIM_PWM_Start+0x13e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a34      	ldr	r2, [pc, #208]	; (8001ba4 <HAL_TIM_PWM_Start+0x1ec>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d00e      	beq.n	8001af6 <HAL_TIM_PWM_Start+0x13e>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a32      	ldr	r2, [pc, #200]	; (8001ba8 <HAL_TIM_PWM_Start+0x1f0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d009      	beq.n	8001af6 <HAL_TIM_PWM_Start+0x13e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a31      	ldr	r2, [pc, #196]	; (8001bac <HAL_TIM_PWM_Start+0x1f4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d004      	beq.n	8001af6 <HAL_TIM_PWM_Start+0x13e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a2f      	ldr	r2, [pc, #188]	; (8001bb0 <HAL_TIM_PWM_Start+0x1f8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_TIM_PWM_Start+0x142>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <HAL_TIM_PWM_Start+0x144>
 8001afa:	2300      	movs	r3, #0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d007      	beq.n	8001b10 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b0e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a22      	ldr	r2, [pc, #136]	; (8001ba0 <HAL_TIM_PWM_Start+0x1e8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d01d      	beq.n	8001b56 <HAL_TIM_PWM_Start+0x19e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b22:	d018      	beq.n	8001b56 <HAL_TIM_PWM_Start+0x19e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a22      	ldr	r2, [pc, #136]	; (8001bb4 <HAL_TIM_PWM_Start+0x1fc>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d013      	beq.n	8001b56 <HAL_TIM_PWM_Start+0x19e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <HAL_TIM_PWM_Start+0x200>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d00e      	beq.n	8001b56 <HAL_TIM_PWM_Start+0x19e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a1f      	ldr	r2, [pc, #124]	; (8001bbc <HAL_TIM_PWM_Start+0x204>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d009      	beq.n	8001b56 <HAL_TIM_PWM_Start+0x19e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <HAL_TIM_PWM_Start+0x1ec>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d004      	beq.n	8001b56 <HAL_TIM_PWM_Start+0x19e>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <HAL_TIM_PWM_Start+0x1f0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d115      	bne.n	8001b82 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_TIM_PWM_Start+0x208>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b06      	cmp	r3, #6
 8001b66:	d015      	beq.n	8001b94 <HAL_TIM_PWM_Start+0x1dc>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6e:	d011      	beq.n	8001b94 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b80:	e008      	b.n	8001b94 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0201 	orr.w	r2, r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e000      	b.n	8001b96 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	40013400 	.word	0x40013400
 8001ba8:	40014000 	.word	0x40014000
 8001bac:	40014400 	.word	0x40014400
 8001bb0:	40014800 	.word	0x40014800
 8001bb4:	40000400 	.word	0x40000400
 8001bb8:	40000800 	.word	0x40000800
 8001bbc:	40000c00 	.word	0x40000c00
 8001bc0:	00010007 	.word	0x00010007

08001bc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e0fd      	b.n	8001dda <HAL_TIM_PWM_ConfigChannel+0x216>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b14      	cmp	r3, #20
 8001bea:	f200 80f0 	bhi.w	8001dce <HAL_TIM_PWM_ConfigChannel+0x20a>
 8001bee:	a201      	add	r2, pc, #4	; (adr r2, 8001bf4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf4:	08001c49 	.word	0x08001c49
 8001bf8:	08001dcf 	.word	0x08001dcf
 8001bfc:	08001dcf 	.word	0x08001dcf
 8001c00:	08001dcf 	.word	0x08001dcf
 8001c04:	08001c89 	.word	0x08001c89
 8001c08:	08001dcf 	.word	0x08001dcf
 8001c0c:	08001dcf 	.word	0x08001dcf
 8001c10:	08001dcf 	.word	0x08001dcf
 8001c14:	08001ccb 	.word	0x08001ccb
 8001c18:	08001dcf 	.word	0x08001dcf
 8001c1c:	08001dcf 	.word	0x08001dcf
 8001c20:	08001dcf 	.word	0x08001dcf
 8001c24:	08001d0b 	.word	0x08001d0b
 8001c28:	08001dcf 	.word	0x08001dcf
 8001c2c:	08001dcf 	.word	0x08001dcf
 8001c30:	08001dcf 	.word	0x08001dcf
 8001c34:	08001d4d 	.word	0x08001d4d
 8001c38:	08001dcf 	.word	0x08001dcf
 8001c3c:	08001dcf 	.word	0x08001dcf
 8001c40:	08001dcf 	.word	0x08001dcf
 8001c44:	08001d8d 	.word	0x08001d8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 fa28 	bl	80020a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	699a      	ldr	r2, [r3, #24]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0208 	orr.w	r2, r2, #8
 8001c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0204 	bic.w	r2, r2, #4
 8001c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6999      	ldr	r1, [r3, #24]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	619a      	str	r2, [r3, #24]
      break;
 8001c86:	e0a3      	b.n	8001dd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 fa98 	bl	80021c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699a      	ldr	r2, [r3, #24]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699a      	ldr	r2, [r3, #24]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6999      	ldr	r1, [r3, #24]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	021a      	lsls	r2, r3, #8
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	619a      	str	r2, [r3, #24]
      break;
 8001cc8:	e082      	b.n	8001dd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68b9      	ldr	r1, [r7, #8]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 fb01 	bl	80022d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	69da      	ldr	r2, [r3, #28]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0208 	orr.w	r2, r2, #8
 8001ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	69da      	ldr	r2, [r3, #28]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0204 	bic.w	r2, r2, #4
 8001cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69d9      	ldr	r1, [r3, #28]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	61da      	str	r2, [r3, #28]
      break;
 8001d08:	e062      	b.n	8001dd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68b9      	ldr	r1, [r7, #8]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fb69 	bl	80023e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69da      	ldr	r2, [r3, #28]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69da      	ldr	r2, [r3, #28]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69d9      	ldr	r1, [r3, #28]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	021a      	lsls	r2, r3, #8
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	61da      	str	r2, [r3, #28]
      break;
 8001d4a:	e041      	b.n	8001dd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 fbb2 	bl	80024bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0208 	orr.w	r2, r2, #8
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0204 	bic.w	r2, r2, #4
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001d8a:	e021      	b.n	8001dd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fbf6 	bl	8002584 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001da6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001db6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	021a      	lsls	r2, r3, #8
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001dcc:	e000      	b.n	8001dd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8001dce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop

08001de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_TIM_ConfigClockSource+0x18>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e0b5      	b.n	8001f68 <HAL_TIM_ConfigClockSource+0x184>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e38:	d03e      	beq.n	8001eb8 <HAL_TIM_ConfigClockSource+0xd4>
 8001e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e3e:	f200 8087 	bhi.w	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e46:	f000 8085 	beq.w	8001f54 <HAL_TIM_ConfigClockSource+0x170>
 8001e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e4e:	d87f      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e50:	2b70      	cmp	r3, #112	; 0x70
 8001e52:	d01a      	beq.n	8001e8a <HAL_TIM_ConfigClockSource+0xa6>
 8001e54:	2b70      	cmp	r3, #112	; 0x70
 8001e56:	d87b      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e58:	2b60      	cmp	r3, #96	; 0x60
 8001e5a:	d050      	beq.n	8001efe <HAL_TIM_ConfigClockSource+0x11a>
 8001e5c:	2b60      	cmp	r3, #96	; 0x60
 8001e5e:	d877      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e60:	2b50      	cmp	r3, #80	; 0x50
 8001e62:	d03c      	beq.n	8001ede <HAL_TIM_ConfigClockSource+0xfa>
 8001e64:	2b50      	cmp	r3, #80	; 0x50
 8001e66:	d873      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e68:	2b40      	cmp	r3, #64	; 0x40
 8001e6a:	d058      	beq.n	8001f1e <HAL_TIM_ConfigClockSource+0x13a>
 8001e6c:	2b40      	cmp	r3, #64	; 0x40
 8001e6e:	d86f      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e70:	2b30      	cmp	r3, #48	; 0x30
 8001e72:	d064      	beq.n	8001f3e <HAL_TIM_ConfigClockSource+0x15a>
 8001e74:	2b30      	cmp	r3, #48	; 0x30
 8001e76:	d86b      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	d060      	beq.n	8001f3e <HAL_TIM_ConfigClockSource+0x15a>
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	d867      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d05c      	beq.n	8001f3e <HAL_TIM_ConfigClockSource+0x15a>
 8001e84:	2b10      	cmp	r3, #16
 8001e86:	d05a      	beq.n	8001f3e <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001e88:	e062      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	6899      	ldr	r1, [r3, #8]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f000 fc53 	bl	8002744 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001eac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	609a      	str	r2, [r3, #8]
      break;
 8001eb6:	e04e      	b.n	8001f56 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6899      	ldr	r1, [r3, #8]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f000 fc3c 	bl	8002744 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eda:	609a      	str	r2, [r3, #8]
      break;
 8001edc:	e03b      	b.n	8001f56 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6859      	ldr	r1, [r3, #4]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	461a      	mov	r2, r3
 8001eec:	f000 fbb0 	bl	8002650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2150      	movs	r1, #80	; 0x50
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fc09 	bl	800270e <TIM_ITRx_SetConfig>
      break;
 8001efc:	e02b      	b.n	8001f56 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f000 fbcf 	bl	80026ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2160      	movs	r1, #96	; 0x60
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 fbf9 	bl	800270e <TIM_ITRx_SetConfig>
      break;
 8001f1c:	e01b      	b.n	8001f56 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6859      	ldr	r1, [r3, #4]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f000 fb90 	bl	8002650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2140      	movs	r1, #64	; 0x40
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fbe9 	bl	800270e <TIM_ITRx_SetConfig>
      break;
 8001f3c:	e00b      	b.n	8001f56 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4619      	mov	r1, r3
 8001f48:	4610      	mov	r0, r2
 8001f4a:	f000 fbe0 	bl	800270e <TIM_ITRx_SetConfig>
        break;
 8001f4e:	e002      	b.n	8001f56 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8001f50:	bf00      	nop
 8001f52:	e000      	b.n	8001f56 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8001f54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a40      	ldr	r2, [pc, #256]	; (8002084 <TIM_Base_SetConfig+0x114>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d013      	beq.n	8001fb0 <TIM_Base_SetConfig+0x40>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f8e:	d00f      	beq.n	8001fb0 <TIM_Base_SetConfig+0x40>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a3d      	ldr	r2, [pc, #244]	; (8002088 <TIM_Base_SetConfig+0x118>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d00b      	beq.n	8001fb0 <TIM_Base_SetConfig+0x40>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a3c      	ldr	r2, [pc, #240]	; (800208c <TIM_Base_SetConfig+0x11c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d007      	beq.n	8001fb0 <TIM_Base_SetConfig+0x40>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a3b      	ldr	r2, [pc, #236]	; (8002090 <TIM_Base_SetConfig+0x120>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d003      	beq.n	8001fb0 <TIM_Base_SetConfig+0x40>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a3a      	ldr	r2, [pc, #232]	; (8002094 <TIM_Base_SetConfig+0x124>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d108      	bne.n	8001fc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a2f      	ldr	r2, [pc, #188]	; (8002084 <TIM_Base_SetConfig+0x114>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01f      	beq.n	800200a <TIM_Base_SetConfig+0x9a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd0:	d01b      	beq.n	800200a <TIM_Base_SetConfig+0x9a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a2c      	ldr	r2, [pc, #176]	; (8002088 <TIM_Base_SetConfig+0x118>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d017      	beq.n	800200a <TIM_Base_SetConfig+0x9a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a2b      	ldr	r2, [pc, #172]	; (800208c <TIM_Base_SetConfig+0x11c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <TIM_Base_SetConfig+0x9a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a2a      	ldr	r2, [pc, #168]	; (8002090 <TIM_Base_SetConfig+0x120>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00f      	beq.n	800200a <TIM_Base_SetConfig+0x9a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a29      	ldr	r2, [pc, #164]	; (8002094 <TIM_Base_SetConfig+0x124>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00b      	beq.n	800200a <TIM_Base_SetConfig+0x9a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a28      	ldr	r2, [pc, #160]	; (8002098 <TIM_Base_SetConfig+0x128>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d007      	beq.n	800200a <TIM_Base_SetConfig+0x9a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a27      	ldr	r2, [pc, #156]	; (800209c <TIM_Base_SetConfig+0x12c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d003      	beq.n	800200a <TIM_Base_SetConfig+0x9a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a26      	ldr	r2, [pc, #152]	; (80020a0 <TIM_Base_SetConfig+0x130>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d108      	bne.n	800201c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	4313      	orrs	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a10      	ldr	r2, [pc, #64]	; (8002084 <TIM_Base_SetConfig+0x114>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00f      	beq.n	8002068 <TIM_Base_SetConfig+0xf8>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a12      	ldr	r2, [pc, #72]	; (8002094 <TIM_Base_SetConfig+0x124>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00b      	beq.n	8002068 <TIM_Base_SetConfig+0xf8>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a11      	ldr	r2, [pc, #68]	; (8002098 <TIM_Base_SetConfig+0x128>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d007      	beq.n	8002068 <TIM_Base_SetConfig+0xf8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a10      	ldr	r2, [pc, #64]	; (800209c <TIM_Base_SetConfig+0x12c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d003      	beq.n	8002068 <TIM_Base_SetConfig+0xf8>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a0f      	ldr	r2, [pc, #60]	; (80020a0 <TIM_Base_SetConfig+0x130>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d103      	bne.n	8002070 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	615a      	str	r2, [r3, #20]
}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40012c00 	.word	0x40012c00
 8002088:	40000400 	.word	0x40000400
 800208c:	40000800 	.word	0x40000800
 8002090:	40000c00 	.word	0x40000c00
 8002094:	40013400 	.word	0x40013400
 8002098:	40014000 	.word	0x40014000
 800209c:	40014400 	.word	0x40014400
 80020a0:	40014800 	.word	0x40014800

080020a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	f023 0201 	bic.w	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 0303 	bic.w	r3, r3, #3
 80020de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f023 0302 	bic.w	r3, r3, #2
 80020f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a2c      	ldr	r2, [pc, #176]	; (80021b0 <TIM_OC1_SetConfig+0x10c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d00f      	beq.n	8002124 <TIM_OC1_SetConfig+0x80>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a2b      	ldr	r2, [pc, #172]	; (80021b4 <TIM_OC1_SetConfig+0x110>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00b      	beq.n	8002124 <TIM_OC1_SetConfig+0x80>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a2a      	ldr	r2, [pc, #168]	; (80021b8 <TIM_OC1_SetConfig+0x114>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d007      	beq.n	8002124 <TIM_OC1_SetConfig+0x80>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a29      	ldr	r2, [pc, #164]	; (80021bc <TIM_OC1_SetConfig+0x118>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d003      	beq.n	8002124 <TIM_OC1_SetConfig+0x80>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a28      	ldr	r2, [pc, #160]	; (80021c0 <TIM_OC1_SetConfig+0x11c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d10c      	bne.n	800213e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f023 0308 	bic.w	r3, r3, #8
 800212a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	4313      	orrs	r3, r2
 8002134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f023 0304 	bic.w	r3, r3, #4
 800213c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a1b      	ldr	r2, [pc, #108]	; (80021b0 <TIM_OC1_SetConfig+0x10c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00f      	beq.n	8002166 <TIM_OC1_SetConfig+0xc2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a1a      	ldr	r2, [pc, #104]	; (80021b4 <TIM_OC1_SetConfig+0x110>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00b      	beq.n	8002166 <TIM_OC1_SetConfig+0xc2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a19      	ldr	r2, [pc, #100]	; (80021b8 <TIM_OC1_SetConfig+0x114>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d007      	beq.n	8002166 <TIM_OC1_SetConfig+0xc2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a18      	ldr	r2, [pc, #96]	; (80021bc <TIM_OC1_SetConfig+0x118>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d003      	beq.n	8002166 <TIM_OC1_SetConfig+0xc2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <TIM_OC1_SetConfig+0x11c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d111      	bne.n	800218a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800216c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	621a      	str	r2, [r3, #32]
}
 80021a4:	bf00      	nop
 80021a6:	371c      	adds	r7, #28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	40012c00 	.word	0x40012c00
 80021b4:	40013400 	.word	0x40013400
 80021b8:	40014000 	.word	0x40014000
 80021bc:	40014400 	.word	0x40014400
 80021c0:	40014800 	.word	0x40014800

080021c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	f023 0210 	bic.w	r2, r3, #16
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f023 0320 	bic.w	r3, r3, #32
 8002212:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4313      	orrs	r3, r2
 800221e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a28      	ldr	r2, [pc, #160]	; (80022c4 <TIM_OC2_SetConfig+0x100>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d003      	beq.n	8002230 <TIM_OC2_SetConfig+0x6c>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a27      	ldr	r2, [pc, #156]	; (80022c8 <TIM_OC2_SetConfig+0x104>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d10d      	bne.n	800224c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4313      	orrs	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800224a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <TIM_OC2_SetConfig+0x100>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00f      	beq.n	8002274 <TIM_OC2_SetConfig+0xb0>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <TIM_OC2_SetConfig+0x104>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d00b      	beq.n	8002274 <TIM_OC2_SetConfig+0xb0>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <TIM_OC2_SetConfig+0x108>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d007      	beq.n	8002274 <TIM_OC2_SetConfig+0xb0>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <TIM_OC2_SetConfig+0x10c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d003      	beq.n	8002274 <TIM_OC2_SetConfig+0xb0>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <TIM_OC2_SetConfig+0x110>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d113      	bne.n	800229c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800227a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	621a      	str	r2, [r3, #32]
}
 80022b6:	bf00      	nop
 80022b8:	371c      	adds	r7, #28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40012c00 	.word	0x40012c00
 80022c8:	40013400 	.word	0x40013400
 80022cc:	40014000 	.word	0x40014000
 80022d0:	40014400 	.word	0x40014400
 80022d4:	40014800 	.word	0x40014800

080022d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	4313      	orrs	r3, r2
 8002330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <TIM_OC3_SetConfig+0xfc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d003      	beq.n	8002342 <TIM_OC3_SetConfig+0x6a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a26      	ldr	r2, [pc, #152]	; (80023d8 <TIM_OC3_SetConfig+0x100>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10d      	bne.n	800235e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002348:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800235c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a1c      	ldr	r2, [pc, #112]	; (80023d4 <TIM_OC3_SetConfig+0xfc>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d00f      	beq.n	8002386 <TIM_OC3_SetConfig+0xae>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <TIM_OC3_SetConfig+0x100>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00b      	beq.n	8002386 <TIM_OC3_SetConfig+0xae>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <TIM_OC3_SetConfig+0x104>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d007      	beq.n	8002386 <TIM_OC3_SetConfig+0xae>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a19      	ldr	r2, [pc, #100]	; (80023e0 <TIM_OC3_SetConfig+0x108>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d003      	beq.n	8002386 <TIM_OC3_SetConfig+0xae>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a18      	ldr	r2, [pc, #96]	; (80023e4 <TIM_OC3_SetConfig+0x10c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d113      	bne.n	80023ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800238c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	621a      	str	r2, [r3, #32]
}
 80023c8:	bf00      	nop
 80023ca:	371c      	adds	r7, #28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	40012c00 	.word	0x40012c00
 80023d8:	40013400 	.word	0x40013400
 80023dc:	40014000 	.word	0x40014000
 80023e0:	40014400 	.word	0x40014400
 80023e4:	40014800 	.word	0x40014800

080023e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800241a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	031b      	lsls	r3, r3, #12
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a18      	ldr	r2, [pc, #96]	; (80024a8 <TIM_OC4_SetConfig+0xc0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00f      	beq.n	800246c <TIM_OC4_SetConfig+0x84>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a17      	ldr	r2, [pc, #92]	; (80024ac <TIM_OC4_SetConfig+0xc4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d00b      	beq.n	800246c <TIM_OC4_SetConfig+0x84>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a16      	ldr	r2, [pc, #88]	; (80024b0 <TIM_OC4_SetConfig+0xc8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d007      	beq.n	800246c <TIM_OC4_SetConfig+0x84>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a15      	ldr	r2, [pc, #84]	; (80024b4 <TIM_OC4_SetConfig+0xcc>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d003      	beq.n	800246c <TIM_OC4_SetConfig+0x84>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <TIM_OC4_SetConfig+0xd0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d109      	bne.n	8002480 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002472:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	019b      	lsls	r3, r3, #6
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	621a      	str	r2, [r3, #32]
}
 800249a:	bf00      	nop
 800249c:	371c      	adds	r7, #28
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40012c00 	.word	0x40012c00
 80024ac:	40013400 	.word	0x40013400
 80024b0:	40014000 	.word	0x40014000
 80024b4:	40014400 	.word	0x40014400
 80024b8:	40014800 	.word	0x40014800

080024bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002500:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	041b      	lsls	r3, r3, #16
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a17      	ldr	r2, [pc, #92]	; (8002570 <TIM_OC5_SetConfig+0xb4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00f      	beq.n	8002536 <TIM_OC5_SetConfig+0x7a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a16      	ldr	r2, [pc, #88]	; (8002574 <TIM_OC5_SetConfig+0xb8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00b      	beq.n	8002536 <TIM_OC5_SetConfig+0x7a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a15      	ldr	r2, [pc, #84]	; (8002578 <TIM_OC5_SetConfig+0xbc>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d007      	beq.n	8002536 <TIM_OC5_SetConfig+0x7a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a14      	ldr	r2, [pc, #80]	; (800257c <TIM_OC5_SetConfig+0xc0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d003      	beq.n	8002536 <TIM_OC5_SetConfig+0x7a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a13      	ldr	r2, [pc, #76]	; (8002580 <TIM_OC5_SetConfig+0xc4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d109      	bne.n	800254a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	4313      	orrs	r3, r2
 8002548:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	621a      	str	r2, [r3, #32]
}
 8002564:	bf00      	nop
 8002566:	371c      	adds	r7, #28
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	40012c00 	.word	0x40012c00
 8002574:	40013400 	.word	0x40013400
 8002578:	40014000 	.word	0x40014000
 800257c:	40014400 	.word	0x40014400
 8002580:	40014800 	.word	0x40014800

08002584 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	051b      	lsls	r3, r3, #20
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a18      	ldr	r2, [pc, #96]	; (800263c <TIM_OC6_SetConfig+0xb8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d00f      	beq.n	8002600 <TIM_OC6_SetConfig+0x7c>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a17      	ldr	r2, [pc, #92]	; (8002640 <TIM_OC6_SetConfig+0xbc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00b      	beq.n	8002600 <TIM_OC6_SetConfig+0x7c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a16      	ldr	r2, [pc, #88]	; (8002644 <TIM_OC6_SetConfig+0xc0>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d007      	beq.n	8002600 <TIM_OC6_SetConfig+0x7c>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a15      	ldr	r2, [pc, #84]	; (8002648 <TIM_OC6_SetConfig+0xc4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d003      	beq.n	8002600 <TIM_OC6_SetConfig+0x7c>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a14      	ldr	r2, [pc, #80]	; (800264c <TIM_OC6_SetConfig+0xc8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d109      	bne.n	8002614 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002606:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	029b      	lsls	r3, r3, #10
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	621a      	str	r2, [r3, #32]
}
 800262e:	bf00      	nop
 8002630:	371c      	adds	r7, #28
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40012c00 	.word	0x40012c00
 8002640:	40013400 	.word	0x40013400
 8002644:	40014000 	.word	0x40014000
 8002648:	40014400 	.word	0x40014400
 800264c:	40014800 	.word	0x40014800

08002650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	f023 0201 	bic.w	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800267a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f023 030a 	bic.w	r3, r3, #10
 800268c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	621a      	str	r2, [r3, #32]
}
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b087      	sub	sp, #28
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	f023 0210 	bic.w	r2, r3, #16
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	031b      	lsls	r3, r3, #12
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	621a      	str	r2, [r3, #32]
}
 8002702:	bf00      	nop
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	f043 0307 	orr.w	r3, r3, #7
 8002730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	609a      	str	r2, [r3, #8]
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002744:	b480      	push	{r7}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800275e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	021a      	lsls	r2, r3, #8
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	431a      	orrs	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4313      	orrs	r3, r2
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	609a      	str	r2, [r3, #8]
}
 8002778:	bf00      	nop
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	2201      	movs	r2, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a1a      	ldr	r2, [r3, #32]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	401a      	ands	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a1a      	ldr	r2, [r3, #32]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	431a      	orrs	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	621a      	str	r2, [r3, #32]
}
 80027c2:	bf00      	nop
 80027c4:	371c      	adds	r7, #28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e068      	b.n	80028ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2e      	ldr	r2, [pc, #184]	; (80028c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d004      	beq.n	800281c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a2d      	ldr	r2, [pc, #180]	; (80028cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d108      	bne.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002822:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002834:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1e      	ldr	r2, [pc, #120]	; (80028c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01d      	beq.n	800288e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285a:	d018      	beq.n	800288e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d013      	beq.n	800288e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1a      	ldr	r2, [pc, #104]	; (80028d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00e      	beq.n	800288e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d009      	beq.n	800288e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a13      	ldr	r2, [pc, #76]	; (80028cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d004      	beq.n	800288e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a14      	ldr	r2, [pc, #80]	; (80028dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d10c      	bne.n	80028a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	4313      	orrs	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40012c00 	.word	0x40012c00
 80028cc:	40013400 	.word	0x40013400
 80028d0:	40000400 	.word	0x40000400
 80028d4:	40000800 	.word	0x40000800
 80028d8:	40000c00 	.word	0x40000c00
 80028dc:	40014000 	.word	0x40014000

080028e0 <__libc_init_array>:
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	4d0d      	ldr	r5, [pc, #52]	; (8002918 <__libc_init_array+0x38>)
 80028e4:	4c0d      	ldr	r4, [pc, #52]	; (800291c <__libc_init_array+0x3c>)
 80028e6:	1b64      	subs	r4, r4, r5
 80028e8:	10a4      	asrs	r4, r4, #2
 80028ea:	2600      	movs	r6, #0
 80028ec:	42a6      	cmp	r6, r4
 80028ee:	d109      	bne.n	8002904 <__libc_init_array+0x24>
 80028f0:	4d0b      	ldr	r5, [pc, #44]	; (8002920 <__libc_init_array+0x40>)
 80028f2:	4c0c      	ldr	r4, [pc, #48]	; (8002924 <__libc_init_array+0x44>)
 80028f4:	f000 f820 	bl	8002938 <_init>
 80028f8:	1b64      	subs	r4, r4, r5
 80028fa:	10a4      	asrs	r4, r4, #2
 80028fc:	2600      	movs	r6, #0
 80028fe:	42a6      	cmp	r6, r4
 8002900:	d105      	bne.n	800290e <__libc_init_array+0x2e>
 8002902:	bd70      	pop	{r4, r5, r6, pc}
 8002904:	f855 3b04 	ldr.w	r3, [r5], #4
 8002908:	4798      	blx	r3
 800290a:	3601      	adds	r6, #1
 800290c:	e7ee      	b.n	80028ec <__libc_init_array+0xc>
 800290e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002912:	4798      	blx	r3
 8002914:	3601      	adds	r6, #1
 8002916:	e7f2      	b.n	80028fe <__libc_init_array+0x1e>
 8002918:	08002990 	.word	0x08002990
 800291c:	08002990 	.word	0x08002990
 8002920:	08002990 	.word	0x08002990
 8002924:	08002994 	.word	0x08002994

08002928 <memset>:
 8002928:	4402      	add	r2, r0
 800292a:	4603      	mov	r3, r0
 800292c:	4293      	cmp	r3, r2
 800292e:	d100      	bne.n	8002932 <memset+0xa>
 8002930:	4770      	bx	lr
 8002932:	f803 1b01 	strb.w	r1, [r3], #1
 8002936:	e7f9      	b.n	800292c <memset+0x4>

08002938 <_init>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	bf00      	nop
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr

08002944 <_fini>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	bf00      	nop
 8002948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294a:	bc08      	pop	{r3}
 800294c:	469e      	mov	lr, r3
 800294e:	4770      	bx	lr
