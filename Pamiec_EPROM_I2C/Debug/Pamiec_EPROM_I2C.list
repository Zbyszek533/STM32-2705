
Pamiec_EPROM_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  0800b0a8  0800b0a8  0001b0a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b708  0800b708  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b708  0800b708  0001b708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b710  0800b710  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b710  0800b710  0001b710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b714  0800b714  0001b714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  200001e0  0800b8f8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  0800b8f8  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187b7  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003129  00000000  00000000  000389c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0003baf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  0003ce70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029078  00000000  00000000  0003e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017134  00000000  00000000  00067110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7049  00000000  00000000  0007e244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017528d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006498  00000000  00000000  001752e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b08c 	.word	0x0800b08c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b08c 	.word	0x0800b08c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <eeprom_wait>:
#define EEPROM_ADDR 0xA0    /*0xA0*/
#define WRITE_TIMEOUT 6

static uint32_t last_write;

void eeprom_wait(void){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

	while(HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 8000f44:	bf00      	nop
 8000f46:	f001 f80d 	bl	8001f64 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <eeprom_wait+0x1c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d9f7      	bls.n	8000f46 <eeprom_wait+0x6>
	{

	}
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200001fc 	.word	0x200001fc

08000f60 <eeprom_read>:


HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af04      	add	r7, sp, #16
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
	eeprom_wait();
 8000f6c:	f7ff ffe8 	bl	8000f40 <eeprom_wait>
	return HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	9102      	str	r1, [sp, #8]
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2301      	movs	r3, #1
 8000f86:	21a0      	movs	r1, #160	; 0xa0
 8000f88:	4803      	ldr	r0, [pc, #12]	; (8000f98 <eeprom_read+0x38>)
 8000f8a:	f001 fd29 	bl	80029e0 <HAL_I2C_Mem_Read>
 8000f8e:	4603      	mov	r3, r0

}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	2000020c 	.word	0x2000020c

08000f9c <eeprom_write>:


HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af04      	add	r7, sp, #16
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef rc;

	eeprom_wait();
 8000fa8:	f7ff ffca 	bl	8000f40 <eeprom_wait>
	rc = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	9102      	str	r1, [sp, #8]
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	21a0      	movs	r1, #160	; 0xa0
 8000fc4:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <eeprom_write+0x48>)
 8000fc6:	f001 fbf7 	bl	80027b8 <HAL_I2C_Mem_Write>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	75fb      	strb	r3, [r7, #23]
	last_write = HAL_GetTick();
 8000fce:	f000 ffc9 	bl	8001f64 <HAL_GetTick>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <eeprom_write+0x4c>)
 8000fd6:	6013      	str	r3, [r2, #0]

	return rc;
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000020c 	.word	0x2000020c
 8000fe8:	200001fc 	.word	0x200001fc

08000fec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <MX_GPIO_Init+0xbc>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2120      	movs	r1, #32
 800104e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001052:	f001 faf1 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_GPIO_Init+0xc0>)
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4619      	mov	r1, r3
 800106a:	4811      	ldr	r0, [pc, #68]	; (80010b0 <MX_GPIO_Init+0xc4>)
 800106c:	f001 f93a 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001070:	2320      	movs	r3, #32
 8001072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4619      	mov	r1, r3
 8001086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108a:	f001 f92b 	bl	80022e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2108      	movs	r1, #8
 8001092:	2028      	movs	r0, #40	; 0x28
 8001094:	f001 f871 	bl	800217a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001098:	2028      	movs	r0, #40	; 0x28
 800109a:	f001 f88a 	bl	80021b2 <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000
 80010ac:	10110000 	.word	0x10110000
 80010b0:	48000800 	.word	0x48000800

080010b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_I2C1_Init+0x74>)
 80010ba:	4a1c      	ldr	r2, [pc, #112]	; (800112c <MX_I2C1_Init+0x78>)
 80010bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_I2C1_Init+0x74>)
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <MX_I2C1_Init+0x7c>)
 80010c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_I2C1_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_I2C1_Init+0x74>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_I2C1_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_I2C1_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_I2C1_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_I2C1_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ee:	480e      	ldr	r0, [pc, #56]	; (8001128 <MX_I2C1_Init+0x74>)
 80010f0:	f001 fad2 	bl	8002698 <HAL_I2C_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010fa:	f000 fa93 	bl	8001624 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010fe:	2100      	movs	r1, #0
 8001100:	4809      	ldr	r0, [pc, #36]	; (8001128 <MX_I2C1_Init+0x74>)
 8001102:	f001 ffa3 	bl	800304c <HAL_I2CEx_ConfigAnalogFilter>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800110c:	f000 fa8a 	bl	8001624 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001110:	2100      	movs	r1, #0
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_I2C1_Init+0x74>)
 8001114:	f001 ffe5 	bl	80030e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800111e:	f000 fa81 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000020c 	.word	0x2000020c
 800112c:	40005400 	.word	0x40005400
 8001130:	10909cec 	.word	0x10909cec

08001134 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b0ac      	sub	sp, #176	; 0xb0
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2288      	movs	r2, #136	; 0x88
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f006 f823 	bl	80071a0 <memset>
  if(i2cHandle->Instance==I2C1)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <HAL_I2C_MspInit+0xb0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d13a      	bne.n	80011da <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001164:	2340      	movs	r3, #64	; 0x40
 8001166:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001168:	2300      	movs	r3, #0
 800116a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4618      	mov	r0, r3
 8001172:	f002 fe53 	bl	8003e1c <HAL_RCCEx_PeriphCLKConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800117c:	f000 fa52 	bl	8001624 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_I2C_MspInit+0xb4>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <HAL_I2C_MspInit+0xb4>)
 8001186:	f043 0302 	orr.w	r3, r3, #2
 800118a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <HAL_I2C_MspInit+0xb4>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001198:	23c0      	movs	r3, #192	; 0xc0
 800119a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119e:	2312      	movs	r3, #18
 80011a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011b0:	2304      	movs	r3, #4
 80011b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011ba:	4619      	mov	r1, r3
 80011bc:	480b      	ldr	r0, [pc, #44]	; (80011ec <HAL_I2C_MspInit+0xb8>)
 80011be:	f001 f891 	bl	80022e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_I2C_MspInit+0xb4>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <HAL_I2C_MspInit+0xb4>)
 80011c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011cc:	6593      	str	r3, [r2, #88]	; 0x58
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_I2C_MspInit+0xb4>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011da:	bf00      	nop
 80011dc:	37b0      	adds	r7, #176	; 0xb0
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40005400 	.word	0x40005400
 80011e8:	40021000 	.word	0x40021000
 80011ec:	48000400 	.word	0x48000400

080011f0 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

	if(ch == '\n')
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b0a      	cmp	r3, #10
 80011fc:	d102      	bne.n	8001204 <__io_putchar+0x14>
	{
		__io_putchar('\r');
 80011fe:	200d      	movs	r0, #13
 8001200:	f7ff fff6 	bl	80011f0 <__io_putchar>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001204:	1d39      	adds	r1, r7, #4
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	2201      	movs	r2, #1
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <__io_putchar+0x2c>)
 800120e:	f005 f88d 	bl	800632c <HAL_UART_Transmit>

	return 1;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200002f8 	.word	0x200002f8

08001220 <calc_pwm>:

float calc_pwm(float val)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	ed87 0a01 	vstr	s0, [r7, #4]

	const float k = 0.13f;
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <calc_pwm+0x80>)
 800122c:	60fb      	str	r3, [r7, #12]
	const float x0 = 70.0f;
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <calc_pwm+0x84>)
 8001230:	60bb      	str	r3, [r7, #8]
	return 10000.0f / (1.0f + exp(-k * (val-x0)));
 8001232:	edd7 7a03 	vldr	s15, [r7, #12]
 8001236:	eeb1 7a67 	vneg.f32	s14, s15
 800123a:	edd7 6a01 	vldr	s13, [r7, #4]
 800123e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001242:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124a:	ee17 0a90 	vmov	r0, s15
 800124e:	f7ff f97b 	bl	8000548 <__aeabi_f2d>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	ec43 2b10 	vmov	d0, r2, r3
 800125a:	f008 fd5d 	bl	8009d18 <exp>
 800125e:	ec51 0b10 	vmov	r0, r1, d0
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <calc_pwm+0x88>)
 8001268:	f7ff f810 	bl	800028c <__adddf3>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	a109      	add	r1, pc, #36	; (adr r1, 8001298 <calc_pwm+0x78>)
 8001272:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001276:	f7ff fae9 	bl	800084c <__aeabi_ddiv>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	f7ff fc91 	bl	8000ba8 <__aeabi_d2f>
 8001286:	4603      	mov	r3, r0
 8001288:	ee07 3a90 	vmov	s15, r3
}
 800128c:	eeb0 0a67 	vmov.f32	s0, s15
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	00000000 	.word	0x00000000
 800129c:	40c38800 	.word	0x40c38800
 80012a0:	3e051eb8 	.word	0x3e051eb8
 80012a4:	428c0000 	.word	0x428c0000
 80012a8:	3ff00000 	.word	0x3ff00000

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b2:	f000 fdee 	bl	8001e92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b6:	f000 f91f 	bl	80014f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ba:	f7ff fe97 	bl	8000fec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012be:	f000 fd2b 	bl	8001d18 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012c2:	f7ff fef7 	bl	80010b4 <MX_I2C1_Init>
  MX_TIM2_Init();
 80012c6:	f000 fb15 	bl	80018f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012ca:	f000 fbbd 	bl	8001a48 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80012ce:	4881      	ldr	r0, [pc, #516]	; (80014d4 <main+0x228>)
 80012d0:	f003 fab8 	bl	8004844 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 80012d4:	2100      	movs	r1, #0
 80012d6:	487f      	ldr	r0, [pc, #508]	; (80014d4 <main+0x228>)
 80012d8:	f003 fcee 	bl	8004cb8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 80012dc:	2104      	movs	r1, #4
 80012de:	487d      	ldr	r0, [pc, #500]	; (80014d4 <main+0x228>)
 80012e0:	f003 fcea 	bl	8004cb8 <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012e4:	2108      	movs	r1, #8
 80012e6:	487b      	ldr	r0, [pc, #492]	; (80014d4 <main+0x228>)
 80012e8:	f003 fb7e 	bl	80049e8 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim3);
 80012ec:	487a      	ldr	r0, [pc, #488]	; (80014d8 <main+0x22c>)
 80012ee:	f003 faa9 	bl	8004844 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012f2:	2100      	movs	r1, #0
 80012f4:	4878      	ldr	r0, [pc, #480]	; (80014d8 <main+0x22c>)
 80012f6:	f003 fb77 	bl	80049e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012fa:	2104      	movs	r1, #4
 80012fc:	4876      	ldr	r0, [pc, #472]	; (80014d8 <main+0x22c>)
 80012fe:	f003 fb73 	bl	80049e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001302:	2108      	movs	r1, #8
 8001304:	4874      	ldr	r0, [pc, #464]	; (80014d8 <main+0x22c>)
 8001306:	f003 fb6f 	bl	80049e8 <HAL_TIM_PWM_Start>

eeprom_read(0x10, &counter, sizeof(counter));
 800130a:	2204      	movs	r2, #4
 800130c:	4973      	ldr	r1, [pc, #460]	; (80014dc <main+0x230>)
 800130e:	2010      	movs	r0, #16
 8001310:	f7ff fe26 	bl	8000f60 <eeprom_read>

counter++;
 8001314:	4b71      	ldr	r3, [pc, #452]	; (80014dc <main+0x230>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	4a70      	ldr	r2, [pc, #448]	; (80014dc <main+0x230>)
 800131c:	6013      	str	r3, [r2, #0]

eeprom_write(0x10, &counter, sizeof(counter));
 800131e:	2204      	movs	r2, #4
 8001320:	496e      	ldr	r1, [pc, #440]	; (80014dc <main+0x230>)
 8001322:	2010      	movs	r0, #16
 8001324:	f7ff fe3a 	bl	8000f9c <eeprom_write>

printf("Liczba zalaczen: %lu\n", counter);
 8001328:	4b6c      	ldr	r3, [pc, #432]	; (80014dc <main+0x230>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	486c      	ldr	r0, [pc, #432]	; (80014e0 <main+0x234>)
 8001330:	f006 fba8 	bl	8007a84 <iprintf>


  while (1)
  {

	  float r = 50 * (1.0f + sin (licznik / 100.0f));
 8001334:	4b6b      	ldr	r3, [pc, #428]	; (80014e4 <main+0x238>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001340:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80014e8 <main+0x23c>
 8001344:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001348:	ee16 0a90 	vmov	r0, s13
 800134c:	f7ff f8fc 	bl	8000548 <__aeabi_f2d>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	ec43 2b10 	vmov	d0, r2, r3
 8001358:	f008 fc8a 	bl	8009c70 <sin>
 800135c:	ec51 0b10 	vmov	r0, r1, d0
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	4b61      	ldr	r3, [pc, #388]	; (80014ec <main+0x240>)
 8001366:	f7fe ff91 	bl	800028c <__adddf3>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	4b5e      	ldr	r3, [pc, #376]	; (80014f0 <main+0x244>)
 8001378:	f7ff f93e 	bl	80005f8 <__aeabi_dmul>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff fc10 	bl	8000ba8 <__aeabi_d2f>
 8001388:	4603      	mov	r3, r0
 800138a:	60fb      	str	r3, [r7, #12]
	  float g = 50 * (1.0f + sin (1.5f * licznik / 100.0f));
 800138c:	4b55      	ldr	r3, [pc, #340]	; (80014e4 <main+0x238>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001398:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800139c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a0:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80014e8 <main+0x23c>
 80013a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013a8:	ee16 0a90 	vmov	r0, s13
 80013ac:	f7ff f8cc 	bl	8000548 <__aeabi_f2d>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	ec43 2b10 	vmov	d0, r2, r3
 80013b8:	f008 fc5a 	bl	8009c70 <sin>
 80013bc:	ec51 0b10 	vmov	r0, r1, d0
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	4b49      	ldr	r3, [pc, #292]	; (80014ec <main+0x240>)
 80013c6:	f7fe ff61 	bl	800028c <__adddf3>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <main+0x244>)
 80013d8:	f7ff f90e 	bl	80005f8 <__aeabi_dmul>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fbe0 	bl	8000ba8 <__aeabi_d2f>
 80013e8:	4603      	mov	r3, r0
 80013ea:	60bb      	str	r3, [r7, #8]
	  float b = 50 * (1.0f + sin (2.0f * licznik / 100.0f));
 80013ec:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <main+0x238>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013fc:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80014e8 <main+0x23c>
 8001400:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001404:	ee16 0a90 	vmov	r0, s13
 8001408:	f7ff f89e 	bl	8000548 <__aeabi_f2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	ec43 2b10 	vmov	d0, r2, r3
 8001414:	f008 fc2c 	bl	8009c70 <sin>
 8001418:	ec51 0b10 	vmov	r0, r1, d0
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b32      	ldr	r3, [pc, #200]	; (80014ec <main+0x240>)
 8001422:	f7fe ff33 	bl	800028c <__adddf3>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <main+0x244>)
 8001434:	f7ff f8e0 	bl	80005f8 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fbb2 	bl	8000ba8 <__aeabi_d2f>
 8001444:	4603      	mov	r3, r0
 8001446:	607b      	str	r3, [r7, #4]

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, calc_pwm(b));
 8001448:	ed97 0a01 	vldr	s0, [r7, #4]
 800144c:	f7ff fee8 	bl	8001220 <calc_pwm>
 8001450:	eef0 7a40 	vmov.f32	s15, s0
 8001454:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <main+0x22c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800145c:	ee17 2a90 	vmov	r2, s15
 8001460:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, calc_pwm(g));
 8001462:	ed97 0a02 	vldr	s0, [r7, #8]
 8001466:	f7ff fedb 	bl	8001220 <calc_pwm>
 800146a:	eef0 7a40 	vmov.f32	s15, s0
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <main+0x22c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001476:	ee17 2a90 	vmov	r2, s15
 800147a:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, calc_pwm(r));
 800147c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001480:	f7ff fece 	bl	8001220 <calc_pwm>
 8001484:	eef0 7a40 	vmov.f32	s15, s0
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <main+0x22c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001490:	ee17 2a90 	vmov	r2, s15
 8001494:	63da      	str	r2, [r3, #60]	; 0x3c

	  HAL_Delay(10);
 8001496:	200a      	movs	r0, #10
 8001498:	f000 fd70 	bl	8001f7c <HAL_Delay>
	  licznik++;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <main+0x238>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <main+0x238>)
 80014a4:	6013      	str	r3, [r2, #0]

	if(counter == 0)
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <main+0x230>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f47f af42 	bne.w	8001334 <main+0x88>
	{
		if(eeprom_write(0x10, &counter, sizeof(counter)) != HAL_OK)
 80014b0:	2204      	movs	r2, #4
 80014b2:	490a      	ldr	r1, [pc, #40]	; (80014dc <main+0x230>)
 80014b4:	2010      	movs	r0, #16
 80014b6:	f7ff fd71 	bl	8000f9c <eeprom_write>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d002      	beq.n	80014c6 <main+0x21a>
		{
			Error_Handler();
 80014c0:	f000 f8b0 	bl	8001624 <Error_Handler>
 80014c4:	e002      	b.n	80014cc <main+0x220>
		}else{
			printf("Reset\n");
 80014c6:	480b      	ldr	r0, [pc, #44]	; (80014f4 <main+0x248>)
 80014c8:	f006 fb62 	bl	8007b90 <puts>
		}

		 counter = 1;
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <main+0x230>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]
  {
 80014d2:	e72f      	b.n	8001334 <main+0x88>
 80014d4:	200002ac 	.word	0x200002ac
 80014d8:	20000260 	.word	0x20000260
 80014dc:	20000258 	.word	0x20000258
 80014e0:	0800b0a8 	.word	0x0800b0a8
 80014e4:	2000025c 	.word	0x2000025c
 80014e8:	42c80000 	.word	0x42c80000
 80014ec:	3ff00000 	.word	0x3ff00000
 80014f0:	40490000 	.word	0x40490000
 80014f4:	0800b0c0 	.word	0x0800b0c0

080014f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b096      	sub	sp, #88	; 0x58
 80014fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	2244      	movs	r2, #68	; 0x44
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f005 fe4a 	bl	80071a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150c:	463b      	mov	r3, r7
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800151a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800151e:	f001 fe3b 	bl	8003198 <HAL_PWREx_ControlVoltageScaling>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001528:	f000 f87c 	bl	8001624 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800152c:	2310      	movs	r3, #16
 800152e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001538:	2360      	movs	r3, #96	; 0x60
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153c:	2302      	movs	r3, #2
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001540:	2301      	movs	r3, #1
 8001542:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001544:	2301      	movs	r3, #1
 8001546:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001548:	2328      	movs	r3, #40	; 0x28
 800154a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800154c:	2307      	movs	r3, #7
 800154e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001550:	2302      	movs	r3, #2
 8001552:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001554:	2302      	movs	r3, #2
 8001556:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4618      	mov	r0, r3
 800155e:	f001 fe71 	bl	8003244 <HAL_RCC_OscConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001568:	f000 f85c 	bl	8001624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156c:	230f      	movs	r3, #15
 800156e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001570:	2303      	movs	r3, #3
 8001572:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001580:	463b      	mov	r3, r7
 8001582:	2104      	movs	r1, #4
 8001584:	4618      	mov	r0, r3
 8001586:	f002 fa43 	bl	8003a10 <HAL_RCC_ClockConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001590:	f000 f848 	bl	8001624 <Error_Handler>
  }
}
 8001594:	bf00      	nop
 8001596:	3758      	adds	r7, #88	; 0x58
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
	  if (GPIO_Pin == B1_Pin)
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ac:	d102      	bne.n	80015b4 <HAL_GPIO_EXTI_Callback+0x18>
		{
		  counter = 0;
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <HAL_GPIO_EXTI_Callback+0x24>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
		}
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	20000258 	.word	0x20000258

080015c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a12      	ldr	r2, [pc, #72]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d11d      	bne.n	8001610 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		  uint32_t start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 80015d4:	2100      	movs	r1, #0
 80015d6:	4810      	ldr	r0, [pc, #64]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015d8:	f003 fff4 	bl	80055c4 <HAL_TIM_ReadCapturedValue>
 80015dc:	60f8      	str	r0, [r7, #12]
		  uint32_t stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 80015de:	2104      	movs	r1, #4
 80015e0:	480d      	ldr	r0, [pc, #52]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015e2:	f003 ffef 	bl	80055c4 <HAL_TIM_ReadCapturedValue>
 80015e6:	60b8      	str	r0, [r7, #8]

		  printf("%.1f cm\n", (stop - start)/58.0f);
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015f6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800161c <HAL_TIM_PeriodElapsedCallback+0x58>
 80015fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015fe:	ee16 0a90 	vmov	r0, s13
 8001602:	f7fe ffa1 	bl	8000548 <__aeabi_f2d>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800160c:	f006 fa3a 	bl	8007a84 <iprintf>
	}
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200002ac 	.word	0x200002ac
 800161c:	42680000 	.word	0x42680000
 8001620:	0800b0c8 	.word	0x0800b0c8

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162c:	e7fe      	b.n	800162c <Error_Handler+0x8>
	...

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_MspInit+0x44>)
 8001638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163a:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <HAL_MspInit+0x44>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6613      	str	r3, [r2, #96]	; 0x60
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_MspInit+0x44>)
 8001644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_MspInit+0x44>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	4a08      	ldr	r2, [pc, #32]	; (8001674 <HAL_MspInit+0x44>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	6593      	str	r3, [r2, #88]	; 0x58
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_MspInit+0x44>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800167c:	e7fe      	b.n	800167c <NMI_Handler+0x4>

0800167e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <MemManage_Handler+0x4>

0800168a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <UsageFault_Handler+0x4>

08001696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c4:	f000 fc3a 	bl	8001f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}

080016cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <TIM2_IRQHandler+0x10>)
 80016d2:	f003 fbed 	bl	8004eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200002ac 	.word	0x200002ac

080016e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <USART2_IRQHandler+0x10>)
 80016e6:	f004 feb5 	bl	8006454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200002f8 	.word	0x200002f8

080016f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016fc:	f000 ffb4 	bl	8002668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
	return 1;
 8001708:	2301      	movs	r3, #1
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <_kill>:

int _kill(int pid, int sig)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800171e:	f005 fd15 	bl	800714c <__errno>
 8001722:	4603      	mov	r3, r0
 8001724:	2216      	movs	r2, #22
 8001726:	601a      	str	r2, [r3, #0]
	return -1;
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <_exit>:

void _exit (int status)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ffe7 	bl	8001714 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001746:	e7fe      	b.n	8001746 <_exit+0x12>

08001748 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e00a      	b.n	8001770 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800175a:	f3af 8000 	nop.w
 800175e:	4601      	mov	r1, r0
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	60ba      	str	r2, [r7, #8]
 8001766:	b2ca      	uxtb	r2, r1
 8001768:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	dbf0      	blt.n	800175a <_read+0x12>
	}

return len;
 8001778:	687b      	ldr	r3, [r7, #4]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e009      	b.n	80017a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	60ba      	str	r2, [r7, #8]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fd27 	bl	80011f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3301      	adds	r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	dbf1      	blt.n	8001794 <_write+0x12>
	}
	return len;
 80017b0:	687b      	ldr	r3, [r7, #4]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_close>:

int _close(int file)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
	return -1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e2:	605a      	str	r2, [r3, #4]
	return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <_isatty>:

int _isatty(int file)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
	return 1;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
	return 0;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800182c:	4a14      	ldr	r2, [pc, #80]	; (8001880 <_sbrk+0x5c>)
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <_sbrk+0x60>)
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <_sbrk+0x64>)
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <_sbrk+0x68>)
 8001844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	429a      	cmp	r2, r3
 8001852:	d207      	bcs.n	8001864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001854:	f005 fc7a 	bl	800714c <__errno>
 8001858:	4603      	mov	r3, r0
 800185a:	220c      	movs	r2, #12
 800185c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
 8001862:	e009      	b.n	8001878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <_sbrk+0x64>)
 8001874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20018000 	.word	0x20018000
 8001884:	00000400 	.word	0x00000400
 8001888:	20000200 	.word	0x20000200
 800188c:	20000390 	.word	0x20000390

08001890 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <SystemInit+0x5c>)
 8001896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189a:	4a14      	ldr	r2, [pc, #80]	; (80018ec <SystemInit+0x5c>)
 800189c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <SystemInit+0x60>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a11      	ldr	r2, [pc, #68]	; (80018f0 <SystemInit+0x60>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <SystemInit+0x60>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <SystemInit+0x60>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <SystemInit+0x60>)
 80018bc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80018c0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80018c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <SystemInit+0x60>)
 80018c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018cc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <SystemInit+0x60>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <SystemInit+0x60>)
 80018d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <SystemInit+0x60>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00
 80018f0:	40021000 	.word	0x40021000

080018f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b092      	sub	sp, #72	; 0x48
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001922:	463b      	mov	r3, r7
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
 8001930:	615a      	str	r2, [r3, #20]
 8001932:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001934:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <MX_TIM2_Init+0x14c>)
 8001936:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800193c:	4b40      	ldr	r3, [pc, #256]	; (8001a40 <MX_TIM2_Init+0x14c>)
 800193e:	224f      	movs	r2, #79	; 0x4f
 8001940:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001942:	4b3f      	ldr	r3, [pc, #252]	; (8001a40 <MX_TIM2_Init+0x14c>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8001948:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <MX_TIM2_Init+0x14c>)
 800194a:	4a3e      	ldr	r2, [pc, #248]	; (8001a44 <MX_TIM2_Init+0x150>)
 800194c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b3c      	ldr	r3, [pc, #240]	; (8001a40 <MX_TIM2_Init+0x14c>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <MX_TIM2_Init+0x14c>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800195a:	4839      	ldr	r0, [pc, #228]	; (8001a40 <MX_TIM2_Init+0x14c>)
 800195c:	f002 ff1a 	bl	8004794 <HAL_TIM_Base_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001966:	f7ff fe5d 	bl	8001624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001970:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001974:	4619      	mov	r1, r3
 8001976:	4832      	ldr	r0, [pc, #200]	; (8001a40 <MX_TIM2_Init+0x14c>)
 8001978:	f003 fd5e 	bl	8005438 <HAL_TIM_ConfigClockSource>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001982:	f7ff fe4f 	bl	8001624 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001986:	482e      	ldr	r0, [pc, #184]	; (8001a40 <MX_TIM2_Init+0x14c>)
 8001988:	f003 f934 	bl	8004bf4 <HAL_TIM_IC_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001992:	f7ff fe47 	bl	8001624 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001996:	482a      	ldr	r0, [pc, #168]	; (8001a40 <MX_TIM2_Init+0x14c>)
 8001998:	f002 ffc4 	bl	8004924 <HAL_TIM_PWM_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80019a2:	f7ff fe3f 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b2:	4619      	mov	r1, r3
 80019b4:	4822      	ldr	r0, [pc, #136]	; (8001a40 <MX_TIM2_Init+0x14c>)
 80019b6:	f004 fbc5 	bl	8006144 <HAL_TIMEx_MasterConfigSynchronization>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80019c0:	f7ff fe30 	bl	8001624 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019c8:	2301      	movs	r3, #1
 80019ca:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	2200      	movs	r2, #0
 80019da:	4619      	mov	r1, r3
 80019dc:	4818      	ldr	r0, [pc, #96]	; (8001a40 <MX_TIM2_Init+0x14c>)
 80019de:	f003 fb86 	bl	80050ee <HAL_TIM_IC_ConfigChannel>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80019e8:	f7ff fe1c 	bl	8001624 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80019ec:	2302      	movs	r3, #2
 80019ee:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80019f0:	2302      	movs	r3, #2
 80019f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	2204      	movs	r2, #4
 80019fa:	4619      	mov	r1, r3
 80019fc:	4810      	ldr	r0, [pc, #64]	; (8001a40 <MX_TIM2_Init+0x14c>)
 80019fe:	f003 fb76 	bl	80050ee <HAL_TIM_IC_ConfigChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8001a08:	f7ff fe0c 	bl	8001624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a0c:	2360      	movs	r3, #96	; 0x60
 8001a0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001a10:	230a      	movs	r3, #10
 8001a12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2208      	movs	r2, #8
 8001a20:	4619      	mov	r1, r3
 8001a22:	4807      	ldr	r0, [pc, #28]	; (8001a40 <MX_TIM2_Init+0x14c>)
 8001a24:	f003 fbf8 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 8001a2e:	f7ff fdf9 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a32:	4803      	ldr	r0, [pc, #12]	; (8001a40 <MX_TIM2_Init+0x14c>)
 8001a34:	f000 f8f8 	bl	8001c28 <HAL_TIM_MspPostInit>

}
 8001a38:	bf00      	nop
 8001a3a:	3748      	adds	r7, #72	; 0x48
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200002ac 	.word	0x200002ac
 8001a44:	000f423f 	.word	0x000f423f

08001a48 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08e      	sub	sp, #56	; 0x38
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5c:	f107 031c 	add.w	r3, r7, #28
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a68:	463b      	mov	r3, r7
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
 8001a74:	611a      	str	r2, [r3, #16]
 8001a76:	615a      	str	r2, [r3, #20]
 8001a78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <MX_TIM3_Init+0x120>)
 8001a7c:	4a3b      	ldr	r2, [pc, #236]	; (8001b6c <MX_TIM3_Init+0x124>)
 8001a7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001a80:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <MX_TIM3_Init+0x120>)
 8001a82:	224f      	movs	r2, #79	; 0x4f
 8001a84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <MX_TIM3_Init+0x120>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001a8c:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <MX_TIM3_Init+0x120>)
 8001a8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a94:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <MX_TIM3_Init+0x120>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9a:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <MX_TIM3_Init+0x120>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aa0:	4831      	ldr	r0, [pc, #196]	; (8001b68 <MX_TIM3_Init+0x120>)
 8001aa2:	f002 fe77 	bl	8004794 <HAL_TIM_Base_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001aac:	f7ff fdba 	bl	8001624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aba:	4619      	mov	r1, r3
 8001abc:	482a      	ldr	r0, [pc, #168]	; (8001b68 <MX_TIM3_Init+0x120>)
 8001abe:	f003 fcbb 	bl	8005438 <HAL_TIM_ConfigClockSource>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001ac8:	f7ff fdac 	bl	8001624 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001acc:	4826      	ldr	r0, [pc, #152]	; (8001b68 <MX_TIM3_Init+0x120>)
 8001ace:	f002 ff29 	bl	8004924 <HAL_TIM_PWM_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001ad8:	f7ff fda4 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	481f      	ldr	r0, [pc, #124]	; (8001b68 <MX_TIM3_Init+0x120>)
 8001aec:	f004 fb2a 	bl	8006144 <HAL_TIMEx_MasterConfigSynchronization>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001af6:	f7ff fd95 	bl	8001624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001afa:	2360      	movs	r3, #96	; 0x60
 8001afc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8001afe:	2332      	movs	r3, #50	; 0x32
 8001b00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001b02:	2302      	movs	r3, #2
 8001b04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4815      	ldr	r0, [pc, #84]	; (8001b68 <MX_TIM3_Init+0x120>)
 8001b12:	f003 fb81 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b1c:	f7ff fd82 	bl	8001624 <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 8001b20:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001b24:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b26:	463b      	mov	r3, r7
 8001b28:	2204      	movs	r2, #4
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480e      	ldr	r0, [pc, #56]	; (8001b68 <MX_TIM3_Init+0x120>)
 8001b2e:	f003 fb73 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8001b38:	f7ff fd74 	bl	8001624 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8001b3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b40:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b42:	463b      	mov	r3, r7
 8001b44:	2208      	movs	r2, #8
 8001b46:	4619      	mov	r1, r3
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <MX_TIM3_Init+0x120>)
 8001b4a:	f003 fb65 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8001b54:	f7ff fd66 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <MX_TIM3_Init+0x120>)
 8001b5a:	f000 f865 	bl	8001c28 <HAL_TIM_MspPostInit>

}
 8001b5e:	bf00      	nop
 8001b60:	3738      	adds	r7, #56	; 0x38
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000260 	.word	0x20000260
 8001b6c:	40000400 	.word	0x40000400

08001b70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b90:	d131      	bne.n	8001bf6 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b92:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <HAL_TIM_Base_MspInit+0xb0>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	4a22      	ldr	r2, [pc, #136]	; (8001c20 <HAL_TIM_Base_MspInit+0xb0>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <HAL_TIM_Base_MspInit+0xb0>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_TIM_Base_MspInit+0xb0>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <HAL_TIM_Base_MspInit+0xb0>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_TIM_Base_MspInit+0xb0>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be0:	f000 fb80 	bl	80022e4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	210a      	movs	r1, #10
 8001be8:	201c      	movs	r0, #28
 8001bea:	f000 fac6 	bl	800217a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bee:	201c      	movs	r0, #28
 8001bf0:	f000 fadf 	bl	80021b2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001bf4:	e010      	b.n	8001c18 <HAL_TIM_Base_MspInit+0xa8>
  else if(tim_baseHandle->Instance==TIM3)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_TIM_Base_MspInit+0xb4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d10b      	bne.n	8001c18 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c00:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <HAL_TIM_Base_MspInit+0xb0>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c04:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <HAL_TIM_Base_MspInit+0xb0>)
 8001c06:	f043 0302 	orr.w	r3, r3, #2
 8001c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <HAL_TIM_Base_MspInit+0xb0>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
}
 8001c18:	bf00      	nop
 8001c1a:	3728      	adds	r7, #40	; 0x28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40000400 	.word	0x40000400

08001c28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c48:	d11d      	bne.n	8001c86 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4a:	4b30      	ldr	r3, [pc, #192]	; (8001d0c <HAL_TIM_MspPostInit+0xe4>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	4a2f      	ldr	r2, [pc, #188]	; (8001d0c <HAL_TIM_MspPostInit+0xe4>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c56:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <HAL_TIM_MspPostInit+0xe4>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c74:	2301      	movs	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4824      	ldr	r0, [pc, #144]	; (8001d10 <HAL_TIM_MspPostInit+0xe8>)
 8001c80:	f000 fb30 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c84:	e03d      	b.n	8001d02 <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM3)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <HAL_TIM_MspPostInit+0xec>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d138      	bne.n	8001d02 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c90:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <HAL_TIM_MspPostInit+0xe4>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <HAL_TIM_MspPostInit+0xe4>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_TIM_MspPostInit+0xe4>)
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca8:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <HAL_TIM_MspPostInit+0xe4>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <HAL_TIM_MspPostInit+0xe4>)
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_TIM_MspPostInit+0xe4>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cc0:	23c0      	movs	r3, #192	; 0xc0
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cde:	f000 fb01 	bl	80022e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4804      	ldr	r0, [pc, #16]	; (8001d10 <HAL_TIM_MspPostInit+0xe8>)
 8001cfe:	f000 faf1 	bl	80022e4 <HAL_GPIO_Init>
}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	; 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	48000400 	.word	0x48000400
 8001d14:	40000400 	.word	0x40000400

08001d18 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d1e:	4a15      	ldr	r2, [pc, #84]	; (8001d74 <MX_USART2_UART_Init+0x5c>)
 8001d20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d3e:	220c      	movs	r2, #12
 8001d40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d5c:	f004 fa98 	bl	8006290 <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d66:	f7ff fc5d 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200002f8 	.word	0x200002f8
 8001d74:	40004400 	.word	0x40004400

08001d78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b0ac      	sub	sp, #176	; 0xb0
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2288      	movs	r2, #136	; 0x88
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f005 fa01 	bl	80071a0 <memset>
  if(uartHandle->Instance==USART2)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <HAL_UART_MspInit+0xc0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d143      	bne.n	8001e30 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001da8:	2302      	movs	r3, #2
 8001daa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4618      	mov	r0, r3
 8001db6:	f002 f831 	bl	8003e1c <HAL_RCCEx_PeriphCLKConfig>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dc0:	f7ff fc30 	bl	8001624 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_UART_MspInit+0xc4>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc8:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <HAL_UART_MspInit+0xc4>)
 8001dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dce:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <HAL_UART_MspInit+0xc4>)
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <HAL_UART_MspInit+0xc4>)
 8001dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de0:	4a16      	ldr	r2, [pc, #88]	; (8001e3c <HAL_UART_MspInit+0xc4>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_UART_MspInit+0xc4>)
 8001dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001df4:	230c      	movs	r3, #12
 8001df6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e0c:	2307      	movs	r3, #7
 8001e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e16:	4619      	mov	r1, r3
 8001e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1c:	f000 fa62 	bl	80022e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2100      	movs	r1, #0
 8001e24:	2026      	movs	r0, #38	; 0x26
 8001e26:	f000 f9a8 	bl	800217a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e2a:	2026      	movs	r0, #38	; 0x26
 8001e2c:	f000 f9c1 	bl	80021b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e30:	bf00      	nop
 8001e32:	37b0      	adds	r7, #176	; 0xb0
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40004400 	.word	0x40004400
 8001e3c:	40021000 	.word	0x40021000

08001e40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e44:	f7ff fd24 	bl	8001890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e4a:	e003      	b.n	8001e54 <LoopCopyDataInit>

08001e4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e52:	3104      	adds	r1, #4

08001e54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e54:	480a      	ldr	r0, [pc, #40]	; (8001e80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e5c:	d3f6      	bcc.n	8001e4c <CopyDataInit>
	ldr	r2, =_sbss
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e60:	e002      	b.n	8001e68 <LoopFillZerobss>

08001e62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e64:	f842 3b04 	str.w	r3, [r2], #4

08001e68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <LoopForever+0x16>)
	cmp	r2, r3
 8001e6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e6c:	d3f9      	bcc.n	8001e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e6e:	f005 f973 	bl	8007158 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e72:	f7ff fa1b 	bl	80012ac <main>

08001e76 <LoopForever>:

LoopForever:
    b LoopForever
 8001e76:	e7fe      	b.n	8001e76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e78:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001e7c:	0800b718 	.word	0x0800b718
	ldr	r0, =_sdata
 8001e80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e84:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001e88:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001e8c:	20000390 	.word	0x20000390

08001e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC1_2_IRQHandler>

08001e92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f000 f961 	bl	8002164 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ea2:	200f      	movs	r0, #15
 8001ea4:	f000 f80e 	bl	8001ec4 <HAL_InitTick>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	71fb      	strb	r3, [r7, #7]
 8001eb2:	e001      	b.n	8001eb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eb4:	f7ff fbbc 	bl	8001630 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ed0:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_InitTick+0x6c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d023      	beq.n	8001f20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ed8:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <HAL_InitTick+0x70>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_InitTick+0x6c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f96d 	bl	80021ce <HAL_SYSTICK_Config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b0f      	cmp	r3, #15
 8001efe:	d809      	bhi.n	8001f14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f00:	2200      	movs	r2, #0
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	f000 f937 	bl	800217a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <HAL_InitTick+0x74>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e007      	b.n	8001f24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	e004      	b.n	8001f24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
 8001f1e:	e001      	b.n	8001f24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000008 	.word	0x20000008
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000004 	.word	0x20000004

08001f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_IncTick+0x20>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_IncTick+0x24>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <HAL_IncTick+0x24>)
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000008 	.word	0x20000008
 8001f60:	2000037c 	.word	0x2000037c

08001f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return uwTick;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_GetTick+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	2000037c 	.word	0x2000037c

08001f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff ffee 	bl	8001f64 <HAL_GetTick>
 8001f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f94:	d005      	beq.n	8001fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_Delay+0x44>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa2:	bf00      	nop
 8001fa4:	f7ff ffde 	bl	8001f64 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f7      	bhi.n	8001fa4 <HAL_Delay+0x28>
  {
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000008 	.word	0x20000008

08001fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff6:	4a04      	ldr	r2, [pc, #16]	; (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	60d3      	str	r3, [r2, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <__NVIC_GetPriorityGrouping+0x18>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0307 	and.w	r3, r3, #7
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db0b      	blt.n	8002052 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	4907      	ldr	r1, [pc, #28]	; (8002060 <__NVIC_EnableIRQ+0x38>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2001      	movs	r0, #1
 800204a:	fa00 f202 	lsl.w	r2, r0, r2
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000e100 	.word	0xe000e100

08002064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	6039      	str	r1, [r7, #0]
 800206e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002074:	2b00      	cmp	r3, #0
 8002076:	db0a      	blt.n	800208e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	b2da      	uxtb	r2, r3
 800207c:	490c      	ldr	r1, [pc, #48]	; (80020b0 <__NVIC_SetPriority+0x4c>)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	0112      	lsls	r2, r2, #4
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	440b      	add	r3, r1
 8002088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800208c:	e00a      	b.n	80020a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4908      	ldr	r1, [pc, #32]	; (80020b4 <__NVIC_SetPriority+0x50>)
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	3b04      	subs	r3, #4
 800209c:	0112      	lsls	r2, r2, #4
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	440b      	add	r3, r1
 80020a2:	761a      	strb	r2, [r3, #24]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000e100 	.word	0xe000e100
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f1c3 0307 	rsb	r3, r3, #7
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	bf28      	it	cs
 80020d6:	2304      	movcs	r3, #4
 80020d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3304      	adds	r3, #4
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d902      	bls.n	80020e8 <NVIC_EncodePriority+0x30>
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3b03      	subs	r3, #3
 80020e6:	e000      	b.n	80020ea <NVIC_EncodePriority+0x32>
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	f04f 32ff 	mov.w	r2, #4294967295
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	401a      	ands	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	43d9      	mvns	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	4313      	orrs	r3, r2
         );
}
 8002112:	4618      	mov	r0, r3
 8002114:	3724      	adds	r7, #36	; 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002130:	d301      	bcc.n	8002136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002132:	2301      	movs	r3, #1
 8002134:	e00f      	b.n	8002156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <SysTick_Config+0x40>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213e:	210f      	movs	r1, #15
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	f7ff ff8e 	bl	8002064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <SysTick_Config+0x40>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214e:	4b04      	ldr	r3, [pc, #16]	; (8002160 <SysTick_Config+0x40>)
 8002150:	2207      	movs	r2, #7
 8002152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	e000e010 	.word	0xe000e010

08002164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ff29 	bl	8001fc4 <__NVIC_SetPriorityGrouping>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800218c:	f7ff ff3e 	bl	800200c <__NVIC_GetPriorityGrouping>
 8002190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	6978      	ldr	r0, [r7, #20]
 8002198:	f7ff ff8e 	bl	80020b8 <NVIC_EncodePriority>
 800219c:	4602      	mov	r2, r0
 800219e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff5d 	bl	8002064 <__NVIC_SetPriority>
}
 80021aa:	bf00      	nop
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff31 	bl	8002028 <__NVIC_EnableIRQ>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff ffa2 	bl	8002120 <SysTick_Config>
 80021dc:	4603      	mov	r3, r0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d008      	beq.n	8002210 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2204      	movs	r2, #4
 8002202:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e022      	b.n	8002256 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 020e 	bic.w	r2, r2, #14
 800221e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	f003 021c 	and.w	r2, r3, #28
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	2101      	movs	r1, #1
 800223e:	fa01 f202 	lsl.w	r2, r1, r2
 8002242:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d005      	beq.n	8002286 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2204      	movs	r2, #4
 800227e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
 8002284:	e029      	b.n	80022da <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 020e 	bic.w	r2, r2, #14
 8002294:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0201 	bic.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f003 021c 	and.w	r2, r3, #28
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	2101      	movs	r1, #1
 80022b4:	fa01 f202 	lsl.w	r2, r1, r2
 80022b8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	4798      	blx	r3
    }
  }
  return status;
 80022da:	7bfb      	ldrb	r3, [r7, #15]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f2:	e17f      	b.n	80025f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2101      	movs	r1, #1
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8171 	beq.w	80025ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d00b      	beq.n	800232c <HAL_GPIO_Init+0x48>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d007      	beq.n	800232c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002320:	2b11      	cmp	r3, #17
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b12      	cmp	r3, #18
 800232a:	d130      	bne.n	800238e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002362:	2201      	movs	r2, #1
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	f003 0201 	and.w	r2, r3, #1
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b03      	cmp	r3, #3
 8002398:	d118      	bne.n	80023cc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80023a0:	2201      	movs	r2, #1
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	08db      	lsrs	r3, r3, #3
 80023b6:	f003 0201 	and.w	r2, r3, #1
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x128>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b12      	cmp	r3, #18
 800240a:	d123      	bne.n	8002454 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	08da      	lsrs	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3208      	adds	r2, #8
 8002414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	220f      	movs	r2, #15
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	08da      	lsrs	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3208      	adds	r2, #8
 800244e:	6939      	ldr	r1, [r7, #16]
 8002450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0203 	and.w	r2, r3, #3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80ac 	beq.w	80025ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	4b5f      	ldr	r3, [pc, #380]	; (8002614 <HAL_GPIO_Init+0x330>)
 8002498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249a:	4a5e      	ldr	r2, [pc, #376]	; (8002614 <HAL_GPIO_Init+0x330>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6613      	str	r3, [r2, #96]	; 0x60
 80024a2:	4b5c      	ldr	r3, [pc, #368]	; (8002614 <HAL_GPIO_Init+0x330>)
 80024a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024ae:	4a5a      	ldr	r2, [pc, #360]	; (8002618 <HAL_GPIO_Init+0x334>)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	3302      	adds	r3, #2
 80024b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	220f      	movs	r2, #15
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024d8:	d025      	beq.n	8002526 <HAL_GPIO_Init+0x242>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a4f      	ldr	r2, [pc, #316]	; (800261c <HAL_GPIO_Init+0x338>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01f      	beq.n	8002522 <HAL_GPIO_Init+0x23e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4e      	ldr	r2, [pc, #312]	; (8002620 <HAL_GPIO_Init+0x33c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d019      	beq.n	800251e <HAL_GPIO_Init+0x23a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4d      	ldr	r2, [pc, #308]	; (8002624 <HAL_GPIO_Init+0x340>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <HAL_GPIO_Init+0x236>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4c      	ldr	r2, [pc, #304]	; (8002628 <HAL_GPIO_Init+0x344>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00d      	beq.n	8002516 <HAL_GPIO_Init+0x232>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4b      	ldr	r2, [pc, #300]	; (800262c <HAL_GPIO_Init+0x348>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d007      	beq.n	8002512 <HAL_GPIO_Init+0x22e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4a      	ldr	r2, [pc, #296]	; (8002630 <HAL_GPIO_Init+0x34c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_GPIO_Init+0x22a>
 800250a:	2306      	movs	r3, #6
 800250c:	e00c      	b.n	8002528 <HAL_GPIO_Init+0x244>
 800250e:	2307      	movs	r3, #7
 8002510:	e00a      	b.n	8002528 <HAL_GPIO_Init+0x244>
 8002512:	2305      	movs	r3, #5
 8002514:	e008      	b.n	8002528 <HAL_GPIO_Init+0x244>
 8002516:	2304      	movs	r3, #4
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x244>
 800251a:	2303      	movs	r3, #3
 800251c:	e004      	b.n	8002528 <HAL_GPIO_Init+0x244>
 800251e:	2302      	movs	r3, #2
 8002520:	e002      	b.n	8002528 <HAL_GPIO_Init+0x244>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_GPIO_Init+0x244>
 8002526:	2300      	movs	r3, #0
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	f002 0203 	and.w	r2, r2, #3
 800252e:	0092      	lsls	r2, r2, #2
 8002530:	4093      	lsls	r3, r2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002538:	4937      	ldr	r1, [pc, #220]	; (8002618 <HAL_GPIO_Init+0x334>)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002546:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_GPIO_Init+0x350>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800256a:	4a32      	ldr	r2, [pc, #200]	; (8002634 <HAL_GPIO_Init+0x350>)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002570:	4b30      	ldr	r3, [pc, #192]	; (8002634 <HAL_GPIO_Init+0x350>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	43db      	mvns	r3, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002594:	4a27      	ldr	r2, [pc, #156]	; (8002634 <HAL_GPIO_Init+0x350>)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800259a:	4b26      	ldr	r3, [pc, #152]	; (8002634 <HAL_GPIO_Init+0x350>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025be:	4a1d      	ldr	r2, [pc, #116]	; (8002634 <HAL_GPIO_Init+0x350>)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_GPIO_Init+0x350>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025e8:	4a12      	ldr	r2, [pc, #72]	; (8002634 <HAL_GPIO_Init+0x350>)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3301      	adds	r3, #1
 80025f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	fa22 f303 	lsr.w	r3, r2, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f47f ae78 	bne.w	80022f4 <HAL_GPIO_Init+0x10>
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
 8002618:	40010000 	.word	0x40010000
 800261c:	48000400 	.word	0x48000400
 8002620:	48000800 	.word	0x48000800
 8002624:	48000c00 	.word	0x48000c00
 8002628:	48001000 	.word	0x48001000
 800262c:	48001400 	.word	0x48001400
 8002630:	48001800 	.word	0x48001800
 8002634:	40010400 	.word	0x40010400

08002638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]
 8002644:	4613      	mov	r3, r2
 8002646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002648:	787b      	ldrb	r3, [r7, #1]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002654:	e002      	b.n	800265c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800267e:	4a05      	ldr	r2, [pc, #20]	; (8002694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe ff88 	bl	800159c <HAL_GPIO_EXTI_Callback>
  }
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40010400 	.word	0x40010400

08002698 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e081      	b.n	80027ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fe fd38 	bl	8001134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2224      	movs	r2, #36	; 0x24
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0201 	bic.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	e006      	b.n	8002720 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800271e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d104      	bne.n	8002732 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002730:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002744:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002754:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	ea42 0103 	orr.w	r1, r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	021a      	lsls	r2, r3, #8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69d9      	ldr	r1, [r3, #28]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1a      	ldr	r2, [r3, #32]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	4608      	mov	r0, r1
 80027c2:	4611      	mov	r1, r2
 80027c4:	461a      	mov	r2, r3
 80027c6:	4603      	mov	r3, r0
 80027c8:	817b      	strh	r3, [r7, #10]
 80027ca:	460b      	mov	r3, r1
 80027cc:	813b      	strh	r3, [r7, #8]
 80027ce:	4613      	mov	r3, r2
 80027d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b20      	cmp	r3, #32
 80027dc:	f040 80f9 	bne.w	80029d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_I2C_Mem_Write+0x34>
 80027e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0ed      	b.n	80029d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_I2C_Mem_Write+0x4e>
 8002802:	2302      	movs	r3, #2
 8002804:	e0e6      	b.n	80029d4 <HAL_I2C_Mem_Write+0x21c>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800280e:	f7ff fba9 	bl	8001f64 <HAL_GetTick>
 8002812:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2319      	movs	r3, #25
 800281a:	2201      	movs	r2, #1
 800281c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fac3 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0d1      	b.n	80029d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2221      	movs	r2, #33	; 0x21
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2240      	movs	r2, #64	; 0x40
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a3a      	ldr	r2, [r7, #32]
 800284a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002850:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002858:	88f8      	ldrh	r0, [r7, #6]
 800285a:	893a      	ldrh	r2, [r7, #8]
 800285c:	8979      	ldrh	r1, [r7, #10]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	4603      	mov	r3, r0
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f9d3 	bl	8002c14 <I2C_RequestMemoryWrite>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0a9      	b.n	80029d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	2bff      	cmp	r3, #255	; 0xff
 8002888:	d90e      	bls.n	80028a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	22ff      	movs	r2, #255	; 0xff
 800288e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002894:	b2da      	uxtb	r2, r3
 8002896:	8979      	ldrh	r1, [r7, #10]
 8002898:	2300      	movs	r3, #0
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fba5 	bl	8002ff0 <I2C_TransferConfig>
 80028a6:	e00f      	b.n	80028c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	8979      	ldrh	r1, [r7, #10]
 80028ba:	2300      	movs	r3, #0
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fb94 	bl	8002ff0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 faad 	bl	8002e2c <I2C_WaitOnTXISFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e07b      	b.n	80029d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d034      	beq.n	8002980 <HAL_I2C_Mem_Write+0x1c8>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291a:	2b00      	cmp	r3, #0
 800291c:	d130      	bne.n	8002980 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	2200      	movs	r2, #0
 8002926:	2180      	movs	r1, #128	; 0x80
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 fa3f 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e04d      	b.n	80029d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	2bff      	cmp	r3, #255	; 0xff
 8002940:	d90e      	bls.n	8002960 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	22ff      	movs	r2, #255	; 0xff
 8002946:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294c:	b2da      	uxtb	r2, r3
 800294e:	8979      	ldrh	r1, [r7, #10]
 8002950:	2300      	movs	r3, #0
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fb49 	bl	8002ff0 <I2C_TransferConfig>
 800295e:	e00f      	b.n	8002980 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296e:	b2da      	uxtb	r2, r3
 8002970:	8979      	ldrh	r1, [r7, #10]
 8002972:	2300      	movs	r3, #0
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fb38 	bl	8002ff0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d19e      	bne.n	80028c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fa8c 	bl	8002eac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e01a      	b.n	80029d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2220      	movs	r2, #32
 80029a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <HAL_I2C_Mem_Write+0x224>)
 80029b2:	400b      	ands	r3, r1
 80029b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	e000      	b.n	80029d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80029d2:	2302      	movs	r3, #2
  }
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	fe00e800 	.word	0xfe00e800

080029e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	4608      	mov	r0, r1
 80029ea:	4611      	mov	r1, r2
 80029ec:	461a      	mov	r2, r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	817b      	strh	r3, [r7, #10]
 80029f2:	460b      	mov	r3, r1
 80029f4:	813b      	strh	r3, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	f040 80fd 	bne.w	8002c02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_I2C_Mem_Read+0x34>
 8002a0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d105      	bne.n	8002a20 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0f1      	b.n	8002c04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_I2C_Mem_Read+0x4e>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e0ea      	b.n	8002c04 <HAL_I2C_Mem_Read+0x224>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a36:	f7ff fa95 	bl	8001f64 <HAL_GetTick>
 8002a3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2319      	movs	r3, #25
 8002a42:	2201      	movs	r2, #1
 8002a44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f9af 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0d5      	b.n	8002c04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2222      	movs	r2, #34	; 0x22
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2240      	movs	r2, #64	; 0x40
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a3a      	ldr	r2, [r7, #32]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a80:	88f8      	ldrh	r0, [r7, #6]
 8002a82:	893a      	ldrh	r2, [r7, #8]
 8002a84:	8979      	ldrh	r1, [r7, #10]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	9301      	str	r3, [sp, #4]
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	4603      	mov	r3, r0
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f913 	bl	8002cbc <I2C_RequestMemoryRead>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0ad      	b.n	8002c04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2bff      	cmp	r3, #255	; 0xff
 8002ab0:	d90e      	bls.n	8002ad0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	22ff      	movs	r2, #255	; 0xff
 8002ab6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	8979      	ldrh	r1, [r7, #10]
 8002ac0:	4b52      	ldr	r3, [pc, #328]	; (8002c0c <HAL_I2C_Mem_Read+0x22c>)
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fa91 	bl	8002ff0 <I2C_TransferConfig>
 8002ace:	e00f      	b.n	8002af0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	8979      	ldrh	r1, [r7, #10]
 8002ae2:	4b4a      	ldr	r3, [pc, #296]	; (8002c0c <HAL_I2C_Mem_Read+0x22c>)
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 fa80 	bl	8002ff0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af6:	2200      	movs	r2, #0
 8002af8:	2104      	movs	r1, #4
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f956 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e07c      	b.n	8002c04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d034      	beq.n	8002bb0 <HAL_I2C_Mem_Read+0x1d0>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d130      	bne.n	8002bb0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	2200      	movs	r2, #0
 8002b56:	2180      	movs	r1, #128	; 0x80
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f927 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e04d      	b.n	8002c04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2bff      	cmp	r3, #255	; 0xff
 8002b70:	d90e      	bls.n	8002b90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	22ff      	movs	r2, #255	; 0xff
 8002b76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	8979      	ldrh	r1, [r7, #10]
 8002b80:	2300      	movs	r3, #0
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 fa31 	bl	8002ff0 <I2C_TransferConfig>
 8002b8e:	e00f      	b.n	8002bb0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	8979      	ldrh	r1, [r7, #10]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 fa20 	bl	8002ff0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d19a      	bne.n	8002af0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f974 	bl	8002eac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e01a      	b.n	8002c04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_I2C_Mem_Read+0x230>)
 8002be2:	400b      	ands	r3, r1
 8002be4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	80002400 	.word	0x80002400
 8002c10:	fe00e800 	.word	0xfe00e800

08002c14 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	4608      	mov	r0, r1
 8002c1e:	4611      	mov	r1, r2
 8002c20:	461a      	mov	r2, r3
 8002c22:	4603      	mov	r3, r0
 8002c24:	817b      	strh	r3, [r7, #10]
 8002c26:	460b      	mov	r3, r1
 8002c28:	813b      	strh	r3, [r7, #8]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	8979      	ldrh	r1, [r7, #10]
 8002c34:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <I2C_RequestMemoryWrite+0xa4>)
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f9d7 	bl	8002ff0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	69b9      	ldr	r1, [r7, #24]
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f8f0 	bl	8002e2c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e02c      	b.n	8002cb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d105      	bne.n	8002c68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c5c:	893b      	ldrh	r3, [r7, #8]
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	629a      	str	r2, [r3, #40]	; 0x28
 8002c66:	e015      	b.n	8002c94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c68:	893b      	ldrh	r3, [r7, #8]
 8002c6a:	0a1b      	lsrs	r3, r3, #8
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	69b9      	ldr	r1, [r7, #24]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f8d6 	bl	8002e2c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e012      	b.n	8002cb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c8a:	893b      	ldrh	r3, [r7, #8]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2180      	movs	r1, #128	; 0x80
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f884 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	80002000 	.word	0x80002000

08002cbc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	4608      	mov	r0, r1
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	817b      	strh	r3, [r7, #10]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	813b      	strh	r3, [r7, #8]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	8979      	ldrh	r1, [r7, #10]
 8002cdc:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <I2C_RequestMemoryRead+0xa4>)
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f984 	bl	8002ff0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	69b9      	ldr	r1, [r7, #24]
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f89d 	bl	8002e2c <I2C_WaitOnTXISFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e02c      	b.n	8002d56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d105      	bne.n	8002d0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d02:	893b      	ldrh	r3, [r7, #8]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d0c:	e015      	b.n	8002d3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d0e:	893b      	ldrh	r3, [r7, #8]
 8002d10:	0a1b      	lsrs	r3, r3, #8
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	69b9      	ldr	r1, [r7, #24]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f883 	bl	8002e2c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e012      	b.n	8002d56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d30:	893b      	ldrh	r3, [r7, #8]
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2200      	movs	r2, #0
 8002d42:	2140      	movs	r1, #64	; 0x40
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f831 	bl	8002dac <I2C_WaitOnFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	80002000 	.word	0x80002000

08002d64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d103      	bne.n	8002d82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d007      	beq.n	8002da0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	619a      	str	r2, [r3, #24]
  }
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dbc:	e022      	b.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d01e      	beq.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc6:	f7ff f8cd 	bl	8001f64 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d302      	bcc.n	8002ddc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d113      	bne.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	f043 0220 	orr.w	r2, r3, #32
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e00f      	b.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d0cd      	beq.n	8002dbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e38:	e02c      	b.n	8002e94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f870 	bl	8002f24 <I2C_IsAcknowledgeFailed>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e02a      	b.n	8002ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e54:	d01e      	beq.n	8002e94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e56:	f7ff f885 	bl	8001f64 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d302      	bcc.n	8002e6c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d113      	bne.n	8002e94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	f043 0220 	orr.w	r2, r3, #32
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e007      	b.n	8002ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d1cb      	bne.n	8002e3a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eb8:	e028      	b.n	8002f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f830 	bl	8002f24 <I2C_IsAcknowledgeFailed>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e026      	b.n	8002f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ece:	f7ff f849 	bl	8001f64 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d302      	bcc.n	8002ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d113      	bne.n	8002f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	f043 0220 	orr.w	r2, r3, #32
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e007      	b.n	8002f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	d1cf      	bne.n	8002eba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d151      	bne.n	8002fe2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f3e:	e022      	b.n	8002f86 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f46:	d01e      	beq.n	8002f86 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f48:	f7ff f80c 	bl	8001f64 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d302      	bcc.n	8002f5e <I2C_IsAcknowledgeFailed+0x3a>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d113      	bne.n	8002f86 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f043 0220 	orr.w	r2, r3, #32
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e02e      	b.n	8002fe4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d1d5      	bne.n	8002f40 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2210      	movs	r2, #16
 8002f9a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f7ff fedd 	bl	8002d64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <I2C_IsAcknowledgeFailed+0xc8>)
 8002fb6:	400b      	ands	r3, r1
 8002fb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f043 0204 	orr.w	r2, r3, #4
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	fe00e800 	.word	0xfe00e800

08002ff0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	607b      	str	r3, [r7, #4]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	817b      	strh	r3, [r7, #10]
 8002ffe:	4613      	mov	r3, r2
 8003000:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	0d5b      	lsrs	r3, r3, #21
 800300c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003010:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <I2C_TransferConfig+0x58>)
 8003012:	430b      	orrs	r3, r1
 8003014:	43db      	mvns	r3, r3
 8003016:	ea02 0103 	and.w	r1, r2, r3
 800301a:	897b      	ldrh	r3, [r7, #10]
 800301c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003020:	7a7b      	ldrb	r3, [r7, #9]
 8003022:	041b      	lsls	r3, r3, #16
 8003024:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	431a      	orrs	r2, r3
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	431a      	orrs	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800303a:	bf00      	nop
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	03ff63ff 	.word	0x03ff63ff

0800304c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b20      	cmp	r3, #32
 8003060:	d138      	bne.n	80030d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800306c:	2302      	movs	r3, #2
 800306e:	e032      	b.n	80030d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2224      	movs	r2, #36	; 0x24
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800309e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6819      	ldr	r1, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d139      	bne.n	800316c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003102:	2302      	movs	r3, #2
 8003104:	e033      	b.n	800316e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2224      	movs	r2, #36	; 0x24
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0201 	bic.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003134:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	e000      	b.n	800316e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800316c:	2302      	movs	r3, #2
  }
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <HAL_PWREx_GetVoltageRange+0x18>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40007000 	.word	0x40007000

08003198 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a6:	d130      	bne.n	800320a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80031a8:	4b23      	ldr	r3, [pc, #140]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b4:	d038      	beq.n	8003228 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031b6:	4b20      	ldr	r3, [pc, #128]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031be:	4a1e      	ldr	r2, [pc, #120]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031c6:	4b1d      	ldr	r3, [pc, #116]	; (800323c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2232      	movs	r2, #50	; 0x32
 80031cc:	fb02 f303 	mul.w	r3, r2, r3
 80031d0:	4a1b      	ldr	r2, [pc, #108]	; (8003240 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	0c9b      	lsrs	r3, r3, #18
 80031d8:	3301      	adds	r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031dc:	e002      	b.n	80031e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031e4:	4b14      	ldr	r3, [pc, #80]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f0:	d102      	bne.n	80031f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f2      	bne.n	80031de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031f8:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003204:	d110      	bne.n	8003228 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e00f      	b.n	800322a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003216:	d007      	beq.n	8003228 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003218:	4b07      	ldr	r3, [pc, #28]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003220:	4a05      	ldr	r2, [pc, #20]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003226:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40007000 	.word	0x40007000
 800323c:	20000000 	.word	0x20000000
 8003240:	431bde83 	.word	0x431bde83

08003244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e3d4      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003256:	4ba1      	ldr	r3, [pc, #644]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003260:	4b9e      	ldr	r3, [pc, #632]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80e4 	beq.w	8003440 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d007      	beq.n	800328e <HAL_RCC_OscConfig+0x4a>
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2b0c      	cmp	r3, #12
 8003282:	f040 808b 	bne.w	800339c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b01      	cmp	r3, #1
 800328a:	f040 8087 	bne.w	800339c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800328e:	4b93      	ldr	r3, [pc, #588]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_RCC_OscConfig+0x62>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e3ac      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1a      	ldr	r2, [r3, #32]
 80032aa:	4b8c      	ldr	r3, [pc, #560]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d004      	beq.n	80032c0 <HAL_RCC_OscConfig+0x7c>
 80032b6:	4b89      	ldr	r3, [pc, #548]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032be:	e005      	b.n	80032cc <HAL_RCC_OscConfig+0x88>
 80032c0:	4b86      	ldr	r3, [pc, #536]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80032c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d223      	bcs.n	8003318 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fd41 	bl	8003d5c <RCC_SetFlashLatencyFromMSIRange>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e38d      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032e4:	4b7d      	ldr	r3, [pc, #500]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a7c      	ldr	r2, [pc, #496]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80032ea:	f043 0308 	orr.w	r3, r3, #8
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	4b7a      	ldr	r3, [pc, #488]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	4977      	ldr	r1, [pc, #476]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003302:	4b76      	ldr	r3, [pc, #472]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	4972      	ldr	r1, [pc, #456]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 8003312:	4313      	orrs	r3, r2
 8003314:	604b      	str	r3, [r1, #4]
 8003316:	e025      	b.n	8003364 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003318:	4b70      	ldr	r3, [pc, #448]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6f      	ldr	r2, [pc, #444]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 800331e:	f043 0308 	orr.w	r3, r3, #8
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b6d      	ldr	r3, [pc, #436]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	496a      	ldr	r1, [pc, #424]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003336:	4b69      	ldr	r3, [pc, #420]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	4965      	ldr	r1, [pc, #404]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 8003346:	4313      	orrs	r3, r2
 8003348:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d109      	bne.n	8003364 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fd01 	bl	8003d5c <RCC_SetFlashLatencyFromMSIRange>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e34d      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003364:	f000 fc36 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003368:	4602      	mov	r2, r0
 800336a:	4b5c      	ldr	r3, [pc, #368]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	495a      	ldr	r1, [pc, #360]	; (80034e0 <HAL_RCC_OscConfig+0x29c>)
 8003376:	5ccb      	ldrb	r3, [r1, r3]
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
 8003380:	4a58      	ldr	r2, [pc, #352]	; (80034e4 <HAL_RCC_OscConfig+0x2a0>)
 8003382:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003384:	4b58      	ldr	r3, [pc, #352]	; (80034e8 <HAL_RCC_OscConfig+0x2a4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fe fd9b 	bl	8001ec4 <HAL_InitTick>
 800338e:	4603      	mov	r3, r0
 8003390:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d052      	beq.n	800343e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	e331      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d032      	beq.n	800340a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033a4:	4b4d      	ldr	r3, [pc, #308]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a4c      	ldr	r2, [pc, #304]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033b0:	f7fe fdd8 	bl	8001f64 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033b8:	f7fe fdd4 	bl	8001f64 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e31a      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ca:	4b44      	ldr	r3, [pc, #272]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033d6:	4b41      	ldr	r3, [pc, #260]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a40      	ldr	r2, [pc, #256]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80033dc:	f043 0308 	orr.w	r3, r3, #8
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	4b3e      	ldr	r3, [pc, #248]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	493b      	ldr	r1, [pc, #236]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033f4:	4b39      	ldr	r3, [pc, #228]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	4936      	ldr	r1, [pc, #216]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]
 8003408:	e01a      	b.n	8003440 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800340a:	4b34      	ldr	r3, [pc, #208]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a33      	ldr	r2, [pc, #204]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003416:	f7fe fda5 	bl	8001f64 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800341e:	f7fe fda1 	bl	8001f64 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e2e7      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003430:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f0      	bne.n	800341e <HAL_RCC_OscConfig+0x1da>
 800343c:	e000      	b.n	8003440 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800343e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d074      	beq.n	8003536 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b08      	cmp	r3, #8
 8003450:	d005      	beq.n	800345e <HAL_RCC_OscConfig+0x21a>
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b0c      	cmp	r3, #12
 8003456:	d10e      	bne.n	8003476 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2b03      	cmp	r3, #3
 800345c:	d10b      	bne.n	8003476 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345e:	4b1f      	ldr	r3, [pc, #124]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d064      	beq.n	8003534 <HAL_RCC_OscConfig+0x2f0>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d160      	bne.n	8003534 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e2c4      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800347e:	d106      	bne.n	800348e <HAL_RCC_OscConfig+0x24a>
 8003480:	4b16      	ldr	r3, [pc, #88]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a15      	ldr	r2, [pc, #84]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 8003486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	e01d      	b.n	80034ca <HAL_RCC_OscConfig+0x286>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003496:	d10c      	bne.n	80034b2 <HAL_RCC_OscConfig+0x26e>
 8003498:	4b10      	ldr	r3, [pc, #64]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a0f      	ldr	r2, [pc, #60]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 800349e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a0c      	ldr	r2, [pc, #48]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80034aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	e00b      	b.n	80034ca <HAL_RCC_OscConfig+0x286>
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a09      	ldr	r2, [pc, #36]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80034b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	4b07      	ldr	r3, [pc, #28]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a06      	ldr	r2, [pc, #24]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80034c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d01c      	beq.n	800350c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d2:	f7fe fd47 	bl	8001f64 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034d8:	e011      	b.n	80034fe <HAL_RCC_OscConfig+0x2ba>
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	0800b0d4 	.word	0x0800b0d4
 80034e4:	20000000 	.word	0x20000000
 80034e8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ec:	f7fe fd3a 	bl	8001f64 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e280      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034fe:	4baf      	ldr	r3, [pc, #700]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x2a8>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fe fd2a 	bl	8001f64 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003514:	f7fe fd26 	bl	8001f64 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e26c      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003526:	4ba5      	ldr	r3, [pc, #660]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x2d0>
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d060      	beq.n	8003604 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d005      	beq.n	8003554 <HAL_RCC_OscConfig+0x310>
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b0c      	cmp	r3, #12
 800354c:	d119      	bne.n	8003582 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d116      	bne.n	8003582 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003554:	4b99      	ldr	r3, [pc, #612]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_OscConfig+0x328>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e249      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356c:	4b93      	ldr	r3, [pc, #588]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	061b      	lsls	r3, r3, #24
 800357a:	4990      	ldr	r1, [pc, #576]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 800357c:	4313      	orrs	r3, r2
 800357e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003580:	e040      	b.n	8003604 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d023      	beq.n	80035d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800358a:	4b8c      	ldr	r3, [pc, #560]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a8b      	ldr	r2, [pc, #556]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 8003590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003596:	f7fe fce5 	bl	8001f64 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359e:	f7fe fce1 	bl	8001f64 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e227      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035b0:	4b82      	ldr	r3, [pc, #520]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035bc:	4b7f      	ldr	r3, [pc, #508]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	061b      	lsls	r3, r3, #24
 80035ca:	497c      	ldr	r1, [pc, #496]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]
 80035d0:	e018      	b.n	8003604 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d2:	4b7a      	ldr	r3, [pc, #488]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a79      	ldr	r2, [pc, #484]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 80035d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7fe fcc1 	bl	8001f64 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e6:	f7fe fcbd 	bl	8001f64 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e203      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035f8:	4b70      	ldr	r3, [pc, #448]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f0      	bne.n	80035e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d03c      	beq.n	800368a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01c      	beq.n	8003652 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003618:	4b68      	ldr	r3, [pc, #416]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 800361a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361e:	4a67      	ldr	r2, [pc, #412]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fe fc9c 	bl	8001f64 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003630:	f7fe fc98 	bl	8001f64 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e1de      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003642:	4b5e      	ldr	r3, [pc, #376]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 8003644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0ef      	beq.n	8003630 <HAL_RCC_OscConfig+0x3ec>
 8003650:	e01b      	b.n	800368a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003652:	4b5a      	ldr	r3, [pc, #360]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 8003654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003658:	4a58      	ldr	r2, [pc, #352]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003662:	f7fe fc7f 	bl	8001f64 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800366a:	f7fe fc7b 	bl	8001f64 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1c1      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800367c:	4b4f      	ldr	r3, [pc, #316]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 800367e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ef      	bne.n	800366a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80a6 	beq.w	80037e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003698:	2300      	movs	r3, #0
 800369a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800369c:	4b47      	ldr	r3, [pc, #284]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10d      	bne.n	80036c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a8:	4b44      	ldr	r3, [pc, #272]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	4a43      	ldr	r2, [pc, #268]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 80036ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b2:	6593      	str	r3, [r2, #88]	; 0x58
 80036b4:	4b41      	ldr	r3, [pc, #260]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 80036b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c0:	2301      	movs	r3, #1
 80036c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c4:	4b3e      	ldr	r3, [pc, #248]	; (80037c0 <HAL_RCC_OscConfig+0x57c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d118      	bne.n	8003702 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036d0:	4b3b      	ldr	r3, [pc, #236]	; (80037c0 <HAL_RCC_OscConfig+0x57c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a3a      	ldr	r2, [pc, #232]	; (80037c0 <HAL_RCC_OscConfig+0x57c>)
 80036d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036dc:	f7fe fc42 	bl	8001f64 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e4:	f7fe fc3e 	bl	8001f64 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e184      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f6:	4b32      	ldr	r3, [pc, #200]	; (80037c0 <HAL_RCC_OscConfig+0x57c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d108      	bne.n	800371c <HAL_RCC_OscConfig+0x4d8>
 800370a:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003710:	4a2a      	ldr	r2, [pc, #168]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800371a:	e024      	b.n	8003766 <HAL_RCC_OscConfig+0x522>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b05      	cmp	r3, #5
 8003722:	d110      	bne.n	8003746 <HAL_RCC_OscConfig+0x502>
 8003724:	4b25      	ldr	r3, [pc, #148]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	4a24      	ldr	r2, [pc, #144]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 800372c:	f043 0304 	orr.w	r3, r3, #4
 8003730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003734:	4b21      	ldr	r3, [pc, #132]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	4a20      	ldr	r2, [pc, #128]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003744:	e00f      	b.n	8003766 <HAL_RCC_OscConfig+0x522>
 8003746:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	4a1b      	ldr	r2, [pc, #108]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 800374e:	f023 0301 	bic.w	r3, r3, #1
 8003752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003756:	4b19      	ldr	r3, [pc, #100]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	4a17      	ldr	r2, [pc, #92]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 800375e:	f023 0304 	bic.w	r3, r3, #4
 8003762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d016      	beq.n	800379c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376e:	f7fe fbf9 	bl	8001f64 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003774:	e00a      	b.n	800378c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003776:	f7fe fbf5 	bl	8001f64 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	f241 3288 	movw	r2, #5000	; 0x1388
 8003784:	4293      	cmp	r3, r2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e139      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCC_OscConfig+0x578>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0ed      	beq.n	8003776 <HAL_RCC_OscConfig+0x532>
 800379a:	e01a      	b.n	80037d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379c:	f7fe fbe2 	bl	8001f64 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037a2:	e00f      	b.n	80037c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a4:	f7fe fbde 	bl	8001f64 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d906      	bls.n	80037c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e122      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037c4:	4b90      	ldr	r3, [pc, #576]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1e8      	bne.n	80037a4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d2:	7ffb      	ldrb	r3, [r7, #31]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d105      	bne.n	80037e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d8:	4b8b      	ldr	r3, [pc, #556]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	4a8a      	ldr	r2, [pc, #552]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 80037de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8108 	beq.w	80039fe <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	f040 80d0 	bne.w	8003998 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037f8:	4b83      	ldr	r3, [pc, #524]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f003 0203 	and.w	r2, r3, #3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	429a      	cmp	r2, r3
 800380a:	d130      	bne.n	800386e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	3b01      	subs	r3, #1
 8003818:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d127      	bne.n	800386e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003828:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800382a:	429a      	cmp	r2, r3
 800382c:	d11f      	bne.n	800386e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003838:	2a07      	cmp	r2, #7
 800383a:	bf14      	ite	ne
 800383c:	2201      	movne	r2, #1
 800383e:	2200      	moveq	r2, #0
 8003840:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003842:	4293      	cmp	r3, r2
 8003844:	d113      	bne.n	800386e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	085b      	lsrs	r3, r3, #1
 8003852:	3b01      	subs	r3, #1
 8003854:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003856:	429a      	cmp	r2, r3
 8003858:	d109      	bne.n	800386e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	3b01      	subs	r3, #1
 8003868:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800386a:	429a      	cmp	r2, r3
 800386c:	d06e      	beq.n	800394c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	2b0c      	cmp	r3, #12
 8003872:	d069      	beq.n	8003948 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003874:	4b64      	ldr	r3, [pc, #400]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d105      	bne.n	800388c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003880:	4b61      	ldr	r3, [pc, #388]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0b7      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003890:	4b5d      	ldr	r3, [pc, #372]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a5c      	ldr	r2, [pc, #368]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 8003896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800389a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800389c:	f7fe fb62 	bl	8001f64 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fe fb5e 	bl	8001f64 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e0a4      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b6:	4b54      	ldr	r3, [pc, #336]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038c2:	4b51      	ldr	r3, [pc, #324]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	4b51      	ldr	r3, [pc, #324]	; (8003a0c <HAL_RCC_OscConfig+0x7c8>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038d2:	3a01      	subs	r2, #1
 80038d4:	0112      	lsls	r2, r2, #4
 80038d6:	4311      	orrs	r1, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038dc:	0212      	lsls	r2, r2, #8
 80038de:	4311      	orrs	r1, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038e4:	0852      	lsrs	r2, r2, #1
 80038e6:	3a01      	subs	r2, #1
 80038e8:	0552      	lsls	r2, r2, #21
 80038ea:	4311      	orrs	r1, r2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038f0:	0852      	lsrs	r2, r2, #1
 80038f2:	3a01      	subs	r2, #1
 80038f4:	0652      	lsls	r2, r2, #25
 80038f6:	4311      	orrs	r1, r2
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038fc:	0912      	lsrs	r2, r2, #4
 80038fe:	0452      	lsls	r2, r2, #17
 8003900:	430a      	orrs	r2, r1
 8003902:	4941      	ldr	r1, [pc, #260]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 8003904:	4313      	orrs	r3, r2
 8003906:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003908:	4b3f      	ldr	r3, [pc, #252]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a3e      	ldr	r2, [pc, #248]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 800390e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003912:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003914:	4b3c      	ldr	r3, [pc, #240]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	4a3b      	ldr	r2, [pc, #236]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 800391a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800391e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003920:	f7fe fb20 	bl	8001f64 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003928:	f7fe fb1c 	bl	8001f64 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e062      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393a:	4b33      	ldr	r3, [pc, #204]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003946:	e05a      	b.n	80039fe <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e059      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800394c:	4b2e      	ldr	r3, [pc, #184]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d152      	bne.n	80039fe <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003958:	4b2b      	ldr	r3, [pc, #172]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a2a      	ldr	r2, [pc, #168]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 800395e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003962:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003964:	4b28      	ldr	r3, [pc, #160]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4a27      	ldr	r2, [pc, #156]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 800396a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800396e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003970:	f7fe faf8 	bl	8001f64 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003978:	f7fe faf4 	bl	8001f64 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e03a      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800398a:	4b1f      	ldr	r3, [pc, #124]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x734>
 8003996:	e032      	b.n	80039fe <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b0c      	cmp	r3, #12
 800399c:	d02d      	beq.n	80039fa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399e:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a19      	ldr	r2, [pc, #100]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 80039a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80039aa:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d105      	bne.n	80039c2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80039b6:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 80039bc:	f023 0303 	bic.w	r3, r3, #3
 80039c0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039c2:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	4a10      	ldr	r2, [pc, #64]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 80039c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80039cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d2:	f7fe fac7 	bl	8001f64 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039da:	f7fe fac3 	bl	8001f64 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e009      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_RCC_OscConfig+0x7c4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f0      	bne.n	80039da <HAL_RCC_OscConfig+0x796>
 80039f8:	e001      	b.n	80039fe <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3720      	adds	r7, #32
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	f99d808c 	.word	0xf99d808c

08003a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0c8      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a24:	4b66      	ldr	r3, [pc, #408]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d910      	bls.n	8003a54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a32:	4b63      	ldr	r3, [pc, #396]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 0207 	bic.w	r2, r3, #7
 8003a3a:	4961      	ldr	r1, [pc, #388]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a42:	4b5f      	ldr	r3, [pc, #380]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0b0      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d04c      	beq.n	8003afa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d107      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a68:	4b56      	ldr	r3, [pc, #344]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d121      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e09e      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d107      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a80:	4b50      	ldr	r3, [pc, #320]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d115      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e092      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d107      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a98:	4b4a      	ldr	r3, [pc, #296]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e086      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aa8:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e07e      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ab8:	4b42      	ldr	r3, [pc, #264]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f023 0203 	bic.w	r2, r3, #3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	493f      	ldr	r1, [pc, #252]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aca:	f7fe fa4b 	bl	8001f64 <HAL_GetTick>
 8003ace:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad2:	f7fe fa47 	bl	8001f64 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e066      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae8:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 020c 	and.w	r2, r3, #12
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d1eb      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b06:	4b2f      	ldr	r3, [pc, #188]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	492c      	ldr	r1, [pc, #176]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b18:	4b29      	ldr	r3, [pc, #164]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d210      	bcs.n	8003b48 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b26      	ldr	r3, [pc, #152]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 0207 	bic.w	r2, r3, #7
 8003b2e:	4924      	ldr	r1, [pc, #144]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e036      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b54:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4918      	ldr	r1, [pc, #96]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b72:	4b14      	ldr	r3, [pc, #80]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4910      	ldr	r1, [pc, #64]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b86:	f000 f825 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	490c      	ldr	r1, [pc, #48]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	5ccb      	ldrb	r3, [r1, r3]
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fe f98a 	bl	8001ec4 <HAL_InitTick>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bb4:	7afb      	ldrb	r3, [r7, #11]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40022000 	.word	0x40022000
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	0800b0d4 	.word	0x0800b0d4
 8003bcc:	20000000 	.word	0x20000000
 8003bd0:	20000004 	.word	0x20000004

08003bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b089      	sub	sp, #36	; 0x24
 8003bd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	2300      	movs	r3, #0
 8003be0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003be2:	4b3e      	ldr	r3, [pc, #248]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bec:	4b3b      	ldr	r3, [pc, #236]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x34>
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	2b0c      	cmp	r3, #12
 8003c00:	d121      	bne.n	8003c46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d11e      	bne.n	8003c46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c08:	4b34      	ldr	r3, [pc, #208]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d107      	bne.n	8003c24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c14:	4b31      	ldr	r3, [pc, #196]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	e005      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c24:	4b2d      	ldr	r3, [pc, #180]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	091b      	lsrs	r3, r3, #4
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c30:	4a2b      	ldr	r2, [pc, #172]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10d      	bne.n	8003c5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c44:	e00a      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d102      	bne.n	8003c52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c4c:	4b25      	ldr	r3, [pc, #148]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	e004      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d101      	bne.n	8003c5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c58:	4b23      	ldr	r3, [pc, #140]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	2b0c      	cmp	r3, #12
 8003c60:	d134      	bne.n	8003ccc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c62:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d003      	beq.n	8003c7a <HAL_RCC_GetSysClockFreq+0xa6>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d003      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0xac>
 8003c78:	e005      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c7c:	617b      	str	r3, [r7, #20]
      break;
 8003c7e:	e005      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c80:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c82:	617b      	str	r3, [r7, #20]
      break;
 8003c84:	e002      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	617b      	str	r3, [r7, #20]
      break;
 8003c8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c8c:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	3301      	adds	r3, #1
 8003c98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c9a:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	fb02 f203 	mul.w	r2, r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	0e5b      	lsrs	r3, r3, #25
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ccc:	69bb      	ldr	r3, [r7, #24]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3724      	adds	r7, #36	; 0x24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	0800b0ec 	.word	0x0800b0ec
 8003ce4:	00f42400 	.word	0x00f42400
 8003ce8:	007a1200 	.word	0x007a1200

08003cec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000000 	.word	0x20000000

08003d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d08:	f7ff fff0 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	4904      	ldr	r1, [pc, #16]	; (8003d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d1a:	5ccb      	ldrb	r3, [r1, r3]
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	0800b0e4 	.word	0x0800b0e4

08003d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d34:	f7ff ffda 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	0adb      	lsrs	r3, r3, #11
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	4904      	ldr	r1, [pc, #16]	; (8003d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d46:	5ccb      	ldrb	r3, [r1, r3]
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40021000 	.word	0x40021000
 8003d58:	0800b0e4 	.word	0x0800b0e4

08003d5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d64:	2300      	movs	r3, #0
 8003d66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d68:	4b2a      	ldr	r3, [pc, #168]	; (8003e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d74:	f7ff fa02 	bl	800317c <HAL_PWREx_GetVoltageRange>
 8003d78:	6178      	str	r0, [r7, #20]
 8003d7a:	e014      	b.n	8003da6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d80:	4a24      	ldr	r2, [pc, #144]	; (8003e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d86:	6593      	str	r3, [r2, #88]	; 0x58
 8003d88:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d94:	f7ff f9f2 	bl	800317c <HAL_PWREx_GetVoltageRange>
 8003d98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d9a:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9e:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dac:	d10b      	bne.n	8003dc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b80      	cmp	r3, #128	; 0x80
 8003db2:	d919      	bls.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2ba0      	cmp	r3, #160	; 0xa0
 8003db8:	d902      	bls.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dba:	2302      	movs	r3, #2
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	e013      	b.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	e010      	b.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b80      	cmp	r3, #128	; 0x80
 8003dca:	d902      	bls.n	8003dd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003dcc:	2303      	movs	r3, #3
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	e00a      	b.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b80      	cmp	r3, #128	; 0x80
 8003dd6:	d102      	bne.n	8003dde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dd8:	2302      	movs	r3, #2
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	e004      	b.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b70      	cmp	r3, #112	; 0x70
 8003de2:	d101      	bne.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003de4:	2301      	movs	r3, #1
 8003de6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f023 0207 	bic.w	r2, r3, #7
 8003df0:	4909      	ldr	r1, [pc, #36]	; (8003e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003df8:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d001      	beq.n	8003e0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40022000 	.word	0x40022000

08003e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e24:	2300      	movs	r3, #0
 8003e26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e28:	2300      	movs	r3, #0
 8003e2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d041      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e40:	d02a      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e46:	d824      	bhi.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e4c:	d008      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e52:	d81e      	bhi.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e5c:	d010      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e5e:	e018      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e60:	4b86      	ldr	r3, [pc, #536]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4a85      	ldr	r2, [pc, #532]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e6c:	e015      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	3304      	adds	r3, #4
 8003e72:	2100      	movs	r1, #0
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fabb 	bl	80043f0 <RCCEx_PLLSAI1_Config>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e7e:	e00c      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3320      	adds	r3, #32
 8003e84:	2100      	movs	r1, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fba6 	bl	80045d8 <RCCEx_PLLSAI2_Config>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e90:	e003      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	74fb      	strb	r3, [r7, #19]
      break;
 8003e96:	e000      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e9a:	7cfb      	ldrb	r3, [r7, #19]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ea0:	4b76      	ldr	r3, [pc, #472]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eae:	4973      	ldr	r1, [pc, #460]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003eb6:	e001      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d041      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ecc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ed0:	d02a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ed2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ed6:	d824      	bhi.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ed8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003edc:	d008      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ede:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ee2:	d81e      	bhi.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eec:	d010      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003eee:	e018      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ef0:	4b62      	ldr	r3, [pc, #392]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a61      	ldr	r2, [pc, #388]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003efc:	e015      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3304      	adds	r3, #4
 8003f02:	2100      	movs	r1, #0
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fa73 	bl	80043f0 <RCCEx_PLLSAI1_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f0e:	e00c      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3320      	adds	r3, #32
 8003f14:	2100      	movs	r1, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fb5e 	bl	80045d8 <RCCEx_PLLSAI2_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f20:	e003      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	74fb      	strb	r3, [r7, #19]
      break;
 8003f26:	e000      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f2a:	7cfb      	ldrb	r3, [r7, #19]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10b      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f30:	4b52      	ldr	r3, [pc, #328]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f3e:	494f      	ldr	r1, [pc, #316]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f46:	e001      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f48:	7cfb      	ldrb	r3, [r7, #19]
 8003f4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80a0 	beq.w	800409a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f5e:	4b47      	ldr	r3, [pc, #284]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00d      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f74:	4b41      	ldr	r3, [pc, #260]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f78:	4a40      	ldr	r2, [pc, #256]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f80:	4b3e      	ldr	r3, [pc, #248]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f90:	4b3b      	ldr	r3, [pc, #236]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a3a      	ldr	r2, [pc, #232]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f9c:	f7fd ffe2 	bl	8001f64 <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fa2:	e009      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa4:	f7fd ffde 	bl	8001f64 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d902      	bls.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	74fb      	strb	r3, [r7, #19]
        break;
 8003fb6:	e005      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fb8:	4b31      	ldr	r3, [pc, #196]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0ef      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d15c      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fca:	4b2c      	ldr	r3, [pc, #176]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01f      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d019      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fe8:	4b24      	ldr	r3, [pc, #144]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ff4:	4b21      	ldr	r3, [pc, #132]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffa:	4a20      	ldr	r2, [pc, #128]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004004:	4b1d      	ldr	r3, [pc, #116]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	4a1c      	ldr	r2, [pc, #112]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004014:	4a19      	ldr	r2, [pc, #100]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d016      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004026:	f7fd ff9d 	bl	8001f64 <HAL_GetTick>
 800402a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800402c:	e00b      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800402e:	f7fd ff99 	bl	8001f64 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f241 3288 	movw	r2, #5000	; 0x1388
 800403c:	4293      	cmp	r3, r2
 800403e:	d902      	bls.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	74fb      	strb	r3, [r7, #19]
            break;
 8004044:	e006      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004046:	4b0d      	ldr	r3, [pc, #52]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ec      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004054:	7cfb      	ldrb	r3, [r7, #19]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10c      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800405a:	4b08      	ldr	r3, [pc, #32]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800406a:	4904      	ldr	r1, [pc, #16]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004072:	e009      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	74bb      	strb	r3, [r7, #18]
 8004078:	e006      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800407a:	bf00      	nop
 800407c:	40021000 	.word	0x40021000
 8004080:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004084:	7cfb      	ldrb	r3, [r7, #19]
 8004086:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004088:	7c7b      	ldrb	r3, [r7, #17]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d105      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408e:	4b9e      	ldr	r3, [pc, #632]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004092:	4a9d      	ldr	r2, [pc, #628]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004098:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040a6:	4b98      	ldr	r3, [pc, #608]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ac:	f023 0203 	bic.w	r2, r3, #3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	4994      	ldr	r1, [pc, #592]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040c8:	4b8f      	ldr	r3, [pc, #572]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ce:	f023 020c 	bic.w	r2, r3, #12
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	498c      	ldr	r1, [pc, #560]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ea:	4b87      	ldr	r3, [pc, #540]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	4983      	ldr	r1, [pc, #524]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800410c:	4b7e      	ldr	r3, [pc, #504]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	497b      	ldr	r1, [pc, #492]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0310 	and.w	r3, r3, #16
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800412e:	4b76      	ldr	r3, [pc, #472]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413c:	4972      	ldr	r1, [pc, #456]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004150:	4b6d      	ldr	r3, [pc, #436]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415e:	496a      	ldr	r1, [pc, #424]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004172:	4b65      	ldr	r3, [pc, #404]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004180:	4961      	ldr	r1, [pc, #388]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004194:	4b5c      	ldr	r3, [pc, #368]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a2:	4959      	ldr	r1, [pc, #356]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041b6:	4b54      	ldr	r3, [pc, #336]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c4:	4950      	ldr	r1, [pc, #320]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041d8:	4b4b      	ldr	r3, [pc, #300]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	4948      	ldr	r1, [pc, #288]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041fa:	4b43      	ldr	r3, [pc, #268]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004208:	493f      	ldr	r1, [pc, #252]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d028      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800421c:	4b3a      	ldr	r3, [pc, #232]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800422a:	4937      	ldr	r1, [pc, #220]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800423a:	d106      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800423c:	4b32      	ldr	r3, [pc, #200]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4a31      	ldr	r2, [pc, #196]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004246:	60d3      	str	r3, [r2, #12]
 8004248:	e011      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800424e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004252:	d10c      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3304      	adds	r3, #4
 8004258:	2101      	movs	r1, #1
 800425a:	4618      	mov	r0, r3
 800425c:	f000 f8c8 	bl	80043f0 <RCCEx_PLLSAI1_Config>
 8004260:	4603      	mov	r3, r0
 8004262:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004264:	7cfb      	ldrb	r3, [r7, #19]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800426a:	7cfb      	ldrb	r3, [r7, #19]
 800426c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d028      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800427a:	4b23      	ldr	r3, [pc, #140]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004280:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	491f      	ldr	r1, [pc, #124]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004298:	d106      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	4a1a      	ldr	r2, [pc, #104]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042a4:	60d3      	str	r3, [r2, #12]
 80042a6:	e011      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042b0:	d10c      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3304      	adds	r3, #4
 80042b6:	2101      	movs	r1, #1
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 f899 	bl	80043f0 <RCCEx_PLLSAI1_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042c2:	7cfb      	ldrb	r3, [r7, #19]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80042c8:	7cfb      	ldrb	r3, [r7, #19]
 80042ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d02b      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e6:	4908      	ldr	r1, [pc, #32]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042f6:	d109      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a02      	ldr	r2, [pc, #8]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004302:	60d3      	str	r3, [r2, #12]
 8004304:	e014      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004310:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004314:	d10c      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3304      	adds	r3, #4
 800431a:	2101      	movs	r1, #1
 800431c:	4618      	mov	r0, r3
 800431e:	f000 f867 	bl	80043f0 <RCCEx_PLLSAI1_Config>
 8004322:	4603      	mov	r3, r0
 8004324:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004326:	7cfb      	ldrb	r3, [r7, #19]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800432c:	7cfb      	ldrb	r3, [r7, #19]
 800432e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d02f      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800433c:	4b2b      	ldr	r3, [pc, #172]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004342:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800434a:	4928      	ldr	r1, [pc, #160]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800435a:	d10d      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3304      	adds	r3, #4
 8004360:	2102      	movs	r1, #2
 8004362:	4618      	mov	r0, r3
 8004364:	f000 f844 	bl	80043f0 <RCCEx_PLLSAI1_Config>
 8004368:	4603      	mov	r3, r0
 800436a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800436c:	7cfb      	ldrb	r3, [r7, #19]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d014      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004372:	7cfb      	ldrb	r3, [r7, #19]
 8004374:	74bb      	strb	r3, [r7, #18]
 8004376:	e011      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800437c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004380:	d10c      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3320      	adds	r3, #32
 8004386:	2102      	movs	r1, #2
 8004388:	4618      	mov	r0, r3
 800438a:	f000 f925 	bl	80045d8 <RCCEx_PLLSAI2_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004392:	7cfb      	ldrb	r3, [r7, #19]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004398:	7cfb      	ldrb	r3, [r7, #19]
 800439a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043a8:	4b10      	ldr	r3, [pc, #64]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043b6:	490d      	ldr	r1, [pc, #52]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043ca:	4b08      	ldr	r3, [pc, #32]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043da:	4904      	ldr	r1, [pc, #16]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40021000 	.word	0x40021000

080043f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043fe:	4b75      	ldr	r3, [pc, #468]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d018      	beq.n	800443c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800440a:	4b72      	ldr	r3, [pc, #456]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0203 	and.w	r2, r3, #3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d10d      	bne.n	8004436 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
       ||
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004422:	4b6c      	ldr	r3, [pc, #432]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	091b      	lsrs	r3, r3, #4
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
       ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d047      	beq.n	80044c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
 800443a:	e044      	b.n	80044c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d018      	beq.n	8004476 <RCCEx_PLLSAI1_Config+0x86>
 8004444:	2b03      	cmp	r3, #3
 8004446:	d825      	bhi.n	8004494 <RCCEx_PLLSAI1_Config+0xa4>
 8004448:	2b01      	cmp	r3, #1
 800444a:	d002      	beq.n	8004452 <RCCEx_PLLSAI1_Config+0x62>
 800444c:	2b02      	cmp	r3, #2
 800444e:	d009      	beq.n	8004464 <RCCEx_PLLSAI1_Config+0x74>
 8004450:	e020      	b.n	8004494 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004452:	4b60      	ldr	r3, [pc, #384]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d11d      	bne.n	800449a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004462:	e01a      	b.n	800449a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004464:	4b5b      	ldr	r3, [pc, #364]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446c:	2b00      	cmp	r3, #0
 800446e:	d116      	bne.n	800449e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004474:	e013      	b.n	800449e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004476:	4b57      	ldr	r3, [pc, #348]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10f      	bne.n	80044a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004482:	4b54      	ldr	r3, [pc, #336]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004492:	e006      	b.n	80044a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
      break;
 8004498:	e004      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800449a:	bf00      	nop
 800449c:	e002      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10d      	bne.n	80044c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044aa:	4b4a      	ldr	r3, [pc, #296]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6819      	ldr	r1, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	430b      	orrs	r3, r1
 80044c0:	4944      	ldr	r1, [pc, #272]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d17d      	bne.n	80045c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044cc:	4b41      	ldr	r3, [pc, #260]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a40      	ldr	r2, [pc, #256]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d8:	f7fd fd44 	bl	8001f64 <HAL_GetTick>
 80044dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044de:	e009      	b.n	80044f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044e0:	f7fd fd40 	bl	8001f64 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d902      	bls.n	80044f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	73fb      	strb	r3, [r7, #15]
        break;
 80044f2:	e005      	b.n	8004500 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044f4:	4b37      	ldr	r3, [pc, #220]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1ef      	bne.n	80044e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d160      	bne.n	80045c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d111      	bne.n	8004530 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800450c:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6892      	ldr	r2, [r2, #8]
 800451c:	0211      	lsls	r1, r2, #8
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	68d2      	ldr	r2, [r2, #12]
 8004522:	0912      	lsrs	r2, r2, #4
 8004524:	0452      	lsls	r2, r2, #17
 8004526:	430a      	orrs	r2, r1
 8004528:	492a      	ldr	r1, [pc, #168]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800452a:	4313      	orrs	r3, r2
 800452c:	610b      	str	r3, [r1, #16]
 800452e:	e027      	b.n	8004580 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d112      	bne.n	800455c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004536:	4b27      	ldr	r3, [pc, #156]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800453e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6892      	ldr	r2, [r2, #8]
 8004546:	0211      	lsls	r1, r2, #8
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6912      	ldr	r2, [r2, #16]
 800454c:	0852      	lsrs	r2, r2, #1
 800454e:	3a01      	subs	r2, #1
 8004550:	0552      	lsls	r2, r2, #21
 8004552:	430a      	orrs	r2, r1
 8004554:	491f      	ldr	r1, [pc, #124]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004556:	4313      	orrs	r3, r2
 8004558:	610b      	str	r3, [r1, #16]
 800455a:	e011      	b.n	8004580 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800455c:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004564:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6892      	ldr	r2, [r2, #8]
 800456c:	0211      	lsls	r1, r2, #8
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6952      	ldr	r2, [r2, #20]
 8004572:	0852      	lsrs	r2, r2, #1
 8004574:	3a01      	subs	r2, #1
 8004576:	0652      	lsls	r2, r2, #25
 8004578:	430a      	orrs	r2, r1
 800457a:	4916      	ldr	r1, [pc, #88]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800457c:	4313      	orrs	r3, r2
 800457e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004580:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a13      	ldr	r2, [pc, #76]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004586:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800458a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458c:	f7fd fcea 	bl	8001f64 <HAL_GetTick>
 8004590:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004592:	e009      	b.n	80045a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004594:	f7fd fce6 	bl	8001f64 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d902      	bls.n	80045a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	73fb      	strb	r3, [r7, #15]
          break;
 80045a6:	e005      	b.n	80045b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045a8:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ef      	beq.n	8004594 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045ba:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	4904      	ldr	r1, [pc, #16]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40021000 	.word	0x40021000

080045d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045e6:	4b6a      	ldr	r3, [pc, #424]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d018      	beq.n	8004624 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045f2:	4b67      	ldr	r3, [pc, #412]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f003 0203 	and.w	r2, r3, #3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d10d      	bne.n	800461e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
       ||
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800460a:	4b61      	ldr	r3, [pc, #388]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	091b      	lsrs	r3, r3, #4
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
       ||
 800461a:	429a      	cmp	r2, r3
 800461c:	d047      	beq.n	80046ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
 8004622:	e044      	b.n	80046ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b03      	cmp	r3, #3
 800462a:	d018      	beq.n	800465e <RCCEx_PLLSAI2_Config+0x86>
 800462c:	2b03      	cmp	r3, #3
 800462e:	d825      	bhi.n	800467c <RCCEx_PLLSAI2_Config+0xa4>
 8004630:	2b01      	cmp	r3, #1
 8004632:	d002      	beq.n	800463a <RCCEx_PLLSAI2_Config+0x62>
 8004634:	2b02      	cmp	r3, #2
 8004636:	d009      	beq.n	800464c <RCCEx_PLLSAI2_Config+0x74>
 8004638:	e020      	b.n	800467c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800463a:	4b55      	ldr	r3, [pc, #340]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d11d      	bne.n	8004682 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800464a:	e01a      	b.n	8004682 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800464c:	4b50      	ldr	r3, [pc, #320]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004654:	2b00      	cmp	r3, #0
 8004656:	d116      	bne.n	8004686 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800465c:	e013      	b.n	8004686 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800465e:	4b4c      	ldr	r3, [pc, #304]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10f      	bne.n	800468a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800466a:	4b49      	ldr	r3, [pc, #292]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d109      	bne.n	800468a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800467a:	e006      	b.n	800468a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
      break;
 8004680:	e004      	b.n	800468c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004682:	bf00      	nop
 8004684:	e002      	b.n	800468c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004686:	bf00      	nop
 8004688:	e000      	b.n	800468c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800468a:	bf00      	nop
    }

    if(status == HAL_OK)
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10d      	bne.n	80046ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004692:	4b3f      	ldr	r3, [pc, #252]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6819      	ldr	r1, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	430b      	orrs	r3, r1
 80046a8:	4939      	ldr	r1, [pc, #228]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d167      	bne.n	8004784 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046b4:	4b36      	ldr	r3, [pc, #216]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a35      	ldr	r2, [pc, #212]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c0:	f7fd fc50 	bl	8001f64 <HAL_GetTick>
 80046c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046c6:	e009      	b.n	80046dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046c8:	f7fd fc4c 	bl	8001f64 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d902      	bls.n	80046dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	73fb      	strb	r3, [r7, #15]
        break;
 80046da:	e005      	b.n	80046e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046dc:	4b2c      	ldr	r3, [pc, #176]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1ef      	bne.n	80046c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d14a      	bne.n	8004784 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d111      	bne.n	8004718 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046f4:	4b26      	ldr	r3, [pc, #152]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6892      	ldr	r2, [r2, #8]
 8004704:	0211      	lsls	r1, r2, #8
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	68d2      	ldr	r2, [r2, #12]
 800470a:	0912      	lsrs	r2, r2, #4
 800470c:	0452      	lsls	r2, r2, #17
 800470e:	430a      	orrs	r2, r1
 8004710:	491f      	ldr	r1, [pc, #124]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004712:	4313      	orrs	r3, r2
 8004714:	614b      	str	r3, [r1, #20]
 8004716:	e011      	b.n	800473c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004718:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004720:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6892      	ldr	r2, [r2, #8]
 8004728:	0211      	lsls	r1, r2, #8
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6912      	ldr	r2, [r2, #16]
 800472e:	0852      	lsrs	r2, r2, #1
 8004730:	3a01      	subs	r2, #1
 8004732:	0652      	lsls	r2, r2, #25
 8004734:	430a      	orrs	r2, r1
 8004736:	4916      	ldr	r1, [pc, #88]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004738:	4313      	orrs	r3, r2
 800473a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800473c:	4b14      	ldr	r3, [pc, #80]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a13      	ldr	r2, [pc, #76]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004748:	f7fd fc0c 	bl	8001f64 <HAL_GetTick>
 800474c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800474e:	e009      	b.n	8004764 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004750:	f7fd fc08 	bl	8001f64 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d902      	bls.n	8004764 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	73fb      	strb	r3, [r7, #15]
          break;
 8004762:	e005      	b.n	8004770 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004764:	4b0a      	ldr	r3, [pc, #40]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0ef      	beq.n	8004750 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004778:	695a      	ldr	r2, [r3, #20]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	4904      	ldr	r1, [pc, #16]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004780:	4313      	orrs	r3, r2
 8004782:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000

08004794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e049      	b.n	800483a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fd f9d8 	bl	8001b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f000 ff62 	bl	800569c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	d001      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e04f      	b.n	80048fc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a23      	ldr	r2, [pc, #140]	; (8004908 <HAL_TIM_Base_Start_IT+0xc4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d01d      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x76>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004886:	d018      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x76>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a1f      	ldr	r2, [pc, #124]	; (800490c <HAL_TIM_Base_Start_IT+0xc8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x76>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1e      	ldr	r2, [pc, #120]	; (8004910 <HAL_TIM_Base_Start_IT+0xcc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00e      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x76>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1c      	ldr	r2, [pc, #112]	; (8004914 <HAL_TIM_Base_Start_IT+0xd0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d009      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x76>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1b      	ldr	r2, [pc, #108]	; (8004918 <HAL_TIM_Base_Start_IT+0xd4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d004      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x76>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a19      	ldr	r2, [pc, #100]	; (800491c <HAL_TIM_Base_Start_IT+0xd8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d115      	bne.n	80048e6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	4b17      	ldr	r3, [pc, #92]	; (8004920 <HAL_TIM_Base_Start_IT+0xdc>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b06      	cmp	r3, #6
 80048ca:	d015      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xb4>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d2:	d011      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e4:	e008      	b.n	80048f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0201 	orr.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	e000      	b.n	80048fa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40000400 	.word	0x40000400
 8004910:	40000800 	.word	0x40000800
 8004914:	40000c00 	.word	0x40000c00
 8004918:	40013400 	.word	0x40013400
 800491c:	40014000 	.word	0x40014000
 8004920:	00010007 	.word	0x00010007

08004924 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e049      	b.n	80049ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f841 	bl	80049d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3304      	adds	r3, #4
 8004960:	4619      	mov	r1, r3
 8004962:	4610      	mov	r0, r2
 8004964:	f000 fe9a 	bl	800569c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d109      	bne.n	8004a0c <HAL_TIM_PWM_Start+0x24>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	bf14      	ite	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	2300      	moveq	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	e03c      	b.n	8004a86 <HAL_TIM_PWM_Start+0x9e>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d109      	bne.n	8004a26 <HAL_TIM_PWM_Start+0x3e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	bf14      	ite	ne
 8004a1e:	2301      	movne	r3, #1
 8004a20:	2300      	moveq	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	e02f      	b.n	8004a86 <HAL_TIM_PWM_Start+0x9e>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d109      	bne.n	8004a40 <HAL_TIM_PWM_Start+0x58>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	bf14      	ite	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	2300      	moveq	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	e022      	b.n	8004a86 <HAL_TIM_PWM_Start+0x9e>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d109      	bne.n	8004a5a <HAL_TIM_PWM_Start+0x72>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	bf14      	ite	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	2300      	moveq	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	e015      	b.n	8004a86 <HAL_TIM_PWM_Start+0x9e>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d109      	bne.n	8004a74 <HAL_TIM_PWM_Start+0x8c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	bf14      	ite	ne
 8004a6c:	2301      	movne	r3, #1
 8004a6e:	2300      	moveq	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	e008      	b.n	8004a86 <HAL_TIM_PWM_Start+0x9e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	bf14      	ite	ne
 8004a80:	2301      	movne	r3, #1
 8004a82:	2300      	moveq	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e09c      	b.n	8004bc8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <HAL_TIM_PWM_Start+0xb6>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a9c:	e023      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xfe>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d104      	bne.n	8004aae <HAL_TIM_PWM_Start+0xc6>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aac:	e01b      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xfe>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d104      	bne.n	8004abe <HAL_TIM_PWM_Start+0xd6>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004abc:	e013      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xfe>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b0c      	cmp	r3, #12
 8004ac2:	d104      	bne.n	8004ace <HAL_TIM_PWM_Start+0xe6>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004acc:	e00b      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xfe>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	d104      	bne.n	8004ade <HAL_TIM_PWM_Start+0xf6>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004adc:	e003      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xfe>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2201      	movs	r2, #1
 8004aec:	6839      	ldr	r1, [r7, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f001 fb02 	bl	80060f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a35      	ldr	r2, [pc, #212]	; (8004bd0 <HAL_TIM_PWM_Start+0x1e8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x13e>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a34      	ldr	r2, [pc, #208]	; (8004bd4 <HAL_TIM_PWM_Start+0x1ec>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00e      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x13e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a32      	ldr	r2, [pc, #200]	; (8004bd8 <HAL_TIM_PWM_Start+0x1f0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d009      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x13e>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a31      	ldr	r2, [pc, #196]	; (8004bdc <HAL_TIM_PWM_Start+0x1f4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d004      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x13e>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a2f      	ldr	r2, [pc, #188]	; (8004be0 <HAL_TIM_PWM_Start+0x1f8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d101      	bne.n	8004b2a <HAL_TIM_PWM_Start+0x142>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <HAL_TIM_PWM_Start+0x144>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b3e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a22      	ldr	r2, [pc, #136]	; (8004bd0 <HAL_TIM_PWM_Start+0x1e8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01d      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x19e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b52:	d018      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x19e>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a22      	ldr	r2, [pc, #136]	; (8004be4 <HAL_TIM_PWM_Start+0x1fc>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x19e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a21      	ldr	r2, [pc, #132]	; (8004be8 <HAL_TIM_PWM_Start+0x200>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00e      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x19e>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1f      	ldr	r2, [pc, #124]	; (8004bec <HAL_TIM_PWM_Start+0x204>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d009      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x19e>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a17      	ldr	r2, [pc, #92]	; (8004bd4 <HAL_TIM_PWM_Start+0x1ec>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d004      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x19e>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <HAL_TIM_PWM_Start+0x1f0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d115      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	4b18      	ldr	r3, [pc, #96]	; (8004bf0 <HAL_TIM_PWM_Start+0x208>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b06      	cmp	r3, #6
 8004b96:	d015      	beq.n	8004bc4 <HAL_TIM_PWM_Start+0x1dc>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9e:	d011      	beq.n	8004bc4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb0:	e008      	b.n	8004bc4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0201 	orr.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	e000      	b.n	8004bc6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40012c00 	.word	0x40012c00
 8004bd4:	40013400 	.word	0x40013400
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800
 8004be4:	40000400 	.word	0x40000400
 8004be8:	40000800 	.word	0x40000800
 8004bec:	40000c00 	.word	0x40000c00
 8004bf0:	00010007 	.word	0x00010007

08004bf4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e049      	b.n	8004c9a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f841 	bl	8004ca2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f000 fd32 	bl	800569c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
	...

08004cb8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d104      	bne.n	8004cd2 <HAL_TIM_IC_Start+0x1a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	e023      	b.n	8004d1a <HAL_TIM_IC_Start+0x62>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d104      	bne.n	8004ce2 <HAL_TIM_IC_Start+0x2a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	e01b      	b.n	8004d1a <HAL_TIM_IC_Start+0x62>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d104      	bne.n	8004cf2 <HAL_TIM_IC_Start+0x3a>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	e013      	b.n	8004d1a <HAL_TIM_IC_Start+0x62>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b0c      	cmp	r3, #12
 8004cf6:	d104      	bne.n	8004d02 <HAL_TIM_IC_Start+0x4a>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	e00b      	b.n	8004d1a <HAL_TIM_IC_Start+0x62>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d104      	bne.n	8004d12 <HAL_TIM_IC_Start+0x5a>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	e003      	b.n	8004d1a <HAL_TIM_IC_Start+0x62>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d104      	bne.n	8004d2c <HAL_TIM_IC_Start+0x74>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	e013      	b.n	8004d54 <HAL_TIM_IC_Start+0x9c>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d104      	bne.n	8004d3c <HAL_TIM_IC_Start+0x84>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	e00b      	b.n	8004d54 <HAL_TIM_IC_Start+0x9c>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d104      	bne.n	8004d4c <HAL_TIM_IC_Start+0x94>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	e003      	b.n	8004d54 <HAL_TIM_IC_Start+0x9c>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d102      	bne.n	8004d62 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d5c:	7bbb      	ldrb	r3, [r7, #14]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d001      	beq.n	8004d66 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e092      	b.n	8004e8c <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d104      	bne.n	8004d76 <HAL_TIM_IC_Start+0xbe>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d74:	e023      	b.n	8004dbe <HAL_TIM_IC_Start+0x106>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d104      	bne.n	8004d86 <HAL_TIM_IC_Start+0xce>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d84:	e01b      	b.n	8004dbe <HAL_TIM_IC_Start+0x106>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d104      	bne.n	8004d96 <HAL_TIM_IC_Start+0xde>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d94:	e013      	b.n	8004dbe <HAL_TIM_IC_Start+0x106>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b0c      	cmp	r3, #12
 8004d9a:	d104      	bne.n	8004da6 <HAL_TIM_IC_Start+0xee>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004da4:	e00b      	b.n	8004dbe <HAL_TIM_IC_Start+0x106>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d104      	bne.n	8004db6 <HAL_TIM_IC_Start+0xfe>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db4:	e003      	b.n	8004dbe <HAL_TIM_IC_Start+0x106>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2202      	movs	r2, #2
 8004dba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_IC_Start+0x116>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dcc:	e013      	b.n	8004df6 <HAL_TIM_IC_Start+0x13e>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_IC_Start+0x126>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ddc:	e00b      	b.n	8004df6 <HAL_TIM_IC_Start+0x13e>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d104      	bne.n	8004dee <HAL_TIM_IC_Start+0x136>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dec:	e003      	b.n	8004df6 <HAL_TIM_IC_Start+0x13e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2202      	movs	r2, #2
 8004df2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	6839      	ldr	r1, [r7, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f001 f97a 	bl	80060f8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a22      	ldr	r2, [pc, #136]	; (8004e94 <HAL_TIM_IC_Start+0x1dc>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d01d      	beq.n	8004e4a <HAL_TIM_IC_Start+0x192>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e16:	d018      	beq.n	8004e4a <HAL_TIM_IC_Start+0x192>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a1e      	ldr	r2, [pc, #120]	; (8004e98 <HAL_TIM_IC_Start+0x1e0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d013      	beq.n	8004e4a <HAL_TIM_IC_Start+0x192>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a1d      	ldr	r2, [pc, #116]	; (8004e9c <HAL_TIM_IC_Start+0x1e4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00e      	beq.n	8004e4a <HAL_TIM_IC_Start+0x192>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a1b      	ldr	r2, [pc, #108]	; (8004ea0 <HAL_TIM_IC_Start+0x1e8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d009      	beq.n	8004e4a <HAL_TIM_IC_Start+0x192>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1a      	ldr	r2, [pc, #104]	; (8004ea4 <HAL_TIM_IC_Start+0x1ec>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d004      	beq.n	8004e4a <HAL_TIM_IC_Start+0x192>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a18      	ldr	r2, [pc, #96]	; (8004ea8 <HAL_TIM_IC_Start+0x1f0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d115      	bne.n	8004e76 <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	4b16      	ldr	r3, [pc, #88]	; (8004eac <HAL_TIM_IC_Start+0x1f4>)
 8004e52:	4013      	ands	r3, r2
 8004e54:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b06      	cmp	r3, #6
 8004e5a:	d015      	beq.n	8004e88 <HAL_TIM_IC_Start+0x1d0>
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e62:	d011      	beq.n	8004e88 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0201 	orr.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e74:	e008      	b.n	8004e88 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f042 0201 	orr.w	r2, r2, #1
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	e000      	b.n	8004e8a <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	40000400 	.word	0x40000400
 8004e9c:	40000800 	.word	0x40000800
 8004ea0:	40000c00 	.word	0x40000c00
 8004ea4:	40013400 	.word	0x40013400
 8004ea8:	40014000 	.word	0x40014000
 8004eac:	00010007 	.word	0x00010007

08004eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d122      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d11b      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0202 	mvn.w	r2, #2
 8004edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fbb4 	bl	8005660 <HAL_TIM_IC_CaptureCallback>
 8004ef8:	e005      	b.n	8004f06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fba6 	bl	800564c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fbb7 	bl	8005674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d122      	bne.n	8004f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d11b      	bne.n	8004f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0204 	mvn.w	r2, #4
 8004f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2202      	movs	r2, #2
 8004f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fb8a 	bl	8005660 <HAL_TIM_IC_CaptureCallback>
 8004f4c:	e005      	b.n	8004f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fb7c 	bl	800564c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fb8d 	bl	8005674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d122      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d11b      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0208 	mvn.w	r2, #8
 8004f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2204      	movs	r2, #4
 8004f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fb60 	bl	8005660 <HAL_TIM_IC_CaptureCallback>
 8004fa0:	e005      	b.n	8004fae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fb52 	bl	800564c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fb63 	bl	8005674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0310 	and.w	r3, r3, #16
 8004fbe:	2b10      	cmp	r3, #16
 8004fc0:	d122      	bne.n	8005008 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d11b      	bne.n	8005008 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0210 	mvn.w	r2, #16
 8004fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2208      	movs	r2, #8
 8004fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fb36 	bl	8005660 <HAL_TIM_IC_CaptureCallback>
 8004ff4:	e005      	b.n	8005002 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fb28 	bl	800564c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fb39 	bl	8005674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b01      	cmp	r3, #1
 8005014:	d10e      	bne.n	8005034 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b01      	cmp	r3, #1
 8005022:	d107      	bne.n	8005034 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0201 	mvn.w	r2, #1
 800502c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7fc fac8 	bl	80015c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503e:	2b80      	cmp	r3, #128	; 0x80
 8005040:	d10e      	bne.n	8005060 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504c:	2b80      	cmp	r3, #128	; 0x80
 800504e:	d107      	bne.n	8005060 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f001 f904 	bl	8006268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800506e:	d10e      	bne.n	800508e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507a:	2b80      	cmp	r3, #128	; 0x80
 800507c:	d107      	bne.n	800508e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f001 f8f7 	bl	800627c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	d10e      	bne.n	80050ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a6:	2b40      	cmp	r3, #64	; 0x40
 80050a8:	d107      	bne.n	80050ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fae7 	bl	8005688 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d10e      	bne.n	80050e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	d107      	bne.n	80050e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f06f 0220 	mvn.w	r2, #32
 80050de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f001 f8b7 	bl	8006254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050e6:	bf00      	nop
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	60f8      	str	r0, [r7, #12]
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005104:	2302      	movs	r3, #2
 8005106:	e082      	b.n	800520e <HAL_TIM_IC_ConfigChannel+0x120>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d11b      	bne.n	800514e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	6819      	ldr	r1, [r3, #0]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f000 fe29 	bl	8005d7c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699a      	ldr	r2, [r3, #24]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 020c 	bic.w	r2, r2, #12
 8005138:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6999      	ldr	r1, [r3, #24]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	619a      	str	r2, [r3, #24]
 800514c:	e05a      	b.n	8005204 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b04      	cmp	r3, #4
 8005152:	d11c      	bne.n	800518e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	6819      	ldr	r1, [r3, #0]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f000 fea7 	bl	8005eb6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005176:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6999      	ldr	r1, [r3, #24]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	021a      	lsls	r2, r3, #8
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	619a      	str	r2, [r3, #24]
 800518c:	e03a      	b.n	8005204 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b08      	cmp	r3, #8
 8005192:	d11b      	bne.n	80051cc <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	6819      	ldr	r1, [r3, #0]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f000 fef4 	bl	8005f90 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69da      	ldr	r2, [r3, #28]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 020c 	bic.w	r2, r2, #12
 80051b6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69d9      	ldr	r1, [r3, #28]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	61da      	str	r2, [r3, #28]
 80051ca:	e01b      	b.n	8005204 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	6819      	ldr	r1, [r3, #0]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f000 ff14 	bl	8006008 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	69da      	ldr	r2, [r3, #28]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051ee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	69d9      	ldr	r1, [r3, #28]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	021a      	lsls	r2, r3, #8
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
	...

08005218 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800522a:	2b01      	cmp	r3, #1
 800522c:	d101      	bne.n	8005232 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800522e:	2302      	movs	r3, #2
 8005230:	e0fd      	b.n	800542e <HAL_TIM_PWM_ConfigChannel+0x216>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b14      	cmp	r3, #20
 800523e:	f200 80f0 	bhi.w	8005422 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005242:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005248:	0800529d 	.word	0x0800529d
 800524c:	08005423 	.word	0x08005423
 8005250:	08005423 	.word	0x08005423
 8005254:	08005423 	.word	0x08005423
 8005258:	080052dd 	.word	0x080052dd
 800525c:	08005423 	.word	0x08005423
 8005260:	08005423 	.word	0x08005423
 8005264:	08005423 	.word	0x08005423
 8005268:	0800531f 	.word	0x0800531f
 800526c:	08005423 	.word	0x08005423
 8005270:	08005423 	.word	0x08005423
 8005274:	08005423 	.word	0x08005423
 8005278:	0800535f 	.word	0x0800535f
 800527c:	08005423 	.word	0x08005423
 8005280:	08005423 	.word	0x08005423
 8005284:	08005423 	.word	0x08005423
 8005288:	080053a1 	.word	0x080053a1
 800528c:	08005423 	.word	0x08005423
 8005290:	08005423 	.word	0x08005423
 8005294:	08005423 	.word	0x08005423
 8005298:	080053e1 	.word	0x080053e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 fa94 	bl	80057d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699a      	ldr	r2, [r3, #24]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0208 	orr.w	r2, r2, #8
 80052b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0204 	bic.w	r2, r2, #4
 80052c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6999      	ldr	r1, [r3, #24]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	619a      	str	r2, [r3, #24]
      break;
 80052da:	e0a3      	b.n	8005424 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fb04 	bl	80058f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699a      	ldr	r2, [r3, #24]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6999      	ldr	r1, [r3, #24]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	021a      	lsls	r2, r3, #8
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	619a      	str	r2, [r3, #24]
      break;
 800531c:	e082      	b.n	8005424 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	4618      	mov	r0, r3
 8005326:	f000 fb6d 	bl	8005a04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69da      	ldr	r2, [r3, #28]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0208 	orr.w	r2, r2, #8
 8005338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69da      	ldr	r2, [r3, #28]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0204 	bic.w	r2, r2, #4
 8005348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69d9      	ldr	r1, [r3, #28]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	61da      	str	r2, [r3, #28]
      break;
 800535c:	e062      	b.n	8005424 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68b9      	ldr	r1, [r7, #8]
 8005364:	4618      	mov	r0, r3
 8005366:	f000 fbd5 	bl	8005b14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69da      	ldr	r2, [r3, #28]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69da      	ldr	r2, [r3, #28]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69d9      	ldr	r1, [r3, #28]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	021a      	lsls	r2, r3, #8
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	61da      	str	r2, [r3, #28]
      break;
 800539e:	e041      	b.n	8005424 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68b9      	ldr	r1, [r7, #8]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fc1e 	bl	8005be8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0208 	orr.w	r2, r2, #8
 80053ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0204 	bic.w	r2, r2, #4
 80053ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	691a      	ldr	r2, [r3, #16]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80053de:	e021      	b.n	8005424 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68b9      	ldr	r1, [r7, #8]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fc62 	bl	8005cb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800540a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	021a      	lsls	r2, r3, #8
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005420:	e000      	b.n	8005424 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005422:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop

08005438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_TIM_ConfigClockSource+0x18>
 800544c:	2302      	movs	r3, #2
 800544e:	e0b5      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x184>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005472:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800547a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800548c:	d03e      	beq.n	800550c <HAL_TIM_ConfigClockSource+0xd4>
 800548e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005492:	f200 8087 	bhi.w	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549a:	f000 8085 	beq.w	80055a8 <HAL_TIM_ConfigClockSource+0x170>
 800549e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a2:	d87f      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054a4:	2b70      	cmp	r3, #112	; 0x70
 80054a6:	d01a      	beq.n	80054de <HAL_TIM_ConfigClockSource+0xa6>
 80054a8:	2b70      	cmp	r3, #112	; 0x70
 80054aa:	d87b      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054ac:	2b60      	cmp	r3, #96	; 0x60
 80054ae:	d050      	beq.n	8005552 <HAL_TIM_ConfigClockSource+0x11a>
 80054b0:	2b60      	cmp	r3, #96	; 0x60
 80054b2:	d877      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054b4:	2b50      	cmp	r3, #80	; 0x50
 80054b6:	d03c      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0xfa>
 80054b8:	2b50      	cmp	r3, #80	; 0x50
 80054ba:	d873      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054bc:	2b40      	cmp	r3, #64	; 0x40
 80054be:	d058      	beq.n	8005572 <HAL_TIM_ConfigClockSource+0x13a>
 80054c0:	2b40      	cmp	r3, #64	; 0x40
 80054c2:	d86f      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054c4:	2b30      	cmp	r3, #48	; 0x30
 80054c6:	d064      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x15a>
 80054c8:	2b30      	cmp	r3, #48	; 0x30
 80054ca:	d86b      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d060      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x15a>
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d867      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d05c      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x15a>
 80054d8:	2b10      	cmp	r3, #16
 80054da:	d05a      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80054dc:	e062      	b.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6899      	ldr	r1, [r3, #8]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f000 fde3 	bl	80060b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005500:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	609a      	str	r2, [r3, #8]
      break;
 800550a:	e04e      	b.n	80055aa <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	6899      	ldr	r1, [r3, #8]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f000 fdcc 	bl	80060b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800552e:	609a      	str	r2, [r3, #8]
      break;
 8005530:	e03b      	b.n	80055aa <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	6859      	ldr	r1, [r3, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	461a      	mov	r2, r3
 8005540:	f000 fc8a 	bl	8005e58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2150      	movs	r1, #80	; 0x50
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fd99 	bl	8006082 <TIM_ITRx_SetConfig>
      break;
 8005550:	e02b      	b.n	80055aa <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6859      	ldr	r1, [r3, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	461a      	mov	r2, r3
 8005560:	f000 fce6 	bl	8005f30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2160      	movs	r1, #96	; 0x60
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fd89 	bl	8006082 <TIM_ITRx_SetConfig>
      break;
 8005570:	e01b      	b.n	80055aa <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	6859      	ldr	r1, [r3, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	461a      	mov	r2, r3
 8005580:	f000 fc6a 	bl	8005e58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2140      	movs	r1, #64	; 0x40
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fd79 	bl	8006082 <TIM_ITRx_SetConfig>
      break;
 8005590:	e00b      	b.n	80055aa <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4619      	mov	r1, r3
 800559c:	4610      	mov	r0, r2
 800559e:	f000 fd70 	bl	8006082 <TIM_ITRx_SetConfig>
        break;
 80055a2:	e002      	b.n	80055aa <HAL_TIM_ConfigClockSource+0x172>
      break;
 80055a4:	bf00      	nop
 80055a6:	e000      	b.n	80055aa <HAL_TIM_ConfigClockSource+0x172>
      break;
 80055a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b0c      	cmp	r3, #12
 80055d6:	d831      	bhi.n	800563c <HAL_TIM_ReadCapturedValue+0x78>
 80055d8:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80055da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055de:	bf00      	nop
 80055e0:	08005615 	.word	0x08005615
 80055e4:	0800563d 	.word	0x0800563d
 80055e8:	0800563d 	.word	0x0800563d
 80055ec:	0800563d 	.word	0x0800563d
 80055f0:	0800561f 	.word	0x0800561f
 80055f4:	0800563d 	.word	0x0800563d
 80055f8:	0800563d 	.word	0x0800563d
 80055fc:	0800563d 	.word	0x0800563d
 8005600:	08005629 	.word	0x08005629
 8005604:	0800563d 	.word	0x0800563d
 8005608:	0800563d 	.word	0x0800563d
 800560c:	0800563d 	.word	0x0800563d
 8005610:	08005633 	.word	0x08005633
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561a:	60fb      	str	r3, [r7, #12]

      break;
 800561c:	e00f      	b.n	800563e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	60fb      	str	r3, [r7, #12]

      break;
 8005626:	e00a      	b.n	800563e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562e:	60fb      	str	r3, [r7, #12]

      break;
 8005630:	e005      	b.n	800563e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	60fb      	str	r3, [r7, #12]

      break;
 800563a:	e000      	b.n	800563e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800563c:	bf00      	nop
  }

  return tmpreg;
 800563e:	68fb      	ldr	r3, [r7, #12]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a40      	ldr	r2, [pc, #256]	; (80057b0 <TIM_Base_SetConfig+0x114>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d013      	beq.n	80056dc <TIM_Base_SetConfig+0x40>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ba:	d00f      	beq.n	80056dc <TIM_Base_SetConfig+0x40>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a3d      	ldr	r2, [pc, #244]	; (80057b4 <TIM_Base_SetConfig+0x118>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00b      	beq.n	80056dc <TIM_Base_SetConfig+0x40>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a3c      	ldr	r2, [pc, #240]	; (80057b8 <TIM_Base_SetConfig+0x11c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d007      	beq.n	80056dc <TIM_Base_SetConfig+0x40>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a3b      	ldr	r2, [pc, #236]	; (80057bc <TIM_Base_SetConfig+0x120>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d003      	beq.n	80056dc <TIM_Base_SetConfig+0x40>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a3a      	ldr	r2, [pc, #232]	; (80057c0 <TIM_Base_SetConfig+0x124>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d108      	bne.n	80056ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a2f      	ldr	r2, [pc, #188]	; (80057b0 <TIM_Base_SetConfig+0x114>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d01f      	beq.n	8005736 <TIM_Base_SetConfig+0x9a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fc:	d01b      	beq.n	8005736 <TIM_Base_SetConfig+0x9a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a2c      	ldr	r2, [pc, #176]	; (80057b4 <TIM_Base_SetConfig+0x118>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d017      	beq.n	8005736 <TIM_Base_SetConfig+0x9a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a2b      	ldr	r2, [pc, #172]	; (80057b8 <TIM_Base_SetConfig+0x11c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d013      	beq.n	8005736 <TIM_Base_SetConfig+0x9a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a2a      	ldr	r2, [pc, #168]	; (80057bc <TIM_Base_SetConfig+0x120>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00f      	beq.n	8005736 <TIM_Base_SetConfig+0x9a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a29      	ldr	r2, [pc, #164]	; (80057c0 <TIM_Base_SetConfig+0x124>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00b      	beq.n	8005736 <TIM_Base_SetConfig+0x9a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a28      	ldr	r2, [pc, #160]	; (80057c4 <TIM_Base_SetConfig+0x128>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d007      	beq.n	8005736 <TIM_Base_SetConfig+0x9a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a27      	ldr	r2, [pc, #156]	; (80057c8 <TIM_Base_SetConfig+0x12c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d003      	beq.n	8005736 <TIM_Base_SetConfig+0x9a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a26      	ldr	r2, [pc, #152]	; (80057cc <TIM_Base_SetConfig+0x130>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d108      	bne.n	8005748 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800573c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a10      	ldr	r2, [pc, #64]	; (80057b0 <TIM_Base_SetConfig+0x114>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00f      	beq.n	8005794 <TIM_Base_SetConfig+0xf8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a12      	ldr	r2, [pc, #72]	; (80057c0 <TIM_Base_SetConfig+0x124>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00b      	beq.n	8005794 <TIM_Base_SetConfig+0xf8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a11      	ldr	r2, [pc, #68]	; (80057c4 <TIM_Base_SetConfig+0x128>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d007      	beq.n	8005794 <TIM_Base_SetConfig+0xf8>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a10      	ldr	r2, [pc, #64]	; (80057c8 <TIM_Base_SetConfig+0x12c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d003      	beq.n	8005794 <TIM_Base_SetConfig+0xf8>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a0f      	ldr	r2, [pc, #60]	; (80057cc <TIM_Base_SetConfig+0x130>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d103      	bne.n	800579c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	615a      	str	r2, [r3, #20]
}
 80057a2:	bf00      	nop
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40012c00 	.word	0x40012c00
 80057b4:	40000400 	.word	0x40000400
 80057b8:	40000800 	.word	0x40000800
 80057bc:	40000c00 	.word	0x40000c00
 80057c0:	40013400 	.word	0x40013400
 80057c4:	40014000 	.word	0x40014000
 80057c8:	40014400 	.word	0x40014400
 80057cc:	40014800 	.word	0x40014800

080057d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	f023 0201 	bic.w	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0303 	bic.w	r3, r3, #3
 800580a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f023 0302 	bic.w	r3, r3, #2
 800581c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a2c      	ldr	r2, [pc, #176]	; (80058dc <TIM_OC1_SetConfig+0x10c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00f      	beq.n	8005850 <TIM_OC1_SetConfig+0x80>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a2b      	ldr	r2, [pc, #172]	; (80058e0 <TIM_OC1_SetConfig+0x110>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00b      	beq.n	8005850 <TIM_OC1_SetConfig+0x80>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a2a      	ldr	r2, [pc, #168]	; (80058e4 <TIM_OC1_SetConfig+0x114>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d007      	beq.n	8005850 <TIM_OC1_SetConfig+0x80>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a29      	ldr	r2, [pc, #164]	; (80058e8 <TIM_OC1_SetConfig+0x118>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_OC1_SetConfig+0x80>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a28      	ldr	r2, [pc, #160]	; (80058ec <TIM_OC1_SetConfig+0x11c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d10c      	bne.n	800586a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f023 0308 	bic.w	r3, r3, #8
 8005856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f023 0304 	bic.w	r3, r3, #4
 8005868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a1b      	ldr	r2, [pc, #108]	; (80058dc <TIM_OC1_SetConfig+0x10c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00f      	beq.n	8005892 <TIM_OC1_SetConfig+0xc2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a1a      	ldr	r2, [pc, #104]	; (80058e0 <TIM_OC1_SetConfig+0x110>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00b      	beq.n	8005892 <TIM_OC1_SetConfig+0xc2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a19      	ldr	r2, [pc, #100]	; (80058e4 <TIM_OC1_SetConfig+0x114>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d007      	beq.n	8005892 <TIM_OC1_SetConfig+0xc2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a18      	ldr	r2, [pc, #96]	; (80058e8 <TIM_OC1_SetConfig+0x118>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d003      	beq.n	8005892 <TIM_OC1_SetConfig+0xc2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a17      	ldr	r2, [pc, #92]	; (80058ec <TIM_OC1_SetConfig+0x11c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d111      	bne.n	80058b6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	621a      	str	r2, [r3, #32]
}
 80058d0:	bf00      	nop
 80058d2:	371c      	adds	r7, #28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	40012c00 	.word	0x40012c00
 80058e0:	40013400 	.word	0x40013400
 80058e4:	40014000 	.word	0x40014000
 80058e8:	40014400 	.word	0x40014400
 80058ec:	40014800 	.word	0x40014800

080058f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	f023 0210 	bic.w	r2, r3, #16
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800591e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800592a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	021b      	lsls	r3, r3, #8
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f023 0320 	bic.w	r3, r3, #32
 800593e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4313      	orrs	r3, r2
 800594a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a28      	ldr	r2, [pc, #160]	; (80059f0 <TIM_OC2_SetConfig+0x100>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d003      	beq.n	800595c <TIM_OC2_SetConfig+0x6c>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a27      	ldr	r2, [pc, #156]	; (80059f4 <TIM_OC2_SetConfig+0x104>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d10d      	bne.n	8005978 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005976:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a1d      	ldr	r2, [pc, #116]	; (80059f0 <TIM_OC2_SetConfig+0x100>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00f      	beq.n	80059a0 <TIM_OC2_SetConfig+0xb0>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a1c      	ldr	r2, [pc, #112]	; (80059f4 <TIM_OC2_SetConfig+0x104>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00b      	beq.n	80059a0 <TIM_OC2_SetConfig+0xb0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a1b      	ldr	r2, [pc, #108]	; (80059f8 <TIM_OC2_SetConfig+0x108>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d007      	beq.n	80059a0 <TIM_OC2_SetConfig+0xb0>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a1a      	ldr	r2, [pc, #104]	; (80059fc <TIM_OC2_SetConfig+0x10c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d003      	beq.n	80059a0 <TIM_OC2_SetConfig+0xb0>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a19      	ldr	r2, [pc, #100]	; (8005a00 <TIM_OC2_SetConfig+0x110>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d113      	bne.n	80059c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	621a      	str	r2, [r3, #32]
}
 80059e2:	bf00      	nop
 80059e4:	371c      	adds	r7, #28
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	40012c00 	.word	0x40012c00
 80059f4:	40013400 	.word	0x40013400
 80059f8:	40014000 	.word	0x40014000
 80059fc:	40014400 	.word	0x40014400
 8005a00:	40014800 	.word	0x40014800

08005a04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0303 	bic.w	r3, r3, #3
 8005a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	021b      	lsls	r3, r3, #8
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a27      	ldr	r2, [pc, #156]	; (8005b00 <TIM_OC3_SetConfig+0xfc>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d003      	beq.n	8005a6e <TIM_OC3_SetConfig+0x6a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a26      	ldr	r2, [pc, #152]	; (8005b04 <TIM_OC3_SetConfig+0x100>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d10d      	bne.n	8005a8a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	021b      	lsls	r3, r3, #8
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a1c      	ldr	r2, [pc, #112]	; (8005b00 <TIM_OC3_SetConfig+0xfc>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00f      	beq.n	8005ab2 <TIM_OC3_SetConfig+0xae>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a1b      	ldr	r2, [pc, #108]	; (8005b04 <TIM_OC3_SetConfig+0x100>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00b      	beq.n	8005ab2 <TIM_OC3_SetConfig+0xae>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a1a      	ldr	r2, [pc, #104]	; (8005b08 <TIM_OC3_SetConfig+0x104>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d007      	beq.n	8005ab2 <TIM_OC3_SetConfig+0xae>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a19      	ldr	r2, [pc, #100]	; (8005b0c <TIM_OC3_SetConfig+0x108>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d003      	beq.n	8005ab2 <TIM_OC3_SetConfig+0xae>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a18      	ldr	r2, [pc, #96]	; (8005b10 <TIM_OC3_SetConfig+0x10c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d113      	bne.n	8005ada <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	621a      	str	r2, [r3, #32]
}
 8005af4:	bf00      	nop
 8005af6:	371c      	adds	r7, #28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	40012c00 	.word	0x40012c00
 8005b04:	40013400 	.word	0x40013400
 8005b08:	40014000 	.word	0x40014000
 8005b0c:	40014400 	.word	0x40014400
 8005b10:	40014800 	.word	0x40014800

08005b14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	021b      	lsls	r3, r3, #8
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	031b      	lsls	r3, r3, #12
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a18      	ldr	r2, [pc, #96]	; (8005bd4 <TIM_OC4_SetConfig+0xc0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00f      	beq.n	8005b98 <TIM_OC4_SetConfig+0x84>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a17      	ldr	r2, [pc, #92]	; (8005bd8 <TIM_OC4_SetConfig+0xc4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00b      	beq.n	8005b98 <TIM_OC4_SetConfig+0x84>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a16      	ldr	r2, [pc, #88]	; (8005bdc <TIM_OC4_SetConfig+0xc8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d007      	beq.n	8005b98 <TIM_OC4_SetConfig+0x84>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a15      	ldr	r2, [pc, #84]	; (8005be0 <TIM_OC4_SetConfig+0xcc>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d003      	beq.n	8005b98 <TIM_OC4_SetConfig+0x84>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a14      	ldr	r2, [pc, #80]	; (8005be4 <TIM_OC4_SetConfig+0xd0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d109      	bne.n	8005bac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	019b      	lsls	r3, r3, #6
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	621a      	str	r2, [r3, #32]
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	40012c00 	.word	0x40012c00
 8005bd8:	40013400 	.word	0x40013400
 8005bdc:	40014000 	.word	0x40014000
 8005be0:	40014400 	.word	0x40014400
 8005be4:	40014800 	.word	0x40014800

08005be8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	041b      	lsls	r3, r3, #16
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a17      	ldr	r2, [pc, #92]	; (8005c9c <TIM_OC5_SetConfig+0xb4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00f      	beq.n	8005c62 <TIM_OC5_SetConfig+0x7a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a16      	ldr	r2, [pc, #88]	; (8005ca0 <TIM_OC5_SetConfig+0xb8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00b      	beq.n	8005c62 <TIM_OC5_SetConfig+0x7a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a15      	ldr	r2, [pc, #84]	; (8005ca4 <TIM_OC5_SetConfig+0xbc>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d007      	beq.n	8005c62 <TIM_OC5_SetConfig+0x7a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a14      	ldr	r2, [pc, #80]	; (8005ca8 <TIM_OC5_SetConfig+0xc0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d003      	beq.n	8005c62 <TIM_OC5_SetConfig+0x7a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a13      	ldr	r2, [pc, #76]	; (8005cac <TIM_OC5_SetConfig+0xc4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d109      	bne.n	8005c76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	621a      	str	r2, [r3, #32]
}
 8005c90:	bf00      	nop
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	40012c00 	.word	0x40012c00
 8005ca0:	40013400 	.word	0x40013400
 8005ca4:	40014000 	.word	0x40014000
 8005ca8:	40014400 	.word	0x40014400
 8005cac:	40014800 	.word	0x40014800

08005cb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	021b      	lsls	r3, r3, #8
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	051b      	lsls	r3, r3, #20
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a18      	ldr	r2, [pc, #96]	; (8005d68 <TIM_OC6_SetConfig+0xb8>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00f      	beq.n	8005d2c <TIM_OC6_SetConfig+0x7c>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a17      	ldr	r2, [pc, #92]	; (8005d6c <TIM_OC6_SetConfig+0xbc>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00b      	beq.n	8005d2c <TIM_OC6_SetConfig+0x7c>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a16      	ldr	r2, [pc, #88]	; (8005d70 <TIM_OC6_SetConfig+0xc0>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d007      	beq.n	8005d2c <TIM_OC6_SetConfig+0x7c>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a15      	ldr	r2, [pc, #84]	; (8005d74 <TIM_OC6_SetConfig+0xc4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d003      	beq.n	8005d2c <TIM_OC6_SetConfig+0x7c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a14      	ldr	r2, [pc, #80]	; (8005d78 <TIM_OC6_SetConfig+0xc8>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d109      	bne.n	8005d40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	029b      	lsls	r3, r3, #10
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	621a      	str	r2, [r3, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40012c00 	.word	0x40012c00
 8005d6c:	40013400 	.word	0x40013400
 8005d70:	40014000 	.word	0x40014000
 8005d74:	40014400 	.word	0x40014400
 8005d78:	40014800 	.word	0x40014800

08005d7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f023 0201 	bic.w	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4a26      	ldr	r2, [pc, #152]	; (8005e40 <TIM_TI1_SetConfig+0xc4>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d017      	beq.n	8005dda <TIM_TI1_SetConfig+0x5e>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db0:	d013      	beq.n	8005dda <TIM_TI1_SetConfig+0x5e>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4a23      	ldr	r2, [pc, #140]	; (8005e44 <TIM_TI1_SetConfig+0xc8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00f      	beq.n	8005dda <TIM_TI1_SetConfig+0x5e>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4a22      	ldr	r2, [pc, #136]	; (8005e48 <TIM_TI1_SetConfig+0xcc>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00b      	beq.n	8005dda <TIM_TI1_SetConfig+0x5e>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4a21      	ldr	r2, [pc, #132]	; (8005e4c <TIM_TI1_SetConfig+0xd0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d007      	beq.n	8005dda <TIM_TI1_SetConfig+0x5e>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4a20      	ldr	r2, [pc, #128]	; (8005e50 <TIM_TI1_SetConfig+0xd4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d003      	beq.n	8005dda <TIM_TI1_SetConfig+0x5e>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4a1f      	ldr	r2, [pc, #124]	; (8005e54 <TIM_TI1_SetConfig+0xd8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d101      	bne.n	8005dde <TIM_TI1_SetConfig+0x62>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e000      	b.n	8005de0 <TIM_TI1_SetConfig+0x64>
 8005dde:	2300      	movs	r3, #0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f023 0303 	bic.w	r3, r3, #3
 8005dea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	e003      	b.n	8005dfe <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f043 0301 	orr.w	r3, r3, #1
 8005dfc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f023 030a 	bic.w	r3, r3, #10
 8005e18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f003 030a 	and.w	r3, r3, #10
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	621a      	str	r2, [r3, #32]
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40012c00 	.word	0x40012c00
 8005e44:	40000400 	.word	0x40000400
 8005e48:	40000800 	.word	0x40000800
 8005e4c:	40000c00 	.word	0x40000c00
 8005e50:	40013400 	.word	0x40013400
 8005e54:	40014000 	.word	0x40014000

08005e58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	f023 0201 	bic.w	r2, r3, #1
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f023 030a 	bic.w	r3, r3, #10
 8005e94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	621a      	str	r2, [r3, #32]
}
 8005eaa:	bf00      	nop
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b087      	sub	sp, #28
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	60b9      	str	r1, [r7, #8]
 8005ec0:	607a      	str	r2, [r7, #4]
 8005ec2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f023 0210 	bic.w	r2, r3, #16
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	021b      	lsls	r3, r3, #8
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	031b      	lsls	r3, r3, #12
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f08:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	621a      	str	r2, [r3, #32]
}
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	f023 0210 	bic.w	r2, r3, #16
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	031b      	lsls	r3, r3, #12
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	621a      	str	r2, [r3, #32]
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f023 0303 	bic.w	r3, r3, #3
 8005fbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fcc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005fe0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	021b      	lsls	r3, r3, #8
 8005fe6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	621a      	str	r2, [r3, #32]
}
 8005ffc:	bf00      	nop
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006034:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	021b      	lsls	r3, r3, #8
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006046:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	031b      	lsls	r3, r3, #12
 800604c:	b29b      	uxth	r3, r3
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	4313      	orrs	r3, r2
 8006052:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800605a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	031b      	lsls	r3, r3, #12
 8006060:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	621a      	str	r2, [r3, #32]
}
 8006076:	bf00      	nop
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006082:	b480      	push	{r7}
 8006084:	b085      	sub	sp, #20
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006098:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4313      	orrs	r3, r2
 80060a0:	f043 0307 	orr.w	r3, r3, #7
 80060a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	609a      	str	r2, [r3, #8]
}
 80060ac:	bf00      	nop
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
 80060c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	021a      	lsls	r2, r3, #8
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	431a      	orrs	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4313      	orrs	r3, r2
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	609a      	str	r2, [r3, #8]
}
 80060ec:	bf00      	nop
 80060ee:	371c      	adds	r7, #28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f003 031f 	and.w	r3, r3, #31
 800610a:	2201      	movs	r2, #1
 800610c:	fa02 f303 	lsl.w	r3, r2, r3
 8006110:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a1a      	ldr	r2, [r3, #32]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	43db      	mvns	r3, r3
 800611a:	401a      	ands	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a1a      	ldr	r2, [r3, #32]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f003 031f 	and.w	r3, r3, #31
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	fa01 f303 	lsl.w	r3, r1, r3
 8006130:	431a      	orrs	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	621a      	str	r2, [r3, #32]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
	...

08006144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006154:	2b01      	cmp	r3, #1
 8006156:	d101      	bne.n	800615c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006158:	2302      	movs	r3, #2
 800615a:	e068      	b.n	800622e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2202      	movs	r2, #2
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a2e      	ldr	r2, [pc, #184]	; (800623c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d004      	beq.n	8006190 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a2d      	ldr	r2, [pc, #180]	; (8006240 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d108      	bne.n	80061a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006196:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1e      	ldr	r2, [pc, #120]	; (800623c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d01d      	beq.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ce:	d018      	beq.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1b      	ldr	r2, [pc, #108]	; (8006244 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a1a      	ldr	r2, [pc, #104]	; (8006248 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d00e      	beq.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a18      	ldr	r2, [pc, #96]	; (800624c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d009      	beq.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a13      	ldr	r2, [pc, #76]	; (8006240 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d004      	beq.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a14      	ldr	r2, [pc, #80]	; (8006250 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d10c      	bne.n	800621c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006208:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	4313      	orrs	r3, r2
 8006212:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	40012c00 	.word	0x40012c00
 8006240:	40013400 	.word	0x40013400
 8006244:	40000400 	.word	0x40000400
 8006248:	40000800 	.word	0x40000800
 800624c:	40000c00 	.word	0x40000c00
 8006250:	40014000 	.word	0x40014000

08006254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e040      	b.n	8006324 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d106      	bne.n	80062b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fb fd60 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2224      	movs	r2, #36	; 0x24
 80062bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0201 	bic.w	r2, r2, #1
 80062cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fae2 	bl	8006898 <UART_SetConfig>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e022      	b.n	8006324 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fd60 	bl	8006dac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800630a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0201 	orr.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fde7 	bl	8006ef0 <UART_CheckIdleState>
 8006322:	4603      	mov	r3, r0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b08a      	sub	sp, #40	; 0x28
 8006330:	af02      	add	r7, sp, #8
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	603b      	str	r3, [r7, #0]
 8006338:	4613      	mov	r3, r2
 800633a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006340:	2b20      	cmp	r3, #32
 8006342:	f040 8082 	bne.w	800644a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <HAL_UART_Transmit+0x26>
 800634c:	88fb      	ldrh	r3, [r7, #6]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e07a      	b.n	800644c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_UART_Transmit+0x38>
 8006360:	2302      	movs	r3, #2
 8006362:	e073      	b.n	800644c <HAL_UART_Transmit+0x120>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2221      	movs	r2, #33	; 0x21
 8006378:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800637a:	f7fb fdf3 	bl	8001f64 <HAL_GetTick>
 800637e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	88fa      	ldrh	r2, [r7, #6]
 8006384:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	88fa      	ldrh	r2, [r7, #6]
 800638c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006398:	d108      	bne.n	80063ac <HAL_UART_Transmit+0x80>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d104      	bne.n	80063ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80063a2:	2300      	movs	r3, #0
 80063a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	61bb      	str	r3, [r7, #24]
 80063aa:	e003      	b.n	80063b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063b0:	2300      	movs	r3, #0
 80063b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80063bc:	e02d      	b.n	800641a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	2200      	movs	r2, #0
 80063c6:	2180      	movs	r1, #128	; 0x80
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 fdda 	bl	8006f82 <UART_WaitOnFlagUntilTimeout>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e039      	b.n	800644c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10b      	bne.n	80063f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	881a      	ldrh	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063ea:	b292      	uxth	r2, r2
 80063ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	3302      	adds	r3, #2
 80063f2:	61bb      	str	r3, [r7, #24]
 80063f4:	e008      	b.n	8006408 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	781a      	ldrb	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	b292      	uxth	r2, r2
 8006400:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	3301      	adds	r3, #1
 8006406:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800640e:	b29b      	uxth	r3, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	b29a      	uxth	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006420:	b29b      	uxth	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1cb      	bne.n	80063be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2200      	movs	r2, #0
 800642e:	2140      	movs	r1, #64	; 0x40
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 fda6 	bl	8006f82 <UART_WaitOnFlagUntilTimeout>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e005      	b.n	800644c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2220      	movs	r2, #32
 8006444:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	e000      	b.n	800644c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800644a:	2302      	movs	r3, #2
  }
}
 800644c:	4618      	mov	r0, r3
 800644e:	3720      	adds	r7, #32
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b088      	sub	sp, #32
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	f640 030f 	movw	r3, #2063	; 0x80f
 800647a:	4013      	ands	r3, r2
 800647c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d113      	bne.n	80064ac <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	f003 0320 	and.w	r3, r3, #32
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00e      	beq.n	80064ac <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	f003 0320 	and.w	r3, r3, #32
 8006494:	2b00      	cmp	r3, #0
 8006496:	d009      	beq.n	80064ac <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 81ce 	beq.w	800683e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
      }
      return;
 80064aa:	e1c8      	b.n	800683e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 80e3 	beq.w	800667a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d105      	bne.n	80064ca <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	4ba6      	ldr	r3, [pc, #664]	; (800675c <HAL_UART_IRQHandler+0x308>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 80d8 	beq.w	800667a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d010      	beq.n	80064f6 <HAL_UART_IRQHandler+0xa2>
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00b      	beq.n	80064f6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2201      	movs	r2, #1
 80064e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ec:	f043 0201 	orr.w	r2, r3, #1
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d010      	beq.n	8006522 <HAL_UART_IRQHandler+0xce>
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00b      	beq.n	8006522 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2202      	movs	r2, #2
 8006510:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006518:	f043 0204 	orr.w	r2, r3, #4
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d010      	beq.n	800654e <HAL_UART_IRQHandler+0xfa>
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00b      	beq.n	800654e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2204      	movs	r2, #4
 800653c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006544:	f043 0202 	orr.w	r2, r3, #2
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f003 0308 	and.w	r3, r3, #8
 8006554:	2b00      	cmp	r3, #0
 8006556:	d015      	beq.n	8006584 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b00      	cmp	r3, #0
 8006560:	d104      	bne.n	800656c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00b      	beq.n	8006584 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2208      	movs	r2, #8
 8006572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800657a:	f043 0208 	orr.w	r2, r3, #8
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800658a:	2b00      	cmp	r3, #0
 800658c:	d011      	beq.n	80065b2 <HAL_UART_IRQHandler+0x15e>
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00c      	beq.n	80065b2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065a8:	f043 0220 	orr.w	r2, r3, #32
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8142 	beq.w	8006842 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	f003 0320 	and.w	r3, r3, #32
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00c      	beq.n	80065e2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	f003 0320 	and.w	r3, r3, #32
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065e8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	d004      	beq.n	8006602 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d031      	beq.n	8006666 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fd39 	bl	800707a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006612:	2b40      	cmp	r3, #64	; 0x40
 8006614:	d123      	bne.n	800665e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689a      	ldr	r2, [r3, #8]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006624:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662a:	2b00      	cmp	r3, #0
 800662c:	d013      	beq.n	8006656 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006632:	4a4b      	ldr	r2, [pc, #300]	; (8006760 <HAL_UART_IRQHandler+0x30c>)
 8006634:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663a:	4618      	mov	r0, r3
 800663c:	f7fb fe11 	bl	8002262 <HAL_DMA_Abort_IT>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d017      	beq.n	8006676 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006650:	4610      	mov	r0, r2
 8006652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006654:	e00f      	b.n	8006676 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f908 	bl	800686c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800665c:	e00b      	b.n	8006676 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f904 	bl	800686c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006664:	e007      	b.n	8006676 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f900 	bl	800686c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006674:	e0e5      	b.n	8006842 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006676:	bf00      	nop
    return;
 8006678:	e0e3      	b.n	8006842 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667e:	2b01      	cmp	r3, #1
 8006680:	f040 80a9 	bne.w	80067d6 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	f003 0310 	and.w	r3, r3, #16
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 80a3 	beq.w	80067d6 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	f003 0310 	and.w	r3, r3, #16
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 809d 	beq.w	80067d6 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2210      	movs	r2, #16
 80066a2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ae:	2b40      	cmp	r3, #64	; 0x40
 80066b0:	d158      	bne.n	8006764 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80066bc:	893b      	ldrh	r3, [r7, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 80c1 	beq.w	8006846 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066ca:	893a      	ldrh	r2, [r7, #8]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	f080 80ba 	bcs.w	8006846 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	893a      	ldrh	r2, [r7, #8]
 80066d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d12a      	bne.n	8006740 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0201 	bic.w	r2, r2, #1
 8006708:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006718:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0210 	bic.w	r2, r2, #16
 8006734:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673a:	4618      	mov	r0, r3
 800673c:	f7fb fd53 	bl	80021e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800674c:	b29b      	uxth	r3, r3
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	b29b      	uxth	r3, r3
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f893 	bl	8006880 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800675a:	e074      	b.n	8006846 <HAL_UART_IRQHandler+0x3f2>
 800675c:	04000120 	.word	0x04000120
 8006760:	080070d9 	.word	0x080070d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006770:	b29b      	uxth	r3, r3
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800677c:	b29b      	uxth	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d063      	beq.n	800684a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8006782:	897b      	ldrh	r3, [r7, #10]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d060      	beq.n	800684a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006796:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0201 	bic.w	r2, r2, #1
 80067a6:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0210 	bic.w	r2, r2, #16
 80067c8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067ca:	897b      	ldrh	r3, [r7, #10]
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f856 	bl	8006880 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80067d4:	e039      	b.n	800684a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00d      	beq.n	80067fc <HAL_UART_IRQHandler+0x3a8>
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d008      	beq.n	80067fc <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80067f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fc9e 	bl	8007136 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067fa:	e029      	b.n	8006850 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00d      	beq.n	8006822 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680c:	2b00      	cmp	r3, #0
 800680e:	d008      	beq.n	8006822 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01a      	beq.n	800684e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	4798      	blx	r3
    }
    return;
 8006820:	e015      	b.n	800684e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006828:	2b00      	cmp	r3, #0
 800682a:	d011      	beq.n	8006850 <HAL_UART_IRQHandler+0x3fc>
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00c      	beq.n	8006850 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fc64 	bl	8007104 <UART_EndTransmit_IT>
    return;
 800683c:	e008      	b.n	8006850 <HAL_UART_IRQHandler+0x3fc>
      return;
 800683e:	bf00      	nop
 8006840:	e006      	b.n	8006850 <HAL_UART_IRQHandler+0x3fc>
    return;
 8006842:	bf00      	nop
 8006844:	e004      	b.n	8006850 <HAL_UART_IRQHandler+0x3fc>
      return;
 8006846:	bf00      	nop
 8006848:	e002      	b.n	8006850 <HAL_UART_IRQHandler+0x3fc>
      return;
 800684a:	bf00      	nop
 800684c:	e000      	b.n	8006850 <HAL_UART_IRQHandler+0x3fc>
    return;
 800684e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006850:	3720      	adds	r7, #32
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop

08006858 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006898:	b5b0      	push	{r4, r5, r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	431a      	orrs	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4bad      	ldr	r3, [pc, #692]	; (8006b78 <UART_SetConfig+0x2e0>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6812      	ldr	r2, [r2, #0]
 80068ca:	69f9      	ldr	r1, [r7, #28]
 80068cc:	430b      	orrs	r3, r1
 80068ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4aa2      	ldr	r2, [pc, #648]	; (8006b7c <UART_SetConfig+0x2e4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69fa      	ldr	r2, [r7, #28]
 8006910:	430a      	orrs	r2, r1
 8006912:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a99      	ldr	r2, [pc, #612]	; (8006b80 <UART_SetConfig+0x2e8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d121      	bne.n	8006962 <UART_SetConfig+0xca>
 800691e:	4b99      	ldr	r3, [pc, #612]	; (8006b84 <UART_SetConfig+0x2ec>)
 8006920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006924:	f003 0303 	and.w	r3, r3, #3
 8006928:	2b03      	cmp	r3, #3
 800692a:	d817      	bhi.n	800695c <UART_SetConfig+0xc4>
 800692c:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0x9c>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	08006945 	.word	0x08006945
 8006938:	08006951 	.word	0x08006951
 800693c:	0800694b 	.word	0x0800694b
 8006940:	08006957 	.word	0x08006957
 8006944:	2301      	movs	r3, #1
 8006946:	76fb      	strb	r3, [r7, #27]
 8006948:	e0e7      	b.n	8006b1a <UART_SetConfig+0x282>
 800694a:	2302      	movs	r3, #2
 800694c:	76fb      	strb	r3, [r7, #27]
 800694e:	e0e4      	b.n	8006b1a <UART_SetConfig+0x282>
 8006950:	2304      	movs	r3, #4
 8006952:	76fb      	strb	r3, [r7, #27]
 8006954:	e0e1      	b.n	8006b1a <UART_SetConfig+0x282>
 8006956:	2308      	movs	r3, #8
 8006958:	76fb      	strb	r3, [r7, #27]
 800695a:	e0de      	b.n	8006b1a <UART_SetConfig+0x282>
 800695c:	2310      	movs	r3, #16
 800695e:	76fb      	strb	r3, [r7, #27]
 8006960:	e0db      	b.n	8006b1a <UART_SetConfig+0x282>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a88      	ldr	r2, [pc, #544]	; (8006b88 <UART_SetConfig+0x2f0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d132      	bne.n	80069d2 <UART_SetConfig+0x13a>
 800696c:	4b85      	ldr	r3, [pc, #532]	; (8006b84 <UART_SetConfig+0x2ec>)
 800696e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006972:	f003 030c 	and.w	r3, r3, #12
 8006976:	2b0c      	cmp	r3, #12
 8006978:	d828      	bhi.n	80069cc <UART_SetConfig+0x134>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <UART_SetConfig+0xe8>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	080069b5 	.word	0x080069b5
 8006984:	080069cd 	.word	0x080069cd
 8006988:	080069cd 	.word	0x080069cd
 800698c:	080069cd 	.word	0x080069cd
 8006990:	080069c1 	.word	0x080069c1
 8006994:	080069cd 	.word	0x080069cd
 8006998:	080069cd 	.word	0x080069cd
 800699c:	080069cd 	.word	0x080069cd
 80069a0:	080069bb 	.word	0x080069bb
 80069a4:	080069cd 	.word	0x080069cd
 80069a8:	080069cd 	.word	0x080069cd
 80069ac:	080069cd 	.word	0x080069cd
 80069b0:	080069c7 	.word	0x080069c7
 80069b4:	2300      	movs	r3, #0
 80069b6:	76fb      	strb	r3, [r7, #27]
 80069b8:	e0af      	b.n	8006b1a <UART_SetConfig+0x282>
 80069ba:	2302      	movs	r3, #2
 80069bc:	76fb      	strb	r3, [r7, #27]
 80069be:	e0ac      	b.n	8006b1a <UART_SetConfig+0x282>
 80069c0:	2304      	movs	r3, #4
 80069c2:	76fb      	strb	r3, [r7, #27]
 80069c4:	e0a9      	b.n	8006b1a <UART_SetConfig+0x282>
 80069c6:	2308      	movs	r3, #8
 80069c8:	76fb      	strb	r3, [r7, #27]
 80069ca:	e0a6      	b.n	8006b1a <UART_SetConfig+0x282>
 80069cc:	2310      	movs	r3, #16
 80069ce:	76fb      	strb	r3, [r7, #27]
 80069d0:	e0a3      	b.n	8006b1a <UART_SetConfig+0x282>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a6d      	ldr	r2, [pc, #436]	; (8006b8c <UART_SetConfig+0x2f4>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d120      	bne.n	8006a1e <UART_SetConfig+0x186>
 80069dc:	4b69      	ldr	r3, [pc, #420]	; (8006b84 <UART_SetConfig+0x2ec>)
 80069de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069e6:	2b30      	cmp	r3, #48	; 0x30
 80069e8:	d013      	beq.n	8006a12 <UART_SetConfig+0x17a>
 80069ea:	2b30      	cmp	r3, #48	; 0x30
 80069ec:	d814      	bhi.n	8006a18 <UART_SetConfig+0x180>
 80069ee:	2b20      	cmp	r3, #32
 80069f0:	d009      	beq.n	8006a06 <UART_SetConfig+0x16e>
 80069f2:	2b20      	cmp	r3, #32
 80069f4:	d810      	bhi.n	8006a18 <UART_SetConfig+0x180>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <UART_SetConfig+0x168>
 80069fa:	2b10      	cmp	r3, #16
 80069fc:	d006      	beq.n	8006a0c <UART_SetConfig+0x174>
 80069fe:	e00b      	b.n	8006a18 <UART_SetConfig+0x180>
 8006a00:	2300      	movs	r3, #0
 8006a02:	76fb      	strb	r3, [r7, #27]
 8006a04:	e089      	b.n	8006b1a <UART_SetConfig+0x282>
 8006a06:	2302      	movs	r3, #2
 8006a08:	76fb      	strb	r3, [r7, #27]
 8006a0a:	e086      	b.n	8006b1a <UART_SetConfig+0x282>
 8006a0c:	2304      	movs	r3, #4
 8006a0e:	76fb      	strb	r3, [r7, #27]
 8006a10:	e083      	b.n	8006b1a <UART_SetConfig+0x282>
 8006a12:	2308      	movs	r3, #8
 8006a14:	76fb      	strb	r3, [r7, #27]
 8006a16:	e080      	b.n	8006b1a <UART_SetConfig+0x282>
 8006a18:	2310      	movs	r3, #16
 8006a1a:	76fb      	strb	r3, [r7, #27]
 8006a1c:	e07d      	b.n	8006b1a <UART_SetConfig+0x282>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a5b      	ldr	r2, [pc, #364]	; (8006b90 <UART_SetConfig+0x2f8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d120      	bne.n	8006a6a <UART_SetConfig+0x1d2>
 8006a28:	4b56      	ldr	r3, [pc, #344]	; (8006b84 <UART_SetConfig+0x2ec>)
 8006a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a32:	2bc0      	cmp	r3, #192	; 0xc0
 8006a34:	d013      	beq.n	8006a5e <UART_SetConfig+0x1c6>
 8006a36:	2bc0      	cmp	r3, #192	; 0xc0
 8006a38:	d814      	bhi.n	8006a64 <UART_SetConfig+0x1cc>
 8006a3a:	2b80      	cmp	r3, #128	; 0x80
 8006a3c:	d009      	beq.n	8006a52 <UART_SetConfig+0x1ba>
 8006a3e:	2b80      	cmp	r3, #128	; 0x80
 8006a40:	d810      	bhi.n	8006a64 <UART_SetConfig+0x1cc>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <UART_SetConfig+0x1b4>
 8006a46:	2b40      	cmp	r3, #64	; 0x40
 8006a48:	d006      	beq.n	8006a58 <UART_SetConfig+0x1c0>
 8006a4a:	e00b      	b.n	8006a64 <UART_SetConfig+0x1cc>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	76fb      	strb	r3, [r7, #27]
 8006a50:	e063      	b.n	8006b1a <UART_SetConfig+0x282>
 8006a52:	2302      	movs	r3, #2
 8006a54:	76fb      	strb	r3, [r7, #27]
 8006a56:	e060      	b.n	8006b1a <UART_SetConfig+0x282>
 8006a58:	2304      	movs	r3, #4
 8006a5a:	76fb      	strb	r3, [r7, #27]
 8006a5c:	e05d      	b.n	8006b1a <UART_SetConfig+0x282>
 8006a5e:	2308      	movs	r3, #8
 8006a60:	76fb      	strb	r3, [r7, #27]
 8006a62:	e05a      	b.n	8006b1a <UART_SetConfig+0x282>
 8006a64:	2310      	movs	r3, #16
 8006a66:	76fb      	strb	r3, [r7, #27]
 8006a68:	e057      	b.n	8006b1a <UART_SetConfig+0x282>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a49      	ldr	r2, [pc, #292]	; (8006b94 <UART_SetConfig+0x2fc>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d125      	bne.n	8006ac0 <UART_SetConfig+0x228>
 8006a74:	4b43      	ldr	r3, [pc, #268]	; (8006b84 <UART_SetConfig+0x2ec>)
 8006a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a82:	d017      	beq.n	8006ab4 <UART_SetConfig+0x21c>
 8006a84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a88:	d817      	bhi.n	8006aba <UART_SetConfig+0x222>
 8006a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a8e:	d00b      	beq.n	8006aa8 <UART_SetConfig+0x210>
 8006a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a94:	d811      	bhi.n	8006aba <UART_SetConfig+0x222>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <UART_SetConfig+0x20a>
 8006a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9e:	d006      	beq.n	8006aae <UART_SetConfig+0x216>
 8006aa0:	e00b      	b.n	8006aba <UART_SetConfig+0x222>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	76fb      	strb	r3, [r7, #27]
 8006aa6:	e038      	b.n	8006b1a <UART_SetConfig+0x282>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	76fb      	strb	r3, [r7, #27]
 8006aac:	e035      	b.n	8006b1a <UART_SetConfig+0x282>
 8006aae:	2304      	movs	r3, #4
 8006ab0:	76fb      	strb	r3, [r7, #27]
 8006ab2:	e032      	b.n	8006b1a <UART_SetConfig+0x282>
 8006ab4:	2308      	movs	r3, #8
 8006ab6:	76fb      	strb	r3, [r7, #27]
 8006ab8:	e02f      	b.n	8006b1a <UART_SetConfig+0x282>
 8006aba:	2310      	movs	r3, #16
 8006abc:	76fb      	strb	r3, [r7, #27]
 8006abe:	e02c      	b.n	8006b1a <UART_SetConfig+0x282>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a2d      	ldr	r2, [pc, #180]	; (8006b7c <UART_SetConfig+0x2e4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d125      	bne.n	8006b16 <UART_SetConfig+0x27e>
 8006aca:	4b2e      	ldr	r3, [pc, #184]	; (8006b84 <UART_SetConfig+0x2ec>)
 8006acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ad4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ad8:	d017      	beq.n	8006b0a <UART_SetConfig+0x272>
 8006ada:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ade:	d817      	bhi.n	8006b10 <UART_SetConfig+0x278>
 8006ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ae4:	d00b      	beq.n	8006afe <UART_SetConfig+0x266>
 8006ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aea:	d811      	bhi.n	8006b10 <UART_SetConfig+0x278>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <UART_SetConfig+0x260>
 8006af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af4:	d006      	beq.n	8006b04 <UART_SetConfig+0x26c>
 8006af6:	e00b      	b.n	8006b10 <UART_SetConfig+0x278>
 8006af8:	2300      	movs	r3, #0
 8006afa:	76fb      	strb	r3, [r7, #27]
 8006afc:	e00d      	b.n	8006b1a <UART_SetConfig+0x282>
 8006afe:	2302      	movs	r3, #2
 8006b00:	76fb      	strb	r3, [r7, #27]
 8006b02:	e00a      	b.n	8006b1a <UART_SetConfig+0x282>
 8006b04:	2304      	movs	r3, #4
 8006b06:	76fb      	strb	r3, [r7, #27]
 8006b08:	e007      	b.n	8006b1a <UART_SetConfig+0x282>
 8006b0a:	2308      	movs	r3, #8
 8006b0c:	76fb      	strb	r3, [r7, #27]
 8006b0e:	e004      	b.n	8006b1a <UART_SetConfig+0x282>
 8006b10:	2310      	movs	r3, #16
 8006b12:	76fb      	strb	r3, [r7, #27]
 8006b14:	e001      	b.n	8006b1a <UART_SetConfig+0x282>
 8006b16:	2310      	movs	r3, #16
 8006b18:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a17      	ldr	r2, [pc, #92]	; (8006b7c <UART_SetConfig+0x2e4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	f040 8087 	bne.w	8006c34 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b26:	7efb      	ldrb	r3, [r7, #27]
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d837      	bhi.n	8006b9c <UART_SetConfig+0x304>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <UART_SetConfig+0x29c>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006b59 	.word	0x08006b59
 8006b38:	08006b9d 	.word	0x08006b9d
 8006b3c:	08006b61 	.word	0x08006b61
 8006b40:	08006b9d 	.word	0x08006b9d
 8006b44:	08006b67 	.word	0x08006b67
 8006b48:	08006b9d 	.word	0x08006b9d
 8006b4c:	08006b9d 	.word	0x08006b9d
 8006b50:	08006b9d 	.word	0x08006b9d
 8006b54:	08006b6f 	.word	0x08006b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b58:	f7fd f8d4 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8006b5c:	6178      	str	r0, [r7, #20]
        break;
 8006b5e:	e022      	b.n	8006ba6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b60:	4b0d      	ldr	r3, [pc, #52]	; (8006b98 <UART_SetConfig+0x300>)
 8006b62:	617b      	str	r3, [r7, #20]
        break;
 8006b64:	e01f      	b.n	8006ba6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b66:	f7fd f835 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8006b6a:	6178      	str	r0, [r7, #20]
        break;
 8006b6c:	e01b      	b.n	8006ba6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b72:	617b      	str	r3, [r7, #20]
        break;
 8006b74:	e017      	b.n	8006ba6 <UART_SetConfig+0x30e>
 8006b76:	bf00      	nop
 8006b78:	efff69f3 	.word	0xefff69f3
 8006b7c:	40008000 	.word	0x40008000
 8006b80:	40013800 	.word	0x40013800
 8006b84:	40021000 	.word	0x40021000
 8006b88:	40004400 	.word	0x40004400
 8006b8c:	40004800 	.word	0x40004800
 8006b90:	40004c00 	.word	0x40004c00
 8006b94:	40005000 	.word	0x40005000
 8006b98:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	76bb      	strb	r3, [r7, #26]
        break;
 8006ba4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 80f1 	beq.w	8006d90 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	4413      	add	r3, r2
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d305      	bcc.n	8006bca <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d902      	bls.n	8006bd0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	76bb      	strb	r3, [r7, #26]
 8006bce:	e0df      	b.n	8006d90 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f04f 0100 	mov.w	r1, #0
 8006bd8:	f04f 0200 	mov.w	r2, #0
 8006bdc:	f04f 0300 	mov.w	r3, #0
 8006be0:	020b      	lsls	r3, r1, #8
 8006be2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006be6:	0202      	lsls	r2, r0, #8
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	6849      	ldr	r1, [r1, #4]
 8006bec:	0849      	lsrs	r1, r1, #1
 8006bee:	4608      	mov	r0, r1
 8006bf0:	f04f 0100 	mov.w	r1, #0
 8006bf4:	1814      	adds	r4, r2, r0
 8006bf6:	eb43 0501 	adc.w	r5, r3, r1
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	4620      	mov	r0, r4
 8006c06:	4629      	mov	r1, r5
 8006c08:	f7fa f81e 	bl	8000c48 <__aeabi_uldivmod>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4613      	mov	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c1a:	d308      	bcc.n	8006c2e <UART_SetConfig+0x396>
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c22:	d204      	bcs.n	8006c2e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	60da      	str	r2, [r3, #12]
 8006c2c:	e0b0      	b.n	8006d90 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	76bb      	strb	r3, [r7, #26]
 8006c32:	e0ad      	b.n	8006d90 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c3c:	d15c      	bne.n	8006cf8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006c3e:	7efb      	ldrb	r3, [r7, #27]
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	d828      	bhi.n	8006c96 <UART_SetConfig+0x3fe>
 8006c44:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <UART_SetConfig+0x3b4>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006c71 	.word	0x08006c71
 8006c50:	08006c79 	.word	0x08006c79
 8006c54:	08006c81 	.word	0x08006c81
 8006c58:	08006c97 	.word	0x08006c97
 8006c5c:	08006c87 	.word	0x08006c87
 8006c60:	08006c97 	.word	0x08006c97
 8006c64:	08006c97 	.word	0x08006c97
 8006c68:	08006c97 	.word	0x08006c97
 8006c6c:	08006c8f 	.word	0x08006c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c70:	f7fd f848 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8006c74:	6178      	str	r0, [r7, #20]
        break;
 8006c76:	e013      	b.n	8006ca0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c78:	f7fd f85a 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 8006c7c:	6178      	str	r0, [r7, #20]
        break;
 8006c7e:	e00f      	b.n	8006ca0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c80:	4b49      	ldr	r3, [pc, #292]	; (8006da8 <UART_SetConfig+0x510>)
 8006c82:	617b      	str	r3, [r7, #20]
        break;
 8006c84:	e00c      	b.n	8006ca0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c86:	f7fc ffa5 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8006c8a:	6178      	str	r0, [r7, #20]
        break;
 8006c8c:	e008      	b.n	8006ca0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c92:	617b      	str	r3, [r7, #20]
        break;
 8006c94:	e004      	b.n	8006ca0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	76bb      	strb	r3, [r7, #26]
        break;
 8006c9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d074      	beq.n	8006d90 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	005a      	lsls	r2, r3, #1
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	085b      	lsrs	r3, r3, #1
 8006cb0:	441a      	add	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2b0f      	cmp	r3, #15
 8006cc2:	d916      	bls.n	8006cf2 <UART_SetConfig+0x45a>
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cca:	d212      	bcs.n	8006cf2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f023 030f 	bic.w	r3, r3, #15
 8006cd4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	085b      	lsrs	r3, r3, #1
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f003 0307 	and.w	r3, r3, #7
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	89fb      	ldrh	r3, [r7, #14]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	89fa      	ldrh	r2, [r7, #14]
 8006cee:	60da      	str	r2, [r3, #12]
 8006cf0:	e04e      	b.n	8006d90 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	76bb      	strb	r3, [r7, #26]
 8006cf6:	e04b      	b.n	8006d90 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cf8:	7efb      	ldrb	r3, [r7, #27]
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	d827      	bhi.n	8006d4e <UART_SetConfig+0x4b6>
 8006cfe:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <UART_SetConfig+0x46c>)
 8006d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d04:	08006d29 	.word	0x08006d29
 8006d08:	08006d31 	.word	0x08006d31
 8006d0c:	08006d39 	.word	0x08006d39
 8006d10:	08006d4f 	.word	0x08006d4f
 8006d14:	08006d3f 	.word	0x08006d3f
 8006d18:	08006d4f 	.word	0x08006d4f
 8006d1c:	08006d4f 	.word	0x08006d4f
 8006d20:	08006d4f 	.word	0x08006d4f
 8006d24:	08006d47 	.word	0x08006d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d28:	f7fc ffec 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8006d2c:	6178      	str	r0, [r7, #20]
        break;
 8006d2e:	e013      	b.n	8006d58 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d30:	f7fc fffe 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 8006d34:	6178      	str	r0, [r7, #20]
        break;
 8006d36:	e00f      	b.n	8006d58 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d38:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <UART_SetConfig+0x510>)
 8006d3a:	617b      	str	r3, [r7, #20]
        break;
 8006d3c:	e00c      	b.n	8006d58 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d3e:	f7fc ff49 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8006d42:	6178      	str	r0, [r7, #20]
        break;
 8006d44:	e008      	b.n	8006d58 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d4a:	617b      	str	r3, [r7, #20]
        break;
 8006d4c:	e004      	b.n	8006d58 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	76bb      	strb	r3, [r7, #26]
        break;
 8006d56:	bf00      	nop
    }

    if (pclk != 0U)
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d018      	beq.n	8006d90 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	085a      	lsrs	r2, r3, #1
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	441a      	add	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	2b0f      	cmp	r3, #15
 8006d78:	d908      	bls.n	8006d8c <UART_SetConfig+0x4f4>
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d80:	d204      	bcs.n	8006d8c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	60da      	str	r2, [r3, #12]
 8006d8a:	e001      	b.n	8006d90 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006d9c:	7ebb      	ldrb	r3, [r7, #26]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3720      	adds	r7, #32
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bdb0      	pop	{r4, r5, r7, pc}
 8006da6:	bf00      	nop
 8006da8:	00f42400 	.word	0x00f42400

08006dac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	f003 0308 	and.w	r3, r3, #8
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	f003 0310 	and.w	r3, r3, #16
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00a      	beq.n	8006e5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01a      	beq.n	8006ec2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eaa:	d10a      	bne.n	8006ec2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00a      	beq.n	8006ee4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	605a      	str	r2, [r3, #4]
  }
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af02      	add	r7, sp, #8
 8006ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f00:	f7fb f830 	bl	8001f64 <HAL_GetTick>
 8006f04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0308 	and.w	r3, r3, #8
 8006f10:	2b08      	cmp	r3, #8
 8006f12:	d10e      	bne.n	8006f32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f82d 	bl	8006f82 <UART_WaitOnFlagUntilTimeout>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e023      	b.n	8006f7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d10e      	bne.n	8006f5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f817 	bl	8006f82 <UART_WaitOnFlagUntilTimeout>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e00d      	b.n	8006f7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2220      	movs	r2, #32
 8006f62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2220      	movs	r2, #32
 8006f68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	60f8      	str	r0, [r7, #12]
 8006f8a:	60b9      	str	r1, [r7, #8]
 8006f8c:	603b      	str	r3, [r7, #0]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f92:	e05e      	b.n	8007052 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9a:	d05a      	beq.n	8007052 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f9c:	f7fa ffe2 	bl	8001f64 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d302      	bcc.n	8006fb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d11b      	bne.n	8006fea <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006fc0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0201 	bic.w	r2, r2, #1
 8006fd0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e043      	b.n	8007072 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d02c      	beq.n	8007052 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007006:	d124      	bne.n	8007052 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007010:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007020:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0201 	bic.w	r2, r2, #1
 8007030:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2220      	movs	r2, #32
 8007036:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2220      	movs	r2, #32
 800703c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2220      	movs	r2, #32
 8007042:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e00f      	b.n	8007072 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69da      	ldr	r2, [r3, #28]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	4013      	ands	r3, r2
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	429a      	cmp	r2, r3
 8007060:	bf0c      	ite	eq
 8007062:	2301      	moveq	r3, #1
 8007064:	2300      	movne	r3, #0
 8007066:	b2db      	uxtb	r3, r3
 8007068:	461a      	mov	r2, r3
 800706a:	79fb      	ldrb	r3, [r7, #7]
 800706c:	429a      	cmp	r2, r3
 800706e:	d091      	beq.n	8006f94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007090:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 0201 	bic.w	r2, r2, #1
 80070a0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d107      	bne.n	80070ba <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0210 	bic.w	r2, r2, #16
 80070b8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2220      	movs	r2, #32
 80070be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	665a      	str	r2, [r3, #100]	; 0x64
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f7ff fbb8 	bl	800686c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070fc:	bf00      	nop
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800711a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2220      	movs	r2, #32
 8007120:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff fb95 	bl	8006858 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800712e:	bf00      	nop
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
	...

0800714c <__errno>:
 800714c:	4b01      	ldr	r3, [pc, #4]	; (8007154 <__errno+0x8>)
 800714e:	6818      	ldr	r0, [r3, #0]
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	2000000c 	.word	0x2000000c

08007158 <__libc_init_array>:
 8007158:	b570      	push	{r4, r5, r6, lr}
 800715a:	4d0d      	ldr	r5, [pc, #52]	; (8007190 <__libc_init_array+0x38>)
 800715c:	4c0d      	ldr	r4, [pc, #52]	; (8007194 <__libc_init_array+0x3c>)
 800715e:	1b64      	subs	r4, r4, r5
 8007160:	10a4      	asrs	r4, r4, #2
 8007162:	2600      	movs	r6, #0
 8007164:	42a6      	cmp	r6, r4
 8007166:	d109      	bne.n	800717c <__libc_init_array+0x24>
 8007168:	4d0b      	ldr	r5, [pc, #44]	; (8007198 <__libc_init_array+0x40>)
 800716a:	4c0c      	ldr	r4, [pc, #48]	; (800719c <__libc_init_array+0x44>)
 800716c:	f003 ff8e 	bl	800b08c <_init>
 8007170:	1b64      	subs	r4, r4, r5
 8007172:	10a4      	asrs	r4, r4, #2
 8007174:	2600      	movs	r6, #0
 8007176:	42a6      	cmp	r6, r4
 8007178:	d105      	bne.n	8007186 <__libc_init_array+0x2e>
 800717a:	bd70      	pop	{r4, r5, r6, pc}
 800717c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007180:	4798      	blx	r3
 8007182:	3601      	adds	r6, #1
 8007184:	e7ee      	b.n	8007164 <__libc_init_array+0xc>
 8007186:	f855 3b04 	ldr.w	r3, [r5], #4
 800718a:	4798      	blx	r3
 800718c:	3601      	adds	r6, #1
 800718e:	e7f2      	b.n	8007176 <__libc_init_array+0x1e>
 8007190:	0800b710 	.word	0x0800b710
 8007194:	0800b710 	.word	0x0800b710
 8007198:	0800b710 	.word	0x0800b710
 800719c:	0800b714 	.word	0x0800b714

080071a0 <memset>:
 80071a0:	4402      	add	r2, r0
 80071a2:	4603      	mov	r3, r0
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d100      	bne.n	80071aa <memset+0xa>
 80071a8:	4770      	bx	lr
 80071aa:	f803 1b01 	strb.w	r1, [r3], #1
 80071ae:	e7f9      	b.n	80071a4 <memset+0x4>

080071b0 <__cvt>:
 80071b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071b4:	ec55 4b10 	vmov	r4, r5, d0
 80071b8:	2d00      	cmp	r5, #0
 80071ba:	460e      	mov	r6, r1
 80071bc:	4619      	mov	r1, r3
 80071be:	462b      	mov	r3, r5
 80071c0:	bfbb      	ittet	lt
 80071c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071c6:	461d      	movlt	r5, r3
 80071c8:	2300      	movge	r3, #0
 80071ca:	232d      	movlt	r3, #45	; 0x2d
 80071cc:	700b      	strb	r3, [r1, #0]
 80071ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071d4:	4691      	mov	r9, r2
 80071d6:	f023 0820 	bic.w	r8, r3, #32
 80071da:	bfbc      	itt	lt
 80071dc:	4622      	movlt	r2, r4
 80071de:	4614      	movlt	r4, r2
 80071e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071e4:	d005      	beq.n	80071f2 <__cvt+0x42>
 80071e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80071ea:	d100      	bne.n	80071ee <__cvt+0x3e>
 80071ec:	3601      	adds	r6, #1
 80071ee:	2102      	movs	r1, #2
 80071f0:	e000      	b.n	80071f4 <__cvt+0x44>
 80071f2:	2103      	movs	r1, #3
 80071f4:	ab03      	add	r3, sp, #12
 80071f6:	9301      	str	r3, [sp, #4]
 80071f8:	ab02      	add	r3, sp, #8
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	ec45 4b10 	vmov	d0, r4, r5
 8007200:	4653      	mov	r3, sl
 8007202:	4632      	mov	r2, r6
 8007204:	f000 fe18 	bl	8007e38 <_dtoa_r>
 8007208:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800720c:	4607      	mov	r7, r0
 800720e:	d102      	bne.n	8007216 <__cvt+0x66>
 8007210:	f019 0f01 	tst.w	r9, #1
 8007214:	d022      	beq.n	800725c <__cvt+0xac>
 8007216:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800721a:	eb07 0906 	add.w	r9, r7, r6
 800721e:	d110      	bne.n	8007242 <__cvt+0x92>
 8007220:	783b      	ldrb	r3, [r7, #0]
 8007222:	2b30      	cmp	r3, #48	; 0x30
 8007224:	d10a      	bne.n	800723c <__cvt+0x8c>
 8007226:	2200      	movs	r2, #0
 8007228:	2300      	movs	r3, #0
 800722a:	4620      	mov	r0, r4
 800722c:	4629      	mov	r1, r5
 800722e:	f7f9 fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007232:	b918      	cbnz	r0, 800723c <__cvt+0x8c>
 8007234:	f1c6 0601 	rsb	r6, r6, #1
 8007238:	f8ca 6000 	str.w	r6, [sl]
 800723c:	f8da 3000 	ldr.w	r3, [sl]
 8007240:	4499      	add	r9, r3
 8007242:	2200      	movs	r2, #0
 8007244:	2300      	movs	r3, #0
 8007246:	4620      	mov	r0, r4
 8007248:	4629      	mov	r1, r5
 800724a:	f7f9 fc3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800724e:	b108      	cbz	r0, 8007254 <__cvt+0xa4>
 8007250:	f8cd 900c 	str.w	r9, [sp, #12]
 8007254:	2230      	movs	r2, #48	; 0x30
 8007256:	9b03      	ldr	r3, [sp, #12]
 8007258:	454b      	cmp	r3, r9
 800725a:	d307      	bcc.n	800726c <__cvt+0xbc>
 800725c:	9b03      	ldr	r3, [sp, #12]
 800725e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007260:	1bdb      	subs	r3, r3, r7
 8007262:	4638      	mov	r0, r7
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	b004      	add	sp, #16
 8007268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726c:	1c59      	adds	r1, r3, #1
 800726e:	9103      	str	r1, [sp, #12]
 8007270:	701a      	strb	r2, [r3, #0]
 8007272:	e7f0      	b.n	8007256 <__cvt+0xa6>

08007274 <__exponent>:
 8007274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007276:	4603      	mov	r3, r0
 8007278:	2900      	cmp	r1, #0
 800727a:	bfb8      	it	lt
 800727c:	4249      	neglt	r1, r1
 800727e:	f803 2b02 	strb.w	r2, [r3], #2
 8007282:	bfb4      	ite	lt
 8007284:	222d      	movlt	r2, #45	; 0x2d
 8007286:	222b      	movge	r2, #43	; 0x2b
 8007288:	2909      	cmp	r1, #9
 800728a:	7042      	strb	r2, [r0, #1]
 800728c:	dd2a      	ble.n	80072e4 <__exponent+0x70>
 800728e:	f10d 0407 	add.w	r4, sp, #7
 8007292:	46a4      	mov	ip, r4
 8007294:	270a      	movs	r7, #10
 8007296:	46a6      	mov	lr, r4
 8007298:	460a      	mov	r2, r1
 800729a:	fb91 f6f7 	sdiv	r6, r1, r7
 800729e:	fb07 1516 	mls	r5, r7, r6, r1
 80072a2:	3530      	adds	r5, #48	; 0x30
 80072a4:	2a63      	cmp	r2, #99	; 0x63
 80072a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80072aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80072ae:	4631      	mov	r1, r6
 80072b0:	dcf1      	bgt.n	8007296 <__exponent+0x22>
 80072b2:	3130      	adds	r1, #48	; 0x30
 80072b4:	f1ae 0502 	sub.w	r5, lr, #2
 80072b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80072bc:	1c44      	adds	r4, r0, #1
 80072be:	4629      	mov	r1, r5
 80072c0:	4561      	cmp	r1, ip
 80072c2:	d30a      	bcc.n	80072da <__exponent+0x66>
 80072c4:	f10d 0209 	add.w	r2, sp, #9
 80072c8:	eba2 020e 	sub.w	r2, r2, lr
 80072cc:	4565      	cmp	r5, ip
 80072ce:	bf88      	it	hi
 80072d0:	2200      	movhi	r2, #0
 80072d2:	4413      	add	r3, r2
 80072d4:	1a18      	subs	r0, r3, r0
 80072d6:	b003      	add	sp, #12
 80072d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80072e2:	e7ed      	b.n	80072c0 <__exponent+0x4c>
 80072e4:	2330      	movs	r3, #48	; 0x30
 80072e6:	3130      	adds	r1, #48	; 0x30
 80072e8:	7083      	strb	r3, [r0, #2]
 80072ea:	70c1      	strb	r1, [r0, #3]
 80072ec:	1d03      	adds	r3, r0, #4
 80072ee:	e7f1      	b.n	80072d4 <__exponent+0x60>

080072f0 <_printf_float>:
 80072f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	ed2d 8b02 	vpush	{d8}
 80072f8:	b08d      	sub	sp, #52	; 0x34
 80072fa:	460c      	mov	r4, r1
 80072fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007300:	4616      	mov	r6, r2
 8007302:	461f      	mov	r7, r3
 8007304:	4605      	mov	r5, r0
 8007306:	f001 fd3b 	bl	8008d80 <_localeconv_r>
 800730a:	f8d0 a000 	ldr.w	sl, [r0]
 800730e:	4650      	mov	r0, sl
 8007310:	f7f8 ff5e 	bl	80001d0 <strlen>
 8007314:	2300      	movs	r3, #0
 8007316:	930a      	str	r3, [sp, #40]	; 0x28
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	9305      	str	r3, [sp, #20]
 800731c:	f8d8 3000 	ldr.w	r3, [r8]
 8007320:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007324:	3307      	adds	r3, #7
 8007326:	f023 0307 	bic.w	r3, r3, #7
 800732a:	f103 0208 	add.w	r2, r3, #8
 800732e:	f8c8 2000 	str.w	r2, [r8]
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800733a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800733e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007342:	9307      	str	r3, [sp, #28]
 8007344:	f8cd 8018 	str.w	r8, [sp, #24]
 8007348:	ee08 0a10 	vmov	s16, r0
 800734c:	4b9f      	ldr	r3, [pc, #636]	; (80075cc <_printf_float+0x2dc>)
 800734e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007352:	f04f 32ff 	mov.w	r2, #4294967295
 8007356:	f7f9 fbe9 	bl	8000b2c <__aeabi_dcmpun>
 800735a:	bb88      	cbnz	r0, 80073c0 <_printf_float+0xd0>
 800735c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007360:	4b9a      	ldr	r3, [pc, #616]	; (80075cc <_printf_float+0x2dc>)
 8007362:	f04f 32ff 	mov.w	r2, #4294967295
 8007366:	f7f9 fbc3 	bl	8000af0 <__aeabi_dcmple>
 800736a:	bb48      	cbnz	r0, 80073c0 <_printf_float+0xd0>
 800736c:	2200      	movs	r2, #0
 800736e:	2300      	movs	r3, #0
 8007370:	4640      	mov	r0, r8
 8007372:	4649      	mov	r1, r9
 8007374:	f7f9 fbb2 	bl	8000adc <__aeabi_dcmplt>
 8007378:	b110      	cbz	r0, 8007380 <_printf_float+0x90>
 800737a:	232d      	movs	r3, #45	; 0x2d
 800737c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007380:	4b93      	ldr	r3, [pc, #588]	; (80075d0 <_printf_float+0x2e0>)
 8007382:	4894      	ldr	r0, [pc, #592]	; (80075d4 <_printf_float+0x2e4>)
 8007384:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007388:	bf94      	ite	ls
 800738a:	4698      	movls	r8, r3
 800738c:	4680      	movhi	r8, r0
 800738e:	2303      	movs	r3, #3
 8007390:	6123      	str	r3, [r4, #16]
 8007392:	9b05      	ldr	r3, [sp, #20]
 8007394:	f023 0204 	bic.w	r2, r3, #4
 8007398:	6022      	str	r2, [r4, #0]
 800739a:	f04f 0900 	mov.w	r9, #0
 800739e:	9700      	str	r7, [sp, #0]
 80073a0:	4633      	mov	r3, r6
 80073a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80073a4:	4621      	mov	r1, r4
 80073a6:	4628      	mov	r0, r5
 80073a8:	f000 f9d8 	bl	800775c <_printf_common>
 80073ac:	3001      	adds	r0, #1
 80073ae:	f040 8090 	bne.w	80074d2 <_printf_float+0x1e2>
 80073b2:	f04f 30ff 	mov.w	r0, #4294967295
 80073b6:	b00d      	add	sp, #52	; 0x34
 80073b8:	ecbd 8b02 	vpop	{d8}
 80073bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c0:	4642      	mov	r2, r8
 80073c2:	464b      	mov	r3, r9
 80073c4:	4640      	mov	r0, r8
 80073c6:	4649      	mov	r1, r9
 80073c8:	f7f9 fbb0 	bl	8000b2c <__aeabi_dcmpun>
 80073cc:	b140      	cbz	r0, 80073e0 <_printf_float+0xf0>
 80073ce:	464b      	mov	r3, r9
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	bfbc      	itt	lt
 80073d4:	232d      	movlt	r3, #45	; 0x2d
 80073d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073da:	487f      	ldr	r0, [pc, #508]	; (80075d8 <_printf_float+0x2e8>)
 80073dc:	4b7f      	ldr	r3, [pc, #508]	; (80075dc <_printf_float+0x2ec>)
 80073de:	e7d1      	b.n	8007384 <_printf_float+0x94>
 80073e0:	6863      	ldr	r3, [r4, #4]
 80073e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80073e6:	9206      	str	r2, [sp, #24]
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	d13f      	bne.n	800746c <_printf_float+0x17c>
 80073ec:	2306      	movs	r3, #6
 80073ee:	6063      	str	r3, [r4, #4]
 80073f0:	9b05      	ldr	r3, [sp, #20]
 80073f2:	6861      	ldr	r1, [r4, #4]
 80073f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80073f8:	2300      	movs	r3, #0
 80073fa:	9303      	str	r3, [sp, #12]
 80073fc:	ab0a      	add	r3, sp, #40	; 0x28
 80073fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007402:	ab09      	add	r3, sp, #36	; 0x24
 8007404:	ec49 8b10 	vmov	d0, r8, r9
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	6022      	str	r2, [r4, #0]
 800740c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007410:	4628      	mov	r0, r5
 8007412:	f7ff fecd 	bl	80071b0 <__cvt>
 8007416:	9b06      	ldr	r3, [sp, #24]
 8007418:	9909      	ldr	r1, [sp, #36]	; 0x24
 800741a:	2b47      	cmp	r3, #71	; 0x47
 800741c:	4680      	mov	r8, r0
 800741e:	d108      	bne.n	8007432 <_printf_float+0x142>
 8007420:	1cc8      	adds	r0, r1, #3
 8007422:	db02      	blt.n	800742a <_printf_float+0x13a>
 8007424:	6863      	ldr	r3, [r4, #4]
 8007426:	4299      	cmp	r1, r3
 8007428:	dd41      	ble.n	80074ae <_printf_float+0x1be>
 800742a:	f1ab 0b02 	sub.w	fp, fp, #2
 800742e:	fa5f fb8b 	uxtb.w	fp, fp
 8007432:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007436:	d820      	bhi.n	800747a <_printf_float+0x18a>
 8007438:	3901      	subs	r1, #1
 800743a:	465a      	mov	r2, fp
 800743c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007440:	9109      	str	r1, [sp, #36]	; 0x24
 8007442:	f7ff ff17 	bl	8007274 <__exponent>
 8007446:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007448:	1813      	adds	r3, r2, r0
 800744a:	2a01      	cmp	r2, #1
 800744c:	4681      	mov	r9, r0
 800744e:	6123      	str	r3, [r4, #16]
 8007450:	dc02      	bgt.n	8007458 <_printf_float+0x168>
 8007452:	6822      	ldr	r2, [r4, #0]
 8007454:	07d2      	lsls	r2, r2, #31
 8007456:	d501      	bpl.n	800745c <_printf_float+0x16c>
 8007458:	3301      	adds	r3, #1
 800745a:	6123      	str	r3, [r4, #16]
 800745c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007460:	2b00      	cmp	r3, #0
 8007462:	d09c      	beq.n	800739e <_printf_float+0xae>
 8007464:	232d      	movs	r3, #45	; 0x2d
 8007466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800746a:	e798      	b.n	800739e <_printf_float+0xae>
 800746c:	9a06      	ldr	r2, [sp, #24]
 800746e:	2a47      	cmp	r2, #71	; 0x47
 8007470:	d1be      	bne.n	80073f0 <_printf_float+0x100>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1bc      	bne.n	80073f0 <_printf_float+0x100>
 8007476:	2301      	movs	r3, #1
 8007478:	e7b9      	b.n	80073ee <_printf_float+0xfe>
 800747a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800747e:	d118      	bne.n	80074b2 <_printf_float+0x1c2>
 8007480:	2900      	cmp	r1, #0
 8007482:	6863      	ldr	r3, [r4, #4]
 8007484:	dd0b      	ble.n	800749e <_printf_float+0x1ae>
 8007486:	6121      	str	r1, [r4, #16]
 8007488:	b913      	cbnz	r3, 8007490 <_printf_float+0x1a0>
 800748a:	6822      	ldr	r2, [r4, #0]
 800748c:	07d0      	lsls	r0, r2, #31
 800748e:	d502      	bpl.n	8007496 <_printf_float+0x1a6>
 8007490:	3301      	adds	r3, #1
 8007492:	440b      	add	r3, r1
 8007494:	6123      	str	r3, [r4, #16]
 8007496:	65a1      	str	r1, [r4, #88]	; 0x58
 8007498:	f04f 0900 	mov.w	r9, #0
 800749c:	e7de      	b.n	800745c <_printf_float+0x16c>
 800749e:	b913      	cbnz	r3, 80074a6 <_printf_float+0x1b6>
 80074a0:	6822      	ldr	r2, [r4, #0]
 80074a2:	07d2      	lsls	r2, r2, #31
 80074a4:	d501      	bpl.n	80074aa <_printf_float+0x1ba>
 80074a6:	3302      	adds	r3, #2
 80074a8:	e7f4      	b.n	8007494 <_printf_float+0x1a4>
 80074aa:	2301      	movs	r3, #1
 80074ac:	e7f2      	b.n	8007494 <_printf_float+0x1a4>
 80074ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80074b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b4:	4299      	cmp	r1, r3
 80074b6:	db05      	blt.n	80074c4 <_printf_float+0x1d4>
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	6121      	str	r1, [r4, #16]
 80074bc:	07d8      	lsls	r0, r3, #31
 80074be:	d5ea      	bpl.n	8007496 <_printf_float+0x1a6>
 80074c0:	1c4b      	adds	r3, r1, #1
 80074c2:	e7e7      	b.n	8007494 <_printf_float+0x1a4>
 80074c4:	2900      	cmp	r1, #0
 80074c6:	bfd4      	ite	le
 80074c8:	f1c1 0202 	rsble	r2, r1, #2
 80074cc:	2201      	movgt	r2, #1
 80074ce:	4413      	add	r3, r2
 80074d0:	e7e0      	b.n	8007494 <_printf_float+0x1a4>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	055a      	lsls	r2, r3, #21
 80074d6:	d407      	bmi.n	80074e8 <_printf_float+0x1f8>
 80074d8:	6923      	ldr	r3, [r4, #16]
 80074da:	4642      	mov	r2, r8
 80074dc:	4631      	mov	r1, r6
 80074de:	4628      	mov	r0, r5
 80074e0:	47b8      	blx	r7
 80074e2:	3001      	adds	r0, #1
 80074e4:	d12c      	bne.n	8007540 <_printf_float+0x250>
 80074e6:	e764      	b.n	80073b2 <_printf_float+0xc2>
 80074e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074ec:	f240 80e0 	bls.w	80076b0 <_printf_float+0x3c0>
 80074f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074f4:	2200      	movs	r2, #0
 80074f6:	2300      	movs	r3, #0
 80074f8:	f7f9 fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d034      	beq.n	800756a <_printf_float+0x27a>
 8007500:	4a37      	ldr	r2, [pc, #220]	; (80075e0 <_printf_float+0x2f0>)
 8007502:	2301      	movs	r3, #1
 8007504:	4631      	mov	r1, r6
 8007506:	4628      	mov	r0, r5
 8007508:	47b8      	blx	r7
 800750a:	3001      	adds	r0, #1
 800750c:	f43f af51 	beq.w	80073b2 <_printf_float+0xc2>
 8007510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007514:	429a      	cmp	r2, r3
 8007516:	db02      	blt.n	800751e <_printf_float+0x22e>
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	07d8      	lsls	r0, r3, #31
 800751c:	d510      	bpl.n	8007540 <_printf_float+0x250>
 800751e:	ee18 3a10 	vmov	r3, s16
 8007522:	4652      	mov	r2, sl
 8007524:	4631      	mov	r1, r6
 8007526:	4628      	mov	r0, r5
 8007528:	47b8      	blx	r7
 800752a:	3001      	adds	r0, #1
 800752c:	f43f af41 	beq.w	80073b2 <_printf_float+0xc2>
 8007530:	f04f 0800 	mov.w	r8, #0
 8007534:	f104 091a 	add.w	r9, r4, #26
 8007538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800753a:	3b01      	subs	r3, #1
 800753c:	4543      	cmp	r3, r8
 800753e:	dc09      	bgt.n	8007554 <_printf_float+0x264>
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	079b      	lsls	r3, r3, #30
 8007544:	f100 8105 	bmi.w	8007752 <_printf_float+0x462>
 8007548:	68e0      	ldr	r0, [r4, #12]
 800754a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800754c:	4298      	cmp	r0, r3
 800754e:	bfb8      	it	lt
 8007550:	4618      	movlt	r0, r3
 8007552:	e730      	b.n	80073b6 <_printf_float+0xc6>
 8007554:	2301      	movs	r3, #1
 8007556:	464a      	mov	r2, r9
 8007558:	4631      	mov	r1, r6
 800755a:	4628      	mov	r0, r5
 800755c:	47b8      	blx	r7
 800755e:	3001      	adds	r0, #1
 8007560:	f43f af27 	beq.w	80073b2 <_printf_float+0xc2>
 8007564:	f108 0801 	add.w	r8, r8, #1
 8007568:	e7e6      	b.n	8007538 <_printf_float+0x248>
 800756a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800756c:	2b00      	cmp	r3, #0
 800756e:	dc39      	bgt.n	80075e4 <_printf_float+0x2f4>
 8007570:	4a1b      	ldr	r2, [pc, #108]	; (80075e0 <_printf_float+0x2f0>)
 8007572:	2301      	movs	r3, #1
 8007574:	4631      	mov	r1, r6
 8007576:	4628      	mov	r0, r5
 8007578:	47b8      	blx	r7
 800757a:	3001      	adds	r0, #1
 800757c:	f43f af19 	beq.w	80073b2 <_printf_float+0xc2>
 8007580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007584:	4313      	orrs	r3, r2
 8007586:	d102      	bne.n	800758e <_printf_float+0x29e>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	07d9      	lsls	r1, r3, #31
 800758c:	d5d8      	bpl.n	8007540 <_printf_float+0x250>
 800758e:	ee18 3a10 	vmov	r3, s16
 8007592:	4652      	mov	r2, sl
 8007594:	4631      	mov	r1, r6
 8007596:	4628      	mov	r0, r5
 8007598:	47b8      	blx	r7
 800759a:	3001      	adds	r0, #1
 800759c:	f43f af09 	beq.w	80073b2 <_printf_float+0xc2>
 80075a0:	f04f 0900 	mov.w	r9, #0
 80075a4:	f104 0a1a 	add.w	sl, r4, #26
 80075a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075aa:	425b      	negs	r3, r3
 80075ac:	454b      	cmp	r3, r9
 80075ae:	dc01      	bgt.n	80075b4 <_printf_float+0x2c4>
 80075b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b2:	e792      	b.n	80074da <_printf_float+0x1ea>
 80075b4:	2301      	movs	r3, #1
 80075b6:	4652      	mov	r2, sl
 80075b8:	4631      	mov	r1, r6
 80075ba:	4628      	mov	r0, r5
 80075bc:	47b8      	blx	r7
 80075be:	3001      	adds	r0, #1
 80075c0:	f43f aef7 	beq.w	80073b2 <_printf_float+0xc2>
 80075c4:	f109 0901 	add.w	r9, r9, #1
 80075c8:	e7ee      	b.n	80075a8 <_printf_float+0x2b8>
 80075ca:	bf00      	nop
 80075cc:	7fefffff 	.word	0x7fefffff
 80075d0:	0800b120 	.word	0x0800b120
 80075d4:	0800b124 	.word	0x0800b124
 80075d8:	0800b12c 	.word	0x0800b12c
 80075dc:	0800b128 	.word	0x0800b128
 80075e0:	0800b130 	.word	0x0800b130
 80075e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075e8:	429a      	cmp	r2, r3
 80075ea:	bfa8      	it	ge
 80075ec:	461a      	movge	r2, r3
 80075ee:	2a00      	cmp	r2, #0
 80075f0:	4691      	mov	r9, r2
 80075f2:	dc37      	bgt.n	8007664 <_printf_float+0x374>
 80075f4:	f04f 0b00 	mov.w	fp, #0
 80075f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075fc:	f104 021a 	add.w	r2, r4, #26
 8007600:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007602:	9305      	str	r3, [sp, #20]
 8007604:	eba3 0309 	sub.w	r3, r3, r9
 8007608:	455b      	cmp	r3, fp
 800760a:	dc33      	bgt.n	8007674 <_printf_float+0x384>
 800760c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007610:	429a      	cmp	r2, r3
 8007612:	db3b      	blt.n	800768c <_printf_float+0x39c>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	07da      	lsls	r2, r3, #31
 8007618:	d438      	bmi.n	800768c <_printf_float+0x39c>
 800761a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800761c:	9b05      	ldr	r3, [sp, #20]
 800761e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	eba2 0901 	sub.w	r9, r2, r1
 8007626:	4599      	cmp	r9, r3
 8007628:	bfa8      	it	ge
 800762a:	4699      	movge	r9, r3
 800762c:	f1b9 0f00 	cmp.w	r9, #0
 8007630:	dc35      	bgt.n	800769e <_printf_float+0x3ae>
 8007632:	f04f 0800 	mov.w	r8, #0
 8007636:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800763a:	f104 0a1a 	add.w	sl, r4, #26
 800763e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007642:	1a9b      	subs	r3, r3, r2
 8007644:	eba3 0309 	sub.w	r3, r3, r9
 8007648:	4543      	cmp	r3, r8
 800764a:	f77f af79 	ble.w	8007540 <_printf_float+0x250>
 800764e:	2301      	movs	r3, #1
 8007650:	4652      	mov	r2, sl
 8007652:	4631      	mov	r1, r6
 8007654:	4628      	mov	r0, r5
 8007656:	47b8      	blx	r7
 8007658:	3001      	adds	r0, #1
 800765a:	f43f aeaa 	beq.w	80073b2 <_printf_float+0xc2>
 800765e:	f108 0801 	add.w	r8, r8, #1
 8007662:	e7ec      	b.n	800763e <_printf_float+0x34e>
 8007664:	4613      	mov	r3, r2
 8007666:	4631      	mov	r1, r6
 8007668:	4642      	mov	r2, r8
 800766a:	4628      	mov	r0, r5
 800766c:	47b8      	blx	r7
 800766e:	3001      	adds	r0, #1
 8007670:	d1c0      	bne.n	80075f4 <_printf_float+0x304>
 8007672:	e69e      	b.n	80073b2 <_printf_float+0xc2>
 8007674:	2301      	movs	r3, #1
 8007676:	4631      	mov	r1, r6
 8007678:	4628      	mov	r0, r5
 800767a:	9205      	str	r2, [sp, #20]
 800767c:	47b8      	blx	r7
 800767e:	3001      	adds	r0, #1
 8007680:	f43f ae97 	beq.w	80073b2 <_printf_float+0xc2>
 8007684:	9a05      	ldr	r2, [sp, #20]
 8007686:	f10b 0b01 	add.w	fp, fp, #1
 800768a:	e7b9      	b.n	8007600 <_printf_float+0x310>
 800768c:	ee18 3a10 	vmov	r3, s16
 8007690:	4652      	mov	r2, sl
 8007692:	4631      	mov	r1, r6
 8007694:	4628      	mov	r0, r5
 8007696:	47b8      	blx	r7
 8007698:	3001      	adds	r0, #1
 800769a:	d1be      	bne.n	800761a <_printf_float+0x32a>
 800769c:	e689      	b.n	80073b2 <_printf_float+0xc2>
 800769e:	9a05      	ldr	r2, [sp, #20]
 80076a0:	464b      	mov	r3, r9
 80076a2:	4442      	add	r2, r8
 80076a4:	4631      	mov	r1, r6
 80076a6:	4628      	mov	r0, r5
 80076a8:	47b8      	blx	r7
 80076aa:	3001      	adds	r0, #1
 80076ac:	d1c1      	bne.n	8007632 <_printf_float+0x342>
 80076ae:	e680      	b.n	80073b2 <_printf_float+0xc2>
 80076b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076b2:	2a01      	cmp	r2, #1
 80076b4:	dc01      	bgt.n	80076ba <_printf_float+0x3ca>
 80076b6:	07db      	lsls	r3, r3, #31
 80076b8:	d538      	bpl.n	800772c <_printf_float+0x43c>
 80076ba:	2301      	movs	r3, #1
 80076bc:	4642      	mov	r2, r8
 80076be:	4631      	mov	r1, r6
 80076c0:	4628      	mov	r0, r5
 80076c2:	47b8      	blx	r7
 80076c4:	3001      	adds	r0, #1
 80076c6:	f43f ae74 	beq.w	80073b2 <_printf_float+0xc2>
 80076ca:	ee18 3a10 	vmov	r3, s16
 80076ce:	4652      	mov	r2, sl
 80076d0:	4631      	mov	r1, r6
 80076d2:	4628      	mov	r0, r5
 80076d4:	47b8      	blx	r7
 80076d6:	3001      	adds	r0, #1
 80076d8:	f43f ae6b 	beq.w	80073b2 <_printf_float+0xc2>
 80076dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076e0:	2200      	movs	r2, #0
 80076e2:	2300      	movs	r3, #0
 80076e4:	f7f9 f9f0 	bl	8000ac8 <__aeabi_dcmpeq>
 80076e8:	b9d8      	cbnz	r0, 8007722 <_printf_float+0x432>
 80076ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ec:	f108 0201 	add.w	r2, r8, #1
 80076f0:	3b01      	subs	r3, #1
 80076f2:	4631      	mov	r1, r6
 80076f4:	4628      	mov	r0, r5
 80076f6:	47b8      	blx	r7
 80076f8:	3001      	adds	r0, #1
 80076fa:	d10e      	bne.n	800771a <_printf_float+0x42a>
 80076fc:	e659      	b.n	80073b2 <_printf_float+0xc2>
 80076fe:	2301      	movs	r3, #1
 8007700:	4652      	mov	r2, sl
 8007702:	4631      	mov	r1, r6
 8007704:	4628      	mov	r0, r5
 8007706:	47b8      	blx	r7
 8007708:	3001      	adds	r0, #1
 800770a:	f43f ae52 	beq.w	80073b2 <_printf_float+0xc2>
 800770e:	f108 0801 	add.w	r8, r8, #1
 8007712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007714:	3b01      	subs	r3, #1
 8007716:	4543      	cmp	r3, r8
 8007718:	dcf1      	bgt.n	80076fe <_printf_float+0x40e>
 800771a:	464b      	mov	r3, r9
 800771c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007720:	e6dc      	b.n	80074dc <_printf_float+0x1ec>
 8007722:	f04f 0800 	mov.w	r8, #0
 8007726:	f104 0a1a 	add.w	sl, r4, #26
 800772a:	e7f2      	b.n	8007712 <_printf_float+0x422>
 800772c:	2301      	movs	r3, #1
 800772e:	4642      	mov	r2, r8
 8007730:	e7df      	b.n	80076f2 <_printf_float+0x402>
 8007732:	2301      	movs	r3, #1
 8007734:	464a      	mov	r2, r9
 8007736:	4631      	mov	r1, r6
 8007738:	4628      	mov	r0, r5
 800773a:	47b8      	blx	r7
 800773c:	3001      	adds	r0, #1
 800773e:	f43f ae38 	beq.w	80073b2 <_printf_float+0xc2>
 8007742:	f108 0801 	add.w	r8, r8, #1
 8007746:	68e3      	ldr	r3, [r4, #12]
 8007748:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800774a:	1a5b      	subs	r3, r3, r1
 800774c:	4543      	cmp	r3, r8
 800774e:	dcf0      	bgt.n	8007732 <_printf_float+0x442>
 8007750:	e6fa      	b.n	8007548 <_printf_float+0x258>
 8007752:	f04f 0800 	mov.w	r8, #0
 8007756:	f104 0919 	add.w	r9, r4, #25
 800775a:	e7f4      	b.n	8007746 <_printf_float+0x456>

0800775c <_printf_common>:
 800775c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007760:	4616      	mov	r6, r2
 8007762:	4699      	mov	r9, r3
 8007764:	688a      	ldr	r2, [r1, #8]
 8007766:	690b      	ldr	r3, [r1, #16]
 8007768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800776c:	4293      	cmp	r3, r2
 800776e:	bfb8      	it	lt
 8007770:	4613      	movlt	r3, r2
 8007772:	6033      	str	r3, [r6, #0]
 8007774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007778:	4607      	mov	r7, r0
 800777a:	460c      	mov	r4, r1
 800777c:	b10a      	cbz	r2, 8007782 <_printf_common+0x26>
 800777e:	3301      	adds	r3, #1
 8007780:	6033      	str	r3, [r6, #0]
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	0699      	lsls	r1, r3, #26
 8007786:	bf42      	ittt	mi
 8007788:	6833      	ldrmi	r3, [r6, #0]
 800778a:	3302      	addmi	r3, #2
 800778c:	6033      	strmi	r3, [r6, #0]
 800778e:	6825      	ldr	r5, [r4, #0]
 8007790:	f015 0506 	ands.w	r5, r5, #6
 8007794:	d106      	bne.n	80077a4 <_printf_common+0x48>
 8007796:	f104 0a19 	add.w	sl, r4, #25
 800779a:	68e3      	ldr	r3, [r4, #12]
 800779c:	6832      	ldr	r2, [r6, #0]
 800779e:	1a9b      	subs	r3, r3, r2
 80077a0:	42ab      	cmp	r3, r5
 80077a2:	dc26      	bgt.n	80077f2 <_printf_common+0x96>
 80077a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077a8:	1e13      	subs	r3, r2, #0
 80077aa:	6822      	ldr	r2, [r4, #0]
 80077ac:	bf18      	it	ne
 80077ae:	2301      	movne	r3, #1
 80077b0:	0692      	lsls	r2, r2, #26
 80077b2:	d42b      	bmi.n	800780c <_printf_common+0xb0>
 80077b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077b8:	4649      	mov	r1, r9
 80077ba:	4638      	mov	r0, r7
 80077bc:	47c0      	blx	r8
 80077be:	3001      	adds	r0, #1
 80077c0:	d01e      	beq.n	8007800 <_printf_common+0xa4>
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	68e5      	ldr	r5, [r4, #12]
 80077c6:	6832      	ldr	r2, [r6, #0]
 80077c8:	f003 0306 	and.w	r3, r3, #6
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	bf08      	it	eq
 80077d0:	1aad      	subeq	r5, r5, r2
 80077d2:	68a3      	ldr	r3, [r4, #8]
 80077d4:	6922      	ldr	r2, [r4, #16]
 80077d6:	bf0c      	ite	eq
 80077d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077dc:	2500      	movne	r5, #0
 80077de:	4293      	cmp	r3, r2
 80077e0:	bfc4      	itt	gt
 80077e2:	1a9b      	subgt	r3, r3, r2
 80077e4:	18ed      	addgt	r5, r5, r3
 80077e6:	2600      	movs	r6, #0
 80077e8:	341a      	adds	r4, #26
 80077ea:	42b5      	cmp	r5, r6
 80077ec:	d11a      	bne.n	8007824 <_printf_common+0xc8>
 80077ee:	2000      	movs	r0, #0
 80077f0:	e008      	b.n	8007804 <_printf_common+0xa8>
 80077f2:	2301      	movs	r3, #1
 80077f4:	4652      	mov	r2, sl
 80077f6:	4649      	mov	r1, r9
 80077f8:	4638      	mov	r0, r7
 80077fa:	47c0      	blx	r8
 80077fc:	3001      	adds	r0, #1
 80077fe:	d103      	bne.n	8007808 <_printf_common+0xac>
 8007800:	f04f 30ff 	mov.w	r0, #4294967295
 8007804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007808:	3501      	adds	r5, #1
 800780a:	e7c6      	b.n	800779a <_printf_common+0x3e>
 800780c:	18e1      	adds	r1, r4, r3
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	2030      	movs	r0, #48	; 0x30
 8007812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007816:	4422      	add	r2, r4
 8007818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800781c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007820:	3302      	adds	r3, #2
 8007822:	e7c7      	b.n	80077b4 <_printf_common+0x58>
 8007824:	2301      	movs	r3, #1
 8007826:	4622      	mov	r2, r4
 8007828:	4649      	mov	r1, r9
 800782a:	4638      	mov	r0, r7
 800782c:	47c0      	blx	r8
 800782e:	3001      	adds	r0, #1
 8007830:	d0e6      	beq.n	8007800 <_printf_common+0xa4>
 8007832:	3601      	adds	r6, #1
 8007834:	e7d9      	b.n	80077ea <_printf_common+0x8e>
	...

08007838 <_printf_i>:
 8007838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800783c:	460c      	mov	r4, r1
 800783e:	4691      	mov	r9, r2
 8007840:	7e27      	ldrb	r7, [r4, #24]
 8007842:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007844:	2f78      	cmp	r7, #120	; 0x78
 8007846:	4680      	mov	r8, r0
 8007848:	469a      	mov	sl, r3
 800784a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800784e:	d807      	bhi.n	8007860 <_printf_i+0x28>
 8007850:	2f62      	cmp	r7, #98	; 0x62
 8007852:	d80a      	bhi.n	800786a <_printf_i+0x32>
 8007854:	2f00      	cmp	r7, #0
 8007856:	f000 80d8 	beq.w	8007a0a <_printf_i+0x1d2>
 800785a:	2f58      	cmp	r7, #88	; 0x58
 800785c:	f000 80a3 	beq.w	80079a6 <_printf_i+0x16e>
 8007860:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007868:	e03a      	b.n	80078e0 <_printf_i+0xa8>
 800786a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800786e:	2b15      	cmp	r3, #21
 8007870:	d8f6      	bhi.n	8007860 <_printf_i+0x28>
 8007872:	a001      	add	r0, pc, #4	; (adr r0, 8007878 <_printf_i+0x40>)
 8007874:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007878:	080078d1 	.word	0x080078d1
 800787c:	080078e5 	.word	0x080078e5
 8007880:	08007861 	.word	0x08007861
 8007884:	08007861 	.word	0x08007861
 8007888:	08007861 	.word	0x08007861
 800788c:	08007861 	.word	0x08007861
 8007890:	080078e5 	.word	0x080078e5
 8007894:	08007861 	.word	0x08007861
 8007898:	08007861 	.word	0x08007861
 800789c:	08007861 	.word	0x08007861
 80078a0:	08007861 	.word	0x08007861
 80078a4:	080079f1 	.word	0x080079f1
 80078a8:	08007915 	.word	0x08007915
 80078ac:	080079d3 	.word	0x080079d3
 80078b0:	08007861 	.word	0x08007861
 80078b4:	08007861 	.word	0x08007861
 80078b8:	08007a13 	.word	0x08007a13
 80078bc:	08007861 	.word	0x08007861
 80078c0:	08007915 	.word	0x08007915
 80078c4:	08007861 	.word	0x08007861
 80078c8:	08007861 	.word	0x08007861
 80078cc:	080079db 	.word	0x080079db
 80078d0:	680b      	ldr	r3, [r1, #0]
 80078d2:	1d1a      	adds	r2, r3, #4
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	600a      	str	r2, [r1, #0]
 80078d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078e0:	2301      	movs	r3, #1
 80078e2:	e0a3      	b.n	8007a2c <_printf_i+0x1f4>
 80078e4:	6825      	ldr	r5, [r4, #0]
 80078e6:	6808      	ldr	r0, [r1, #0]
 80078e8:	062e      	lsls	r6, r5, #24
 80078ea:	f100 0304 	add.w	r3, r0, #4
 80078ee:	d50a      	bpl.n	8007906 <_printf_i+0xce>
 80078f0:	6805      	ldr	r5, [r0, #0]
 80078f2:	600b      	str	r3, [r1, #0]
 80078f4:	2d00      	cmp	r5, #0
 80078f6:	da03      	bge.n	8007900 <_printf_i+0xc8>
 80078f8:	232d      	movs	r3, #45	; 0x2d
 80078fa:	426d      	negs	r5, r5
 80078fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007900:	485e      	ldr	r0, [pc, #376]	; (8007a7c <_printf_i+0x244>)
 8007902:	230a      	movs	r3, #10
 8007904:	e019      	b.n	800793a <_printf_i+0x102>
 8007906:	f015 0f40 	tst.w	r5, #64	; 0x40
 800790a:	6805      	ldr	r5, [r0, #0]
 800790c:	600b      	str	r3, [r1, #0]
 800790e:	bf18      	it	ne
 8007910:	b22d      	sxthne	r5, r5
 8007912:	e7ef      	b.n	80078f4 <_printf_i+0xbc>
 8007914:	680b      	ldr	r3, [r1, #0]
 8007916:	6825      	ldr	r5, [r4, #0]
 8007918:	1d18      	adds	r0, r3, #4
 800791a:	6008      	str	r0, [r1, #0]
 800791c:	0628      	lsls	r0, r5, #24
 800791e:	d501      	bpl.n	8007924 <_printf_i+0xec>
 8007920:	681d      	ldr	r5, [r3, #0]
 8007922:	e002      	b.n	800792a <_printf_i+0xf2>
 8007924:	0669      	lsls	r1, r5, #25
 8007926:	d5fb      	bpl.n	8007920 <_printf_i+0xe8>
 8007928:	881d      	ldrh	r5, [r3, #0]
 800792a:	4854      	ldr	r0, [pc, #336]	; (8007a7c <_printf_i+0x244>)
 800792c:	2f6f      	cmp	r7, #111	; 0x6f
 800792e:	bf0c      	ite	eq
 8007930:	2308      	moveq	r3, #8
 8007932:	230a      	movne	r3, #10
 8007934:	2100      	movs	r1, #0
 8007936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800793a:	6866      	ldr	r6, [r4, #4]
 800793c:	60a6      	str	r6, [r4, #8]
 800793e:	2e00      	cmp	r6, #0
 8007940:	bfa2      	ittt	ge
 8007942:	6821      	ldrge	r1, [r4, #0]
 8007944:	f021 0104 	bicge.w	r1, r1, #4
 8007948:	6021      	strge	r1, [r4, #0]
 800794a:	b90d      	cbnz	r5, 8007950 <_printf_i+0x118>
 800794c:	2e00      	cmp	r6, #0
 800794e:	d04d      	beq.n	80079ec <_printf_i+0x1b4>
 8007950:	4616      	mov	r6, r2
 8007952:	fbb5 f1f3 	udiv	r1, r5, r3
 8007956:	fb03 5711 	mls	r7, r3, r1, r5
 800795a:	5dc7      	ldrb	r7, [r0, r7]
 800795c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007960:	462f      	mov	r7, r5
 8007962:	42bb      	cmp	r3, r7
 8007964:	460d      	mov	r5, r1
 8007966:	d9f4      	bls.n	8007952 <_printf_i+0x11a>
 8007968:	2b08      	cmp	r3, #8
 800796a:	d10b      	bne.n	8007984 <_printf_i+0x14c>
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	07df      	lsls	r7, r3, #31
 8007970:	d508      	bpl.n	8007984 <_printf_i+0x14c>
 8007972:	6923      	ldr	r3, [r4, #16]
 8007974:	6861      	ldr	r1, [r4, #4]
 8007976:	4299      	cmp	r1, r3
 8007978:	bfde      	ittt	le
 800797a:	2330      	movle	r3, #48	; 0x30
 800797c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007980:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007984:	1b92      	subs	r2, r2, r6
 8007986:	6122      	str	r2, [r4, #16]
 8007988:	f8cd a000 	str.w	sl, [sp]
 800798c:	464b      	mov	r3, r9
 800798e:	aa03      	add	r2, sp, #12
 8007990:	4621      	mov	r1, r4
 8007992:	4640      	mov	r0, r8
 8007994:	f7ff fee2 	bl	800775c <_printf_common>
 8007998:	3001      	adds	r0, #1
 800799a:	d14c      	bne.n	8007a36 <_printf_i+0x1fe>
 800799c:	f04f 30ff 	mov.w	r0, #4294967295
 80079a0:	b004      	add	sp, #16
 80079a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a6:	4835      	ldr	r0, [pc, #212]	; (8007a7c <_printf_i+0x244>)
 80079a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	680e      	ldr	r6, [r1, #0]
 80079b0:	061f      	lsls	r7, r3, #24
 80079b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80079b6:	600e      	str	r6, [r1, #0]
 80079b8:	d514      	bpl.n	80079e4 <_printf_i+0x1ac>
 80079ba:	07d9      	lsls	r1, r3, #31
 80079bc:	bf44      	itt	mi
 80079be:	f043 0320 	orrmi.w	r3, r3, #32
 80079c2:	6023      	strmi	r3, [r4, #0]
 80079c4:	b91d      	cbnz	r5, 80079ce <_printf_i+0x196>
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	f023 0320 	bic.w	r3, r3, #32
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	2310      	movs	r3, #16
 80079d0:	e7b0      	b.n	8007934 <_printf_i+0xfc>
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	f043 0320 	orr.w	r3, r3, #32
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	2378      	movs	r3, #120	; 0x78
 80079dc:	4828      	ldr	r0, [pc, #160]	; (8007a80 <_printf_i+0x248>)
 80079de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079e2:	e7e3      	b.n	80079ac <_printf_i+0x174>
 80079e4:	065e      	lsls	r6, r3, #25
 80079e6:	bf48      	it	mi
 80079e8:	b2ad      	uxthmi	r5, r5
 80079ea:	e7e6      	b.n	80079ba <_printf_i+0x182>
 80079ec:	4616      	mov	r6, r2
 80079ee:	e7bb      	b.n	8007968 <_printf_i+0x130>
 80079f0:	680b      	ldr	r3, [r1, #0]
 80079f2:	6826      	ldr	r6, [r4, #0]
 80079f4:	6960      	ldr	r0, [r4, #20]
 80079f6:	1d1d      	adds	r5, r3, #4
 80079f8:	600d      	str	r5, [r1, #0]
 80079fa:	0635      	lsls	r5, r6, #24
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	d501      	bpl.n	8007a04 <_printf_i+0x1cc>
 8007a00:	6018      	str	r0, [r3, #0]
 8007a02:	e002      	b.n	8007a0a <_printf_i+0x1d2>
 8007a04:	0671      	lsls	r1, r6, #25
 8007a06:	d5fb      	bpl.n	8007a00 <_printf_i+0x1c8>
 8007a08:	8018      	strh	r0, [r3, #0]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	6123      	str	r3, [r4, #16]
 8007a0e:	4616      	mov	r6, r2
 8007a10:	e7ba      	b.n	8007988 <_printf_i+0x150>
 8007a12:	680b      	ldr	r3, [r1, #0]
 8007a14:	1d1a      	adds	r2, r3, #4
 8007a16:	600a      	str	r2, [r1, #0]
 8007a18:	681e      	ldr	r6, [r3, #0]
 8007a1a:	6862      	ldr	r2, [r4, #4]
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f7f8 fbde 	bl	80001e0 <memchr>
 8007a24:	b108      	cbz	r0, 8007a2a <_printf_i+0x1f2>
 8007a26:	1b80      	subs	r0, r0, r6
 8007a28:	6060      	str	r0, [r4, #4]
 8007a2a:	6863      	ldr	r3, [r4, #4]
 8007a2c:	6123      	str	r3, [r4, #16]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a34:	e7a8      	b.n	8007988 <_printf_i+0x150>
 8007a36:	6923      	ldr	r3, [r4, #16]
 8007a38:	4632      	mov	r2, r6
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	4640      	mov	r0, r8
 8007a3e:	47d0      	blx	sl
 8007a40:	3001      	adds	r0, #1
 8007a42:	d0ab      	beq.n	800799c <_printf_i+0x164>
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	079b      	lsls	r3, r3, #30
 8007a48:	d413      	bmi.n	8007a72 <_printf_i+0x23a>
 8007a4a:	68e0      	ldr	r0, [r4, #12]
 8007a4c:	9b03      	ldr	r3, [sp, #12]
 8007a4e:	4298      	cmp	r0, r3
 8007a50:	bfb8      	it	lt
 8007a52:	4618      	movlt	r0, r3
 8007a54:	e7a4      	b.n	80079a0 <_printf_i+0x168>
 8007a56:	2301      	movs	r3, #1
 8007a58:	4632      	mov	r2, r6
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	4640      	mov	r0, r8
 8007a5e:	47d0      	blx	sl
 8007a60:	3001      	adds	r0, #1
 8007a62:	d09b      	beq.n	800799c <_printf_i+0x164>
 8007a64:	3501      	adds	r5, #1
 8007a66:	68e3      	ldr	r3, [r4, #12]
 8007a68:	9903      	ldr	r1, [sp, #12]
 8007a6a:	1a5b      	subs	r3, r3, r1
 8007a6c:	42ab      	cmp	r3, r5
 8007a6e:	dcf2      	bgt.n	8007a56 <_printf_i+0x21e>
 8007a70:	e7eb      	b.n	8007a4a <_printf_i+0x212>
 8007a72:	2500      	movs	r5, #0
 8007a74:	f104 0619 	add.w	r6, r4, #25
 8007a78:	e7f5      	b.n	8007a66 <_printf_i+0x22e>
 8007a7a:	bf00      	nop
 8007a7c:	0800b132 	.word	0x0800b132
 8007a80:	0800b143 	.word	0x0800b143

08007a84 <iprintf>:
 8007a84:	b40f      	push	{r0, r1, r2, r3}
 8007a86:	4b0a      	ldr	r3, [pc, #40]	; (8007ab0 <iprintf+0x2c>)
 8007a88:	b513      	push	{r0, r1, r4, lr}
 8007a8a:	681c      	ldr	r4, [r3, #0]
 8007a8c:	b124      	cbz	r4, 8007a98 <iprintf+0x14>
 8007a8e:	69a3      	ldr	r3, [r4, #24]
 8007a90:	b913      	cbnz	r3, 8007a98 <iprintf+0x14>
 8007a92:	4620      	mov	r0, r4
 8007a94:	f001 f8d6 	bl	8008c44 <__sinit>
 8007a98:	ab05      	add	r3, sp, #20
 8007a9a:	9a04      	ldr	r2, [sp, #16]
 8007a9c:	68a1      	ldr	r1, [r4, #8]
 8007a9e:	9301      	str	r3, [sp, #4]
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f001 fe51 	bl	8009748 <_vfiprintf_r>
 8007aa6:	b002      	add	sp, #8
 8007aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aac:	b004      	add	sp, #16
 8007aae:	4770      	bx	lr
 8007ab0:	2000000c 	.word	0x2000000c

08007ab4 <_puts_r>:
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	460e      	mov	r6, r1
 8007ab8:	4605      	mov	r5, r0
 8007aba:	b118      	cbz	r0, 8007ac4 <_puts_r+0x10>
 8007abc:	6983      	ldr	r3, [r0, #24]
 8007abe:	b90b      	cbnz	r3, 8007ac4 <_puts_r+0x10>
 8007ac0:	f001 f8c0 	bl	8008c44 <__sinit>
 8007ac4:	69ab      	ldr	r3, [r5, #24]
 8007ac6:	68ac      	ldr	r4, [r5, #8]
 8007ac8:	b913      	cbnz	r3, 8007ad0 <_puts_r+0x1c>
 8007aca:	4628      	mov	r0, r5
 8007acc:	f001 f8ba 	bl	8008c44 <__sinit>
 8007ad0:	4b2c      	ldr	r3, [pc, #176]	; (8007b84 <_puts_r+0xd0>)
 8007ad2:	429c      	cmp	r4, r3
 8007ad4:	d120      	bne.n	8007b18 <_puts_r+0x64>
 8007ad6:	686c      	ldr	r4, [r5, #4]
 8007ad8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ada:	07db      	lsls	r3, r3, #31
 8007adc:	d405      	bmi.n	8007aea <_puts_r+0x36>
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	0598      	lsls	r0, r3, #22
 8007ae2:	d402      	bmi.n	8007aea <_puts_r+0x36>
 8007ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ae6:	f001 f950 	bl	8008d8a <__retarget_lock_acquire_recursive>
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	0719      	lsls	r1, r3, #28
 8007aee:	d51d      	bpl.n	8007b2c <_puts_r+0x78>
 8007af0:	6923      	ldr	r3, [r4, #16]
 8007af2:	b1db      	cbz	r3, 8007b2c <_puts_r+0x78>
 8007af4:	3e01      	subs	r6, #1
 8007af6:	68a3      	ldr	r3, [r4, #8]
 8007af8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007afc:	3b01      	subs	r3, #1
 8007afe:	60a3      	str	r3, [r4, #8]
 8007b00:	bb39      	cbnz	r1, 8007b52 <_puts_r+0x9e>
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	da38      	bge.n	8007b78 <_puts_r+0xc4>
 8007b06:	4622      	mov	r2, r4
 8007b08:	210a      	movs	r1, #10
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	f000 f848 	bl	8007ba0 <__swbuf_r>
 8007b10:	3001      	adds	r0, #1
 8007b12:	d011      	beq.n	8007b38 <_puts_r+0x84>
 8007b14:	250a      	movs	r5, #10
 8007b16:	e011      	b.n	8007b3c <_puts_r+0x88>
 8007b18:	4b1b      	ldr	r3, [pc, #108]	; (8007b88 <_puts_r+0xd4>)
 8007b1a:	429c      	cmp	r4, r3
 8007b1c:	d101      	bne.n	8007b22 <_puts_r+0x6e>
 8007b1e:	68ac      	ldr	r4, [r5, #8]
 8007b20:	e7da      	b.n	8007ad8 <_puts_r+0x24>
 8007b22:	4b1a      	ldr	r3, [pc, #104]	; (8007b8c <_puts_r+0xd8>)
 8007b24:	429c      	cmp	r4, r3
 8007b26:	bf08      	it	eq
 8007b28:	68ec      	ldreq	r4, [r5, #12]
 8007b2a:	e7d5      	b.n	8007ad8 <_puts_r+0x24>
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f000 f888 	bl	8007c44 <__swsetup_r>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d0dd      	beq.n	8007af4 <_puts_r+0x40>
 8007b38:	f04f 35ff 	mov.w	r5, #4294967295
 8007b3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b3e:	07da      	lsls	r2, r3, #31
 8007b40:	d405      	bmi.n	8007b4e <_puts_r+0x9a>
 8007b42:	89a3      	ldrh	r3, [r4, #12]
 8007b44:	059b      	lsls	r3, r3, #22
 8007b46:	d402      	bmi.n	8007b4e <_puts_r+0x9a>
 8007b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b4a:	f001 f91f 	bl	8008d8c <__retarget_lock_release_recursive>
 8007b4e:	4628      	mov	r0, r5
 8007b50:	bd70      	pop	{r4, r5, r6, pc}
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	da04      	bge.n	8007b60 <_puts_r+0xac>
 8007b56:	69a2      	ldr	r2, [r4, #24]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	dc06      	bgt.n	8007b6a <_puts_r+0xb6>
 8007b5c:	290a      	cmp	r1, #10
 8007b5e:	d004      	beq.n	8007b6a <_puts_r+0xb6>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	1c5a      	adds	r2, r3, #1
 8007b64:	6022      	str	r2, [r4, #0]
 8007b66:	7019      	strb	r1, [r3, #0]
 8007b68:	e7c5      	b.n	8007af6 <_puts_r+0x42>
 8007b6a:	4622      	mov	r2, r4
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	f000 f817 	bl	8007ba0 <__swbuf_r>
 8007b72:	3001      	adds	r0, #1
 8007b74:	d1bf      	bne.n	8007af6 <_puts_r+0x42>
 8007b76:	e7df      	b.n	8007b38 <_puts_r+0x84>
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	250a      	movs	r5, #10
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	6022      	str	r2, [r4, #0]
 8007b80:	701d      	strb	r5, [r3, #0]
 8007b82:	e7db      	b.n	8007b3c <_puts_r+0x88>
 8007b84:	0800b208 	.word	0x0800b208
 8007b88:	0800b228 	.word	0x0800b228
 8007b8c:	0800b1e8 	.word	0x0800b1e8

08007b90 <puts>:
 8007b90:	4b02      	ldr	r3, [pc, #8]	; (8007b9c <puts+0xc>)
 8007b92:	4601      	mov	r1, r0
 8007b94:	6818      	ldr	r0, [r3, #0]
 8007b96:	f7ff bf8d 	b.w	8007ab4 <_puts_r>
 8007b9a:	bf00      	nop
 8007b9c:	2000000c 	.word	0x2000000c

08007ba0 <__swbuf_r>:
 8007ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba2:	460e      	mov	r6, r1
 8007ba4:	4614      	mov	r4, r2
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	b118      	cbz	r0, 8007bb2 <__swbuf_r+0x12>
 8007baa:	6983      	ldr	r3, [r0, #24]
 8007bac:	b90b      	cbnz	r3, 8007bb2 <__swbuf_r+0x12>
 8007bae:	f001 f849 	bl	8008c44 <__sinit>
 8007bb2:	4b21      	ldr	r3, [pc, #132]	; (8007c38 <__swbuf_r+0x98>)
 8007bb4:	429c      	cmp	r4, r3
 8007bb6:	d12b      	bne.n	8007c10 <__swbuf_r+0x70>
 8007bb8:	686c      	ldr	r4, [r5, #4]
 8007bba:	69a3      	ldr	r3, [r4, #24]
 8007bbc:	60a3      	str	r3, [r4, #8]
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	071a      	lsls	r2, r3, #28
 8007bc2:	d52f      	bpl.n	8007c24 <__swbuf_r+0x84>
 8007bc4:	6923      	ldr	r3, [r4, #16]
 8007bc6:	b36b      	cbz	r3, 8007c24 <__swbuf_r+0x84>
 8007bc8:	6923      	ldr	r3, [r4, #16]
 8007bca:	6820      	ldr	r0, [r4, #0]
 8007bcc:	1ac0      	subs	r0, r0, r3
 8007bce:	6963      	ldr	r3, [r4, #20]
 8007bd0:	b2f6      	uxtb	r6, r6
 8007bd2:	4283      	cmp	r3, r0
 8007bd4:	4637      	mov	r7, r6
 8007bd6:	dc04      	bgt.n	8007be2 <__swbuf_r+0x42>
 8007bd8:	4621      	mov	r1, r4
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f000 ff9e 	bl	8008b1c <_fflush_r>
 8007be0:	bb30      	cbnz	r0, 8007c30 <__swbuf_r+0x90>
 8007be2:	68a3      	ldr	r3, [r4, #8]
 8007be4:	3b01      	subs	r3, #1
 8007be6:	60a3      	str	r3, [r4, #8]
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	6022      	str	r2, [r4, #0]
 8007bee:	701e      	strb	r6, [r3, #0]
 8007bf0:	6963      	ldr	r3, [r4, #20]
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	4283      	cmp	r3, r0
 8007bf6:	d004      	beq.n	8007c02 <__swbuf_r+0x62>
 8007bf8:	89a3      	ldrh	r3, [r4, #12]
 8007bfa:	07db      	lsls	r3, r3, #31
 8007bfc:	d506      	bpl.n	8007c0c <__swbuf_r+0x6c>
 8007bfe:	2e0a      	cmp	r6, #10
 8007c00:	d104      	bne.n	8007c0c <__swbuf_r+0x6c>
 8007c02:	4621      	mov	r1, r4
 8007c04:	4628      	mov	r0, r5
 8007c06:	f000 ff89 	bl	8008b1c <_fflush_r>
 8007c0a:	b988      	cbnz	r0, 8007c30 <__swbuf_r+0x90>
 8007c0c:	4638      	mov	r0, r7
 8007c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c10:	4b0a      	ldr	r3, [pc, #40]	; (8007c3c <__swbuf_r+0x9c>)
 8007c12:	429c      	cmp	r4, r3
 8007c14:	d101      	bne.n	8007c1a <__swbuf_r+0x7a>
 8007c16:	68ac      	ldr	r4, [r5, #8]
 8007c18:	e7cf      	b.n	8007bba <__swbuf_r+0x1a>
 8007c1a:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <__swbuf_r+0xa0>)
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	bf08      	it	eq
 8007c20:	68ec      	ldreq	r4, [r5, #12]
 8007c22:	e7ca      	b.n	8007bba <__swbuf_r+0x1a>
 8007c24:	4621      	mov	r1, r4
 8007c26:	4628      	mov	r0, r5
 8007c28:	f000 f80c 	bl	8007c44 <__swsetup_r>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d0cb      	beq.n	8007bc8 <__swbuf_r+0x28>
 8007c30:	f04f 37ff 	mov.w	r7, #4294967295
 8007c34:	e7ea      	b.n	8007c0c <__swbuf_r+0x6c>
 8007c36:	bf00      	nop
 8007c38:	0800b208 	.word	0x0800b208
 8007c3c:	0800b228 	.word	0x0800b228
 8007c40:	0800b1e8 	.word	0x0800b1e8

08007c44 <__swsetup_r>:
 8007c44:	4b32      	ldr	r3, [pc, #200]	; (8007d10 <__swsetup_r+0xcc>)
 8007c46:	b570      	push	{r4, r5, r6, lr}
 8007c48:	681d      	ldr	r5, [r3, #0]
 8007c4a:	4606      	mov	r6, r0
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	b125      	cbz	r5, 8007c5a <__swsetup_r+0x16>
 8007c50:	69ab      	ldr	r3, [r5, #24]
 8007c52:	b913      	cbnz	r3, 8007c5a <__swsetup_r+0x16>
 8007c54:	4628      	mov	r0, r5
 8007c56:	f000 fff5 	bl	8008c44 <__sinit>
 8007c5a:	4b2e      	ldr	r3, [pc, #184]	; (8007d14 <__swsetup_r+0xd0>)
 8007c5c:	429c      	cmp	r4, r3
 8007c5e:	d10f      	bne.n	8007c80 <__swsetup_r+0x3c>
 8007c60:	686c      	ldr	r4, [r5, #4]
 8007c62:	89a3      	ldrh	r3, [r4, #12]
 8007c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c68:	0719      	lsls	r1, r3, #28
 8007c6a:	d42c      	bmi.n	8007cc6 <__swsetup_r+0x82>
 8007c6c:	06dd      	lsls	r5, r3, #27
 8007c6e:	d411      	bmi.n	8007c94 <__swsetup_r+0x50>
 8007c70:	2309      	movs	r3, #9
 8007c72:	6033      	str	r3, [r6, #0]
 8007c74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c78:	81a3      	strh	r3, [r4, #12]
 8007c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7e:	e03e      	b.n	8007cfe <__swsetup_r+0xba>
 8007c80:	4b25      	ldr	r3, [pc, #148]	; (8007d18 <__swsetup_r+0xd4>)
 8007c82:	429c      	cmp	r4, r3
 8007c84:	d101      	bne.n	8007c8a <__swsetup_r+0x46>
 8007c86:	68ac      	ldr	r4, [r5, #8]
 8007c88:	e7eb      	b.n	8007c62 <__swsetup_r+0x1e>
 8007c8a:	4b24      	ldr	r3, [pc, #144]	; (8007d1c <__swsetup_r+0xd8>)
 8007c8c:	429c      	cmp	r4, r3
 8007c8e:	bf08      	it	eq
 8007c90:	68ec      	ldreq	r4, [r5, #12]
 8007c92:	e7e6      	b.n	8007c62 <__swsetup_r+0x1e>
 8007c94:	0758      	lsls	r0, r3, #29
 8007c96:	d512      	bpl.n	8007cbe <__swsetup_r+0x7a>
 8007c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c9a:	b141      	cbz	r1, 8007cae <__swsetup_r+0x6a>
 8007c9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ca0:	4299      	cmp	r1, r3
 8007ca2:	d002      	beq.n	8007caa <__swsetup_r+0x66>
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	f001 fc7b 	bl	80095a0 <_free_r>
 8007caa:	2300      	movs	r3, #0
 8007cac:	6363      	str	r3, [r4, #52]	; 0x34
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cb4:	81a3      	strh	r3, [r4, #12]
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	6063      	str	r3, [r4, #4]
 8007cba:	6923      	ldr	r3, [r4, #16]
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	f043 0308 	orr.w	r3, r3, #8
 8007cc4:	81a3      	strh	r3, [r4, #12]
 8007cc6:	6923      	ldr	r3, [r4, #16]
 8007cc8:	b94b      	cbnz	r3, 8007cde <__swsetup_r+0x9a>
 8007cca:	89a3      	ldrh	r3, [r4, #12]
 8007ccc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cd4:	d003      	beq.n	8007cde <__swsetup_r+0x9a>
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	4630      	mov	r0, r6
 8007cda:	f001 f87d 	bl	8008dd8 <__smakebuf_r>
 8007cde:	89a0      	ldrh	r0, [r4, #12]
 8007ce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ce4:	f010 0301 	ands.w	r3, r0, #1
 8007ce8:	d00a      	beq.n	8007d00 <__swsetup_r+0xbc>
 8007cea:	2300      	movs	r3, #0
 8007cec:	60a3      	str	r3, [r4, #8]
 8007cee:	6963      	ldr	r3, [r4, #20]
 8007cf0:	425b      	negs	r3, r3
 8007cf2:	61a3      	str	r3, [r4, #24]
 8007cf4:	6923      	ldr	r3, [r4, #16]
 8007cf6:	b943      	cbnz	r3, 8007d0a <__swsetup_r+0xc6>
 8007cf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cfc:	d1ba      	bne.n	8007c74 <__swsetup_r+0x30>
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	0781      	lsls	r1, r0, #30
 8007d02:	bf58      	it	pl
 8007d04:	6963      	ldrpl	r3, [r4, #20]
 8007d06:	60a3      	str	r3, [r4, #8]
 8007d08:	e7f4      	b.n	8007cf4 <__swsetup_r+0xb0>
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	e7f7      	b.n	8007cfe <__swsetup_r+0xba>
 8007d0e:	bf00      	nop
 8007d10:	2000000c 	.word	0x2000000c
 8007d14:	0800b208 	.word	0x0800b208
 8007d18:	0800b228 	.word	0x0800b228
 8007d1c:	0800b1e8 	.word	0x0800b1e8

08007d20 <quorem>:
 8007d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	6903      	ldr	r3, [r0, #16]
 8007d26:	690c      	ldr	r4, [r1, #16]
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	4607      	mov	r7, r0
 8007d2c:	f2c0 8081 	blt.w	8007e32 <quorem+0x112>
 8007d30:	3c01      	subs	r4, #1
 8007d32:	f101 0814 	add.w	r8, r1, #20
 8007d36:	f100 0514 	add.w	r5, r0, #20
 8007d3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d3e:	9301      	str	r3, [sp, #4]
 8007d40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d54:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d58:	d331      	bcc.n	8007dbe <quorem+0x9e>
 8007d5a:	f04f 0e00 	mov.w	lr, #0
 8007d5e:	4640      	mov	r0, r8
 8007d60:	46ac      	mov	ip, r5
 8007d62:	46f2      	mov	sl, lr
 8007d64:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d68:	b293      	uxth	r3, r2
 8007d6a:	fb06 e303 	mla	r3, r6, r3, lr
 8007d6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	ebaa 0303 	sub.w	r3, sl, r3
 8007d78:	0c12      	lsrs	r2, r2, #16
 8007d7a:	f8dc a000 	ldr.w	sl, [ip]
 8007d7e:	fb06 e202 	mla	r2, r6, r2, lr
 8007d82:	fa13 f38a 	uxtah	r3, r3, sl
 8007d86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d8a:	fa1f fa82 	uxth.w	sl, r2
 8007d8e:	f8dc 2000 	ldr.w	r2, [ip]
 8007d92:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007d96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007da0:	4581      	cmp	r9, r0
 8007da2:	f84c 3b04 	str.w	r3, [ip], #4
 8007da6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007daa:	d2db      	bcs.n	8007d64 <quorem+0x44>
 8007dac:	f855 300b 	ldr.w	r3, [r5, fp]
 8007db0:	b92b      	cbnz	r3, 8007dbe <quorem+0x9e>
 8007db2:	9b01      	ldr	r3, [sp, #4]
 8007db4:	3b04      	subs	r3, #4
 8007db6:	429d      	cmp	r5, r3
 8007db8:	461a      	mov	r2, r3
 8007dba:	d32e      	bcc.n	8007e1a <quorem+0xfa>
 8007dbc:	613c      	str	r4, [r7, #16]
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	f001 fade 	bl	8009380 <__mcmp>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	db24      	blt.n	8007e12 <quorem+0xf2>
 8007dc8:	3601      	adds	r6, #1
 8007dca:	4628      	mov	r0, r5
 8007dcc:	f04f 0c00 	mov.w	ip, #0
 8007dd0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007dd4:	f8d0 e000 	ldr.w	lr, [r0]
 8007dd8:	b293      	uxth	r3, r2
 8007dda:	ebac 0303 	sub.w	r3, ip, r3
 8007dde:	0c12      	lsrs	r2, r2, #16
 8007de0:	fa13 f38e 	uxtah	r3, r3, lr
 8007de4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007de8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007df2:	45c1      	cmp	r9, r8
 8007df4:	f840 3b04 	str.w	r3, [r0], #4
 8007df8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007dfc:	d2e8      	bcs.n	8007dd0 <quorem+0xb0>
 8007dfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e06:	b922      	cbnz	r2, 8007e12 <quorem+0xf2>
 8007e08:	3b04      	subs	r3, #4
 8007e0a:	429d      	cmp	r5, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	d30a      	bcc.n	8007e26 <quorem+0x106>
 8007e10:	613c      	str	r4, [r7, #16]
 8007e12:	4630      	mov	r0, r6
 8007e14:	b003      	add	sp, #12
 8007e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1a:	6812      	ldr	r2, [r2, #0]
 8007e1c:	3b04      	subs	r3, #4
 8007e1e:	2a00      	cmp	r2, #0
 8007e20:	d1cc      	bne.n	8007dbc <quorem+0x9c>
 8007e22:	3c01      	subs	r4, #1
 8007e24:	e7c7      	b.n	8007db6 <quorem+0x96>
 8007e26:	6812      	ldr	r2, [r2, #0]
 8007e28:	3b04      	subs	r3, #4
 8007e2a:	2a00      	cmp	r2, #0
 8007e2c:	d1f0      	bne.n	8007e10 <quorem+0xf0>
 8007e2e:	3c01      	subs	r4, #1
 8007e30:	e7eb      	b.n	8007e0a <quorem+0xea>
 8007e32:	2000      	movs	r0, #0
 8007e34:	e7ee      	b.n	8007e14 <quorem+0xf4>
	...

08007e38 <_dtoa_r>:
 8007e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	ed2d 8b02 	vpush	{d8}
 8007e40:	ec57 6b10 	vmov	r6, r7, d0
 8007e44:	b095      	sub	sp, #84	; 0x54
 8007e46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e4c:	9105      	str	r1, [sp, #20]
 8007e4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007e52:	4604      	mov	r4, r0
 8007e54:	9209      	str	r2, [sp, #36]	; 0x24
 8007e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e58:	b975      	cbnz	r5, 8007e78 <_dtoa_r+0x40>
 8007e5a:	2010      	movs	r0, #16
 8007e5c:	f000 fffc 	bl	8008e58 <malloc>
 8007e60:	4602      	mov	r2, r0
 8007e62:	6260      	str	r0, [r4, #36]	; 0x24
 8007e64:	b920      	cbnz	r0, 8007e70 <_dtoa_r+0x38>
 8007e66:	4bb2      	ldr	r3, [pc, #712]	; (8008130 <_dtoa_r+0x2f8>)
 8007e68:	21ea      	movs	r1, #234	; 0xea
 8007e6a:	48b2      	ldr	r0, [pc, #712]	; (8008134 <_dtoa_r+0x2fc>)
 8007e6c:	f001 fe02 	bl	8009a74 <__assert_func>
 8007e70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e74:	6005      	str	r5, [r0, #0]
 8007e76:	60c5      	str	r5, [r0, #12]
 8007e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e7a:	6819      	ldr	r1, [r3, #0]
 8007e7c:	b151      	cbz	r1, 8007e94 <_dtoa_r+0x5c>
 8007e7e:	685a      	ldr	r2, [r3, #4]
 8007e80:	604a      	str	r2, [r1, #4]
 8007e82:	2301      	movs	r3, #1
 8007e84:	4093      	lsls	r3, r2
 8007e86:	608b      	str	r3, [r1, #8]
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f001 f83b 	bl	8008f04 <_Bfree>
 8007e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e90:	2200      	movs	r2, #0
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	1e3b      	subs	r3, r7, #0
 8007e96:	bfb9      	ittee	lt
 8007e98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e9c:	9303      	strlt	r3, [sp, #12]
 8007e9e:	2300      	movge	r3, #0
 8007ea0:	f8c8 3000 	strge.w	r3, [r8]
 8007ea4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007ea8:	4ba3      	ldr	r3, [pc, #652]	; (8008138 <_dtoa_r+0x300>)
 8007eaa:	bfbc      	itt	lt
 8007eac:	2201      	movlt	r2, #1
 8007eae:	f8c8 2000 	strlt.w	r2, [r8]
 8007eb2:	ea33 0309 	bics.w	r3, r3, r9
 8007eb6:	d11b      	bne.n	8007ef0 <_dtoa_r+0xb8>
 8007eb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007eba:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ec4:	4333      	orrs	r3, r6
 8007ec6:	f000 857a 	beq.w	80089be <_dtoa_r+0xb86>
 8007eca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ecc:	b963      	cbnz	r3, 8007ee8 <_dtoa_r+0xb0>
 8007ece:	4b9b      	ldr	r3, [pc, #620]	; (800813c <_dtoa_r+0x304>)
 8007ed0:	e024      	b.n	8007f1c <_dtoa_r+0xe4>
 8007ed2:	4b9b      	ldr	r3, [pc, #620]	; (8008140 <_dtoa_r+0x308>)
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	3308      	adds	r3, #8
 8007ed8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007eda:	6013      	str	r3, [r2, #0]
 8007edc:	9800      	ldr	r0, [sp, #0]
 8007ede:	b015      	add	sp, #84	; 0x54
 8007ee0:	ecbd 8b02 	vpop	{d8}
 8007ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee8:	4b94      	ldr	r3, [pc, #592]	; (800813c <_dtoa_r+0x304>)
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	3303      	adds	r3, #3
 8007eee:	e7f3      	b.n	8007ed8 <_dtoa_r+0xa0>
 8007ef0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	ec51 0b17 	vmov	r0, r1, d7
 8007efa:	2300      	movs	r3, #0
 8007efc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007f00:	f7f8 fde2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f04:	4680      	mov	r8, r0
 8007f06:	b158      	cbz	r0, 8007f20 <_dtoa_r+0xe8>
 8007f08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 8551 	beq.w	80089b8 <_dtoa_r+0xb80>
 8007f16:	488b      	ldr	r0, [pc, #556]	; (8008144 <_dtoa_r+0x30c>)
 8007f18:	6018      	str	r0, [r3, #0]
 8007f1a:	1e43      	subs	r3, r0, #1
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	e7dd      	b.n	8007edc <_dtoa_r+0xa4>
 8007f20:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007f24:	aa12      	add	r2, sp, #72	; 0x48
 8007f26:	a913      	add	r1, sp, #76	; 0x4c
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f001 facd 	bl	80094c8 <__d2b>
 8007f2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f32:	4683      	mov	fp, r0
 8007f34:	2d00      	cmp	r5, #0
 8007f36:	d07c      	beq.n	8008032 <_dtoa_r+0x1fa>
 8007f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007f3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007f46:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007f4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007f4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f52:	4b7d      	ldr	r3, [pc, #500]	; (8008148 <_dtoa_r+0x310>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	4630      	mov	r0, r6
 8007f58:	4639      	mov	r1, r7
 8007f5a:	f7f8 f995 	bl	8000288 <__aeabi_dsub>
 8007f5e:	a36e      	add	r3, pc, #440	; (adr r3, 8008118 <_dtoa_r+0x2e0>)
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f7f8 fb48 	bl	80005f8 <__aeabi_dmul>
 8007f68:	a36d      	add	r3, pc, #436	; (adr r3, 8008120 <_dtoa_r+0x2e8>)
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	f7f8 f98d 	bl	800028c <__adddf3>
 8007f72:	4606      	mov	r6, r0
 8007f74:	4628      	mov	r0, r5
 8007f76:	460f      	mov	r7, r1
 8007f78:	f7f8 fad4 	bl	8000524 <__aeabi_i2d>
 8007f7c:	a36a      	add	r3, pc, #424	; (adr r3, 8008128 <_dtoa_r+0x2f0>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	f7f8 fb39 	bl	80005f8 <__aeabi_dmul>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	4639      	mov	r1, r7
 8007f8e:	f7f8 f97d 	bl	800028c <__adddf3>
 8007f92:	4606      	mov	r6, r0
 8007f94:	460f      	mov	r7, r1
 8007f96:	f7f8 fddf 	bl	8000b58 <__aeabi_d2iz>
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	4682      	mov	sl, r0
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	4639      	mov	r1, r7
 8007fa4:	f7f8 fd9a 	bl	8000adc <__aeabi_dcmplt>
 8007fa8:	b148      	cbz	r0, 8007fbe <_dtoa_r+0x186>
 8007faa:	4650      	mov	r0, sl
 8007fac:	f7f8 faba 	bl	8000524 <__aeabi_i2d>
 8007fb0:	4632      	mov	r2, r6
 8007fb2:	463b      	mov	r3, r7
 8007fb4:	f7f8 fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fb8:	b908      	cbnz	r0, 8007fbe <_dtoa_r+0x186>
 8007fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fbe:	f1ba 0f16 	cmp.w	sl, #22
 8007fc2:	d854      	bhi.n	800806e <_dtoa_r+0x236>
 8007fc4:	4b61      	ldr	r3, [pc, #388]	; (800814c <_dtoa_r+0x314>)
 8007fc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fd2:	f7f8 fd83 	bl	8000adc <__aeabi_dcmplt>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d04b      	beq.n	8008072 <_dtoa_r+0x23a>
 8007fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fde:	2300      	movs	r3, #0
 8007fe0:	930e      	str	r3, [sp, #56]	; 0x38
 8007fe2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fe4:	1b5d      	subs	r5, r3, r5
 8007fe6:	1e6b      	subs	r3, r5, #1
 8007fe8:	9304      	str	r3, [sp, #16]
 8007fea:	bf43      	ittte	mi
 8007fec:	2300      	movmi	r3, #0
 8007fee:	f1c5 0801 	rsbmi	r8, r5, #1
 8007ff2:	9304      	strmi	r3, [sp, #16]
 8007ff4:	f04f 0800 	movpl.w	r8, #0
 8007ff8:	f1ba 0f00 	cmp.w	sl, #0
 8007ffc:	db3b      	blt.n	8008076 <_dtoa_r+0x23e>
 8007ffe:	9b04      	ldr	r3, [sp, #16]
 8008000:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008004:	4453      	add	r3, sl
 8008006:	9304      	str	r3, [sp, #16]
 8008008:	2300      	movs	r3, #0
 800800a:	9306      	str	r3, [sp, #24]
 800800c:	9b05      	ldr	r3, [sp, #20]
 800800e:	2b09      	cmp	r3, #9
 8008010:	d869      	bhi.n	80080e6 <_dtoa_r+0x2ae>
 8008012:	2b05      	cmp	r3, #5
 8008014:	bfc4      	itt	gt
 8008016:	3b04      	subgt	r3, #4
 8008018:	9305      	strgt	r3, [sp, #20]
 800801a:	9b05      	ldr	r3, [sp, #20]
 800801c:	f1a3 0302 	sub.w	r3, r3, #2
 8008020:	bfcc      	ite	gt
 8008022:	2500      	movgt	r5, #0
 8008024:	2501      	movle	r5, #1
 8008026:	2b03      	cmp	r3, #3
 8008028:	d869      	bhi.n	80080fe <_dtoa_r+0x2c6>
 800802a:	e8df f003 	tbb	[pc, r3]
 800802e:	4e2c      	.short	0x4e2c
 8008030:	5a4c      	.short	0x5a4c
 8008032:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008036:	441d      	add	r5, r3
 8008038:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800803c:	2b20      	cmp	r3, #32
 800803e:	bfc1      	itttt	gt
 8008040:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008044:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008048:	fa09 f303 	lslgt.w	r3, r9, r3
 800804c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008050:	bfda      	itte	le
 8008052:	f1c3 0320 	rsble	r3, r3, #32
 8008056:	fa06 f003 	lslle.w	r0, r6, r3
 800805a:	4318      	orrgt	r0, r3
 800805c:	f7f8 fa52 	bl	8000504 <__aeabi_ui2d>
 8008060:	2301      	movs	r3, #1
 8008062:	4606      	mov	r6, r0
 8008064:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008068:	3d01      	subs	r5, #1
 800806a:	9310      	str	r3, [sp, #64]	; 0x40
 800806c:	e771      	b.n	8007f52 <_dtoa_r+0x11a>
 800806e:	2301      	movs	r3, #1
 8008070:	e7b6      	b.n	8007fe0 <_dtoa_r+0x1a8>
 8008072:	900e      	str	r0, [sp, #56]	; 0x38
 8008074:	e7b5      	b.n	8007fe2 <_dtoa_r+0x1aa>
 8008076:	f1ca 0300 	rsb	r3, sl, #0
 800807a:	9306      	str	r3, [sp, #24]
 800807c:	2300      	movs	r3, #0
 800807e:	eba8 080a 	sub.w	r8, r8, sl
 8008082:	930d      	str	r3, [sp, #52]	; 0x34
 8008084:	e7c2      	b.n	800800c <_dtoa_r+0x1d4>
 8008086:	2300      	movs	r3, #0
 8008088:	9308      	str	r3, [sp, #32]
 800808a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800808c:	2b00      	cmp	r3, #0
 800808e:	dc39      	bgt.n	8008104 <_dtoa_r+0x2cc>
 8008090:	f04f 0901 	mov.w	r9, #1
 8008094:	f8cd 9004 	str.w	r9, [sp, #4]
 8008098:	464b      	mov	r3, r9
 800809a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800809e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80080a0:	2200      	movs	r2, #0
 80080a2:	6042      	str	r2, [r0, #4]
 80080a4:	2204      	movs	r2, #4
 80080a6:	f102 0614 	add.w	r6, r2, #20
 80080aa:	429e      	cmp	r6, r3
 80080ac:	6841      	ldr	r1, [r0, #4]
 80080ae:	d92f      	bls.n	8008110 <_dtoa_r+0x2d8>
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 fee7 	bl	8008e84 <_Balloc>
 80080b6:	9000      	str	r0, [sp, #0]
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d14b      	bne.n	8008154 <_dtoa_r+0x31c>
 80080bc:	4b24      	ldr	r3, [pc, #144]	; (8008150 <_dtoa_r+0x318>)
 80080be:	4602      	mov	r2, r0
 80080c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080c4:	e6d1      	b.n	8007e6a <_dtoa_r+0x32>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e7de      	b.n	8008088 <_dtoa_r+0x250>
 80080ca:	2300      	movs	r3, #0
 80080cc:	9308      	str	r3, [sp, #32]
 80080ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d0:	eb0a 0903 	add.w	r9, sl, r3
 80080d4:	f109 0301 	add.w	r3, r9, #1
 80080d8:	2b01      	cmp	r3, #1
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	bfb8      	it	lt
 80080de:	2301      	movlt	r3, #1
 80080e0:	e7dd      	b.n	800809e <_dtoa_r+0x266>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e7f2      	b.n	80080cc <_dtoa_r+0x294>
 80080e6:	2501      	movs	r5, #1
 80080e8:	2300      	movs	r3, #0
 80080ea:	9305      	str	r3, [sp, #20]
 80080ec:	9508      	str	r5, [sp, #32]
 80080ee:	f04f 39ff 	mov.w	r9, #4294967295
 80080f2:	2200      	movs	r2, #0
 80080f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80080f8:	2312      	movs	r3, #18
 80080fa:	9209      	str	r2, [sp, #36]	; 0x24
 80080fc:	e7cf      	b.n	800809e <_dtoa_r+0x266>
 80080fe:	2301      	movs	r3, #1
 8008100:	9308      	str	r3, [sp, #32]
 8008102:	e7f4      	b.n	80080ee <_dtoa_r+0x2b6>
 8008104:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008108:	f8cd 9004 	str.w	r9, [sp, #4]
 800810c:	464b      	mov	r3, r9
 800810e:	e7c6      	b.n	800809e <_dtoa_r+0x266>
 8008110:	3101      	adds	r1, #1
 8008112:	6041      	str	r1, [r0, #4]
 8008114:	0052      	lsls	r2, r2, #1
 8008116:	e7c6      	b.n	80080a6 <_dtoa_r+0x26e>
 8008118:	636f4361 	.word	0x636f4361
 800811c:	3fd287a7 	.word	0x3fd287a7
 8008120:	8b60c8b3 	.word	0x8b60c8b3
 8008124:	3fc68a28 	.word	0x3fc68a28
 8008128:	509f79fb 	.word	0x509f79fb
 800812c:	3fd34413 	.word	0x3fd34413
 8008130:	0800b161 	.word	0x0800b161
 8008134:	0800b178 	.word	0x0800b178
 8008138:	7ff00000 	.word	0x7ff00000
 800813c:	0800b15d 	.word	0x0800b15d
 8008140:	0800b154 	.word	0x0800b154
 8008144:	0800b131 	.word	0x0800b131
 8008148:	3ff80000 	.word	0x3ff80000
 800814c:	0800b2d0 	.word	0x0800b2d0
 8008150:	0800b1d7 	.word	0x0800b1d7
 8008154:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008156:	9a00      	ldr	r2, [sp, #0]
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	9b01      	ldr	r3, [sp, #4]
 800815c:	2b0e      	cmp	r3, #14
 800815e:	f200 80ad 	bhi.w	80082bc <_dtoa_r+0x484>
 8008162:	2d00      	cmp	r5, #0
 8008164:	f000 80aa 	beq.w	80082bc <_dtoa_r+0x484>
 8008168:	f1ba 0f00 	cmp.w	sl, #0
 800816c:	dd36      	ble.n	80081dc <_dtoa_r+0x3a4>
 800816e:	4ac3      	ldr	r2, [pc, #780]	; (800847c <_dtoa_r+0x644>)
 8008170:	f00a 030f 	and.w	r3, sl, #15
 8008174:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008178:	ed93 7b00 	vldr	d7, [r3]
 800817c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008180:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008184:	eeb0 8a47 	vmov.f32	s16, s14
 8008188:	eef0 8a67 	vmov.f32	s17, s15
 800818c:	d016      	beq.n	80081bc <_dtoa_r+0x384>
 800818e:	4bbc      	ldr	r3, [pc, #752]	; (8008480 <_dtoa_r+0x648>)
 8008190:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008194:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008198:	f7f8 fb58 	bl	800084c <__aeabi_ddiv>
 800819c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081a0:	f007 070f 	and.w	r7, r7, #15
 80081a4:	2503      	movs	r5, #3
 80081a6:	4eb6      	ldr	r6, [pc, #728]	; (8008480 <_dtoa_r+0x648>)
 80081a8:	b957      	cbnz	r7, 80081c0 <_dtoa_r+0x388>
 80081aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ae:	ec53 2b18 	vmov	r2, r3, d8
 80081b2:	f7f8 fb4b 	bl	800084c <__aeabi_ddiv>
 80081b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081ba:	e029      	b.n	8008210 <_dtoa_r+0x3d8>
 80081bc:	2502      	movs	r5, #2
 80081be:	e7f2      	b.n	80081a6 <_dtoa_r+0x36e>
 80081c0:	07f9      	lsls	r1, r7, #31
 80081c2:	d508      	bpl.n	80081d6 <_dtoa_r+0x39e>
 80081c4:	ec51 0b18 	vmov	r0, r1, d8
 80081c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081cc:	f7f8 fa14 	bl	80005f8 <__aeabi_dmul>
 80081d0:	ec41 0b18 	vmov	d8, r0, r1
 80081d4:	3501      	adds	r5, #1
 80081d6:	107f      	asrs	r7, r7, #1
 80081d8:	3608      	adds	r6, #8
 80081da:	e7e5      	b.n	80081a8 <_dtoa_r+0x370>
 80081dc:	f000 80a6 	beq.w	800832c <_dtoa_r+0x4f4>
 80081e0:	f1ca 0600 	rsb	r6, sl, #0
 80081e4:	4ba5      	ldr	r3, [pc, #660]	; (800847c <_dtoa_r+0x644>)
 80081e6:	4fa6      	ldr	r7, [pc, #664]	; (8008480 <_dtoa_r+0x648>)
 80081e8:	f006 020f 	and.w	r2, r6, #15
 80081ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80081f8:	f7f8 f9fe 	bl	80005f8 <__aeabi_dmul>
 80081fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008200:	1136      	asrs	r6, r6, #4
 8008202:	2300      	movs	r3, #0
 8008204:	2502      	movs	r5, #2
 8008206:	2e00      	cmp	r6, #0
 8008208:	f040 8085 	bne.w	8008316 <_dtoa_r+0x4de>
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1d2      	bne.n	80081b6 <_dtoa_r+0x37e>
 8008210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 808c 	beq.w	8008330 <_dtoa_r+0x4f8>
 8008218:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800821c:	4b99      	ldr	r3, [pc, #612]	; (8008484 <_dtoa_r+0x64c>)
 800821e:	2200      	movs	r2, #0
 8008220:	4630      	mov	r0, r6
 8008222:	4639      	mov	r1, r7
 8008224:	f7f8 fc5a 	bl	8000adc <__aeabi_dcmplt>
 8008228:	2800      	cmp	r0, #0
 800822a:	f000 8081 	beq.w	8008330 <_dtoa_r+0x4f8>
 800822e:	9b01      	ldr	r3, [sp, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d07d      	beq.n	8008330 <_dtoa_r+0x4f8>
 8008234:	f1b9 0f00 	cmp.w	r9, #0
 8008238:	dd3c      	ble.n	80082b4 <_dtoa_r+0x47c>
 800823a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800823e:	9307      	str	r3, [sp, #28]
 8008240:	2200      	movs	r2, #0
 8008242:	4b91      	ldr	r3, [pc, #580]	; (8008488 <_dtoa_r+0x650>)
 8008244:	4630      	mov	r0, r6
 8008246:	4639      	mov	r1, r7
 8008248:	f7f8 f9d6 	bl	80005f8 <__aeabi_dmul>
 800824c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008250:	3501      	adds	r5, #1
 8008252:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008256:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800825a:	4628      	mov	r0, r5
 800825c:	f7f8 f962 	bl	8000524 <__aeabi_i2d>
 8008260:	4632      	mov	r2, r6
 8008262:	463b      	mov	r3, r7
 8008264:	f7f8 f9c8 	bl	80005f8 <__aeabi_dmul>
 8008268:	4b88      	ldr	r3, [pc, #544]	; (800848c <_dtoa_r+0x654>)
 800826a:	2200      	movs	r2, #0
 800826c:	f7f8 f80e 	bl	800028c <__adddf3>
 8008270:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008278:	9303      	str	r3, [sp, #12]
 800827a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800827c:	2b00      	cmp	r3, #0
 800827e:	d15c      	bne.n	800833a <_dtoa_r+0x502>
 8008280:	4b83      	ldr	r3, [pc, #524]	; (8008490 <_dtoa_r+0x658>)
 8008282:	2200      	movs	r2, #0
 8008284:	4630      	mov	r0, r6
 8008286:	4639      	mov	r1, r7
 8008288:	f7f7 fffe 	bl	8000288 <__aeabi_dsub>
 800828c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008290:	4606      	mov	r6, r0
 8008292:	460f      	mov	r7, r1
 8008294:	f7f8 fc40 	bl	8000b18 <__aeabi_dcmpgt>
 8008298:	2800      	cmp	r0, #0
 800829a:	f040 8296 	bne.w	80087ca <_dtoa_r+0x992>
 800829e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80082a2:	4630      	mov	r0, r6
 80082a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082a8:	4639      	mov	r1, r7
 80082aa:	f7f8 fc17 	bl	8000adc <__aeabi_dcmplt>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f040 8288 	bne.w	80087c4 <_dtoa_r+0x98c>
 80082b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80082b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f2c0 8158 	blt.w	8008574 <_dtoa_r+0x73c>
 80082c4:	f1ba 0f0e 	cmp.w	sl, #14
 80082c8:	f300 8154 	bgt.w	8008574 <_dtoa_r+0x73c>
 80082cc:	4b6b      	ldr	r3, [pc, #428]	; (800847c <_dtoa_r+0x644>)
 80082ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80082d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f280 80e3 	bge.w	80084a4 <_dtoa_r+0x66c>
 80082de:	9b01      	ldr	r3, [sp, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f300 80df 	bgt.w	80084a4 <_dtoa_r+0x66c>
 80082e6:	f040 826d 	bne.w	80087c4 <_dtoa_r+0x98c>
 80082ea:	4b69      	ldr	r3, [pc, #420]	; (8008490 <_dtoa_r+0x658>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	4640      	mov	r0, r8
 80082f0:	4649      	mov	r1, r9
 80082f2:	f7f8 f981 	bl	80005f8 <__aeabi_dmul>
 80082f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082fa:	f7f8 fc03 	bl	8000b04 <__aeabi_dcmpge>
 80082fe:	9e01      	ldr	r6, [sp, #4]
 8008300:	4637      	mov	r7, r6
 8008302:	2800      	cmp	r0, #0
 8008304:	f040 8243 	bne.w	800878e <_dtoa_r+0x956>
 8008308:	9d00      	ldr	r5, [sp, #0]
 800830a:	2331      	movs	r3, #49	; 0x31
 800830c:	f805 3b01 	strb.w	r3, [r5], #1
 8008310:	f10a 0a01 	add.w	sl, sl, #1
 8008314:	e23f      	b.n	8008796 <_dtoa_r+0x95e>
 8008316:	07f2      	lsls	r2, r6, #31
 8008318:	d505      	bpl.n	8008326 <_dtoa_r+0x4ee>
 800831a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800831e:	f7f8 f96b 	bl	80005f8 <__aeabi_dmul>
 8008322:	3501      	adds	r5, #1
 8008324:	2301      	movs	r3, #1
 8008326:	1076      	asrs	r6, r6, #1
 8008328:	3708      	adds	r7, #8
 800832a:	e76c      	b.n	8008206 <_dtoa_r+0x3ce>
 800832c:	2502      	movs	r5, #2
 800832e:	e76f      	b.n	8008210 <_dtoa_r+0x3d8>
 8008330:	9b01      	ldr	r3, [sp, #4]
 8008332:	f8cd a01c 	str.w	sl, [sp, #28]
 8008336:	930c      	str	r3, [sp, #48]	; 0x30
 8008338:	e78d      	b.n	8008256 <_dtoa_r+0x41e>
 800833a:	9900      	ldr	r1, [sp, #0]
 800833c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800833e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008340:	4b4e      	ldr	r3, [pc, #312]	; (800847c <_dtoa_r+0x644>)
 8008342:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008346:	4401      	add	r1, r0
 8008348:	9102      	str	r1, [sp, #8]
 800834a:	9908      	ldr	r1, [sp, #32]
 800834c:	eeb0 8a47 	vmov.f32	s16, s14
 8008350:	eef0 8a67 	vmov.f32	s17, s15
 8008354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008358:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800835c:	2900      	cmp	r1, #0
 800835e:	d045      	beq.n	80083ec <_dtoa_r+0x5b4>
 8008360:	494c      	ldr	r1, [pc, #304]	; (8008494 <_dtoa_r+0x65c>)
 8008362:	2000      	movs	r0, #0
 8008364:	f7f8 fa72 	bl	800084c <__aeabi_ddiv>
 8008368:	ec53 2b18 	vmov	r2, r3, d8
 800836c:	f7f7 ff8c 	bl	8000288 <__aeabi_dsub>
 8008370:	9d00      	ldr	r5, [sp, #0]
 8008372:	ec41 0b18 	vmov	d8, r0, r1
 8008376:	4639      	mov	r1, r7
 8008378:	4630      	mov	r0, r6
 800837a:	f7f8 fbed 	bl	8000b58 <__aeabi_d2iz>
 800837e:	900c      	str	r0, [sp, #48]	; 0x30
 8008380:	f7f8 f8d0 	bl	8000524 <__aeabi_i2d>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	4630      	mov	r0, r6
 800838a:	4639      	mov	r1, r7
 800838c:	f7f7 ff7c 	bl	8000288 <__aeabi_dsub>
 8008390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008392:	3330      	adds	r3, #48	; 0x30
 8008394:	f805 3b01 	strb.w	r3, [r5], #1
 8008398:	ec53 2b18 	vmov	r2, r3, d8
 800839c:	4606      	mov	r6, r0
 800839e:	460f      	mov	r7, r1
 80083a0:	f7f8 fb9c 	bl	8000adc <__aeabi_dcmplt>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d165      	bne.n	8008474 <_dtoa_r+0x63c>
 80083a8:	4632      	mov	r2, r6
 80083aa:	463b      	mov	r3, r7
 80083ac:	4935      	ldr	r1, [pc, #212]	; (8008484 <_dtoa_r+0x64c>)
 80083ae:	2000      	movs	r0, #0
 80083b0:	f7f7 ff6a 	bl	8000288 <__aeabi_dsub>
 80083b4:	ec53 2b18 	vmov	r2, r3, d8
 80083b8:	f7f8 fb90 	bl	8000adc <__aeabi_dcmplt>
 80083bc:	2800      	cmp	r0, #0
 80083be:	f040 80b9 	bne.w	8008534 <_dtoa_r+0x6fc>
 80083c2:	9b02      	ldr	r3, [sp, #8]
 80083c4:	429d      	cmp	r5, r3
 80083c6:	f43f af75 	beq.w	80082b4 <_dtoa_r+0x47c>
 80083ca:	4b2f      	ldr	r3, [pc, #188]	; (8008488 <_dtoa_r+0x650>)
 80083cc:	ec51 0b18 	vmov	r0, r1, d8
 80083d0:	2200      	movs	r2, #0
 80083d2:	f7f8 f911 	bl	80005f8 <__aeabi_dmul>
 80083d6:	4b2c      	ldr	r3, [pc, #176]	; (8008488 <_dtoa_r+0x650>)
 80083d8:	ec41 0b18 	vmov	d8, r0, r1
 80083dc:	2200      	movs	r2, #0
 80083de:	4630      	mov	r0, r6
 80083e0:	4639      	mov	r1, r7
 80083e2:	f7f8 f909 	bl	80005f8 <__aeabi_dmul>
 80083e6:	4606      	mov	r6, r0
 80083e8:	460f      	mov	r7, r1
 80083ea:	e7c4      	b.n	8008376 <_dtoa_r+0x53e>
 80083ec:	ec51 0b17 	vmov	r0, r1, d7
 80083f0:	f7f8 f902 	bl	80005f8 <__aeabi_dmul>
 80083f4:	9b02      	ldr	r3, [sp, #8]
 80083f6:	9d00      	ldr	r5, [sp, #0]
 80083f8:	930c      	str	r3, [sp, #48]	; 0x30
 80083fa:	ec41 0b18 	vmov	d8, r0, r1
 80083fe:	4639      	mov	r1, r7
 8008400:	4630      	mov	r0, r6
 8008402:	f7f8 fba9 	bl	8000b58 <__aeabi_d2iz>
 8008406:	9011      	str	r0, [sp, #68]	; 0x44
 8008408:	f7f8 f88c 	bl	8000524 <__aeabi_i2d>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4630      	mov	r0, r6
 8008412:	4639      	mov	r1, r7
 8008414:	f7f7 ff38 	bl	8000288 <__aeabi_dsub>
 8008418:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800841a:	3330      	adds	r3, #48	; 0x30
 800841c:	f805 3b01 	strb.w	r3, [r5], #1
 8008420:	9b02      	ldr	r3, [sp, #8]
 8008422:	429d      	cmp	r5, r3
 8008424:	4606      	mov	r6, r0
 8008426:	460f      	mov	r7, r1
 8008428:	f04f 0200 	mov.w	r2, #0
 800842c:	d134      	bne.n	8008498 <_dtoa_r+0x660>
 800842e:	4b19      	ldr	r3, [pc, #100]	; (8008494 <_dtoa_r+0x65c>)
 8008430:	ec51 0b18 	vmov	r0, r1, d8
 8008434:	f7f7 ff2a 	bl	800028c <__adddf3>
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	4630      	mov	r0, r6
 800843e:	4639      	mov	r1, r7
 8008440:	f7f8 fb6a 	bl	8000b18 <__aeabi_dcmpgt>
 8008444:	2800      	cmp	r0, #0
 8008446:	d175      	bne.n	8008534 <_dtoa_r+0x6fc>
 8008448:	ec53 2b18 	vmov	r2, r3, d8
 800844c:	4911      	ldr	r1, [pc, #68]	; (8008494 <_dtoa_r+0x65c>)
 800844e:	2000      	movs	r0, #0
 8008450:	f7f7 ff1a 	bl	8000288 <__aeabi_dsub>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	4630      	mov	r0, r6
 800845a:	4639      	mov	r1, r7
 800845c:	f7f8 fb3e 	bl	8000adc <__aeabi_dcmplt>
 8008460:	2800      	cmp	r0, #0
 8008462:	f43f af27 	beq.w	80082b4 <_dtoa_r+0x47c>
 8008466:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008468:	1e6b      	subs	r3, r5, #1
 800846a:	930c      	str	r3, [sp, #48]	; 0x30
 800846c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008470:	2b30      	cmp	r3, #48	; 0x30
 8008472:	d0f8      	beq.n	8008466 <_dtoa_r+0x62e>
 8008474:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008478:	e04a      	b.n	8008510 <_dtoa_r+0x6d8>
 800847a:	bf00      	nop
 800847c:	0800b2d0 	.word	0x0800b2d0
 8008480:	0800b2a8 	.word	0x0800b2a8
 8008484:	3ff00000 	.word	0x3ff00000
 8008488:	40240000 	.word	0x40240000
 800848c:	401c0000 	.word	0x401c0000
 8008490:	40140000 	.word	0x40140000
 8008494:	3fe00000 	.word	0x3fe00000
 8008498:	4baf      	ldr	r3, [pc, #700]	; (8008758 <_dtoa_r+0x920>)
 800849a:	f7f8 f8ad 	bl	80005f8 <__aeabi_dmul>
 800849e:	4606      	mov	r6, r0
 80084a0:	460f      	mov	r7, r1
 80084a2:	e7ac      	b.n	80083fe <_dtoa_r+0x5c6>
 80084a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80084a8:	9d00      	ldr	r5, [sp, #0]
 80084aa:	4642      	mov	r2, r8
 80084ac:	464b      	mov	r3, r9
 80084ae:	4630      	mov	r0, r6
 80084b0:	4639      	mov	r1, r7
 80084b2:	f7f8 f9cb 	bl	800084c <__aeabi_ddiv>
 80084b6:	f7f8 fb4f 	bl	8000b58 <__aeabi_d2iz>
 80084ba:	9002      	str	r0, [sp, #8]
 80084bc:	f7f8 f832 	bl	8000524 <__aeabi_i2d>
 80084c0:	4642      	mov	r2, r8
 80084c2:	464b      	mov	r3, r9
 80084c4:	f7f8 f898 	bl	80005f8 <__aeabi_dmul>
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	4630      	mov	r0, r6
 80084ce:	4639      	mov	r1, r7
 80084d0:	f7f7 feda 	bl	8000288 <__aeabi_dsub>
 80084d4:	9e02      	ldr	r6, [sp, #8]
 80084d6:	9f01      	ldr	r7, [sp, #4]
 80084d8:	3630      	adds	r6, #48	; 0x30
 80084da:	f805 6b01 	strb.w	r6, [r5], #1
 80084de:	9e00      	ldr	r6, [sp, #0]
 80084e0:	1bae      	subs	r6, r5, r6
 80084e2:	42b7      	cmp	r7, r6
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	d137      	bne.n	800855a <_dtoa_r+0x722>
 80084ea:	f7f7 fecf 	bl	800028c <__adddf3>
 80084ee:	4642      	mov	r2, r8
 80084f0:	464b      	mov	r3, r9
 80084f2:	4606      	mov	r6, r0
 80084f4:	460f      	mov	r7, r1
 80084f6:	f7f8 fb0f 	bl	8000b18 <__aeabi_dcmpgt>
 80084fa:	b9c8      	cbnz	r0, 8008530 <_dtoa_r+0x6f8>
 80084fc:	4642      	mov	r2, r8
 80084fe:	464b      	mov	r3, r9
 8008500:	4630      	mov	r0, r6
 8008502:	4639      	mov	r1, r7
 8008504:	f7f8 fae0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008508:	b110      	cbz	r0, 8008510 <_dtoa_r+0x6d8>
 800850a:	9b02      	ldr	r3, [sp, #8]
 800850c:	07d9      	lsls	r1, r3, #31
 800850e:	d40f      	bmi.n	8008530 <_dtoa_r+0x6f8>
 8008510:	4620      	mov	r0, r4
 8008512:	4659      	mov	r1, fp
 8008514:	f000 fcf6 	bl	8008f04 <_Bfree>
 8008518:	2300      	movs	r3, #0
 800851a:	702b      	strb	r3, [r5, #0]
 800851c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800851e:	f10a 0001 	add.w	r0, sl, #1
 8008522:	6018      	str	r0, [r3, #0]
 8008524:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008526:	2b00      	cmp	r3, #0
 8008528:	f43f acd8 	beq.w	8007edc <_dtoa_r+0xa4>
 800852c:	601d      	str	r5, [r3, #0]
 800852e:	e4d5      	b.n	8007edc <_dtoa_r+0xa4>
 8008530:	f8cd a01c 	str.w	sl, [sp, #28]
 8008534:	462b      	mov	r3, r5
 8008536:	461d      	mov	r5, r3
 8008538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800853c:	2a39      	cmp	r2, #57	; 0x39
 800853e:	d108      	bne.n	8008552 <_dtoa_r+0x71a>
 8008540:	9a00      	ldr	r2, [sp, #0]
 8008542:	429a      	cmp	r2, r3
 8008544:	d1f7      	bne.n	8008536 <_dtoa_r+0x6fe>
 8008546:	9a07      	ldr	r2, [sp, #28]
 8008548:	9900      	ldr	r1, [sp, #0]
 800854a:	3201      	adds	r2, #1
 800854c:	9207      	str	r2, [sp, #28]
 800854e:	2230      	movs	r2, #48	; 0x30
 8008550:	700a      	strb	r2, [r1, #0]
 8008552:	781a      	ldrb	r2, [r3, #0]
 8008554:	3201      	adds	r2, #1
 8008556:	701a      	strb	r2, [r3, #0]
 8008558:	e78c      	b.n	8008474 <_dtoa_r+0x63c>
 800855a:	4b7f      	ldr	r3, [pc, #508]	; (8008758 <_dtoa_r+0x920>)
 800855c:	2200      	movs	r2, #0
 800855e:	f7f8 f84b 	bl	80005f8 <__aeabi_dmul>
 8008562:	2200      	movs	r2, #0
 8008564:	2300      	movs	r3, #0
 8008566:	4606      	mov	r6, r0
 8008568:	460f      	mov	r7, r1
 800856a:	f7f8 faad 	bl	8000ac8 <__aeabi_dcmpeq>
 800856e:	2800      	cmp	r0, #0
 8008570:	d09b      	beq.n	80084aa <_dtoa_r+0x672>
 8008572:	e7cd      	b.n	8008510 <_dtoa_r+0x6d8>
 8008574:	9a08      	ldr	r2, [sp, #32]
 8008576:	2a00      	cmp	r2, #0
 8008578:	f000 80c4 	beq.w	8008704 <_dtoa_r+0x8cc>
 800857c:	9a05      	ldr	r2, [sp, #20]
 800857e:	2a01      	cmp	r2, #1
 8008580:	f300 80a8 	bgt.w	80086d4 <_dtoa_r+0x89c>
 8008584:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008586:	2a00      	cmp	r2, #0
 8008588:	f000 80a0 	beq.w	80086cc <_dtoa_r+0x894>
 800858c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008590:	9e06      	ldr	r6, [sp, #24]
 8008592:	4645      	mov	r5, r8
 8008594:	9a04      	ldr	r2, [sp, #16]
 8008596:	2101      	movs	r1, #1
 8008598:	441a      	add	r2, r3
 800859a:	4620      	mov	r0, r4
 800859c:	4498      	add	r8, r3
 800859e:	9204      	str	r2, [sp, #16]
 80085a0:	f000 fd6c 	bl	800907c <__i2b>
 80085a4:	4607      	mov	r7, r0
 80085a6:	2d00      	cmp	r5, #0
 80085a8:	dd0b      	ble.n	80085c2 <_dtoa_r+0x78a>
 80085aa:	9b04      	ldr	r3, [sp, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	dd08      	ble.n	80085c2 <_dtoa_r+0x78a>
 80085b0:	42ab      	cmp	r3, r5
 80085b2:	9a04      	ldr	r2, [sp, #16]
 80085b4:	bfa8      	it	ge
 80085b6:	462b      	movge	r3, r5
 80085b8:	eba8 0803 	sub.w	r8, r8, r3
 80085bc:	1aed      	subs	r5, r5, r3
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	9304      	str	r3, [sp, #16]
 80085c2:	9b06      	ldr	r3, [sp, #24]
 80085c4:	b1fb      	cbz	r3, 8008606 <_dtoa_r+0x7ce>
 80085c6:	9b08      	ldr	r3, [sp, #32]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 809f 	beq.w	800870c <_dtoa_r+0x8d4>
 80085ce:	2e00      	cmp	r6, #0
 80085d0:	dd11      	ble.n	80085f6 <_dtoa_r+0x7be>
 80085d2:	4639      	mov	r1, r7
 80085d4:	4632      	mov	r2, r6
 80085d6:	4620      	mov	r0, r4
 80085d8:	f000 fe0c 	bl	80091f4 <__pow5mult>
 80085dc:	465a      	mov	r2, fp
 80085de:	4601      	mov	r1, r0
 80085e0:	4607      	mov	r7, r0
 80085e2:	4620      	mov	r0, r4
 80085e4:	f000 fd60 	bl	80090a8 <__multiply>
 80085e8:	4659      	mov	r1, fp
 80085ea:	9007      	str	r0, [sp, #28]
 80085ec:	4620      	mov	r0, r4
 80085ee:	f000 fc89 	bl	8008f04 <_Bfree>
 80085f2:	9b07      	ldr	r3, [sp, #28]
 80085f4:	469b      	mov	fp, r3
 80085f6:	9b06      	ldr	r3, [sp, #24]
 80085f8:	1b9a      	subs	r2, r3, r6
 80085fa:	d004      	beq.n	8008606 <_dtoa_r+0x7ce>
 80085fc:	4659      	mov	r1, fp
 80085fe:	4620      	mov	r0, r4
 8008600:	f000 fdf8 	bl	80091f4 <__pow5mult>
 8008604:	4683      	mov	fp, r0
 8008606:	2101      	movs	r1, #1
 8008608:	4620      	mov	r0, r4
 800860a:	f000 fd37 	bl	800907c <__i2b>
 800860e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008610:	2b00      	cmp	r3, #0
 8008612:	4606      	mov	r6, r0
 8008614:	dd7c      	ble.n	8008710 <_dtoa_r+0x8d8>
 8008616:	461a      	mov	r2, r3
 8008618:	4601      	mov	r1, r0
 800861a:	4620      	mov	r0, r4
 800861c:	f000 fdea 	bl	80091f4 <__pow5mult>
 8008620:	9b05      	ldr	r3, [sp, #20]
 8008622:	2b01      	cmp	r3, #1
 8008624:	4606      	mov	r6, r0
 8008626:	dd76      	ble.n	8008716 <_dtoa_r+0x8de>
 8008628:	2300      	movs	r3, #0
 800862a:	9306      	str	r3, [sp, #24]
 800862c:	6933      	ldr	r3, [r6, #16]
 800862e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008632:	6918      	ldr	r0, [r3, #16]
 8008634:	f000 fcd2 	bl	8008fdc <__hi0bits>
 8008638:	f1c0 0020 	rsb	r0, r0, #32
 800863c:	9b04      	ldr	r3, [sp, #16]
 800863e:	4418      	add	r0, r3
 8008640:	f010 001f 	ands.w	r0, r0, #31
 8008644:	f000 8086 	beq.w	8008754 <_dtoa_r+0x91c>
 8008648:	f1c0 0320 	rsb	r3, r0, #32
 800864c:	2b04      	cmp	r3, #4
 800864e:	dd7f      	ble.n	8008750 <_dtoa_r+0x918>
 8008650:	f1c0 001c 	rsb	r0, r0, #28
 8008654:	9b04      	ldr	r3, [sp, #16]
 8008656:	4403      	add	r3, r0
 8008658:	4480      	add	r8, r0
 800865a:	4405      	add	r5, r0
 800865c:	9304      	str	r3, [sp, #16]
 800865e:	f1b8 0f00 	cmp.w	r8, #0
 8008662:	dd05      	ble.n	8008670 <_dtoa_r+0x838>
 8008664:	4659      	mov	r1, fp
 8008666:	4642      	mov	r2, r8
 8008668:	4620      	mov	r0, r4
 800866a:	f000 fe1d 	bl	80092a8 <__lshift>
 800866e:	4683      	mov	fp, r0
 8008670:	9b04      	ldr	r3, [sp, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	dd05      	ble.n	8008682 <_dtoa_r+0x84a>
 8008676:	4631      	mov	r1, r6
 8008678:	461a      	mov	r2, r3
 800867a:	4620      	mov	r0, r4
 800867c:	f000 fe14 	bl	80092a8 <__lshift>
 8008680:	4606      	mov	r6, r0
 8008682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008684:	2b00      	cmp	r3, #0
 8008686:	d069      	beq.n	800875c <_dtoa_r+0x924>
 8008688:	4631      	mov	r1, r6
 800868a:	4658      	mov	r0, fp
 800868c:	f000 fe78 	bl	8009380 <__mcmp>
 8008690:	2800      	cmp	r0, #0
 8008692:	da63      	bge.n	800875c <_dtoa_r+0x924>
 8008694:	2300      	movs	r3, #0
 8008696:	4659      	mov	r1, fp
 8008698:	220a      	movs	r2, #10
 800869a:	4620      	mov	r0, r4
 800869c:	f000 fc54 	bl	8008f48 <__multadd>
 80086a0:	9b08      	ldr	r3, [sp, #32]
 80086a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086a6:	4683      	mov	fp, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 818f 	beq.w	80089cc <_dtoa_r+0xb94>
 80086ae:	4639      	mov	r1, r7
 80086b0:	2300      	movs	r3, #0
 80086b2:	220a      	movs	r2, #10
 80086b4:	4620      	mov	r0, r4
 80086b6:	f000 fc47 	bl	8008f48 <__multadd>
 80086ba:	f1b9 0f00 	cmp.w	r9, #0
 80086be:	4607      	mov	r7, r0
 80086c0:	f300 808e 	bgt.w	80087e0 <_dtoa_r+0x9a8>
 80086c4:	9b05      	ldr	r3, [sp, #20]
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	dc50      	bgt.n	800876c <_dtoa_r+0x934>
 80086ca:	e089      	b.n	80087e0 <_dtoa_r+0x9a8>
 80086cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086d2:	e75d      	b.n	8008590 <_dtoa_r+0x758>
 80086d4:	9b01      	ldr	r3, [sp, #4]
 80086d6:	1e5e      	subs	r6, r3, #1
 80086d8:	9b06      	ldr	r3, [sp, #24]
 80086da:	42b3      	cmp	r3, r6
 80086dc:	bfbf      	itttt	lt
 80086de:	9b06      	ldrlt	r3, [sp, #24]
 80086e0:	9606      	strlt	r6, [sp, #24]
 80086e2:	1af2      	sublt	r2, r6, r3
 80086e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80086e6:	bfb6      	itet	lt
 80086e8:	189b      	addlt	r3, r3, r2
 80086ea:	1b9e      	subge	r6, r3, r6
 80086ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80086ee:	9b01      	ldr	r3, [sp, #4]
 80086f0:	bfb8      	it	lt
 80086f2:	2600      	movlt	r6, #0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bfb5      	itete	lt
 80086f8:	eba8 0503 	sublt.w	r5, r8, r3
 80086fc:	9b01      	ldrge	r3, [sp, #4]
 80086fe:	2300      	movlt	r3, #0
 8008700:	4645      	movge	r5, r8
 8008702:	e747      	b.n	8008594 <_dtoa_r+0x75c>
 8008704:	9e06      	ldr	r6, [sp, #24]
 8008706:	9f08      	ldr	r7, [sp, #32]
 8008708:	4645      	mov	r5, r8
 800870a:	e74c      	b.n	80085a6 <_dtoa_r+0x76e>
 800870c:	9a06      	ldr	r2, [sp, #24]
 800870e:	e775      	b.n	80085fc <_dtoa_r+0x7c4>
 8008710:	9b05      	ldr	r3, [sp, #20]
 8008712:	2b01      	cmp	r3, #1
 8008714:	dc18      	bgt.n	8008748 <_dtoa_r+0x910>
 8008716:	9b02      	ldr	r3, [sp, #8]
 8008718:	b9b3      	cbnz	r3, 8008748 <_dtoa_r+0x910>
 800871a:	9b03      	ldr	r3, [sp, #12]
 800871c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008720:	b9a3      	cbnz	r3, 800874c <_dtoa_r+0x914>
 8008722:	9b03      	ldr	r3, [sp, #12]
 8008724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008728:	0d1b      	lsrs	r3, r3, #20
 800872a:	051b      	lsls	r3, r3, #20
 800872c:	b12b      	cbz	r3, 800873a <_dtoa_r+0x902>
 800872e:	9b04      	ldr	r3, [sp, #16]
 8008730:	3301      	adds	r3, #1
 8008732:	9304      	str	r3, [sp, #16]
 8008734:	f108 0801 	add.w	r8, r8, #1
 8008738:	2301      	movs	r3, #1
 800873a:	9306      	str	r3, [sp, #24]
 800873c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800873e:	2b00      	cmp	r3, #0
 8008740:	f47f af74 	bne.w	800862c <_dtoa_r+0x7f4>
 8008744:	2001      	movs	r0, #1
 8008746:	e779      	b.n	800863c <_dtoa_r+0x804>
 8008748:	2300      	movs	r3, #0
 800874a:	e7f6      	b.n	800873a <_dtoa_r+0x902>
 800874c:	9b02      	ldr	r3, [sp, #8]
 800874e:	e7f4      	b.n	800873a <_dtoa_r+0x902>
 8008750:	d085      	beq.n	800865e <_dtoa_r+0x826>
 8008752:	4618      	mov	r0, r3
 8008754:	301c      	adds	r0, #28
 8008756:	e77d      	b.n	8008654 <_dtoa_r+0x81c>
 8008758:	40240000 	.word	0x40240000
 800875c:	9b01      	ldr	r3, [sp, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	dc38      	bgt.n	80087d4 <_dtoa_r+0x99c>
 8008762:	9b05      	ldr	r3, [sp, #20]
 8008764:	2b02      	cmp	r3, #2
 8008766:	dd35      	ble.n	80087d4 <_dtoa_r+0x99c>
 8008768:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800876c:	f1b9 0f00 	cmp.w	r9, #0
 8008770:	d10d      	bne.n	800878e <_dtoa_r+0x956>
 8008772:	4631      	mov	r1, r6
 8008774:	464b      	mov	r3, r9
 8008776:	2205      	movs	r2, #5
 8008778:	4620      	mov	r0, r4
 800877a:	f000 fbe5 	bl	8008f48 <__multadd>
 800877e:	4601      	mov	r1, r0
 8008780:	4606      	mov	r6, r0
 8008782:	4658      	mov	r0, fp
 8008784:	f000 fdfc 	bl	8009380 <__mcmp>
 8008788:	2800      	cmp	r0, #0
 800878a:	f73f adbd 	bgt.w	8008308 <_dtoa_r+0x4d0>
 800878e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008790:	9d00      	ldr	r5, [sp, #0]
 8008792:	ea6f 0a03 	mvn.w	sl, r3
 8008796:	f04f 0800 	mov.w	r8, #0
 800879a:	4631      	mov	r1, r6
 800879c:	4620      	mov	r0, r4
 800879e:	f000 fbb1 	bl	8008f04 <_Bfree>
 80087a2:	2f00      	cmp	r7, #0
 80087a4:	f43f aeb4 	beq.w	8008510 <_dtoa_r+0x6d8>
 80087a8:	f1b8 0f00 	cmp.w	r8, #0
 80087ac:	d005      	beq.n	80087ba <_dtoa_r+0x982>
 80087ae:	45b8      	cmp	r8, r7
 80087b0:	d003      	beq.n	80087ba <_dtoa_r+0x982>
 80087b2:	4641      	mov	r1, r8
 80087b4:	4620      	mov	r0, r4
 80087b6:	f000 fba5 	bl	8008f04 <_Bfree>
 80087ba:	4639      	mov	r1, r7
 80087bc:	4620      	mov	r0, r4
 80087be:	f000 fba1 	bl	8008f04 <_Bfree>
 80087c2:	e6a5      	b.n	8008510 <_dtoa_r+0x6d8>
 80087c4:	2600      	movs	r6, #0
 80087c6:	4637      	mov	r7, r6
 80087c8:	e7e1      	b.n	800878e <_dtoa_r+0x956>
 80087ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80087cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80087d0:	4637      	mov	r7, r6
 80087d2:	e599      	b.n	8008308 <_dtoa_r+0x4d0>
 80087d4:	9b08      	ldr	r3, [sp, #32]
 80087d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 80fd 	beq.w	80089da <_dtoa_r+0xba2>
 80087e0:	2d00      	cmp	r5, #0
 80087e2:	dd05      	ble.n	80087f0 <_dtoa_r+0x9b8>
 80087e4:	4639      	mov	r1, r7
 80087e6:	462a      	mov	r2, r5
 80087e8:	4620      	mov	r0, r4
 80087ea:	f000 fd5d 	bl	80092a8 <__lshift>
 80087ee:	4607      	mov	r7, r0
 80087f0:	9b06      	ldr	r3, [sp, #24]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d05c      	beq.n	80088b0 <_dtoa_r+0xa78>
 80087f6:	6879      	ldr	r1, [r7, #4]
 80087f8:	4620      	mov	r0, r4
 80087fa:	f000 fb43 	bl	8008e84 <_Balloc>
 80087fe:	4605      	mov	r5, r0
 8008800:	b928      	cbnz	r0, 800880e <_dtoa_r+0x9d6>
 8008802:	4b80      	ldr	r3, [pc, #512]	; (8008a04 <_dtoa_r+0xbcc>)
 8008804:	4602      	mov	r2, r0
 8008806:	f240 21ea 	movw	r1, #746	; 0x2ea
 800880a:	f7ff bb2e 	b.w	8007e6a <_dtoa_r+0x32>
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	3202      	adds	r2, #2
 8008812:	0092      	lsls	r2, r2, #2
 8008814:	f107 010c 	add.w	r1, r7, #12
 8008818:	300c      	adds	r0, #12
 800881a:	f000 fb25 	bl	8008e68 <memcpy>
 800881e:	2201      	movs	r2, #1
 8008820:	4629      	mov	r1, r5
 8008822:	4620      	mov	r0, r4
 8008824:	f000 fd40 	bl	80092a8 <__lshift>
 8008828:	9b00      	ldr	r3, [sp, #0]
 800882a:	3301      	adds	r3, #1
 800882c:	9301      	str	r3, [sp, #4]
 800882e:	9b00      	ldr	r3, [sp, #0]
 8008830:	444b      	add	r3, r9
 8008832:	9307      	str	r3, [sp, #28]
 8008834:	9b02      	ldr	r3, [sp, #8]
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	46b8      	mov	r8, r7
 800883c:	9306      	str	r3, [sp, #24]
 800883e:	4607      	mov	r7, r0
 8008840:	9b01      	ldr	r3, [sp, #4]
 8008842:	4631      	mov	r1, r6
 8008844:	3b01      	subs	r3, #1
 8008846:	4658      	mov	r0, fp
 8008848:	9302      	str	r3, [sp, #8]
 800884a:	f7ff fa69 	bl	8007d20 <quorem>
 800884e:	4603      	mov	r3, r0
 8008850:	3330      	adds	r3, #48	; 0x30
 8008852:	9004      	str	r0, [sp, #16]
 8008854:	4641      	mov	r1, r8
 8008856:	4658      	mov	r0, fp
 8008858:	9308      	str	r3, [sp, #32]
 800885a:	f000 fd91 	bl	8009380 <__mcmp>
 800885e:	463a      	mov	r2, r7
 8008860:	4681      	mov	r9, r0
 8008862:	4631      	mov	r1, r6
 8008864:	4620      	mov	r0, r4
 8008866:	f000 fda7 	bl	80093b8 <__mdiff>
 800886a:	68c2      	ldr	r2, [r0, #12]
 800886c:	9b08      	ldr	r3, [sp, #32]
 800886e:	4605      	mov	r5, r0
 8008870:	bb02      	cbnz	r2, 80088b4 <_dtoa_r+0xa7c>
 8008872:	4601      	mov	r1, r0
 8008874:	4658      	mov	r0, fp
 8008876:	f000 fd83 	bl	8009380 <__mcmp>
 800887a:	9b08      	ldr	r3, [sp, #32]
 800887c:	4602      	mov	r2, r0
 800887e:	4629      	mov	r1, r5
 8008880:	4620      	mov	r0, r4
 8008882:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008886:	f000 fb3d 	bl	8008f04 <_Bfree>
 800888a:	9b05      	ldr	r3, [sp, #20]
 800888c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800888e:	9d01      	ldr	r5, [sp, #4]
 8008890:	ea43 0102 	orr.w	r1, r3, r2
 8008894:	9b06      	ldr	r3, [sp, #24]
 8008896:	430b      	orrs	r3, r1
 8008898:	9b08      	ldr	r3, [sp, #32]
 800889a:	d10d      	bne.n	80088b8 <_dtoa_r+0xa80>
 800889c:	2b39      	cmp	r3, #57	; 0x39
 800889e:	d029      	beq.n	80088f4 <_dtoa_r+0xabc>
 80088a0:	f1b9 0f00 	cmp.w	r9, #0
 80088a4:	dd01      	ble.n	80088aa <_dtoa_r+0xa72>
 80088a6:	9b04      	ldr	r3, [sp, #16]
 80088a8:	3331      	adds	r3, #49	; 0x31
 80088aa:	9a02      	ldr	r2, [sp, #8]
 80088ac:	7013      	strb	r3, [r2, #0]
 80088ae:	e774      	b.n	800879a <_dtoa_r+0x962>
 80088b0:	4638      	mov	r0, r7
 80088b2:	e7b9      	b.n	8008828 <_dtoa_r+0x9f0>
 80088b4:	2201      	movs	r2, #1
 80088b6:	e7e2      	b.n	800887e <_dtoa_r+0xa46>
 80088b8:	f1b9 0f00 	cmp.w	r9, #0
 80088bc:	db06      	blt.n	80088cc <_dtoa_r+0xa94>
 80088be:	9905      	ldr	r1, [sp, #20]
 80088c0:	ea41 0909 	orr.w	r9, r1, r9
 80088c4:	9906      	ldr	r1, [sp, #24]
 80088c6:	ea59 0101 	orrs.w	r1, r9, r1
 80088ca:	d120      	bne.n	800890e <_dtoa_r+0xad6>
 80088cc:	2a00      	cmp	r2, #0
 80088ce:	ddec      	ble.n	80088aa <_dtoa_r+0xa72>
 80088d0:	4659      	mov	r1, fp
 80088d2:	2201      	movs	r2, #1
 80088d4:	4620      	mov	r0, r4
 80088d6:	9301      	str	r3, [sp, #4]
 80088d8:	f000 fce6 	bl	80092a8 <__lshift>
 80088dc:	4631      	mov	r1, r6
 80088de:	4683      	mov	fp, r0
 80088e0:	f000 fd4e 	bl	8009380 <__mcmp>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	9b01      	ldr	r3, [sp, #4]
 80088e8:	dc02      	bgt.n	80088f0 <_dtoa_r+0xab8>
 80088ea:	d1de      	bne.n	80088aa <_dtoa_r+0xa72>
 80088ec:	07da      	lsls	r2, r3, #31
 80088ee:	d5dc      	bpl.n	80088aa <_dtoa_r+0xa72>
 80088f0:	2b39      	cmp	r3, #57	; 0x39
 80088f2:	d1d8      	bne.n	80088a6 <_dtoa_r+0xa6e>
 80088f4:	9a02      	ldr	r2, [sp, #8]
 80088f6:	2339      	movs	r3, #57	; 0x39
 80088f8:	7013      	strb	r3, [r2, #0]
 80088fa:	462b      	mov	r3, r5
 80088fc:	461d      	mov	r5, r3
 80088fe:	3b01      	subs	r3, #1
 8008900:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008904:	2a39      	cmp	r2, #57	; 0x39
 8008906:	d050      	beq.n	80089aa <_dtoa_r+0xb72>
 8008908:	3201      	adds	r2, #1
 800890a:	701a      	strb	r2, [r3, #0]
 800890c:	e745      	b.n	800879a <_dtoa_r+0x962>
 800890e:	2a00      	cmp	r2, #0
 8008910:	dd03      	ble.n	800891a <_dtoa_r+0xae2>
 8008912:	2b39      	cmp	r3, #57	; 0x39
 8008914:	d0ee      	beq.n	80088f4 <_dtoa_r+0xabc>
 8008916:	3301      	adds	r3, #1
 8008918:	e7c7      	b.n	80088aa <_dtoa_r+0xa72>
 800891a:	9a01      	ldr	r2, [sp, #4]
 800891c:	9907      	ldr	r1, [sp, #28]
 800891e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008922:	428a      	cmp	r2, r1
 8008924:	d02a      	beq.n	800897c <_dtoa_r+0xb44>
 8008926:	4659      	mov	r1, fp
 8008928:	2300      	movs	r3, #0
 800892a:	220a      	movs	r2, #10
 800892c:	4620      	mov	r0, r4
 800892e:	f000 fb0b 	bl	8008f48 <__multadd>
 8008932:	45b8      	cmp	r8, r7
 8008934:	4683      	mov	fp, r0
 8008936:	f04f 0300 	mov.w	r3, #0
 800893a:	f04f 020a 	mov.w	r2, #10
 800893e:	4641      	mov	r1, r8
 8008940:	4620      	mov	r0, r4
 8008942:	d107      	bne.n	8008954 <_dtoa_r+0xb1c>
 8008944:	f000 fb00 	bl	8008f48 <__multadd>
 8008948:	4680      	mov	r8, r0
 800894a:	4607      	mov	r7, r0
 800894c:	9b01      	ldr	r3, [sp, #4]
 800894e:	3301      	adds	r3, #1
 8008950:	9301      	str	r3, [sp, #4]
 8008952:	e775      	b.n	8008840 <_dtoa_r+0xa08>
 8008954:	f000 faf8 	bl	8008f48 <__multadd>
 8008958:	4639      	mov	r1, r7
 800895a:	4680      	mov	r8, r0
 800895c:	2300      	movs	r3, #0
 800895e:	220a      	movs	r2, #10
 8008960:	4620      	mov	r0, r4
 8008962:	f000 faf1 	bl	8008f48 <__multadd>
 8008966:	4607      	mov	r7, r0
 8008968:	e7f0      	b.n	800894c <_dtoa_r+0xb14>
 800896a:	f1b9 0f00 	cmp.w	r9, #0
 800896e:	9a00      	ldr	r2, [sp, #0]
 8008970:	bfcc      	ite	gt
 8008972:	464d      	movgt	r5, r9
 8008974:	2501      	movle	r5, #1
 8008976:	4415      	add	r5, r2
 8008978:	f04f 0800 	mov.w	r8, #0
 800897c:	4659      	mov	r1, fp
 800897e:	2201      	movs	r2, #1
 8008980:	4620      	mov	r0, r4
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	f000 fc90 	bl	80092a8 <__lshift>
 8008988:	4631      	mov	r1, r6
 800898a:	4683      	mov	fp, r0
 800898c:	f000 fcf8 	bl	8009380 <__mcmp>
 8008990:	2800      	cmp	r0, #0
 8008992:	dcb2      	bgt.n	80088fa <_dtoa_r+0xac2>
 8008994:	d102      	bne.n	800899c <_dtoa_r+0xb64>
 8008996:	9b01      	ldr	r3, [sp, #4]
 8008998:	07db      	lsls	r3, r3, #31
 800899a:	d4ae      	bmi.n	80088fa <_dtoa_r+0xac2>
 800899c:	462b      	mov	r3, r5
 800899e:	461d      	mov	r5, r3
 80089a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089a4:	2a30      	cmp	r2, #48	; 0x30
 80089a6:	d0fa      	beq.n	800899e <_dtoa_r+0xb66>
 80089a8:	e6f7      	b.n	800879a <_dtoa_r+0x962>
 80089aa:	9a00      	ldr	r2, [sp, #0]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d1a5      	bne.n	80088fc <_dtoa_r+0xac4>
 80089b0:	f10a 0a01 	add.w	sl, sl, #1
 80089b4:	2331      	movs	r3, #49	; 0x31
 80089b6:	e779      	b.n	80088ac <_dtoa_r+0xa74>
 80089b8:	4b13      	ldr	r3, [pc, #76]	; (8008a08 <_dtoa_r+0xbd0>)
 80089ba:	f7ff baaf 	b.w	8007f1c <_dtoa_r+0xe4>
 80089be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f47f aa86 	bne.w	8007ed2 <_dtoa_r+0x9a>
 80089c6:	4b11      	ldr	r3, [pc, #68]	; (8008a0c <_dtoa_r+0xbd4>)
 80089c8:	f7ff baa8 	b.w	8007f1c <_dtoa_r+0xe4>
 80089cc:	f1b9 0f00 	cmp.w	r9, #0
 80089d0:	dc03      	bgt.n	80089da <_dtoa_r+0xba2>
 80089d2:	9b05      	ldr	r3, [sp, #20]
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	f73f aec9 	bgt.w	800876c <_dtoa_r+0x934>
 80089da:	9d00      	ldr	r5, [sp, #0]
 80089dc:	4631      	mov	r1, r6
 80089de:	4658      	mov	r0, fp
 80089e0:	f7ff f99e 	bl	8007d20 <quorem>
 80089e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80089e8:	f805 3b01 	strb.w	r3, [r5], #1
 80089ec:	9a00      	ldr	r2, [sp, #0]
 80089ee:	1aaa      	subs	r2, r5, r2
 80089f0:	4591      	cmp	r9, r2
 80089f2:	ddba      	ble.n	800896a <_dtoa_r+0xb32>
 80089f4:	4659      	mov	r1, fp
 80089f6:	2300      	movs	r3, #0
 80089f8:	220a      	movs	r2, #10
 80089fa:	4620      	mov	r0, r4
 80089fc:	f000 faa4 	bl	8008f48 <__multadd>
 8008a00:	4683      	mov	fp, r0
 8008a02:	e7eb      	b.n	80089dc <_dtoa_r+0xba4>
 8008a04:	0800b1d7 	.word	0x0800b1d7
 8008a08:	0800b130 	.word	0x0800b130
 8008a0c:	0800b154 	.word	0x0800b154

08008a10 <__sflush_r>:
 8008a10:	898a      	ldrh	r2, [r1, #12]
 8008a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a16:	4605      	mov	r5, r0
 8008a18:	0710      	lsls	r0, r2, #28
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	d458      	bmi.n	8008ad0 <__sflush_r+0xc0>
 8008a1e:	684b      	ldr	r3, [r1, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	dc05      	bgt.n	8008a30 <__sflush_r+0x20>
 8008a24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	dc02      	bgt.n	8008a30 <__sflush_r+0x20>
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a32:	2e00      	cmp	r6, #0
 8008a34:	d0f9      	beq.n	8008a2a <__sflush_r+0x1a>
 8008a36:	2300      	movs	r3, #0
 8008a38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a3c:	682f      	ldr	r7, [r5, #0]
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	d032      	beq.n	8008aa8 <__sflush_r+0x98>
 8008a42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a44:	89a3      	ldrh	r3, [r4, #12]
 8008a46:	075a      	lsls	r2, r3, #29
 8008a48:	d505      	bpl.n	8008a56 <__sflush_r+0x46>
 8008a4a:	6863      	ldr	r3, [r4, #4]
 8008a4c:	1ac0      	subs	r0, r0, r3
 8008a4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a50:	b10b      	cbz	r3, 8008a56 <__sflush_r+0x46>
 8008a52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a54:	1ac0      	subs	r0, r0, r3
 8008a56:	2300      	movs	r3, #0
 8008a58:	4602      	mov	r2, r0
 8008a5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a5c:	6a21      	ldr	r1, [r4, #32]
 8008a5e:	4628      	mov	r0, r5
 8008a60:	47b0      	blx	r6
 8008a62:	1c43      	adds	r3, r0, #1
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	d106      	bne.n	8008a76 <__sflush_r+0x66>
 8008a68:	6829      	ldr	r1, [r5, #0]
 8008a6a:	291d      	cmp	r1, #29
 8008a6c:	d82c      	bhi.n	8008ac8 <__sflush_r+0xb8>
 8008a6e:	4a2a      	ldr	r2, [pc, #168]	; (8008b18 <__sflush_r+0x108>)
 8008a70:	40ca      	lsrs	r2, r1
 8008a72:	07d6      	lsls	r6, r2, #31
 8008a74:	d528      	bpl.n	8008ac8 <__sflush_r+0xb8>
 8008a76:	2200      	movs	r2, #0
 8008a78:	6062      	str	r2, [r4, #4]
 8008a7a:	04d9      	lsls	r1, r3, #19
 8008a7c:	6922      	ldr	r2, [r4, #16]
 8008a7e:	6022      	str	r2, [r4, #0]
 8008a80:	d504      	bpl.n	8008a8c <__sflush_r+0x7c>
 8008a82:	1c42      	adds	r2, r0, #1
 8008a84:	d101      	bne.n	8008a8a <__sflush_r+0x7a>
 8008a86:	682b      	ldr	r3, [r5, #0]
 8008a88:	b903      	cbnz	r3, 8008a8c <__sflush_r+0x7c>
 8008a8a:	6560      	str	r0, [r4, #84]	; 0x54
 8008a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a8e:	602f      	str	r7, [r5, #0]
 8008a90:	2900      	cmp	r1, #0
 8008a92:	d0ca      	beq.n	8008a2a <__sflush_r+0x1a>
 8008a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a98:	4299      	cmp	r1, r3
 8008a9a:	d002      	beq.n	8008aa2 <__sflush_r+0x92>
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f000 fd7f 	bl	80095a0 <_free_r>
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	6360      	str	r0, [r4, #52]	; 0x34
 8008aa6:	e7c1      	b.n	8008a2c <__sflush_r+0x1c>
 8008aa8:	6a21      	ldr	r1, [r4, #32]
 8008aaa:	2301      	movs	r3, #1
 8008aac:	4628      	mov	r0, r5
 8008aae:	47b0      	blx	r6
 8008ab0:	1c41      	adds	r1, r0, #1
 8008ab2:	d1c7      	bne.n	8008a44 <__sflush_r+0x34>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0c4      	beq.n	8008a44 <__sflush_r+0x34>
 8008aba:	2b1d      	cmp	r3, #29
 8008abc:	d001      	beq.n	8008ac2 <__sflush_r+0xb2>
 8008abe:	2b16      	cmp	r3, #22
 8008ac0:	d101      	bne.n	8008ac6 <__sflush_r+0xb6>
 8008ac2:	602f      	str	r7, [r5, #0]
 8008ac4:	e7b1      	b.n	8008a2a <__sflush_r+0x1a>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008acc:	81a3      	strh	r3, [r4, #12]
 8008ace:	e7ad      	b.n	8008a2c <__sflush_r+0x1c>
 8008ad0:	690f      	ldr	r7, [r1, #16]
 8008ad2:	2f00      	cmp	r7, #0
 8008ad4:	d0a9      	beq.n	8008a2a <__sflush_r+0x1a>
 8008ad6:	0793      	lsls	r3, r2, #30
 8008ad8:	680e      	ldr	r6, [r1, #0]
 8008ada:	bf08      	it	eq
 8008adc:	694b      	ldreq	r3, [r1, #20]
 8008ade:	600f      	str	r7, [r1, #0]
 8008ae0:	bf18      	it	ne
 8008ae2:	2300      	movne	r3, #0
 8008ae4:	eba6 0807 	sub.w	r8, r6, r7
 8008ae8:	608b      	str	r3, [r1, #8]
 8008aea:	f1b8 0f00 	cmp.w	r8, #0
 8008aee:	dd9c      	ble.n	8008a2a <__sflush_r+0x1a>
 8008af0:	6a21      	ldr	r1, [r4, #32]
 8008af2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008af4:	4643      	mov	r3, r8
 8008af6:	463a      	mov	r2, r7
 8008af8:	4628      	mov	r0, r5
 8008afa:	47b0      	blx	r6
 8008afc:	2800      	cmp	r0, #0
 8008afe:	dc06      	bgt.n	8008b0e <__sflush_r+0xfe>
 8008b00:	89a3      	ldrh	r3, [r4, #12]
 8008b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b06:	81a3      	strh	r3, [r4, #12]
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0c:	e78e      	b.n	8008a2c <__sflush_r+0x1c>
 8008b0e:	4407      	add	r7, r0
 8008b10:	eba8 0800 	sub.w	r8, r8, r0
 8008b14:	e7e9      	b.n	8008aea <__sflush_r+0xda>
 8008b16:	bf00      	nop
 8008b18:	20400001 	.word	0x20400001

08008b1c <_fflush_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	690b      	ldr	r3, [r1, #16]
 8008b20:	4605      	mov	r5, r0
 8008b22:	460c      	mov	r4, r1
 8008b24:	b913      	cbnz	r3, 8008b2c <_fflush_r+0x10>
 8008b26:	2500      	movs	r5, #0
 8008b28:	4628      	mov	r0, r5
 8008b2a:	bd38      	pop	{r3, r4, r5, pc}
 8008b2c:	b118      	cbz	r0, 8008b36 <_fflush_r+0x1a>
 8008b2e:	6983      	ldr	r3, [r0, #24]
 8008b30:	b90b      	cbnz	r3, 8008b36 <_fflush_r+0x1a>
 8008b32:	f000 f887 	bl	8008c44 <__sinit>
 8008b36:	4b14      	ldr	r3, [pc, #80]	; (8008b88 <_fflush_r+0x6c>)
 8008b38:	429c      	cmp	r4, r3
 8008b3a:	d11b      	bne.n	8008b74 <_fflush_r+0x58>
 8008b3c:	686c      	ldr	r4, [r5, #4]
 8008b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0ef      	beq.n	8008b26 <_fflush_r+0xa>
 8008b46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b48:	07d0      	lsls	r0, r2, #31
 8008b4a:	d404      	bmi.n	8008b56 <_fflush_r+0x3a>
 8008b4c:	0599      	lsls	r1, r3, #22
 8008b4e:	d402      	bmi.n	8008b56 <_fflush_r+0x3a>
 8008b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b52:	f000 f91a 	bl	8008d8a <__retarget_lock_acquire_recursive>
 8008b56:	4628      	mov	r0, r5
 8008b58:	4621      	mov	r1, r4
 8008b5a:	f7ff ff59 	bl	8008a10 <__sflush_r>
 8008b5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b60:	07da      	lsls	r2, r3, #31
 8008b62:	4605      	mov	r5, r0
 8008b64:	d4e0      	bmi.n	8008b28 <_fflush_r+0xc>
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	059b      	lsls	r3, r3, #22
 8008b6a:	d4dd      	bmi.n	8008b28 <_fflush_r+0xc>
 8008b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b6e:	f000 f90d 	bl	8008d8c <__retarget_lock_release_recursive>
 8008b72:	e7d9      	b.n	8008b28 <_fflush_r+0xc>
 8008b74:	4b05      	ldr	r3, [pc, #20]	; (8008b8c <_fflush_r+0x70>)
 8008b76:	429c      	cmp	r4, r3
 8008b78:	d101      	bne.n	8008b7e <_fflush_r+0x62>
 8008b7a:	68ac      	ldr	r4, [r5, #8]
 8008b7c:	e7df      	b.n	8008b3e <_fflush_r+0x22>
 8008b7e:	4b04      	ldr	r3, [pc, #16]	; (8008b90 <_fflush_r+0x74>)
 8008b80:	429c      	cmp	r4, r3
 8008b82:	bf08      	it	eq
 8008b84:	68ec      	ldreq	r4, [r5, #12]
 8008b86:	e7da      	b.n	8008b3e <_fflush_r+0x22>
 8008b88:	0800b208 	.word	0x0800b208
 8008b8c:	0800b228 	.word	0x0800b228
 8008b90:	0800b1e8 	.word	0x0800b1e8

08008b94 <std>:
 8008b94:	2300      	movs	r3, #0
 8008b96:	b510      	push	{r4, lr}
 8008b98:	4604      	mov	r4, r0
 8008b9a:	e9c0 3300 	strd	r3, r3, [r0]
 8008b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ba2:	6083      	str	r3, [r0, #8]
 8008ba4:	8181      	strh	r1, [r0, #12]
 8008ba6:	6643      	str	r3, [r0, #100]	; 0x64
 8008ba8:	81c2      	strh	r2, [r0, #14]
 8008baa:	6183      	str	r3, [r0, #24]
 8008bac:	4619      	mov	r1, r3
 8008bae:	2208      	movs	r2, #8
 8008bb0:	305c      	adds	r0, #92	; 0x5c
 8008bb2:	f7fe faf5 	bl	80071a0 <memset>
 8008bb6:	4b05      	ldr	r3, [pc, #20]	; (8008bcc <std+0x38>)
 8008bb8:	6263      	str	r3, [r4, #36]	; 0x24
 8008bba:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <std+0x3c>)
 8008bbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bbe:	4b05      	ldr	r3, [pc, #20]	; (8008bd4 <std+0x40>)
 8008bc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bc2:	4b05      	ldr	r3, [pc, #20]	; (8008bd8 <std+0x44>)
 8008bc4:	6224      	str	r4, [r4, #32]
 8008bc6:	6323      	str	r3, [r4, #48]	; 0x30
 8008bc8:	bd10      	pop	{r4, pc}
 8008bca:	bf00      	nop
 8008bcc:	080099c9 	.word	0x080099c9
 8008bd0:	080099eb 	.word	0x080099eb
 8008bd4:	08009a23 	.word	0x08009a23
 8008bd8:	08009a47 	.word	0x08009a47

08008bdc <_cleanup_r>:
 8008bdc:	4901      	ldr	r1, [pc, #4]	; (8008be4 <_cleanup_r+0x8>)
 8008bde:	f000 b8af 	b.w	8008d40 <_fwalk_reent>
 8008be2:	bf00      	nop
 8008be4:	08008b1d 	.word	0x08008b1d

08008be8 <__sfmoreglue>:
 8008be8:	b570      	push	{r4, r5, r6, lr}
 8008bea:	1e4a      	subs	r2, r1, #1
 8008bec:	2568      	movs	r5, #104	; 0x68
 8008bee:	4355      	muls	r5, r2
 8008bf0:	460e      	mov	r6, r1
 8008bf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008bf6:	f000 fd23 	bl	8009640 <_malloc_r>
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	b140      	cbz	r0, 8008c10 <__sfmoreglue+0x28>
 8008bfe:	2100      	movs	r1, #0
 8008c00:	e9c0 1600 	strd	r1, r6, [r0]
 8008c04:	300c      	adds	r0, #12
 8008c06:	60a0      	str	r0, [r4, #8]
 8008c08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c0c:	f7fe fac8 	bl	80071a0 <memset>
 8008c10:	4620      	mov	r0, r4
 8008c12:	bd70      	pop	{r4, r5, r6, pc}

08008c14 <__sfp_lock_acquire>:
 8008c14:	4801      	ldr	r0, [pc, #4]	; (8008c1c <__sfp_lock_acquire+0x8>)
 8008c16:	f000 b8b8 	b.w	8008d8a <__retarget_lock_acquire_recursive>
 8008c1a:	bf00      	nop
 8008c1c:	20000388 	.word	0x20000388

08008c20 <__sfp_lock_release>:
 8008c20:	4801      	ldr	r0, [pc, #4]	; (8008c28 <__sfp_lock_release+0x8>)
 8008c22:	f000 b8b3 	b.w	8008d8c <__retarget_lock_release_recursive>
 8008c26:	bf00      	nop
 8008c28:	20000388 	.word	0x20000388

08008c2c <__sinit_lock_acquire>:
 8008c2c:	4801      	ldr	r0, [pc, #4]	; (8008c34 <__sinit_lock_acquire+0x8>)
 8008c2e:	f000 b8ac 	b.w	8008d8a <__retarget_lock_acquire_recursive>
 8008c32:	bf00      	nop
 8008c34:	20000383 	.word	0x20000383

08008c38 <__sinit_lock_release>:
 8008c38:	4801      	ldr	r0, [pc, #4]	; (8008c40 <__sinit_lock_release+0x8>)
 8008c3a:	f000 b8a7 	b.w	8008d8c <__retarget_lock_release_recursive>
 8008c3e:	bf00      	nop
 8008c40:	20000383 	.word	0x20000383

08008c44 <__sinit>:
 8008c44:	b510      	push	{r4, lr}
 8008c46:	4604      	mov	r4, r0
 8008c48:	f7ff fff0 	bl	8008c2c <__sinit_lock_acquire>
 8008c4c:	69a3      	ldr	r3, [r4, #24]
 8008c4e:	b11b      	cbz	r3, 8008c58 <__sinit+0x14>
 8008c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c54:	f7ff bff0 	b.w	8008c38 <__sinit_lock_release>
 8008c58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c5c:	6523      	str	r3, [r4, #80]	; 0x50
 8008c5e:	4b13      	ldr	r3, [pc, #76]	; (8008cac <__sinit+0x68>)
 8008c60:	4a13      	ldr	r2, [pc, #76]	; (8008cb0 <__sinit+0x6c>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c66:	42a3      	cmp	r3, r4
 8008c68:	bf04      	itt	eq
 8008c6a:	2301      	moveq	r3, #1
 8008c6c:	61a3      	streq	r3, [r4, #24]
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f000 f820 	bl	8008cb4 <__sfp>
 8008c74:	6060      	str	r0, [r4, #4]
 8008c76:	4620      	mov	r0, r4
 8008c78:	f000 f81c 	bl	8008cb4 <__sfp>
 8008c7c:	60a0      	str	r0, [r4, #8]
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f000 f818 	bl	8008cb4 <__sfp>
 8008c84:	2200      	movs	r2, #0
 8008c86:	60e0      	str	r0, [r4, #12]
 8008c88:	2104      	movs	r1, #4
 8008c8a:	6860      	ldr	r0, [r4, #4]
 8008c8c:	f7ff ff82 	bl	8008b94 <std>
 8008c90:	68a0      	ldr	r0, [r4, #8]
 8008c92:	2201      	movs	r2, #1
 8008c94:	2109      	movs	r1, #9
 8008c96:	f7ff ff7d 	bl	8008b94 <std>
 8008c9a:	68e0      	ldr	r0, [r4, #12]
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	2112      	movs	r1, #18
 8008ca0:	f7ff ff78 	bl	8008b94 <std>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	61a3      	str	r3, [r4, #24]
 8008ca8:	e7d2      	b.n	8008c50 <__sinit+0xc>
 8008caa:	bf00      	nop
 8008cac:	0800b11c 	.word	0x0800b11c
 8008cb0:	08008bdd 	.word	0x08008bdd

08008cb4 <__sfp>:
 8008cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb6:	4607      	mov	r7, r0
 8008cb8:	f7ff ffac 	bl	8008c14 <__sfp_lock_acquire>
 8008cbc:	4b1e      	ldr	r3, [pc, #120]	; (8008d38 <__sfp+0x84>)
 8008cbe:	681e      	ldr	r6, [r3, #0]
 8008cc0:	69b3      	ldr	r3, [r6, #24]
 8008cc2:	b913      	cbnz	r3, 8008cca <__sfp+0x16>
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f7ff ffbd 	bl	8008c44 <__sinit>
 8008cca:	3648      	adds	r6, #72	; 0x48
 8008ccc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	d503      	bpl.n	8008cdc <__sfp+0x28>
 8008cd4:	6833      	ldr	r3, [r6, #0]
 8008cd6:	b30b      	cbz	r3, 8008d1c <__sfp+0x68>
 8008cd8:	6836      	ldr	r6, [r6, #0]
 8008cda:	e7f7      	b.n	8008ccc <__sfp+0x18>
 8008cdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ce0:	b9d5      	cbnz	r5, 8008d18 <__sfp+0x64>
 8008ce2:	4b16      	ldr	r3, [pc, #88]	; (8008d3c <__sfp+0x88>)
 8008ce4:	60e3      	str	r3, [r4, #12]
 8008ce6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cea:	6665      	str	r5, [r4, #100]	; 0x64
 8008cec:	f000 f84c 	bl	8008d88 <__retarget_lock_init_recursive>
 8008cf0:	f7ff ff96 	bl	8008c20 <__sfp_lock_release>
 8008cf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008cf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008cfc:	6025      	str	r5, [r4, #0]
 8008cfe:	61a5      	str	r5, [r4, #24]
 8008d00:	2208      	movs	r2, #8
 8008d02:	4629      	mov	r1, r5
 8008d04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d08:	f7fe fa4a 	bl	80071a0 <memset>
 8008d0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d14:	4620      	mov	r0, r4
 8008d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d18:	3468      	adds	r4, #104	; 0x68
 8008d1a:	e7d9      	b.n	8008cd0 <__sfp+0x1c>
 8008d1c:	2104      	movs	r1, #4
 8008d1e:	4638      	mov	r0, r7
 8008d20:	f7ff ff62 	bl	8008be8 <__sfmoreglue>
 8008d24:	4604      	mov	r4, r0
 8008d26:	6030      	str	r0, [r6, #0]
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d1d5      	bne.n	8008cd8 <__sfp+0x24>
 8008d2c:	f7ff ff78 	bl	8008c20 <__sfp_lock_release>
 8008d30:	230c      	movs	r3, #12
 8008d32:	603b      	str	r3, [r7, #0]
 8008d34:	e7ee      	b.n	8008d14 <__sfp+0x60>
 8008d36:	bf00      	nop
 8008d38:	0800b11c 	.word	0x0800b11c
 8008d3c:	ffff0001 	.word	0xffff0001

08008d40 <_fwalk_reent>:
 8008d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d44:	4606      	mov	r6, r0
 8008d46:	4688      	mov	r8, r1
 8008d48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d4c:	2700      	movs	r7, #0
 8008d4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d52:	f1b9 0901 	subs.w	r9, r9, #1
 8008d56:	d505      	bpl.n	8008d64 <_fwalk_reent+0x24>
 8008d58:	6824      	ldr	r4, [r4, #0]
 8008d5a:	2c00      	cmp	r4, #0
 8008d5c:	d1f7      	bne.n	8008d4e <_fwalk_reent+0xe>
 8008d5e:	4638      	mov	r0, r7
 8008d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d64:	89ab      	ldrh	r3, [r5, #12]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d907      	bls.n	8008d7a <_fwalk_reent+0x3a>
 8008d6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	d003      	beq.n	8008d7a <_fwalk_reent+0x3a>
 8008d72:	4629      	mov	r1, r5
 8008d74:	4630      	mov	r0, r6
 8008d76:	47c0      	blx	r8
 8008d78:	4307      	orrs	r7, r0
 8008d7a:	3568      	adds	r5, #104	; 0x68
 8008d7c:	e7e9      	b.n	8008d52 <_fwalk_reent+0x12>
	...

08008d80 <_localeconv_r>:
 8008d80:	4800      	ldr	r0, [pc, #0]	; (8008d84 <_localeconv_r+0x4>)
 8008d82:	4770      	bx	lr
 8008d84:	20000160 	.word	0x20000160

08008d88 <__retarget_lock_init_recursive>:
 8008d88:	4770      	bx	lr

08008d8a <__retarget_lock_acquire_recursive>:
 8008d8a:	4770      	bx	lr

08008d8c <__retarget_lock_release_recursive>:
 8008d8c:	4770      	bx	lr

08008d8e <__swhatbuf_r>:
 8008d8e:	b570      	push	{r4, r5, r6, lr}
 8008d90:	460e      	mov	r6, r1
 8008d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d96:	2900      	cmp	r1, #0
 8008d98:	b096      	sub	sp, #88	; 0x58
 8008d9a:	4614      	mov	r4, r2
 8008d9c:	461d      	mov	r5, r3
 8008d9e:	da07      	bge.n	8008db0 <__swhatbuf_r+0x22>
 8008da0:	2300      	movs	r3, #0
 8008da2:	602b      	str	r3, [r5, #0]
 8008da4:	89b3      	ldrh	r3, [r6, #12]
 8008da6:	061a      	lsls	r2, r3, #24
 8008da8:	d410      	bmi.n	8008dcc <__swhatbuf_r+0x3e>
 8008daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dae:	e00e      	b.n	8008dce <__swhatbuf_r+0x40>
 8008db0:	466a      	mov	r2, sp
 8008db2:	f000 fe9f 	bl	8009af4 <_fstat_r>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	dbf2      	blt.n	8008da0 <__swhatbuf_r+0x12>
 8008dba:	9a01      	ldr	r2, [sp, #4]
 8008dbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008dc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008dc4:	425a      	negs	r2, r3
 8008dc6:	415a      	adcs	r2, r3
 8008dc8:	602a      	str	r2, [r5, #0]
 8008dca:	e7ee      	b.n	8008daa <__swhatbuf_r+0x1c>
 8008dcc:	2340      	movs	r3, #64	; 0x40
 8008dce:	2000      	movs	r0, #0
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	b016      	add	sp, #88	; 0x58
 8008dd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008dd8 <__smakebuf_r>:
 8008dd8:	898b      	ldrh	r3, [r1, #12]
 8008dda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ddc:	079d      	lsls	r5, r3, #30
 8008dde:	4606      	mov	r6, r0
 8008de0:	460c      	mov	r4, r1
 8008de2:	d507      	bpl.n	8008df4 <__smakebuf_r+0x1c>
 8008de4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	6123      	str	r3, [r4, #16]
 8008dec:	2301      	movs	r3, #1
 8008dee:	6163      	str	r3, [r4, #20]
 8008df0:	b002      	add	sp, #8
 8008df2:	bd70      	pop	{r4, r5, r6, pc}
 8008df4:	ab01      	add	r3, sp, #4
 8008df6:	466a      	mov	r2, sp
 8008df8:	f7ff ffc9 	bl	8008d8e <__swhatbuf_r>
 8008dfc:	9900      	ldr	r1, [sp, #0]
 8008dfe:	4605      	mov	r5, r0
 8008e00:	4630      	mov	r0, r6
 8008e02:	f000 fc1d 	bl	8009640 <_malloc_r>
 8008e06:	b948      	cbnz	r0, 8008e1c <__smakebuf_r+0x44>
 8008e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e0c:	059a      	lsls	r2, r3, #22
 8008e0e:	d4ef      	bmi.n	8008df0 <__smakebuf_r+0x18>
 8008e10:	f023 0303 	bic.w	r3, r3, #3
 8008e14:	f043 0302 	orr.w	r3, r3, #2
 8008e18:	81a3      	strh	r3, [r4, #12]
 8008e1a:	e7e3      	b.n	8008de4 <__smakebuf_r+0xc>
 8008e1c:	4b0d      	ldr	r3, [pc, #52]	; (8008e54 <__smakebuf_r+0x7c>)
 8008e1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	6020      	str	r0, [r4, #0]
 8008e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e28:	81a3      	strh	r3, [r4, #12]
 8008e2a:	9b00      	ldr	r3, [sp, #0]
 8008e2c:	6163      	str	r3, [r4, #20]
 8008e2e:	9b01      	ldr	r3, [sp, #4]
 8008e30:	6120      	str	r0, [r4, #16]
 8008e32:	b15b      	cbz	r3, 8008e4c <__smakebuf_r+0x74>
 8008e34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f000 fe6d 	bl	8009b18 <_isatty_r>
 8008e3e:	b128      	cbz	r0, 8008e4c <__smakebuf_r+0x74>
 8008e40:	89a3      	ldrh	r3, [r4, #12]
 8008e42:	f023 0303 	bic.w	r3, r3, #3
 8008e46:	f043 0301 	orr.w	r3, r3, #1
 8008e4a:	81a3      	strh	r3, [r4, #12]
 8008e4c:	89a0      	ldrh	r0, [r4, #12]
 8008e4e:	4305      	orrs	r5, r0
 8008e50:	81a5      	strh	r5, [r4, #12]
 8008e52:	e7cd      	b.n	8008df0 <__smakebuf_r+0x18>
 8008e54:	08008bdd 	.word	0x08008bdd

08008e58 <malloc>:
 8008e58:	4b02      	ldr	r3, [pc, #8]	; (8008e64 <malloc+0xc>)
 8008e5a:	4601      	mov	r1, r0
 8008e5c:	6818      	ldr	r0, [r3, #0]
 8008e5e:	f000 bbef 	b.w	8009640 <_malloc_r>
 8008e62:	bf00      	nop
 8008e64:	2000000c 	.word	0x2000000c

08008e68 <memcpy>:
 8008e68:	440a      	add	r2, r1
 8008e6a:	4291      	cmp	r1, r2
 8008e6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e70:	d100      	bne.n	8008e74 <memcpy+0xc>
 8008e72:	4770      	bx	lr
 8008e74:	b510      	push	{r4, lr}
 8008e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e7e:	4291      	cmp	r1, r2
 8008e80:	d1f9      	bne.n	8008e76 <memcpy+0xe>
 8008e82:	bd10      	pop	{r4, pc}

08008e84 <_Balloc>:
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e88:	4604      	mov	r4, r0
 8008e8a:	460d      	mov	r5, r1
 8008e8c:	b976      	cbnz	r6, 8008eac <_Balloc+0x28>
 8008e8e:	2010      	movs	r0, #16
 8008e90:	f7ff ffe2 	bl	8008e58 <malloc>
 8008e94:	4602      	mov	r2, r0
 8008e96:	6260      	str	r0, [r4, #36]	; 0x24
 8008e98:	b920      	cbnz	r0, 8008ea4 <_Balloc+0x20>
 8008e9a:	4b18      	ldr	r3, [pc, #96]	; (8008efc <_Balloc+0x78>)
 8008e9c:	4818      	ldr	r0, [pc, #96]	; (8008f00 <_Balloc+0x7c>)
 8008e9e:	2166      	movs	r1, #102	; 0x66
 8008ea0:	f000 fde8 	bl	8009a74 <__assert_func>
 8008ea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ea8:	6006      	str	r6, [r0, #0]
 8008eaa:	60c6      	str	r6, [r0, #12]
 8008eac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008eae:	68f3      	ldr	r3, [r6, #12]
 8008eb0:	b183      	cbz	r3, 8008ed4 <_Balloc+0x50>
 8008eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008eba:	b9b8      	cbnz	r0, 8008eec <_Balloc+0x68>
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	fa01 f605 	lsl.w	r6, r1, r5
 8008ec2:	1d72      	adds	r2, r6, #5
 8008ec4:	0092      	lsls	r2, r2, #2
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f000 fb5a 	bl	8009580 <_calloc_r>
 8008ecc:	b160      	cbz	r0, 8008ee8 <_Balloc+0x64>
 8008ece:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ed2:	e00e      	b.n	8008ef2 <_Balloc+0x6e>
 8008ed4:	2221      	movs	r2, #33	; 0x21
 8008ed6:	2104      	movs	r1, #4
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f000 fb51 	bl	8009580 <_calloc_r>
 8008ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ee0:	60f0      	str	r0, [r6, #12]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e4      	bne.n	8008eb2 <_Balloc+0x2e>
 8008ee8:	2000      	movs	r0, #0
 8008eea:	bd70      	pop	{r4, r5, r6, pc}
 8008eec:	6802      	ldr	r2, [r0, #0]
 8008eee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ef8:	e7f7      	b.n	8008eea <_Balloc+0x66>
 8008efa:	bf00      	nop
 8008efc:	0800b161 	.word	0x0800b161
 8008f00:	0800b248 	.word	0x0800b248

08008f04 <_Bfree>:
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f08:	4605      	mov	r5, r0
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	b976      	cbnz	r6, 8008f2c <_Bfree+0x28>
 8008f0e:	2010      	movs	r0, #16
 8008f10:	f7ff ffa2 	bl	8008e58 <malloc>
 8008f14:	4602      	mov	r2, r0
 8008f16:	6268      	str	r0, [r5, #36]	; 0x24
 8008f18:	b920      	cbnz	r0, 8008f24 <_Bfree+0x20>
 8008f1a:	4b09      	ldr	r3, [pc, #36]	; (8008f40 <_Bfree+0x3c>)
 8008f1c:	4809      	ldr	r0, [pc, #36]	; (8008f44 <_Bfree+0x40>)
 8008f1e:	218a      	movs	r1, #138	; 0x8a
 8008f20:	f000 fda8 	bl	8009a74 <__assert_func>
 8008f24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f28:	6006      	str	r6, [r0, #0]
 8008f2a:	60c6      	str	r6, [r0, #12]
 8008f2c:	b13c      	cbz	r4, 8008f3e <_Bfree+0x3a>
 8008f2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f30:	6862      	ldr	r2, [r4, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f38:	6021      	str	r1, [r4, #0]
 8008f3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}
 8008f40:	0800b161 	.word	0x0800b161
 8008f44:	0800b248 	.word	0x0800b248

08008f48 <__multadd>:
 8008f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4c:	690e      	ldr	r6, [r1, #16]
 8008f4e:	4607      	mov	r7, r0
 8008f50:	4698      	mov	r8, r3
 8008f52:	460c      	mov	r4, r1
 8008f54:	f101 0014 	add.w	r0, r1, #20
 8008f58:	2300      	movs	r3, #0
 8008f5a:	6805      	ldr	r5, [r0, #0]
 8008f5c:	b2a9      	uxth	r1, r5
 8008f5e:	fb02 8101 	mla	r1, r2, r1, r8
 8008f62:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008f66:	0c2d      	lsrs	r5, r5, #16
 8008f68:	fb02 c505 	mla	r5, r2, r5, ip
 8008f6c:	b289      	uxth	r1, r1
 8008f6e:	3301      	adds	r3, #1
 8008f70:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008f74:	429e      	cmp	r6, r3
 8008f76:	f840 1b04 	str.w	r1, [r0], #4
 8008f7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008f7e:	dcec      	bgt.n	8008f5a <__multadd+0x12>
 8008f80:	f1b8 0f00 	cmp.w	r8, #0
 8008f84:	d022      	beq.n	8008fcc <__multadd+0x84>
 8008f86:	68a3      	ldr	r3, [r4, #8]
 8008f88:	42b3      	cmp	r3, r6
 8008f8a:	dc19      	bgt.n	8008fc0 <__multadd+0x78>
 8008f8c:	6861      	ldr	r1, [r4, #4]
 8008f8e:	4638      	mov	r0, r7
 8008f90:	3101      	adds	r1, #1
 8008f92:	f7ff ff77 	bl	8008e84 <_Balloc>
 8008f96:	4605      	mov	r5, r0
 8008f98:	b928      	cbnz	r0, 8008fa6 <__multadd+0x5e>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	4b0d      	ldr	r3, [pc, #52]	; (8008fd4 <__multadd+0x8c>)
 8008f9e:	480e      	ldr	r0, [pc, #56]	; (8008fd8 <__multadd+0x90>)
 8008fa0:	21b5      	movs	r1, #181	; 0xb5
 8008fa2:	f000 fd67 	bl	8009a74 <__assert_func>
 8008fa6:	6922      	ldr	r2, [r4, #16]
 8008fa8:	3202      	adds	r2, #2
 8008faa:	f104 010c 	add.w	r1, r4, #12
 8008fae:	0092      	lsls	r2, r2, #2
 8008fb0:	300c      	adds	r0, #12
 8008fb2:	f7ff ff59 	bl	8008e68 <memcpy>
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4638      	mov	r0, r7
 8008fba:	f7ff ffa3 	bl	8008f04 <_Bfree>
 8008fbe:	462c      	mov	r4, r5
 8008fc0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008fc4:	3601      	adds	r6, #1
 8008fc6:	f8c3 8014 	str.w	r8, [r3, #20]
 8008fca:	6126      	str	r6, [r4, #16]
 8008fcc:	4620      	mov	r0, r4
 8008fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd2:	bf00      	nop
 8008fd4:	0800b1d7 	.word	0x0800b1d7
 8008fd8:	0800b248 	.word	0x0800b248

08008fdc <__hi0bits>:
 8008fdc:	0c03      	lsrs	r3, r0, #16
 8008fde:	041b      	lsls	r3, r3, #16
 8008fe0:	b9d3      	cbnz	r3, 8009018 <__hi0bits+0x3c>
 8008fe2:	0400      	lsls	r0, r0, #16
 8008fe4:	2310      	movs	r3, #16
 8008fe6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008fea:	bf04      	itt	eq
 8008fec:	0200      	lsleq	r0, r0, #8
 8008fee:	3308      	addeq	r3, #8
 8008ff0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ff4:	bf04      	itt	eq
 8008ff6:	0100      	lsleq	r0, r0, #4
 8008ff8:	3304      	addeq	r3, #4
 8008ffa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ffe:	bf04      	itt	eq
 8009000:	0080      	lsleq	r0, r0, #2
 8009002:	3302      	addeq	r3, #2
 8009004:	2800      	cmp	r0, #0
 8009006:	db05      	blt.n	8009014 <__hi0bits+0x38>
 8009008:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800900c:	f103 0301 	add.w	r3, r3, #1
 8009010:	bf08      	it	eq
 8009012:	2320      	moveq	r3, #32
 8009014:	4618      	mov	r0, r3
 8009016:	4770      	bx	lr
 8009018:	2300      	movs	r3, #0
 800901a:	e7e4      	b.n	8008fe6 <__hi0bits+0xa>

0800901c <__lo0bits>:
 800901c:	6803      	ldr	r3, [r0, #0]
 800901e:	f013 0207 	ands.w	r2, r3, #7
 8009022:	4601      	mov	r1, r0
 8009024:	d00b      	beq.n	800903e <__lo0bits+0x22>
 8009026:	07da      	lsls	r2, r3, #31
 8009028:	d424      	bmi.n	8009074 <__lo0bits+0x58>
 800902a:	0798      	lsls	r0, r3, #30
 800902c:	bf49      	itett	mi
 800902e:	085b      	lsrmi	r3, r3, #1
 8009030:	089b      	lsrpl	r3, r3, #2
 8009032:	2001      	movmi	r0, #1
 8009034:	600b      	strmi	r3, [r1, #0]
 8009036:	bf5c      	itt	pl
 8009038:	600b      	strpl	r3, [r1, #0]
 800903a:	2002      	movpl	r0, #2
 800903c:	4770      	bx	lr
 800903e:	b298      	uxth	r0, r3
 8009040:	b9b0      	cbnz	r0, 8009070 <__lo0bits+0x54>
 8009042:	0c1b      	lsrs	r3, r3, #16
 8009044:	2010      	movs	r0, #16
 8009046:	f013 0fff 	tst.w	r3, #255	; 0xff
 800904a:	bf04      	itt	eq
 800904c:	0a1b      	lsreq	r3, r3, #8
 800904e:	3008      	addeq	r0, #8
 8009050:	071a      	lsls	r2, r3, #28
 8009052:	bf04      	itt	eq
 8009054:	091b      	lsreq	r3, r3, #4
 8009056:	3004      	addeq	r0, #4
 8009058:	079a      	lsls	r2, r3, #30
 800905a:	bf04      	itt	eq
 800905c:	089b      	lsreq	r3, r3, #2
 800905e:	3002      	addeq	r0, #2
 8009060:	07da      	lsls	r2, r3, #31
 8009062:	d403      	bmi.n	800906c <__lo0bits+0x50>
 8009064:	085b      	lsrs	r3, r3, #1
 8009066:	f100 0001 	add.w	r0, r0, #1
 800906a:	d005      	beq.n	8009078 <__lo0bits+0x5c>
 800906c:	600b      	str	r3, [r1, #0]
 800906e:	4770      	bx	lr
 8009070:	4610      	mov	r0, r2
 8009072:	e7e8      	b.n	8009046 <__lo0bits+0x2a>
 8009074:	2000      	movs	r0, #0
 8009076:	4770      	bx	lr
 8009078:	2020      	movs	r0, #32
 800907a:	4770      	bx	lr

0800907c <__i2b>:
 800907c:	b510      	push	{r4, lr}
 800907e:	460c      	mov	r4, r1
 8009080:	2101      	movs	r1, #1
 8009082:	f7ff feff 	bl	8008e84 <_Balloc>
 8009086:	4602      	mov	r2, r0
 8009088:	b928      	cbnz	r0, 8009096 <__i2b+0x1a>
 800908a:	4b05      	ldr	r3, [pc, #20]	; (80090a0 <__i2b+0x24>)
 800908c:	4805      	ldr	r0, [pc, #20]	; (80090a4 <__i2b+0x28>)
 800908e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009092:	f000 fcef 	bl	8009a74 <__assert_func>
 8009096:	2301      	movs	r3, #1
 8009098:	6144      	str	r4, [r0, #20]
 800909a:	6103      	str	r3, [r0, #16]
 800909c:	bd10      	pop	{r4, pc}
 800909e:	bf00      	nop
 80090a0:	0800b1d7 	.word	0x0800b1d7
 80090a4:	0800b248 	.word	0x0800b248

080090a8 <__multiply>:
 80090a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	4614      	mov	r4, r2
 80090ae:	690a      	ldr	r2, [r1, #16]
 80090b0:	6923      	ldr	r3, [r4, #16]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	bfb8      	it	lt
 80090b6:	460b      	movlt	r3, r1
 80090b8:	460d      	mov	r5, r1
 80090ba:	bfbc      	itt	lt
 80090bc:	4625      	movlt	r5, r4
 80090be:	461c      	movlt	r4, r3
 80090c0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80090c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80090c8:	68ab      	ldr	r3, [r5, #8]
 80090ca:	6869      	ldr	r1, [r5, #4]
 80090cc:	eb0a 0709 	add.w	r7, sl, r9
 80090d0:	42bb      	cmp	r3, r7
 80090d2:	b085      	sub	sp, #20
 80090d4:	bfb8      	it	lt
 80090d6:	3101      	addlt	r1, #1
 80090d8:	f7ff fed4 	bl	8008e84 <_Balloc>
 80090dc:	b930      	cbnz	r0, 80090ec <__multiply+0x44>
 80090de:	4602      	mov	r2, r0
 80090e0:	4b42      	ldr	r3, [pc, #264]	; (80091ec <__multiply+0x144>)
 80090e2:	4843      	ldr	r0, [pc, #268]	; (80091f0 <__multiply+0x148>)
 80090e4:	f240 115d 	movw	r1, #349	; 0x15d
 80090e8:	f000 fcc4 	bl	8009a74 <__assert_func>
 80090ec:	f100 0614 	add.w	r6, r0, #20
 80090f0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80090f4:	4633      	mov	r3, r6
 80090f6:	2200      	movs	r2, #0
 80090f8:	4543      	cmp	r3, r8
 80090fa:	d31e      	bcc.n	800913a <__multiply+0x92>
 80090fc:	f105 0c14 	add.w	ip, r5, #20
 8009100:	f104 0314 	add.w	r3, r4, #20
 8009104:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009108:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800910c:	9202      	str	r2, [sp, #8]
 800910e:	ebac 0205 	sub.w	r2, ip, r5
 8009112:	3a15      	subs	r2, #21
 8009114:	f022 0203 	bic.w	r2, r2, #3
 8009118:	3204      	adds	r2, #4
 800911a:	f105 0115 	add.w	r1, r5, #21
 800911e:	458c      	cmp	ip, r1
 8009120:	bf38      	it	cc
 8009122:	2204      	movcc	r2, #4
 8009124:	9201      	str	r2, [sp, #4]
 8009126:	9a02      	ldr	r2, [sp, #8]
 8009128:	9303      	str	r3, [sp, #12]
 800912a:	429a      	cmp	r2, r3
 800912c:	d808      	bhi.n	8009140 <__multiply+0x98>
 800912e:	2f00      	cmp	r7, #0
 8009130:	dc55      	bgt.n	80091de <__multiply+0x136>
 8009132:	6107      	str	r7, [r0, #16]
 8009134:	b005      	add	sp, #20
 8009136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913a:	f843 2b04 	str.w	r2, [r3], #4
 800913e:	e7db      	b.n	80090f8 <__multiply+0x50>
 8009140:	f8b3 a000 	ldrh.w	sl, [r3]
 8009144:	f1ba 0f00 	cmp.w	sl, #0
 8009148:	d020      	beq.n	800918c <__multiply+0xe4>
 800914a:	f105 0e14 	add.w	lr, r5, #20
 800914e:	46b1      	mov	r9, r6
 8009150:	2200      	movs	r2, #0
 8009152:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009156:	f8d9 b000 	ldr.w	fp, [r9]
 800915a:	b2a1      	uxth	r1, r4
 800915c:	fa1f fb8b 	uxth.w	fp, fp
 8009160:	fb0a b101 	mla	r1, sl, r1, fp
 8009164:	4411      	add	r1, r2
 8009166:	f8d9 2000 	ldr.w	r2, [r9]
 800916a:	0c24      	lsrs	r4, r4, #16
 800916c:	0c12      	lsrs	r2, r2, #16
 800916e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009172:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009176:	b289      	uxth	r1, r1
 8009178:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800917c:	45f4      	cmp	ip, lr
 800917e:	f849 1b04 	str.w	r1, [r9], #4
 8009182:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009186:	d8e4      	bhi.n	8009152 <__multiply+0xaa>
 8009188:	9901      	ldr	r1, [sp, #4]
 800918a:	5072      	str	r2, [r6, r1]
 800918c:	9a03      	ldr	r2, [sp, #12]
 800918e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009192:	3304      	adds	r3, #4
 8009194:	f1b9 0f00 	cmp.w	r9, #0
 8009198:	d01f      	beq.n	80091da <__multiply+0x132>
 800919a:	6834      	ldr	r4, [r6, #0]
 800919c:	f105 0114 	add.w	r1, r5, #20
 80091a0:	46b6      	mov	lr, r6
 80091a2:	f04f 0a00 	mov.w	sl, #0
 80091a6:	880a      	ldrh	r2, [r1, #0]
 80091a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80091ac:	fb09 b202 	mla	r2, r9, r2, fp
 80091b0:	4492      	add	sl, r2
 80091b2:	b2a4      	uxth	r4, r4
 80091b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80091b8:	f84e 4b04 	str.w	r4, [lr], #4
 80091bc:	f851 4b04 	ldr.w	r4, [r1], #4
 80091c0:	f8be 2000 	ldrh.w	r2, [lr]
 80091c4:	0c24      	lsrs	r4, r4, #16
 80091c6:	fb09 2404 	mla	r4, r9, r4, r2
 80091ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80091ce:	458c      	cmp	ip, r1
 80091d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80091d4:	d8e7      	bhi.n	80091a6 <__multiply+0xfe>
 80091d6:	9a01      	ldr	r2, [sp, #4]
 80091d8:	50b4      	str	r4, [r6, r2]
 80091da:	3604      	adds	r6, #4
 80091dc:	e7a3      	b.n	8009126 <__multiply+0x7e>
 80091de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1a5      	bne.n	8009132 <__multiply+0x8a>
 80091e6:	3f01      	subs	r7, #1
 80091e8:	e7a1      	b.n	800912e <__multiply+0x86>
 80091ea:	bf00      	nop
 80091ec:	0800b1d7 	.word	0x0800b1d7
 80091f0:	0800b248 	.word	0x0800b248

080091f4 <__pow5mult>:
 80091f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091f8:	4615      	mov	r5, r2
 80091fa:	f012 0203 	ands.w	r2, r2, #3
 80091fe:	4606      	mov	r6, r0
 8009200:	460f      	mov	r7, r1
 8009202:	d007      	beq.n	8009214 <__pow5mult+0x20>
 8009204:	4c25      	ldr	r4, [pc, #148]	; (800929c <__pow5mult+0xa8>)
 8009206:	3a01      	subs	r2, #1
 8009208:	2300      	movs	r3, #0
 800920a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800920e:	f7ff fe9b 	bl	8008f48 <__multadd>
 8009212:	4607      	mov	r7, r0
 8009214:	10ad      	asrs	r5, r5, #2
 8009216:	d03d      	beq.n	8009294 <__pow5mult+0xa0>
 8009218:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800921a:	b97c      	cbnz	r4, 800923c <__pow5mult+0x48>
 800921c:	2010      	movs	r0, #16
 800921e:	f7ff fe1b 	bl	8008e58 <malloc>
 8009222:	4602      	mov	r2, r0
 8009224:	6270      	str	r0, [r6, #36]	; 0x24
 8009226:	b928      	cbnz	r0, 8009234 <__pow5mult+0x40>
 8009228:	4b1d      	ldr	r3, [pc, #116]	; (80092a0 <__pow5mult+0xac>)
 800922a:	481e      	ldr	r0, [pc, #120]	; (80092a4 <__pow5mult+0xb0>)
 800922c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009230:	f000 fc20 	bl	8009a74 <__assert_func>
 8009234:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009238:	6004      	str	r4, [r0, #0]
 800923a:	60c4      	str	r4, [r0, #12]
 800923c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009240:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009244:	b94c      	cbnz	r4, 800925a <__pow5mult+0x66>
 8009246:	f240 2171 	movw	r1, #625	; 0x271
 800924a:	4630      	mov	r0, r6
 800924c:	f7ff ff16 	bl	800907c <__i2b>
 8009250:	2300      	movs	r3, #0
 8009252:	f8c8 0008 	str.w	r0, [r8, #8]
 8009256:	4604      	mov	r4, r0
 8009258:	6003      	str	r3, [r0, #0]
 800925a:	f04f 0900 	mov.w	r9, #0
 800925e:	07eb      	lsls	r3, r5, #31
 8009260:	d50a      	bpl.n	8009278 <__pow5mult+0x84>
 8009262:	4639      	mov	r1, r7
 8009264:	4622      	mov	r2, r4
 8009266:	4630      	mov	r0, r6
 8009268:	f7ff ff1e 	bl	80090a8 <__multiply>
 800926c:	4639      	mov	r1, r7
 800926e:	4680      	mov	r8, r0
 8009270:	4630      	mov	r0, r6
 8009272:	f7ff fe47 	bl	8008f04 <_Bfree>
 8009276:	4647      	mov	r7, r8
 8009278:	106d      	asrs	r5, r5, #1
 800927a:	d00b      	beq.n	8009294 <__pow5mult+0xa0>
 800927c:	6820      	ldr	r0, [r4, #0]
 800927e:	b938      	cbnz	r0, 8009290 <__pow5mult+0x9c>
 8009280:	4622      	mov	r2, r4
 8009282:	4621      	mov	r1, r4
 8009284:	4630      	mov	r0, r6
 8009286:	f7ff ff0f 	bl	80090a8 <__multiply>
 800928a:	6020      	str	r0, [r4, #0]
 800928c:	f8c0 9000 	str.w	r9, [r0]
 8009290:	4604      	mov	r4, r0
 8009292:	e7e4      	b.n	800925e <__pow5mult+0x6a>
 8009294:	4638      	mov	r0, r7
 8009296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800929a:	bf00      	nop
 800929c:	0800b398 	.word	0x0800b398
 80092a0:	0800b161 	.word	0x0800b161
 80092a4:	0800b248 	.word	0x0800b248

080092a8 <__lshift>:
 80092a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ac:	460c      	mov	r4, r1
 80092ae:	6849      	ldr	r1, [r1, #4]
 80092b0:	6923      	ldr	r3, [r4, #16]
 80092b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092b6:	68a3      	ldr	r3, [r4, #8]
 80092b8:	4607      	mov	r7, r0
 80092ba:	4691      	mov	r9, r2
 80092bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092c0:	f108 0601 	add.w	r6, r8, #1
 80092c4:	42b3      	cmp	r3, r6
 80092c6:	db0b      	blt.n	80092e0 <__lshift+0x38>
 80092c8:	4638      	mov	r0, r7
 80092ca:	f7ff fddb 	bl	8008e84 <_Balloc>
 80092ce:	4605      	mov	r5, r0
 80092d0:	b948      	cbnz	r0, 80092e6 <__lshift+0x3e>
 80092d2:	4602      	mov	r2, r0
 80092d4:	4b28      	ldr	r3, [pc, #160]	; (8009378 <__lshift+0xd0>)
 80092d6:	4829      	ldr	r0, [pc, #164]	; (800937c <__lshift+0xd4>)
 80092d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80092dc:	f000 fbca 	bl	8009a74 <__assert_func>
 80092e0:	3101      	adds	r1, #1
 80092e2:	005b      	lsls	r3, r3, #1
 80092e4:	e7ee      	b.n	80092c4 <__lshift+0x1c>
 80092e6:	2300      	movs	r3, #0
 80092e8:	f100 0114 	add.w	r1, r0, #20
 80092ec:	f100 0210 	add.w	r2, r0, #16
 80092f0:	4618      	mov	r0, r3
 80092f2:	4553      	cmp	r3, sl
 80092f4:	db33      	blt.n	800935e <__lshift+0xb6>
 80092f6:	6920      	ldr	r0, [r4, #16]
 80092f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092fc:	f104 0314 	add.w	r3, r4, #20
 8009300:	f019 091f 	ands.w	r9, r9, #31
 8009304:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009308:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800930c:	d02b      	beq.n	8009366 <__lshift+0xbe>
 800930e:	f1c9 0e20 	rsb	lr, r9, #32
 8009312:	468a      	mov	sl, r1
 8009314:	2200      	movs	r2, #0
 8009316:	6818      	ldr	r0, [r3, #0]
 8009318:	fa00 f009 	lsl.w	r0, r0, r9
 800931c:	4302      	orrs	r2, r0
 800931e:	f84a 2b04 	str.w	r2, [sl], #4
 8009322:	f853 2b04 	ldr.w	r2, [r3], #4
 8009326:	459c      	cmp	ip, r3
 8009328:	fa22 f20e 	lsr.w	r2, r2, lr
 800932c:	d8f3      	bhi.n	8009316 <__lshift+0x6e>
 800932e:	ebac 0304 	sub.w	r3, ip, r4
 8009332:	3b15      	subs	r3, #21
 8009334:	f023 0303 	bic.w	r3, r3, #3
 8009338:	3304      	adds	r3, #4
 800933a:	f104 0015 	add.w	r0, r4, #21
 800933e:	4584      	cmp	ip, r0
 8009340:	bf38      	it	cc
 8009342:	2304      	movcc	r3, #4
 8009344:	50ca      	str	r2, [r1, r3]
 8009346:	b10a      	cbz	r2, 800934c <__lshift+0xa4>
 8009348:	f108 0602 	add.w	r6, r8, #2
 800934c:	3e01      	subs	r6, #1
 800934e:	4638      	mov	r0, r7
 8009350:	612e      	str	r6, [r5, #16]
 8009352:	4621      	mov	r1, r4
 8009354:	f7ff fdd6 	bl	8008f04 <_Bfree>
 8009358:	4628      	mov	r0, r5
 800935a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009362:	3301      	adds	r3, #1
 8009364:	e7c5      	b.n	80092f2 <__lshift+0x4a>
 8009366:	3904      	subs	r1, #4
 8009368:	f853 2b04 	ldr.w	r2, [r3], #4
 800936c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009370:	459c      	cmp	ip, r3
 8009372:	d8f9      	bhi.n	8009368 <__lshift+0xc0>
 8009374:	e7ea      	b.n	800934c <__lshift+0xa4>
 8009376:	bf00      	nop
 8009378:	0800b1d7 	.word	0x0800b1d7
 800937c:	0800b248 	.word	0x0800b248

08009380 <__mcmp>:
 8009380:	b530      	push	{r4, r5, lr}
 8009382:	6902      	ldr	r2, [r0, #16]
 8009384:	690c      	ldr	r4, [r1, #16]
 8009386:	1b12      	subs	r2, r2, r4
 8009388:	d10e      	bne.n	80093a8 <__mcmp+0x28>
 800938a:	f100 0314 	add.w	r3, r0, #20
 800938e:	3114      	adds	r1, #20
 8009390:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009394:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009398:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800939c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80093a0:	42a5      	cmp	r5, r4
 80093a2:	d003      	beq.n	80093ac <__mcmp+0x2c>
 80093a4:	d305      	bcc.n	80093b2 <__mcmp+0x32>
 80093a6:	2201      	movs	r2, #1
 80093a8:	4610      	mov	r0, r2
 80093aa:	bd30      	pop	{r4, r5, pc}
 80093ac:	4283      	cmp	r3, r0
 80093ae:	d3f3      	bcc.n	8009398 <__mcmp+0x18>
 80093b0:	e7fa      	b.n	80093a8 <__mcmp+0x28>
 80093b2:	f04f 32ff 	mov.w	r2, #4294967295
 80093b6:	e7f7      	b.n	80093a8 <__mcmp+0x28>

080093b8 <__mdiff>:
 80093b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093bc:	460c      	mov	r4, r1
 80093be:	4606      	mov	r6, r0
 80093c0:	4611      	mov	r1, r2
 80093c2:	4620      	mov	r0, r4
 80093c4:	4617      	mov	r7, r2
 80093c6:	f7ff ffdb 	bl	8009380 <__mcmp>
 80093ca:	1e05      	subs	r5, r0, #0
 80093cc:	d110      	bne.n	80093f0 <__mdiff+0x38>
 80093ce:	4629      	mov	r1, r5
 80093d0:	4630      	mov	r0, r6
 80093d2:	f7ff fd57 	bl	8008e84 <_Balloc>
 80093d6:	b930      	cbnz	r0, 80093e6 <__mdiff+0x2e>
 80093d8:	4b39      	ldr	r3, [pc, #228]	; (80094c0 <__mdiff+0x108>)
 80093da:	4602      	mov	r2, r0
 80093dc:	f240 2132 	movw	r1, #562	; 0x232
 80093e0:	4838      	ldr	r0, [pc, #224]	; (80094c4 <__mdiff+0x10c>)
 80093e2:	f000 fb47 	bl	8009a74 <__assert_func>
 80093e6:	2301      	movs	r3, #1
 80093e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f0:	bfa4      	itt	ge
 80093f2:	463b      	movge	r3, r7
 80093f4:	4627      	movge	r7, r4
 80093f6:	4630      	mov	r0, r6
 80093f8:	6879      	ldr	r1, [r7, #4]
 80093fa:	bfa6      	itte	ge
 80093fc:	461c      	movge	r4, r3
 80093fe:	2500      	movge	r5, #0
 8009400:	2501      	movlt	r5, #1
 8009402:	f7ff fd3f 	bl	8008e84 <_Balloc>
 8009406:	b920      	cbnz	r0, 8009412 <__mdiff+0x5a>
 8009408:	4b2d      	ldr	r3, [pc, #180]	; (80094c0 <__mdiff+0x108>)
 800940a:	4602      	mov	r2, r0
 800940c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009410:	e7e6      	b.n	80093e0 <__mdiff+0x28>
 8009412:	693e      	ldr	r6, [r7, #16]
 8009414:	60c5      	str	r5, [r0, #12]
 8009416:	6925      	ldr	r5, [r4, #16]
 8009418:	f107 0114 	add.w	r1, r7, #20
 800941c:	f104 0914 	add.w	r9, r4, #20
 8009420:	f100 0e14 	add.w	lr, r0, #20
 8009424:	f107 0210 	add.w	r2, r7, #16
 8009428:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800942c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009430:	46f2      	mov	sl, lr
 8009432:	2700      	movs	r7, #0
 8009434:	f859 3b04 	ldr.w	r3, [r9], #4
 8009438:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800943c:	fa1f f883 	uxth.w	r8, r3
 8009440:	fa17 f78b 	uxtah	r7, r7, fp
 8009444:	0c1b      	lsrs	r3, r3, #16
 8009446:	eba7 0808 	sub.w	r8, r7, r8
 800944a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800944e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009452:	fa1f f888 	uxth.w	r8, r8
 8009456:	141f      	asrs	r7, r3, #16
 8009458:	454d      	cmp	r5, r9
 800945a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800945e:	f84a 3b04 	str.w	r3, [sl], #4
 8009462:	d8e7      	bhi.n	8009434 <__mdiff+0x7c>
 8009464:	1b2b      	subs	r3, r5, r4
 8009466:	3b15      	subs	r3, #21
 8009468:	f023 0303 	bic.w	r3, r3, #3
 800946c:	3304      	adds	r3, #4
 800946e:	3415      	adds	r4, #21
 8009470:	42a5      	cmp	r5, r4
 8009472:	bf38      	it	cc
 8009474:	2304      	movcc	r3, #4
 8009476:	4419      	add	r1, r3
 8009478:	4473      	add	r3, lr
 800947a:	469e      	mov	lr, r3
 800947c:	460d      	mov	r5, r1
 800947e:	4565      	cmp	r5, ip
 8009480:	d30e      	bcc.n	80094a0 <__mdiff+0xe8>
 8009482:	f10c 0203 	add.w	r2, ip, #3
 8009486:	1a52      	subs	r2, r2, r1
 8009488:	f022 0203 	bic.w	r2, r2, #3
 800948c:	3903      	subs	r1, #3
 800948e:	458c      	cmp	ip, r1
 8009490:	bf38      	it	cc
 8009492:	2200      	movcc	r2, #0
 8009494:	441a      	add	r2, r3
 8009496:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800949a:	b17b      	cbz	r3, 80094bc <__mdiff+0x104>
 800949c:	6106      	str	r6, [r0, #16]
 800949e:	e7a5      	b.n	80093ec <__mdiff+0x34>
 80094a0:	f855 8b04 	ldr.w	r8, [r5], #4
 80094a4:	fa17 f488 	uxtah	r4, r7, r8
 80094a8:	1422      	asrs	r2, r4, #16
 80094aa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80094ae:	b2a4      	uxth	r4, r4
 80094b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80094b4:	f84e 4b04 	str.w	r4, [lr], #4
 80094b8:	1417      	asrs	r7, r2, #16
 80094ba:	e7e0      	b.n	800947e <__mdiff+0xc6>
 80094bc:	3e01      	subs	r6, #1
 80094be:	e7ea      	b.n	8009496 <__mdiff+0xde>
 80094c0:	0800b1d7 	.word	0x0800b1d7
 80094c4:	0800b248 	.word	0x0800b248

080094c8 <__d2b>:
 80094c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094cc:	4689      	mov	r9, r1
 80094ce:	2101      	movs	r1, #1
 80094d0:	ec57 6b10 	vmov	r6, r7, d0
 80094d4:	4690      	mov	r8, r2
 80094d6:	f7ff fcd5 	bl	8008e84 <_Balloc>
 80094da:	4604      	mov	r4, r0
 80094dc:	b930      	cbnz	r0, 80094ec <__d2b+0x24>
 80094de:	4602      	mov	r2, r0
 80094e0:	4b25      	ldr	r3, [pc, #148]	; (8009578 <__d2b+0xb0>)
 80094e2:	4826      	ldr	r0, [pc, #152]	; (800957c <__d2b+0xb4>)
 80094e4:	f240 310a 	movw	r1, #778	; 0x30a
 80094e8:	f000 fac4 	bl	8009a74 <__assert_func>
 80094ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80094f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094f4:	bb35      	cbnz	r5, 8009544 <__d2b+0x7c>
 80094f6:	2e00      	cmp	r6, #0
 80094f8:	9301      	str	r3, [sp, #4]
 80094fa:	d028      	beq.n	800954e <__d2b+0x86>
 80094fc:	4668      	mov	r0, sp
 80094fe:	9600      	str	r6, [sp, #0]
 8009500:	f7ff fd8c 	bl	800901c <__lo0bits>
 8009504:	9900      	ldr	r1, [sp, #0]
 8009506:	b300      	cbz	r0, 800954a <__d2b+0x82>
 8009508:	9a01      	ldr	r2, [sp, #4]
 800950a:	f1c0 0320 	rsb	r3, r0, #32
 800950e:	fa02 f303 	lsl.w	r3, r2, r3
 8009512:	430b      	orrs	r3, r1
 8009514:	40c2      	lsrs	r2, r0
 8009516:	6163      	str	r3, [r4, #20]
 8009518:	9201      	str	r2, [sp, #4]
 800951a:	9b01      	ldr	r3, [sp, #4]
 800951c:	61a3      	str	r3, [r4, #24]
 800951e:	2b00      	cmp	r3, #0
 8009520:	bf14      	ite	ne
 8009522:	2202      	movne	r2, #2
 8009524:	2201      	moveq	r2, #1
 8009526:	6122      	str	r2, [r4, #16]
 8009528:	b1d5      	cbz	r5, 8009560 <__d2b+0x98>
 800952a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800952e:	4405      	add	r5, r0
 8009530:	f8c9 5000 	str.w	r5, [r9]
 8009534:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009538:	f8c8 0000 	str.w	r0, [r8]
 800953c:	4620      	mov	r0, r4
 800953e:	b003      	add	sp, #12
 8009540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009548:	e7d5      	b.n	80094f6 <__d2b+0x2e>
 800954a:	6161      	str	r1, [r4, #20]
 800954c:	e7e5      	b.n	800951a <__d2b+0x52>
 800954e:	a801      	add	r0, sp, #4
 8009550:	f7ff fd64 	bl	800901c <__lo0bits>
 8009554:	9b01      	ldr	r3, [sp, #4]
 8009556:	6163      	str	r3, [r4, #20]
 8009558:	2201      	movs	r2, #1
 800955a:	6122      	str	r2, [r4, #16]
 800955c:	3020      	adds	r0, #32
 800955e:	e7e3      	b.n	8009528 <__d2b+0x60>
 8009560:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009564:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009568:	f8c9 0000 	str.w	r0, [r9]
 800956c:	6918      	ldr	r0, [r3, #16]
 800956e:	f7ff fd35 	bl	8008fdc <__hi0bits>
 8009572:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009576:	e7df      	b.n	8009538 <__d2b+0x70>
 8009578:	0800b1d7 	.word	0x0800b1d7
 800957c:	0800b248 	.word	0x0800b248

08009580 <_calloc_r>:
 8009580:	b513      	push	{r0, r1, r4, lr}
 8009582:	434a      	muls	r2, r1
 8009584:	4611      	mov	r1, r2
 8009586:	9201      	str	r2, [sp, #4]
 8009588:	f000 f85a 	bl	8009640 <_malloc_r>
 800958c:	4604      	mov	r4, r0
 800958e:	b118      	cbz	r0, 8009598 <_calloc_r+0x18>
 8009590:	9a01      	ldr	r2, [sp, #4]
 8009592:	2100      	movs	r1, #0
 8009594:	f7fd fe04 	bl	80071a0 <memset>
 8009598:	4620      	mov	r0, r4
 800959a:	b002      	add	sp, #8
 800959c:	bd10      	pop	{r4, pc}
	...

080095a0 <_free_r>:
 80095a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095a2:	2900      	cmp	r1, #0
 80095a4:	d048      	beq.n	8009638 <_free_r+0x98>
 80095a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095aa:	9001      	str	r0, [sp, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f1a1 0404 	sub.w	r4, r1, #4
 80095b2:	bfb8      	it	lt
 80095b4:	18e4      	addlt	r4, r4, r3
 80095b6:	f000 fae3 	bl	8009b80 <__malloc_lock>
 80095ba:	4a20      	ldr	r2, [pc, #128]	; (800963c <_free_r+0x9c>)
 80095bc:	9801      	ldr	r0, [sp, #4]
 80095be:	6813      	ldr	r3, [r2, #0]
 80095c0:	4615      	mov	r5, r2
 80095c2:	b933      	cbnz	r3, 80095d2 <_free_r+0x32>
 80095c4:	6063      	str	r3, [r4, #4]
 80095c6:	6014      	str	r4, [r2, #0]
 80095c8:	b003      	add	sp, #12
 80095ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095ce:	f000 badd 	b.w	8009b8c <__malloc_unlock>
 80095d2:	42a3      	cmp	r3, r4
 80095d4:	d90b      	bls.n	80095ee <_free_r+0x4e>
 80095d6:	6821      	ldr	r1, [r4, #0]
 80095d8:	1862      	adds	r2, r4, r1
 80095da:	4293      	cmp	r3, r2
 80095dc:	bf04      	itt	eq
 80095de:	681a      	ldreq	r2, [r3, #0]
 80095e0:	685b      	ldreq	r3, [r3, #4]
 80095e2:	6063      	str	r3, [r4, #4]
 80095e4:	bf04      	itt	eq
 80095e6:	1852      	addeq	r2, r2, r1
 80095e8:	6022      	streq	r2, [r4, #0]
 80095ea:	602c      	str	r4, [r5, #0]
 80095ec:	e7ec      	b.n	80095c8 <_free_r+0x28>
 80095ee:	461a      	mov	r2, r3
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	b10b      	cbz	r3, 80095f8 <_free_r+0x58>
 80095f4:	42a3      	cmp	r3, r4
 80095f6:	d9fa      	bls.n	80095ee <_free_r+0x4e>
 80095f8:	6811      	ldr	r1, [r2, #0]
 80095fa:	1855      	adds	r5, r2, r1
 80095fc:	42a5      	cmp	r5, r4
 80095fe:	d10b      	bne.n	8009618 <_free_r+0x78>
 8009600:	6824      	ldr	r4, [r4, #0]
 8009602:	4421      	add	r1, r4
 8009604:	1854      	adds	r4, r2, r1
 8009606:	42a3      	cmp	r3, r4
 8009608:	6011      	str	r1, [r2, #0]
 800960a:	d1dd      	bne.n	80095c8 <_free_r+0x28>
 800960c:	681c      	ldr	r4, [r3, #0]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	6053      	str	r3, [r2, #4]
 8009612:	4421      	add	r1, r4
 8009614:	6011      	str	r1, [r2, #0]
 8009616:	e7d7      	b.n	80095c8 <_free_r+0x28>
 8009618:	d902      	bls.n	8009620 <_free_r+0x80>
 800961a:	230c      	movs	r3, #12
 800961c:	6003      	str	r3, [r0, #0]
 800961e:	e7d3      	b.n	80095c8 <_free_r+0x28>
 8009620:	6825      	ldr	r5, [r4, #0]
 8009622:	1961      	adds	r1, r4, r5
 8009624:	428b      	cmp	r3, r1
 8009626:	bf04      	itt	eq
 8009628:	6819      	ldreq	r1, [r3, #0]
 800962a:	685b      	ldreq	r3, [r3, #4]
 800962c:	6063      	str	r3, [r4, #4]
 800962e:	bf04      	itt	eq
 8009630:	1949      	addeq	r1, r1, r5
 8009632:	6021      	streq	r1, [r4, #0]
 8009634:	6054      	str	r4, [r2, #4]
 8009636:	e7c7      	b.n	80095c8 <_free_r+0x28>
 8009638:	b003      	add	sp, #12
 800963a:	bd30      	pop	{r4, r5, pc}
 800963c:	20000204 	.word	0x20000204

08009640 <_malloc_r>:
 8009640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009642:	1ccd      	adds	r5, r1, #3
 8009644:	f025 0503 	bic.w	r5, r5, #3
 8009648:	3508      	adds	r5, #8
 800964a:	2d0c      	cmp	r5, #12
 800964c:	bf38      	it	cc
 800964e:	250c      	movcc	r5, #12
 8009650:	2d00      	cmp	r5, #0
 8009652:	4606      	mov	r6, r0
 8009654:	db01      	blt.n	800965a <_malloc_r+0x1a>
 8009656:	42a9      	cmp	r1, r5
 8009658:	d903      	bls.n	8009662 <_malloc_r+0x22>
 800965a:	230c      	movs	r3, #12
 800965c:	6033      	str	r3, [r6, #0]
 800965e:	2000      	movs	r0, #0
 8009660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009662:	f000 fa8d 	bl	8009b80 <__malloc_lock>
 8009666:	4921      	ldr	r1, [pc, #132]	; (80096ec <_malloc_r+0xac>)
 8009668:	680a      	ldr	r2, [r1, #0]
 800966a:	4614      	mov	r4, r2
 800966c:	b99c      	cbnz	r4, 8009696 <_malloc_r+0x56>
 800966e:	4f20      	ldr	r7, [pc, #128]	; (80096f0 <_malloc_r+0xb0>)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	b923      	cbnz	r3, 800967e <_malloc_r+0x3e>
 8009674:	4621      	mov	r1, r4
 8009676:	4630      	mov	r0, r6
 8009678:	f000 f996 	bl	80099a8 <_sbrk_r>
 800967c:	6038      	str	r0, [r7, #0]
 800967e:	4629      	mov	r1, r5
 8009680:	4630      	mov	r0, r6
 8009682:	f000 f991 	bl	80099a8 <_sbrk_r>
 8009686:	1c43      	adds	r3, r0, #1
 8009688:	d123      	bne.n	80096d2 <_malloc_r+0x92>
 800968a:	230c      	movs	r3, #12
 800968c:	6033      	str	r3, [r6, #0]
 800968e:	4630      	mov	r0, r6
 8009690:	f000 fa7c 	bl	8009b8c <__malloc_unlock>
 8009694:	e7e3      	b.n	800965e <_malloc_r+0x1e>
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	1b5b      	subs	r3, r3, r5
 800969a:	d417      	bmi.n	80096cc <_malloc_r+0x8c>
 800969c:	2b0b      	cmp	r3, #11
 800969e:	d903      	bls.n	80096a8 <_malloc_r+0x68>
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	441c      	add	r4, r3
 80096a4:	6025      	str	r5, [r4, #0]
 80096a6:	e004      	b.n	80096b2 <_malloc_r+0x72>
 80096a8:	6863      	ldr	r3, [r4, #4]
 80096aa:	42a2      	cmp	r2, r4
 80096ac:	bf0c      	ite	eq
 80096ae:	600b      	streq	r3, [r1, #0]
 80096b0:	6053      	strne	r3, [r2, #4]
 80096b2:	4630      	mov	r0, r6
 80096b4:	f000 fa6a 	bl	8009b8c <__malloc_unlock>
 80096b8:	f104 000b 	add.w	r0, r4, #11
 80096bc:	1d23      	adds	r3, r4, #4
 80096be:	f020 0007 	bic.w	r0, r0, #7
 80096c2:	1ac2      	subs	r2, r0, r3
 80096c4:	d0cc      	beq.n	8009660 <_malloc_r+0x20>
 80096c6:	1a1b      	subs	r3, r3, r0
 80096c8:	50a3      	str	r3, [r4, r2]
 80096ca:	e7c9      	b.n	8009660 <_malloc_r+0x20>
 80096cc:	4622      	mov	r2, r4
 80096ce:	6864      	ldr	r4, [r4, #4]
 80096d0:	e7cc      	b.n	800966c <_malloc_r+0x2c>
 80096d2:	1cc4      	adds	r4, r0, #3
 80096d4:	f024 0403 	bic.w	r4, r4, #3
 80096d8:	42a0      	cmp	r0, r4
 80096da:	d0e3      	beq.n	80096a4 <_malloc_r+0x64>
 80096dc:	1a21      	subs	r1, r4, r0
 80096de:	4630      	mov	r0, r6
 80096e0:	f000 f962 	bl	80099a8 <_sbrk_r>
 80096e4:	3001      	adds	r0, #1
 80096e6:	d1dd      	bne.n	80096a4 <_malloc_r+0x64>
 80096e8:	e7cf      	b.n	800968a <_malloc_r+0x4a>
 80096ea:	bf00      	nop
 80096ec:	20000204 	.word	0x20000204
 80096f0:	20000208 	.word	0x20000208

080096f4 <__sfputc_r>:
 80096f4:	6893      	ldr	r3, [r2, #8]
 80096f6:	3b01      	subs	r3, #1
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	b410      	push	{r4}
 80096fc:	6093      	str	r3, [r2, #8]
 80096fe:	da08      	bge.n	8009712 <__sfputc_r+0x1e>
 8009700:	6994      	ldr	r4, [r2, #24]
 8009702:	42a3      	cmp	r3, r4
 8009704:	db01      	blt.n	800970a <__sfputc_r+0x16>
 8009706:	290a      	cmp	r1, #10
 8009708:	d103      	bne.n	8009712 <__sfputc_r+0x1e>
 800970a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800970e:	f7fe ba47 	b.w	8007ba0 <__swbuf_r>
 8009712:	6813      	ldr	r3, [r2, #0]
 8009714:	1c58      	adds	r0, r3, #1
 8009716:	6010      	str	r0, [r2, #0]
 8009718:	7019      	strb	r1, [r3, #0]
 800971a:	4608      	mov	r0, r1
 800971c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009720:	4770      	bx	lr

08009722 <__sfputs_r>:
 8009722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009724:	4606      	mov	r6, r0
 8009726:	460f      	mov	r7, r1
 8009728:	4614      	mov	r4, r2
 800972a:	18d5      	adds	r5, r2, r3
 800972c:	42ac      	cmp	r4, r5
 800972e:	d101      	bne.n	8009734 <__sfputs_r+0x12>
 8009730:	2000      	movs	r0, #0
 8009732:	e007      	b.n	8009744 <__sfputs_r+0x22>
 8009734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009738:	463a      	mov	r2, r7
 800973a:	4630      	mov	r0, r6
 800973c:	f7ff ffda 	bl	80096f4 <__sfputc_r>
 8009740:	1c43      	adds	r3, r0, #1
 8009742:	d1f3      	bne.n	800972c <__sfputs_r+0xa>
 8009744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009748 <_vfiprintf_r>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	460d      	mov	r5, r1
 800974e:	b09d      	sub	sp, #116	; 0x74
 8009750:	4614      	mov	r4, r2
 8009752:	4698      	mov	r8, r3
 8009754:	4606      	mov	r6, r0
 8009756:	b118      	cbz	r0, 8009760 <_vfiprintf_r+0x18>
 8009758:	6983      	ldr	r3, [r0, #24]
 800975a:	b90b      	cbnz	r3, 8009760 <_vfiprintf_r+0x18>
 800975c:	f7ff fa72 	bl	8008c44 <__sinit>
 8009760:	4b89      	ldr	r3, [pc, #548]	; (8009988 <_vfiprintf_r+0x240>)
 8009762:	429d      	cmp	r5, r3
 8009764:	d11b      	bne.n	800979e <_vfiprintf_r+0x56>
 8009766:	6875      	ldr	r5, [r6, #4]
 8009768:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800976a:	07d9      	lsls	r1, r3, #31
 800976c:	d405      	bmi.n	800977a <_vfiprintf_r+0x32>
 800976e:	89ab      	ldrh	r3, [r5, #12]
 8009770:	059a      	lsls	r2, r3, #22
 8009772:	d402      	bmi.n	800977a <_vfiprintf_r+0x32>
 8009774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009776:	f7ff fb08 	bl	8008d8a <__retarget_lock_acquire_recursive>
 800977a:	89ab      	ldrh	r3, [r5, #12]
 800977c:	071b      	lsls	r3, r3, #28
 800977e:	d501      	bpl.n	8009784 <_vfiprintf_r+0x3c>
 8009780:	692b      	ldr	r3, [r5, #16]
 8009782:	b9eb      	cbnz	r3, 80097c0 <_vfiprintf_r+0x78>
 8009784:	4629      	mov	r1, r5
 8009786:	4630      	mov	r0, r6
 8009788:	f7fe fa5c 	bl	8007c44 <__swsetup_r>
 800978c:	b1c0      	cbz	r0, 80097c0 <_vfiprintf_r+0x78>
 800978e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009790:	07dc      	lsls	r4, r3, #31
 8009792:	d50e      	bpl.n	80097b2 <_vfiprintf_r+0x6a>
 8009794:	f04f 30ff 	mov.w	r0, #4294967295
 8009798:	b01d      	add	sp, #116	; 0x74
 800979a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800979e:	4b7b      	ldr	r3, [pc, #492]	; (800998c <_vfiprintf_r+0x244>)
 80097a0:	429d      	cmp	r5, r3
 80097a2:	d101      	bne.n	80097a8 <_vfiprintf_r+0x60>
 80097a4:	68b5      	ldr	r5, [r6, #8]
 80097a6:	e7df      	b.n	8009768 <_vfiprintf_r+0x20>
 80097a8:	4b79      	ldr	r3, [pc, #484]	; (8009990 <_vfiprintf_r+0x248>)
 80097aa:	429d      	cmp	r5, r3
 80097ac:	bf08      	it	eq
 80097ae:	68f5      	ldreq	r5, [r6, #12]
 80097b0:	e7da      	b.n	8009768 <_vfiprintf_r+0x20>
 80097b2:	89ab      	ldrh	r3, [r5, #12]
 80097b4:	0598      	lsls	r0, r3, #22
 80097b6:	d4ed      	bmi.n	8009794 <_vfiprintf_r+0x4c>
 80097b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097ba:	f7ff fae7 	bl	8008d8c <__retarget_lock_release_recursive>
 80097be:	e7e9      	b.n	8009794 <_vfiprintf_r+0x4c>
 80097c0:	2300      	movs	r3, #0
 80097c2:	9309      	str	r3, [sp, #36]	; 0x24
 80097c4:	2320      	movs	r3, #32
 80097c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80097ce:	2330      	movs	r3, #48	; 0x30
 80097d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009994 <_vfiprintf_r+0x24c>
 80097d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097d8:	f04f 0901 	mov.w	r9, #1
 80097dc:	4623      	mov	r3, r4
 80097de:	469a      	mov	sl, r3
 80097e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097e4:	b10a      	cbz	r2, 80097ea <_vfiprintf_r+0xa2>
 80097e6:	2a25      	cmp	r2, #37	; 0x25
 80097e8:	d1f9      	bne.n	80097de <_vfiprintf_r+0x96>
 80097ea:	ebba 0b04 	subs.w	fp, sl, r4
 80097ee:	d00b      	beq.n	8009808 <_vfiprintf_r+0xc0>
 80097f0:	465b      	mov	r3, fp
 80097f2:	4622      	mov	r2, r4
 80097f4:	4629      	mov	r1, r5
 80097f6:	4630      	mov	r0, r6
 80097f8:	f7ff ff93 	bl	8009722 <__sfputs_r>
 80097fc:	3001      	adds	r0, #1
 80097fe:	f000 80aa 	beq.w	8009956 <_vfiprintf_r+0x20e>
 8009802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009804:	445a      	add	r2, fp
 8009806:	9209      	str	r2, [sp, #36]	; 0x24
 8009808:	f89a 3000 	ldrb.w	r3, [sl]
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 80a2 	beq.w	8009956 <_vfiprintf_r+0x20e>
 8009812:	2300      	movs	r3, #0
 8009814:	f04f 32ff 	mov.w	r2, #4294967295
 8009818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800981c:	f10a 0a01 	add.w	sl, sl, #1
 8009820:	9304      	str	r3, [sp, #16]
 8009822:	9307      	str	r3, [sp, #28]
 8009824:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009828:	931a      	str	r3, [sp, #104]	; 0x68
 800982a:	4654      	mov	r4, sl
 800982c:	2205      	movs	r2, #5
 800982e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009832:	4858      	ldr	r0, [pc, #352]	; (8009994 <_vfiprintf_r+0x24c>)
 8009834:	f7f6 fcd4 	bl	80001e0 <memchr>
 8009838:	9a04      	ldr	r2, [sp, #16]
 800983a:	b9d8      	cbnz	r0, 8009874 <_vfiprintf_r+0x12c>
 800983c:	06d1      	lsls	r1, r2, #27
 800983e:	bf44      	itt	mi
 8009840:	2320      	movmi	r3, #32
 8009842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009846:	0713      	lsls	r3, r2, #28
 8009848:	bf44      	itt	mi
 800984a:	232b      	movmi	r3, #43	; 0x2b
 800984c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009850:	f89a 3000 	ldrb.w	r3, [sl]
 8009854:	2b2a      	cmp	r3, #42	; 0x2a
 8009856:	d015      	beq.n	8009884 <_vfiprintf_r+0x13c>
 8009858:	9a07      	ldr	r2, [sp, #28]
 800985a:	4654      	mov	r4, sl
 800985c:	2000      	movs	r0, #0
 800985e:	f04f 0c0a 	mov.w	ip, #10
 8009862:	4621      	mov	r1, r4
 8009864:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009868:	3b30      	subs	r3, #48	; 0x30
 800986a:	2b09      	cmp	r3, #9
 800986c:	d94e      	bls.n	800990c <_vfiprintf_r+0x1c4>
 800986e:	b1b0      	cbz	r0, 800989e <_vfiprintf_r+0x156>
 8009870:	9207      	str	r2, [sp, #28]
 8009872:	e014      	b.n	800989e <_vfiprintf_r+0x156>
 8009874:	eba0 0308 	sub.w	r3, r0, r8
 8009878:	fa09 f303 	lsl.w	r3, r9, r3
 800987c:	4313      	orrs	r3, r2
 800987e:	9304      	str	r3, [sp, #16]
 8009880:	46a2      	mov	sl, r4
 8009882:	e7d2      	b.n	800982a <_vfiprintf_r+0xe2>
 8009884:	9b03      	ldr	r3, [sp, #12]
 8009886:	1d19      	adds	r1, r3, #4
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	9103      	str	r1, [sp, #12]
 800988c:	2b00      	cmp	r3, #0
 800988e:	bfbb      	ittet	lt
 8009890:	425b      	neglt	r3, r3
 8009892:	f042 0202 	orrlt.w	r2, r2, #2
 8009896:	9307      	strge	r3, [sp, #28]
 8009898:	9307      	strlt	r3, [sp, #28]
 800989a:	bfb8      	it	lt
 800989c:	9204      	strlt	r2, [sp, #16]
 800989e:	7823      	ldrb	r3, [r4, #0]
 80098a0:	2b2e      	cmp	r3, #46	; 0x2e
 80098a2:	d10c      	bne.n	80098be <_vfiprintf_r+0x176>
 80098a4:	7863      	ldrb	r3, [r4, #1]
 80098a6:	2b2a      	cmp	r3, #42	; 0x2a
 80098a8:	d135      	bne.n	8009916 <_vfiprintf_r+0x1ce>
 80098aa:	9b03      	ldr	r3, [sp, #12]
 80098ac:	1d1a      	adds	r2, r3, #4
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	9203      	str	r2, [sp, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	bfb8      	it	lt
 80098b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80098ba:	3402      	adds	r4, #2
 80098bc:	9305      	str	r3, [sp, #20]
 80098be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80099a4 <_vfiprintf_r+0x25c>
 80098c2:	7821      	ldrb	r1, [r4, #0]
 80098c4:	2203      	movs	r2, #3
 80098c6:	4650      	mov	r0, sl
 80098c8:	f7f6 fc8a 	bl	80001e0 <memchr>
 80098cc:	b140      	cbz	r0, 80098e0 <_vfiprintf_r+0x198>
 80098ce:	2340      	movs	r3, #64	; 0x40
 80098d0:	eba0 000a 	sub.w	r0, r0, sl
 80098d4:	fa03 f000 	lsl.w	r0, r3, r0
 80098d8:	9b04      	ldr	r3, [sp, #16]
 80098da:	4303      	orrs	r3, r0
 80098dc:	3401      	adds	r4, #1
 80098de:	9304      	str	r3, [sp, #16]
 80098e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e4:	482c      	ldr	r0, [pc, #176]	; (8009998 <_vfiprintf_r+0x250>)
 80098e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098ea:	2206      	movs	r2, #6
 80098ec:	f7f6 fc78 	bl	80001e0 <memchr>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d03f      	beq.n	8009974 <_vfiprintf_r+0x22c>
 80098f4:	4b29      	ldr	r3, [pc, #164]	; (800999c <_vfiprintf_r+0x254>)
 80098f6:	bb1b      	cbnz	r3, 8009940 <_vfiprintf_r+0x1f8>
 80098f8:	9b03      	ldr	r3, [sp, #12]
 80098fa:	3307      	adds	r3, #7
 80098fc:	f023 0307 	bic.w	r3, r3, #7
 8009900:	3308      	adds	r3, #8
 8009902:	9303      	str	r3, [sp, #12]
 8009904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009906:	443b      	add	r3, r7
 8009908:	9309      	str	r3, [sp, #36]	; 0x24
 800990a:	e767      	b.n	80097dc <_vfiprintf_r+0x94>
 800990c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009910:	460c      	mov	r4, r1
 8009912:	2001      	movs	r0, #1
 8009914:	e7a5      	b.n	8009862 <_vfiprintf_r+0x11a>
 8009916:	2300      	movs	r3, #0
 8009918:	3401      	adds	r4, #1
 800991a:	9305      	str	r3, [sp, #20]
 800991c:	4619      	mov	r1, r3
 800991e:	f04f 0c0a 	mov.w	ip, #10
 8009922:	4620      	mov	r0, r4
 8009924:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009928:	3a30      	subs	r2, #48	; 0x30
 800992a:	2a09      	cmp	r2, #9
 800992c:	d903      	bls.n	8009936 <_vfiprintf_r+0x1ee>
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0c5      	beq.n	80098be <_vfiprintf_r+0x176>
 8009932:	9105      	str	r1, [sp, #20]
 8009934:	e7c3      	b.n	80098be <_vfiprintf_r+0x176>
 8009936:	fb0c 2101 	mla	r1, ip, r1, r2
 800993a:	4604      	mov	r4, r0
 800993c:	2301      	movs	r3, #1
 800993e:	e7f0      	b.n	8009922 <_vfiprintf_r+0x1da>
 8009940:	ab03      	add	r3, sp, #12
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	462a      	mov	r2, r5
 8009946:	4b16      	ldr	r3, [pc, #88]	; (80099a0 <_vfiprintf_r+0x258>)
 8009948:	a904      	add	r1, sp, #16
 800994a:	4630      	mov	r0, r6
 800994c:	f7fd fcd0 	bl	80072f0 <_printf_float>
 8009950:	4607      	mov	r7, r0
 8009952:	1c78      	adds	r0, r7, #1
 8009954:	d1d6      	bne.n	8009904 <_vfiprintf_r+0x1bc>
 8009956:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009958:	07d9      	lsls	r1, r3, #31
 800995a:	d405      	bmi.n	8009968 <_vfiprintf_r+0x220>
 800995c:	89ab      	ldrh	r3, [r5, #12]
 800995e:	059a      	lsls	r2, r3, #22
 8009960:	d402      	bmi.n	8009968 <_vfiprintf_r+0x220>
 8009962:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009964:	f7ff fa12 	bl	8008d8c <__retarget_lock_release_recursive>
 8009968:	89ab      	ldrh	r3, [r5, #12]
 800996a:	065b      	lsls	r3, r3, #25
 800996c:	f53f af12 	bmi.w	8009794 <_vfiprintf_r+0x4c>
 8009970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009972:	e711      	b.n	8009798 <_vfiprintf_r+0x50>
 8009974:	ab03      	add	r3, sp, #12
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	462a      	mov	r2, r5
 800997a:	4b09      	ldr	r3, [pc, #36]	; (80099a0 <_vfiprintf_r+0x258>)
 800997c:	a904      	add	r1, sp, #16
 800997e:	4630      	mov	r0, r6
 8009980:	f7fd ff5a 	bl	8007838 <_printf_i>
 8009984:	e7e4      	b.n	8009950 <_vfiprintf_r+0x208>
 8009986:	bf00      	nop
 8009988:	0800b208 	.word	0x0800b208
 800998c:	0800b228 	.word	0x0800b228
 8009990:	0800b1e8 	.word	0x0800b1e8
 8009994:	0800b3a4 	.word	0x0800b3a4
 8009998:	0800b3ae 	.word	0x0800b3ae
 800999c:	080072f1 	.word	0x080072f1
 80099a0:	08009723 	.word	0x08009723
 80099a4:	0800b3aa 	.word	0x0800b3aa

080099a8 <_sbrk_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4d06      	ldr	r5, [pc, #24]	; (80099c4 <_sbrk_r+0x1c>)
 80099ac:	2300      	movs	r3, #0
 80099ae:	4604      	mov	r4, r0
 80099b0:	4608      	mov	r0, r1
 80099b2:	602b      	str	r3, [r5, #0]
 80099b4:	f7f7 ff36 	bl	8001824 <_sbrk>
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	d102      	bne.n	80099c2 <_sbrk_r+0x1a>
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	b103      	cbz	r3, 80099c2 <_sbrk_r+0x1a>
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	2000038c 	.word	0x2000038c

080099c8 <__sread>:
 80099c8:	b510      	push	{r4, lr}
 80099ca:	460c      	mov	r4, r1
 80099cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d0:	f000 f8e2 	bl	8009b98 <_read_r>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	bfab      	itete	ge
 80099d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099da:	89a3      	ldrhlt	r3, [r4, #12]
 80099dc:	181b      	addge	r3, r3, r0
 80099de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099e2:	bfac      	ite	ge
 80099e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80099e6:	81a3      	strhlt	r3, [r4, #12]
 80099e8:	bd10      	pop	{r4, pc}

080099ea <__swrite>:
 80099ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ee:	461f      	mov	r7, r3
 80099f0:	898b      	ldrh	r3, [r1, #12]
 80099f2:	05db      	lsls	r3, r3, #23
 80099f4:	4605      	mov	r5, r0
 80099f6:	460c      	mov	r4, r1
 80099f8:	4616      	mov	r6, r2
 80099fa:	d505      	bpl.n	8009a08 <__swrite+0x1e>
 80099fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a00:	2302      	movs	r3, #2
 8009a02:	2200      	movs	r2, #0
 8009a04:	f000 f898 	bl	8009b38 <_lseek_r>
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a12:	81a3      	strh	r3, [r4, #12]
 8009a14:	4632      	mov	r2, r6
 8009a16:	463b      	mov	r3, r7
 8009a18:	4628      	mov	r0, r5
 8009a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a1e:	f000 b817 	b.w	8009a50 <_write_r>

08009a22 <__sseek>:
 8009a22:	b510      	push	{r4, lr}
 8009a24:	460c      	mov	r4, r1
 8009a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a2a:	f000 f885 	bl	8009b38 <_lseek_r>
 8009a2e:	1c43      	adds	r3, r0, #1
 8009a30:	89a3      	ldrh	r3, [r4, #12]
 8009a32:	bf15      	itete	ne
 8009a34:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a3e:	81a3      	strheq	r3, [r4, #12]
 8009a40:	bf18      	it	ne
 8009a42:	81a3      	strhne	r3, [r4, #12]
 8009a44:	bd10      	pop	{r4, pc}

08009a46 <__sclose>:
 8009a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a4a:	f000 b831 	b.w	8009ab0 <_close_r>
	...

08009a50 <_write_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	4d07      	ldr	r5, [pc, #28]	; (8009a70 <_write_r+0x20>)
 8009a54:	4604      	mov	r4, r0
 8009a56:	4608      	mov	r0, r1
 8009a58:	4611      	mov	r1, r2
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	602a      	str	r2, [r5, #0]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	f7f7 fe8f 	bl	8001782 <_write>
 8009a64:	1c43      	adds	r3, r0, #1
 8009a66:	d102      	bne.n	8009a6e <_write_r+0x1e>
 8009a68:	682b      	ldr	r3, [r5, #0]
 8009a6a:	b103      	cbz	r3, 8009a6e <_write_r+0x1e>
 8009a6c:	6023      	str	r3, [r4, #0]
 8009a6e:	bd38      	pop	{r3, r4, r5, pc}
 8009a70:	2000038c 	.word	0x2000038c

08009a74 <__assert_func>:
 8009a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a76:	4614      	mov	r4, r2
 8009a78:	461a      	mov	r2, r3
 8009a7a:	4b09      	ldr	r3, [pc, #36]	; (8009aa0 <__assert_func+0x2c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4605      	mov	r5, r0
 8009a80:	68d8      	ldr	r0, [r3, #12]
 8009a82:	b14c      	cbz	r4, 8009a98 <__assert_func+0x24>
 8009a84:	4b07      	ldr	r3, [pc, #28]	; (8009aa4 <__assert_func+0x30>)
 8009a86:	9100      	str	r1, [sp, #0]
 8009a88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a8c:	4906      	ldr	r1, [pc, #24]	; (8009aa8 <__assert_func+0x34>)
 8009a8e:	462b      	mov	r3, r5
 8009a90:	f000 f81e 	bl	8009ad0 <fiprintf>
 8009a94:	f000 f89f 	bl	8009bd6 <abort>
 8009a98:	4b04      	ldr	r3, [pc, #16]	; (8009aac <__assert_func+0x38>)
 8009a9a:	461c      	mov	r4, r3
 8009a9c:	e7f3      	b.n	8009a86 <__assert_func+0x12>
 8009a9e:	bf00      	nop
 8009aa0:	2000000c 	.word	0x2000000c
 8009aa4:	0800b3b5 	.word	0x0800b3b5
 8009aa8:	0800b3c2 	.word	0x0800b3c2
 8009aac:	0800b3f0 	.word	0x0800b3f0

08009ab0 <_close_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4d06      	ldr	r5, [pc, #24]	; (8009acc <_close_r+0x1c>)
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	4608      	mov	r0, r1
 8009aba:	602b      	str	r3, [r5, #0]
 8009abc:	f7f7 fe7d 	bl	80017ba <_close>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d102      	bne.n	8009aca <_close_r+0x1a>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	b103      	cbz	r3, 8009aca <_close_r+0x1a>
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	2000038c 	.word	0x2000038c

08009ad0 <fiprintf>:
 8009ad0:	b40e      	push	{r1, r2, r3}
 8009ad2:	b503      	push	{r0, r1, lr}
 8009ad4:	4601      	mov	r1, r0
 8009ad6:	ab03      	add	r3, sp, #12
 8009ad8:	4805      	ldr	r0, [pc, #20]	; (8009af0 <fiprintf+0x20>)
 8009ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ade:	6800      	ldr	r0, [r0, #0]
 8009ae0:	9301      	str	r3, [sp, #4]
 8009ae2:	f7ff fe31 	bl	8009748 <_vfiprintf_r>
 8009ae6:	b002      	add	sp, #8
 8009ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009aec:	b003      	add	sp, #12
 8009aee:	4770      	bx	lr
 8009af0:	2000000c 	.word	0x2000000c

08009af4 <_fstat_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	4d07      	ldr	r5, [pc, #28]	; (8009b14 <_fstat_r+0x20>)
 8009af8:	2300      	movs	r3, #0
 8009afa:	4604      	mov	r4, r0
 8009afc:	4608      	mov	r0, r1
 8009afe:	4611      	mov	r1, r2
 8009b00:	602b      	str	r3, [r5, #0]
 8009b02:	f7f7 fe66 	bl	80017d2 <_fstat>
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	d102      	bne.n	8009b10 <_fstat_r+0x1c>
 8009b0a:	682b      	ldr	r3, [r5, #0]
 8009b0c:	b103      	cbz	r3, 8009b10 <_fstat_r+0x1c>
 8009b0e:	6023      	str	r3, [r4, #0]
 8009b10:	bd38      	pop	{r3, r4, r5, pc}
 8009b12:	bf00      	nop
 8009b14:	2000038c 	.word	0x2000038c

08009b18 <_isatty_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	4d06      	ldr	r5, [pc, #24]	; (8009b34 <_isatty_r+0x1c>)
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4604      	mov	r4, r0
 8009b20:	4608      	mov	r0, r1
 8009b22:	602b      	str	r3, [r5, #0]
 8009b24:	f7f7 fe65 	bl	80017f2 <_isatty>
 8009b28:	1c43      	adds	r3, r0, #1
 8009b2a:	d102      	bne.n	8009b32 <_isatty_r+0x1a>
 8009b2c:	682b      	ldr	r3, [r5, #0]
 8009b2e:	b103      	cbz	r3, 8009b32 <_isatty_r+0x1a>
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	bd38      	pop	{r3, r4, r5, pc}
 8009b34:	2000038c 	.word	0x2000038c

08009b38 <_lseek_r>:
 8009b38:	b538      	push	{r3, r4, r5, lr}
 8009b3a:	4d07      	ldr	r5, [pc, #28]	; (8009b58 <_lseek_r+0x20>)
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	4608      	mov	r0, r1
 8009b40:	4611      	mov	r1, r2
 8009b42:	2200      	movs	r2, #0
 8009b44:	602a      	str	r2, [r5, #0]
 8009b46:	461a      	mov	r2, r3
 8009b48:	f7f7 fe5e 	bl	8001808 <_lseek>
 8009b4c:	1c43      	adds	r3, r0, #1
 8009b4e:	d102      	bne.n	8009b56 <_lseek_r+0x1e>
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	b103      	cbz	r3, 8009b56 <_lseek_r+0x1e>
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	bd38      	pop	{r3, r4, r5, pc}
 8009b58:	2000038c 	.word	0x2000038c

08009b5c <__ascii_mbtowc>:
 8009b5c:	b082      	sub	sp, #8
 8009b5e:	b901      	cbnz	r1, 8009b62 <__ascii_mbtowc+0x6>
 8009b60:	a901      	add	r1, sp, #4
 8009b62:	b142      	cbz	r2, 8009b76 <__ascii_mbtowc+0x1a>
 8009b64:	b14b      	cbz	r3, 8009b7a <__ascii_mbtowc+0x1e>
 8009b66:	7813      	ldrb	r3, [r2, #0]
 8009b68:	600b      	str	r3, [r1, #0]
 8009b6a:	7812      	ldrb	r2, [r2, #0]
 8009b6c:	1e10      	subs	r0, r2, #0
 8009b6e:	bf18      	it	ne
 8009b70:	2001      	movne	r0, #1
 8009b72:	b002      	add	sp, #8
 8009b74:	4770      	bx	lr
 8009b76:	4610      	mov	r0, r2
 8009b78:	e7fb      	b.n	8009b72 <__ascii_mbtowc+0x16>
 8009b7a:	f06f 0001 	mvn.w	r0, #1
 8009b7e:	e7f8      	b.n	8009b72 <__ascii_mbtowc+0x16>

08009b80 <__malloc_lock>:
 8009b80:	4801      	ldr	r0, [pc, #4]	; (8009b88 <__malloc_lock+0x8>)
 8009b82:	f7ff b902 	b.w	8008d8a <__retarget_lock_acquire_recursive>
 8009b86:	bf00      	nop
 8009b88:	20000384 	.word	0x20000384

08009b8c <__malloc_unlock>:
 8009b8c:	4801      	ldr	r0, [pc, #4]	; (8009b94 <__malloc_unlock+0x8>)
 8009b8e:	f7ff b8fd 	b.w	8008d8c <__retarget_lock_release_recursive>
 8009b92:	bf00      	nop
 8009b94:	20000384 	.word	0x20000384

08009b98 <_read_r>:
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	4d07      	ldr	r5, [pc, #28]	; (8009bb8 <_read_r+0x20>)
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	4608      	mov	r0, r1
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	602a      	str	r2, [r5, #0]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	f7f7 fdce 	bl	8001748 <_read>
 8009bac:	1c43      	adds	r3, r0, #1
 8009bae:	d102      	bne.n	8009bb6 <_read_r+0x1e>
 8009bb0:	682b      	ldr	r3, [r5, #0]
 8009bb2:	b103      	cbz	r3, 8009bb6 <_read_r+0x1e>
 8009bb4:	6023      	str	r3, [r4, #0]
 8009bb6:	bd38      	pop	{r3, r4, r5, pc}
 8009bb8:	2000038c 	.word	0x2000038c

08009bbc <__ascii_wctomb>:
 8009bbc:	b149      	cbz	r1, 8009bd2 <__ascii_wctomb+0x16>
 8009bbe:	2aff      	cmp	r2, #255	; 0xff
 8009bc0:	bf85      	ittet	hi
 8009bc2:	238a      	movhi	r3, #138	; 0x8a
 8009bc4:	6003      	strhi	r3, [r0, #0]
 8009bc6:	700a      	strbls	r2, [r1, #0]
 8009bc8:	f04f 30ff 	movhi.w	r0, #4294967295
 8009bcc:	bf98      	it	ls
 8009bce:	2001      	movls	r0, #1
 8009bd0:	4770      	bx	lr
 8009bd2:	4608      	mov	r0, r1
 8009bd4:	4770      	bx	lr

08009bd6 <abort>:
 8009bd6:	b508      	push	{r3, lr}
 8009bd8:	2006      	movs	r0, #6
 8009bda:	f000 f82b 	bl	8009c34 <raise>
 8009bde:	2001      	movs	r0, #1
 8009be0:	f7f7 fda8 	bl	8001734 <_exit>

08009be4 <_raise_r>:
 8009be4:	291f      	cmp	r1, #31
 8009be6:	b538      	push	{r3, r4, r5, lr}
 8009be8:	4604      	mov	r4, r0
 8009bea:	460d      	mov	r5, r1
 8009bec:	d904      	bls.n	8009bf8 <_raise_r+0x14>
 8009bee:	2316      	movs	r3, #22
 8009bf0:	6003      	str	r3, [r0, #0]
 8009bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf6:	bd38      	pop	{r3, r4, r5, pc}
 8009bf8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009bfa:	b112      	cbz	r2, 8009c02 <_raise_r+0x1e>
 8009bfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c00:	b94b      	cbnz	r3, 8009c16 <_raise_r+0x32>
 8009c02:	4620      	mov	r0, r4
 8009c04:	f000 f830 	bl	8009c68 <_getpid_r>
 8009c08:	462a      	mov	r2, r5
 8009c0a:	4601      	mov	r1, r0
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c12:	f000 b817 	b.w	8009c44 <_kill_r>
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d00a      	beq.n	8009c30 <_raise_r+0x4c>
 8009c1a:	1c59      	adds	r1, r3, #1
 8009c1c:	d103      	bne.n	8009c26 <_raise_r+0x42>
 8009c1e:	2316      	movs	r3, #22
 8009c20:	6003      	str	r3, [r0, #0]
 8009c22:	2001      	movs	r0, #1
 8009c24:	e7e7      	b.n	8009bf6 <_raise_r+0x12>
 8009c26:	2400      	movs	r4, #0
 8009c28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	4798      	blx	r3
 8009c30:	2000      	movs	r0, #0
 8009c32:	e7e0      	b.n	8009bf6 <_raise_r+0x12>

08009c34 <raise>:
 8009c34:	4b02      	ldr	r3, [pc, #8]	; (8009c40 <raise+0xc>)
 8009c36:	4601      	mov	r1, r0
 8009c38:	6818      	ldr	r0, [r3, #0]
 8009c3a:	f7ff bfd3 	b.w	8009be4 <_raise_r>
 8009c3e:	bf00      	nop
 8009c40:	2000000c 	.word	0x2000000c

08009c44 <_kill_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4d07      	ldr	r5, [pc, #28]	; (8009c64 <_kill_r+0x20>)
 8009c48:	2300      	movs	r3, #0
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	4608      	mov	r0, r1
 8009c4e:	4611      	mov	r1, r2
 8009c50:	602b      	str	r3, [r5, #0]
 8009c52:	f7f7 fd5f 	bl	8001714 <_kill>
 8009c56:	1c43      	adds	r3, r0, #1
 8009c58:	d102      	bne.n	8009c60 <_kill_r+0x1c>
 8009c5a:	682b      	ldr	r3, [r5, #0]
 8009c5c:	b103      	cbz	r3, 8009c60 <_kill_r+0x1c>
 8009c5e:	6023      	str	r3, [r4, #0]
 8009c60:	bd38      	pop	{r3, r4, r5, pc}
 8009c62:	bf00      	nop
 8009c64:	2000038c 	.word	0x2000038c

08009c68 <_getpid_r>:
 8009c68:	f7f7 bd4c 	b.w	8001704 <_getpid>
 8009c6c:	0000      	movs	r0, r0
	...

08009c70 <sin>:
 8009c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c72:	ec53 2b10 	vmov	r2, r3, d0
 8009c76:	4826      	ldr	r0, [pc, #152]	; (8009d10 <sin+0xa0>)
 8009c78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009c7c:	4281      	cmp	r1, r0
 8009c7e:	dc07      	bgt.n	8009c90 <sin+0x20>
 8009c80:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009d08 <sin+0x98>
 8009c84:	2000      	movs	r0, #0
 8009c86:	f001 f827 	bl	800acd8 <__kernel_sin>
 8009c8a:	ec51 0b10 	vmov	r0, r1, d0
 8009c8e:	e007      	b.n	8009ca0 <sin+0x30>
 8009c90:	4820      	ldr	r0, [pc, #128]	; (8009d14 <sin+0xa4>)
 8009c92:	4281      	cmp	r1, r0
 8009c94:	dd09      	ble.n	8009caa <sin+0x3a>
 8009c96:	ee10 0a10 	vmov	r0, s0
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	f7f6 faf4 	bl	8000288 <__aeabi_dsub>
 8009ca0:	ec41 0b10 	vmov	d0, r0, r1
 8009ca4:	b005      	add	sp, #20
 8009ca6:	f85d fb04 	ldr.w	pc, [sp], #4
 8009caa:	4668      	mov	r0, sp
 8009cac:	f000 fa00 	bl	800a0b0 <__ieee754_rem_pio2>
 8009cb0:	f000 0003 	and.w	r0, r0, #3
 8009cb4:	2801      	cmp	r0, #1
 8009cb6:	d008      	beq.n	8009cca <sin+0x5a>
 8009cb8:	2802      	cmp	r0, #2
 8009cba:	d00d      	beq.n	8009cd8 <sin+0x68>
 8009cbc:	b9d0      	cbnz	r0, 8009cf4 <sin+0x84>
 8009cbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cc2:	ed9d 0b00 	vldr	d0, [sp]
 8009cc6:	2001      	movs	r0, #1
 8009cc8:	e7dd      	b.n	8009c86 <sin+0x16>
 8009cca:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cce:	ed9d 0b00 	vldr	d0, [sp]
 8009cd2:	f000 fbf9 	bl	800a4c8 <__kernel_cos>
 8009cd6:	e7d8      	b.n	8009c8a <sin+0x1a>
 8009cd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cdc:	ed9d 0b00 	vldr	d0, [sp]
 8009ce0:	2001      	movs	r0, #1
 8009ce2:	f000 fff9 	bl	800acd8 <__kernel_sin>
 8009ce6:	ec53 2b10 	vmov	r2, r3, d0
 8009cea:	ee10 0a10 	vmov	r0, s0
 8009cee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009cf2:	e7d5      	b.n	8009ca0 <sin+0x30>
 8009cf4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cf8:	ed9d 0b00 	vldr	d0, [sp]
 8009cfc:	f000 fbe4 	bl	800a4c8 <__kernel_cos>
 8009d00:	e7f1      	b.n	8009ce6 <sin+0x76>
 8009d02:	bf00      	nop
 8009d04:	f3af 8000 	nop.w
	...
 8009d10:	3fe921fb 	.word	0x3fe921fb
 8009d14:	7fefffff 	.word	0x7fefffff

08009d18 <exp>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	ed2d 8b02 	vpush	{d8}
 8009d1e:	ec55 4b10 	vmov	r4, r5, d0
 8009d22:	f000 f849 	bl	8009db8 <__ieee754_exp>
 8009d26:	4b22      	ldr	r3, [pc, #136]	; (8009db0 <exp+0x98>)
 8009d28:	eeb0 8a40 	vmov.f32	s16, s0
 8009d2c:	eef0 8a60 	vmov.f32	s17, s1
 8009d30:	f993 3000 	ldrsb.w	r3, [r3]
 8009d34:	3301      	adds	r3, #1
 8009d36:	d012      	beq.n	8009d5e <exp+0x46>
 8009d38:	ec45 4b10 	vmov	d0, r4, r5
 8009d3c:	f001 f893 	bl	800ae66 <finite>
 8009d40:	b168      	cbz	r0, 8009d5e <exp+0x46>
 8009d42:	a313      	add	r3, pc, #76	; (adr r3, 8009d90 <exp+0x78>)
 8009d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d48:	4620      	mov	r0, r4
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	f7f6 fee4 	bl	8000b18 <__aeabi_dcmpgt>
 8009d50:	b160      	cbz	r0, 8009d6c <exp+0x54>
 8009d52:	f7fd f9fb 	bl	800714c <__errno>
 8009d56:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8009d98 <exp+0x80>
 8009d5a:	2322      	movs	r3, #34	; 0x22
 8009d5c:	6003      	str	r3, [r0, #0]
 8009d5e:	eeb0 0a48 	vmov.f32	s0, s16
 8009d62:	eef0 0a68 	vmov.f32	s1, s17
 8009d66:	ecbd 8b02 	vpop	{d8}
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	a30c      	add	r3, pc, #48	; (adr r3, 8009da0 <exp+0x88>)
 8009d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d72:	4620      	mov	r0, r4
 8009d74:	4629      	mov	r1, r5
 8009d76:	f7f6 feb1 	bl	8000adc <__aeabi_dcmplt>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d0ef      	beq.n	8009d5e <exp+0x46>
 8009d7e:	f7fd f9e5 	bl	800714c <__errno>
 8009d82:	2322      	movs	r3, #34	; 0x22
 8009d84:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8009da8 <exp+0x90>
 8009d88:	6003      	str	r3, [r0, #0]
 8009d8a:	e7e8      	b.n	8009d5e <exp+0x46>
 8009d8c:	f3af 8000 	nop.w
 8009d90:	fefa39ef 	.word	0xfefa39ef
 8009d94:	40862e42 	.word	0x40862e42
 8009d98:	00000000 	.word	0x00000000
 8009d9c:	7ff00000 	.word	0x7ff00000
 8009da0:	d52d3051 	.word	0xd52d3051
 8009da4:	c0874910 	.word	0xc0874910
	...
 8009db0:	200001dc 	.word	0x200001dc
 8009db4:	00000000 	.word	0x00000000

08009db8 <__ieee754_exp>:
 8009db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dbc:	ec55 4b10 	vmov	r4, r5, d0
 8009dc0:	49b1      	ldr	r1, [pc, #708]	; (800a088 <__ieee754_exp+0x2d0>)
 8009dc2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009dc6:	428b      	cmp	r3, r1
 8009dc8:	ed2d 8b04 	vpush	{d8-d9}
 8009dcc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8009dd0:	d937      	bls.n	8009e42 <__ieee754_exp+0x8a>
 8009dd2:	49ae      	ldr	r1, [pc, #696]	; (800a08c <__ieee754_exp+0x2d4>)
 8009dd4:	428b      	cmp	r3, r1
 8009dd6:	d916      	bls.n	8009e06 <__ieee754_exp+0x4e>
 8009dd8:	ee10 3a10 	vmov	r3, s0
 8009ddc:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8009de0:	4313      	orrs	r3, r2
 8009de2:	d009      	beq.n	8009df8 <__ieee754_exp+0x40>
 8009de4:	ee10 2a10 	vmov	r2, s0
 8009de8:	462b      	mov	r3, r5
 8009dea:	4620      	mov	r0, r4
 8009dec:	4629      	mov	r1, r5
 8009dee:	f7f6 fa4d 	bl	800028c <__adddf3>
 8009df2:	4604      	mov	r4, r0
 8009df4:	460d      	mov	r5, r1
 8009df6:	e000      	b.n	8009dfa <__ieee754_exp+0x42>
 8009df8:	bb06      	cbnz	r6, 8009e3c <__ieee754_exp+0x84>
 8009dfa:	ecbd 8b04 	vpop	{d8-d9}
 8009dfe:	ec45 4b10 	vmov	d0, r4, r5
 8009e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e06:	a38a      	add	r3, pc, #552	; (adr r3, 800a030 <__ieee754_exp+0x278>)
 8009e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0c:	ee10 0a10 	vmov	r0, s0
 8009e10:	4629      	mov	r1, r5
 8009e12:	f7f6 fe81 	bl	8000b18 <__aeabi_dcmpgt>
 8009e16:	b138      	cbz	r0, 8009e28 <__ieee754_exp+0x70>
 8009e18:	a387      	add	r3, pc, #540	; (adr r3, 800a038 <__ieee754_exp+0x280>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	4610      	mov	r0, r2
 8009e20:	4619      	mov	r1, r3
 8009e22:	f7f6 fbe9 	bl	80005f8 <__aeabi_dmul>
 8009e26:	e7e4      	b.n	8009df2 <__ieee754_exp+0x3a>
 8009e28:	a385      	add	r3, pc, #532	; (adr r3, 800a040 <__ieee754_exp+0x288>)
 8009e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2e:	4620      	mov	r0, r4
 8009e30:	4629      	mov	r1, r5
 8009e32:	f7f6 fe53 	bl	8000adc <__aeabi_dcmplt>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	f000 8087 	beq.w	8009f4a <__ieee754_exp+0x192>
 8009e3c:	2400      	movs	r4, #0
 8009e3e:	2500      	movs	r5, #0
 8009e40:	e7db      	b.n	8009dfa <__ieee754_exp+0x42>
 8009e42:	4a93      	ldr	r2, [pc, #588]	; (800a090 <__ieee754_exp+0x2d8>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	f240 80ac 	bls.w	8009fa2 <__ieee754_exp+0x1ea>
 8009e4a:	4a92      	ldr	r2, [pc, #584]	; (800a094 <__ieee754_exp+0x2dc>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d87c      	bhi.n	8009f4a <__ieee754_exp+0x192>
 8009e50:	4b91      	ldr	r3, [pc, #580]	; (800a098 <__ieee754_exp+0x2e0>)
 8009e52:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	ee10 0a10 	vmov	r0, s0
 8009e5e:	4629      	mov	r1, r5
 8009e60:	f7f6 fa12 	bl	8000288 <__aeabi_dsub>
 8009e64:	4b8d      	ldr	r3, [pc, #564]	; (800a09c <__ieee754_exp+0x2e4>)
 8009e66:	00f7      	lsls	r7, r6, #3
 8009e68:	443b      	add	r3, r7
 8009e6a:	ed93 7b00 	vldr	d7, [r3]
 8009e6e:	f1c6 0a01 	rsb	sl, r6, #1
 8009e72:	4680      	mov	r8, r0
 8009e74:	4689      	mov	r9, r1
 8009e76:	ebaa 0a06 	sub.w	sl, sl, r6
 8009e7a:	eeb0 8a47 	vmov.f32	s16, s14
 8009e7e:	eef0 8a67 	vmov.f32	s17, s15
 8009e82:	ec53 2b18 	vmov	r2, r3, d8
 8009e86:	4640      	mov	r0, r8
 8009e88:	4649      	mov	r1, r9
 8009e8a:	f7f6 f9fd 	bl	8000288 <__aeabi_dsub>
 8009e8e:	4604      	mov	r4, r0
 8009e90:	460d      	mov	r5, r1
 8009e92:	4622      	mov	r2, r4
 8009e94:	462b      	mov	r3, r5
 8009e96:	4620      	mov	r0, r4
 8009e98:	4629      	mov	r1, r5
 8009e9a:	f7f6 fbad 	bl	80005f8 <__aeabi_dmul>
 8009e9e:	a36a      	add	r3, pc, #424	; (adr r3, 800a048 <__ieee754_exp+0x290>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	4606      	mov	r6, r0
 8009ea6:	460f      	mov	r7, r1
 8009ea8:	f7f6 fba6 	bl	80005f8 <__aeabi_dmul>
 8009eac:	a368      	add	r3, pc, #416	; (adr r3, 800a050 <__ieee754_exp+0x298>)
 8009eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb2:	f7f6 f9e9 	bl	8000288 <__aeabi_dsub>
 8009eb6:	4632      	mov	r2, r6
 8009eb8:	463b      	mov	r3, r7
 8009eba:	f7f6 fb9d 	bl	80005f8 <__aeabi_dmul>
 8009ebe:	a366      	add	r3, pc, #408	; (adr r3, 800a058 <__ieee754_exp+0x2a0>)
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	f7f6 f9e2 	bl	800028c <__adddf3>
 8009ec8:	4632      	mov	r2, r6
 8009eca:	463b      	mov	r3, r7
 8009ecc:	f7f6 fb94 	bl	80005f8 <__aeabi_dmul>
 8009ed0:	a363      	add	r3, pc, #396	; (adr r3, 800a060 <__ieee754_exp+0x2a8>)
 8009ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed6:	f7f6 f9d7 	bl	8000288 <__aeabi_dsub>
 8009eda:	4632      	mov	r2, r6
 8009edc:	463b      	mov	r3, r7
 8009ede:	f7f6 fb8b 	bl	80005f8 <__aeabi_dmul>
 8009ee2:	a361      	add	r3, pc, #388	; (adr r3, 800a068 <__ieee754_exp+0x2b0>)
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	f7f6 f9d0 	bl	800028c <__adddf3>
 8009eec:	4632      	mov	r2, r6
 8009eee:	463b      	mov	r3, r7
 8009ef0:	f7f6 fb82 	bl	80005f8 <__aeabi_dmul>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	4620      	mov	r0, r4
 8009efa:	4629      	mov	r1, r5
 8009efc:	f7f6 f9c4 	bl	8000288 <__aeabi_dsub>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4606      	mov	r6, r0
 8009f06:	460f      	mov	r7, r1
 8009f08:	4620      	mov	r0, r4
 8009f0a:	4629      	mov	r1, r5
 8009f0c:	f7f6 fb74 	bl	80005f8 <__aeabi_dmul>
 8009f10:	ec41 0b19 	vmov	d9, r0, r1
 8009f14:	f1ba 0f00 	cmp.w	sl, #0
 8009f18:	d15d      	bne.n	8009fd6 <__ieee754_exp+0x21e>
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f20:	4630      	mov	r0, r6
 8009f22:	4639      	mov	r1, r7
 8009f24:	f7f6 f9b0 	bl	8000288 <__aeabi_dsub>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	ec51 0b19 	vmov	r0, r1, d9
 8009f30:	f7f6 fc8c 	bl	800084c <__aeabi_ddiv>
 8009f34:	4622      	mov	r2, r4
 8009f36:	462b      	mov	r3, r5
 8009f38:	f7f6 f9a6 	bl	8000288 <__aeabi_dsub>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	2000      	movs	r0, #0
 8009f42:	4957      	ldr	r1, [pc, #348]	; (800a0a0 <__ieee754_exp+0x2e8>)
 8009f44:	f7f6 f9a0 	bl	8000288 <__aeabi_dsub>
 8009f48:	e753      	b.n	8009df2 <__ieee754_exp+0x3a>
 8009f4a:	4856      	ldr	r0, [pc, #344]	; (800a0a4 <__ieee754_exp+0x2ec>)
 8009f4c:	a348      	add	r3, pc, #288	; (adr r3, 800a070 <__ieee754_exp+0x2b8>)
 8009f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f52:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8009f56:	4629      	mov	r1, r5
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f7f6 fb4d 	bl	80005f8 <__aeabi_dmul>
 8009f5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f62:	f7f6 f993 	bl	800028c <__adddf3>
 8009f66:	f7f6 fdf7 	bl	8000b58 <__aeabi_d2iz>
 8009f6a:	4682      	mov	sl, r0
 8009f6c:	f7f6 fada 	bl	8000524 <__aeabi_i2d>
 8009f70:	a341      	add	r3, pc, #260	; (adr r3, 800a078 <__ieee754_exp+0x2c0>)
 8009f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f76:	4606      	mov	r6, r0
 8009f78:	460f      	mov	r7, r1
 8009f7a:	f7f6 fb3d 	bl	80005f8 <__aeabi_dmul>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	460b      	mov	r3, r1
 8009f82:	4620      	mov	r0, r4
 8009f84:	4629      	mov	r1, r5
 8009f86:	f7f6 f97f 	bl	8000288 <__aeabi_dsub>
 8009f8a:	a33d      	add	r3, pc, #244	; (adr r3, 800a080 <__ieee754_exp+0x2c8>)
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	4680      	mov	r8, r0
 8009f92:	4689      	mov	r9, r1
 8009f94:	4630      	mov	r0, r6
 8009f96:	4639      	mov	r1, r7
 8009f98:	f7f6 fb2e 	bl	80005f8 <__aeabi_dmul>
 8009f9c:	ec41 0b18 	vmov	d8, r0, r1
 8009fa0:	e76f      	b.n	8009e82 <__ieee754_exp+0xca>
 8009fa2:	4a41      	ldr	r2, [pc, #260]	; (800a0a8 <__ieee754_exp+0x2f0>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d811      	bhi.n	8009fcc <__ieee754_exp+0x214>
 8009fa8:	a323      	add	r3, pc, #140	; (adr r3, 800a038 <__ieee754_exp+0x280>)
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	ee10 0a10 	vmov	r0, s0
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	f7f6 f96a 	bl	800028c <__adddf3>
 8009fb8:	4b39      	ldr	r3, [pc, #228]	; (800a0a0 <__ieee754_exp+0x2e8>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f7f6 fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8009fc0:	b138      	cbz	r0, 8009fd2 <__ieee754_exp+0x21a>
 8009fc2:	4b37      	ldr	r3, [pc, #220]	; (800a0a0 <__ieee754_exp+0x2e8>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	4629      	mov	r1, r5
 8009fca:	e710      	b.n	8009dee <__ieee754_exp+0x36>
 8009fcc:	f04f 0a00 	mov.w	sl, #0
 8009fd0:	e75f      	b.n	8009e92 <__ieee754_exp+0xda>
 8009fd2:	4682      	mov	sl, r0
 8009fd4:	e75d      	b.n	8009e92 <__ieee754_exp+0xda>
 8009fd6:	4632      	mov	r2, r6
 8009fd8:	463b      	mov	r3, r7
 8009fda:	2000      	movs	r0, #0
 8009fdc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009fe0:	f7f6 f952 	bl	8000288 <__aeabi_dsub>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	ec51 0b19 	vmov	r0, r1, d9
 8009fec:	f7f6 fc2e 	bl	800084c <__aeabi_ddiv>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	ec51 0b18 	vmov	r0, r1, d8
 8009ff8:	f7f6 f946 	bl	8000288 <__aeabi_dsub>
 8009ffc:	4642      	mov	r2, r8
 8009ffe:	464b      	mov	r3, r9
 800a000:	f7f6 f942 	bl	8000288 <__aeabi_dsub>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	2000      	movs	r0, #0
 800a00a:	4925      	ldr	r1, [pc, #148]	; (800a0a0 <__ieee754_exp+0x2e8>)
 800a00c:	f7f6 f93c 	bl	8000288 <__aeabi_dsub>
 800a010:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800a014:	4592      	cmp	sl, r2
 800a016:	db02      	blt.n	800a01e <__ieee754_exp+0x266>
 800a018:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a01c:	e6e9      	b.n	8009df2 <__ieee754_exp+0x3a>
 800a01e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800a022:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a026:	2200      	movs	r2, #0
 800a028:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800a02c:	e6f9      	b.n	8009e22 <__ieee754_exp+0x6a>
 800a02e:	bf00      	nop
 800a030:	fefa39ef 	.word	0xfefa39ef
 800a034:	40862e42 	.word	0x40862e42
 800a038:	8800759c 	.word	0x8800759c
 800a03c:	7e37e43c 	.word	0x7e37e43c
 800a040:	d52d3051 	.word	0xd52d3051
 800a044:	c0874910 	.word	0xc0874910
 800a048:	72bea4d0 	.word	0x72bea4d0
 800a04c:	3e663769 	.word	0x3e663769
 800a050:	c5d26bf1 	.word	0xc5d26bf1
 800a054:	3ebbbd41 	.word	0x3ebbbd41
 800a058:	af25de2c 	.word	0xaf25de2c
 800a05c:	3f11566a 	.word	0x3f11566a
 800a060:	16bebd93 	.word	0x16bebd93
 800a064:	3f66c16c 	.word	0x3f66c16c
 800a068:	5555553e 	.word	0x5555553e
 800a06c:	3fc55555 	.word	0x3fc55555
 800a070:	652b82fe 	.word	0x652b82fe
 800a074:	3ff71547 	.word	0x3ff71547
 800a078:	fee00000 	.word	0xfee00000
 800a07c:	3fe62e42 	.word	0x3fe62e42
 800a080:	35793c76 	.word	0x35793c76
 800a084:	3dea39ef 	.word	0x3dea39ef
 800a088:	40862e41 	.word	0x40862e41
 800a08c:	7fefffff 	.word	0x7fefffff
 800a090:	3fd62e42 	.word	0x3fd62e42
 800a094:	3ff0a2b1 	.word	0x3ff0a2b1
 800a098:	0800b510 	.word	0x0800b510
 800a09c:	0800b520 	.word	0x0800b520
 800a0a0:	3ff00000 	.word	0x3ff00000
 800a0a4:	0800b500 	.word	0x0800b500
 800a0a8:	3e2fffff 	.word	0x3e2fffff
 800a0ac:	00000000 	.word	0x00000000

0800a0b0 <__ieee754_rem_pio2>:
 800a0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b4:	ed2d 8b02 	vpush	{d8}
 800a0b8:	ec55 4b10 	vmov	r4, r5, d0
 800a0bc:	4bca      	ldr	r3, [pc, #808]	; (800a3e8 <__ieee754_rem_pio2+0x338>)
 800a0be:	b08b      	sub	sp, #44	; 0x2c
 800a0c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a0c4:	4598      	cmp	r8, r3
 800a0c6:	4682      	mov	sl, r0
 800a0c8:	9502      	str	r5, [sp, #8]
 800a0ca:	dc08      	bgt.n	800a0de <__ieee754_rem_pio2+0x2e>
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	ed80 0b00 	vstr	d0, [r0]
 800a0d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a0d8:	f04f 0b00 	mov.w	fp, #0
 800a0dc:	e028      	b.n	800a130 <__ieee754_rem_pio2+0x80>
 800a0de:	4bc3      	ldr	r3, [pc, #780]	; (800a3ec <__ieee754_rem_pio2+0x33c>)
 800a0e0:	4598      	cmp	r8, r3
 800a0e2:	dc78      	bgt.n	800a1d6 <__ieee754_rem_pio2+0x126>
 800a0e4:	9b02      	ldr	r3, [sp, #8]
 800a0e6:	4ec2      	ldr	r6, [pc, #776]	; (800a3f0 <__ieee754_rem_pio2+0x340>)
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	ee10 0a10 	vmov	r0, s0
 800a0ee:	a3b0      	add	r3, pc, #704	; (adr r3, 800a3b0 <__ieee754_rem_pio2+0x300>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	4629      	mov	r1, r5
 800a0f6:	dd39      	ble.n	800a16c <__ieee754_rem_pio2+0xbc>
 800a0f8:	f7f6 f8c6 	bl	8000288 <__aeabi_dsub>
 800a0fc:	45b0      	cmp	r8, r6
 800a0fe:	4604      	mov	r4, r0
 800a100:	460d      	mov	r5, r1
 800a102:	d01b      	beq.n	800a13c <__ieee754_rem_pio2+0x8c>
 800a104:	a3ac      	add	r3, pc, #688	; (adr r3, 800a3b8 <__ieee754_rem_pio2+0x308>)
 800a106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10a:	f7f6 f8bd 	bl	8000288 <__aeabi_dsub>
 800a10e:	4602      	mov	r2, r0
 800a110:	460b      	mov	r3, r1
 800a112:	e9ca 2300 	strd	r2, r3, [sl]
 800a116:	4620      	mov	r0, r4
 800a118:	4629      	mov	r1, r5
 800a11a:	f7f6 f8b5 	bl	8000288 <__aeabi_dsub>
 800a11e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a3b8 <__ieee754_rem_pio2+0x308>)
 800a120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a124:	f7f6 f8b0 	bl	8000288 <__aeabi_dsub>
 800a128:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a12c:	f04f 0b01 	mov.w	fp, #1
 800a130:	4658      	mov	r0, fp
 800a132:	b00b      	add	sp, #44	; 0x2c
 800a134:	ecbd 8b02 	vpop	{d8}
 800a138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a13c:	a3a0      	add	r3, pc, #640	; (adr r3, 800a3c0 <__ieee754_rem_pio2+0x310>)
 800a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a142:	f7f6 f8a1 	bl	8000288 <__aeabi_dsub>
 800a146:	a3a0      	add	r3, pc, #640	; (adr r3, 800a3c8 <__ieee754_rem_pio2+0x318>)
 800a148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14c:	4604      	mov	r4, r0
 800a14e:	460d      	mov	r5, r1
 800a150:	f7f6 f89a 	bl	8000288 <__aeabi_dsub>
 800a154:	4602      	mov	r2, r0
 800a156:	460b      	mov	r3, r1
 800a158:	e9ca 2300 	strd	r2, r3, [sl]
 800a15c:	4620      	mov	r0, r4
 800a15e:	4629      	mov	r1, r5
 800a160:	f7f6 f892 	bl	8000288 <__aeabi_dsub>
 800a164:	a398      	add	r3, pc, #608	; (adr r3, 800a3c8 <__ieee754_rem_pio2+0x318>)
 800a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16a:	e7db      	b.n	800a124 <__ieee754_rem_pio2+0x74>
 800a16c:	f7f6 f88e 	bl	800028c <__adddf3>
 800a170:	45b0      	cmp	r8, r6
 800a172:	4604      	mov	r4, r0
 800a174:	460d      	mov	r5, r1
 800a176:	d016      	beq.n	800a1a6 <__ieee754_rem_pio2+0xf6>
 800a178:	a38f      	add	r3, pc, #572	; (adr r3, 800a3b8 <__ieee754_rem_pio2+0x308>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f7f6 f885 	bl	800028c <__adddf3>
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
 800a186:	e9ca 2300 	strd	r2, r3, [sl]
 800a18a:	4620      	mov	r0, r4
 800a18c:	4629      	mov	r1, r5
 800a18e:	f7f6 f87b 	bl	8000288 <__aeabi_dsub>
 800a192:	a389      	add	r3, pc, #548	; (adr r3, 800a3b8 <__ieee754_rem_pio2+0x308>)
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	f7f6 f878 	bl	800028c <__adddf3>
 800a19c:	f04f 3bff 	mov.w	fp, #4294967295
 800a1a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a1a4:	e7c4      	b.n	800a130 <__ieee754_rem_pio2+0x80>
 800a1a6:	a386      	add	r3, pc, #536	; (adr r3, 800a3c0 <__ieee754_rem_pio2+0x310>)
 800a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ac:	f7f6 f86e 	bl	800028c <__adddf3>
 800a1b0:	a385      	add	r3, pc, #532	; (adr r3, 800a3c8 <__ieee754_rem_pio2+0x318>)
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	460d      	mov	r5, r1
 800a1ba:	f7f6 f867 	bl	800028c <__adddf3>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	e9ca 2300 	strd	r2, r3, [sl]
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	f7f6 f85d 	bl	8000288 <__aeabi_dsub>
 800a1ce:	a37e      	add	r3, pc, #504	; (adr r3, 800a3c8 <__ieee754_rem_pio2+0x318>)
 800a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d4:	e7e0      	b.n	800a198 <__ieee754_rem_pio2+0xe8>
 800a1d6:	4b87      	ldr	r3, [pc, #540]	; (800a3f4 <__ieee754_rem_pio2+0x344>)
 800a1d8:	4598      	cmp	r8, r3
 800a1da:	f300 80d9 	bgt.w	800a390 <__ieee754_rem_pio2+0x2e0>
 800a1de:	f000 fe39 	bl	800ae54 <fabs>
 800a1e2:	ec55 4b10 	vmov	r4, r5, d0
 800a1e6:	ee10 0a10 	vmov	r0, s0
 800a1ea:	a379      	add	r3, pc, #484	; (adr r3, 800a3d0 <__ieee754_rem_pio2+0x320>)
 800a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	f7f6 fa01 	bl	80005f8 <__aeabi_dmul>
 800a1f6:	4b80      	ldr	r3, [pc, #512]	; (800a3f8 <__ieee754_rem_pio2+0x348>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f7f6 f847 	bl	800028c <__adddf3>
 800a1fe:	f7f6 fcab 	bl	8000b58 <__aeabi_d2iz>
 800a202:	4683      	mov	fp, r0
 800a204:	f7f6 f98e 	bl	8000524 <__aeabi_i2d>
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	ec43 2b18 	vmov	d8, r2, r3
 800a210:	a367      	add	r3, pc, #412	; (adr r3, 800a3b0 <__ieee754_rem_pio2+0x300>)
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	f7f6 f9ef 	bl	80005f8 <__aeabi_dmul>
 800a21a:	4602      	mov	r2, r0
 800a21c:	460b      	mov	r3, r1
 800a21e:	4620      	mov	r0, r4
 800a220:	4629      	mov	r1, r5
 800a222:	f7f6 f831 	bl	8000288 <__aeabi_dsub>
 800a226:	a364      	add	r3, pc, #400	; (adr r3, 800a3b8 <__ieee754_rem_pio2+0x308>)
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	4606      	mov	r6, r0
 800a22e:	460f      	mov	r7, r1
 800a230:	ec51 0b18 	vmov	r0, r1, d8
 800a234:	f7f6 f9e0 	bl	80005f8 <__aeabi_dmul>
 800a238:	f1bb 0f1f 	cmp.w	fp, #31
 800a23c:	4604      	mov	r4, r0
 800a23e:	460d      	mov	r5, r1
 800a240:	dc0d      	bgt.n	800a25e <__ieee754_rem_pio2+0x1ae>
 800a242:	4b6e      	ldr	r3, [pc, #440]	; (800a3fc <__ieee754_rem_pio2+0x34c>)
 800a244:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a24c:	4543      	cmp	r3, r8
 800a24e:	d006      	beq.n	800a25e <__ieee754_rem_pio2+0x1ae>
 800a250:	4622      	mov	r2, r4
 800a252:	462b      	mov	r3, r5
 800a254:	4630      	mov	r0, r6
 800a256:	4639      	mov	r1, r7
 800a258:	f7f6 f816 	bl	8000288 <__aeabi_dsub>
 800a25c:	e00f      	b.n	800a27e <__ieee754_rem_pio2+0x1ce>
 800a25e:	462b      	mov	r3, r5
 800a260:	4622      	mov	r2, r4
 800a262:	4630      	mov	r0, r6
 800a264:	4639      	mov	r1, r7
 800a266:	f7f6 f80f 	bl	8000288 <__aeabi_dsub>
 800a26a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a26e:	9303      	str	r3, [sp, #12]
 800a270:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a274:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a278:	f1b8 0f10 	cmp.w	r8, #16
 800a27c:	dc02      	bgt.n	800a284 <__ieee754_rem_pio2+0x1d4>
 800a27e:	e9ca 0100 	strd	r0, r1, [sl]
 800a282:	e039      	b.n	800a2f8 <__ieee754_rem_pio2+0x248>
 800a284:	a34e      	add	r3, pc, #312	; (adr r3, 800a3c0 <__ieee754_rem_pio2+0x310>)
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	ec51 0b18 	vmov	r0, r1, d8
 800a28e:	f7f6 f9b3 	bl	80005f8 <__aeabi_dmul>
 800a292:	4604      	mov	r4, r0
 800a294:	460d      	mov	r5, r1
 800a296:	4602      	mov	r2, r0
 800a298:	460b      	mov	r3, r1
 800a29a:	4630      	mov	r0, r6
 800a29c:	4639      	mov	r1, r7
 800a29e:	f7f5 fff3 	bl	8000288 <__aeabi_dsub>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	4680      	mov	r8, r0
 800a2a8:	4689      	mov	r9, r1
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	4639      	mov	r1, r7
 800a2ae:	f7f5 ffeb 	bl	8000288 <__aeabi_dsub>
 800a2b2:	4622      	mov	r2, r4
 800a2b4:	462b      	mov	r3, r5
 800a2b6:	f7f5 ffe7 	bl	8000288 <__aeabi_dsub>
 800a2ba:	a343      	add	r3, pc, #268	; (adr r3, 800a3c8 <__ieee754_rem_pio2+0x318>)
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	460d      	mov	r5, r1
 800a2c4:	ec51 0b18 	vmov	r0, r1, d8
 800a2c8:	f7f6 f996 	bl	80005f8 <__aeabi_dmul>
 800a2cc:	4622      	mov	r2, r4
 800a2ce:	462b      	mov	r3, r5
 800a2d0:	f7f5 ffda 	bl	8000288 <__aeabi_dsub>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	4604      	mov	r4, r0
 800a2da:	460d      	mov	r5, r1
 800a2dc:	4640      	mov	r0, r8
 800a2de:	4649      	mov	r1, r9
 800a2e0:	f7f5 ffd2 	bl	8000288 <__aeabi_dsub>
 800a2e4:	9a03      	ldr	r2, [sp, #12]
 800a2e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a2ea:	1ad3      	subs	r3, r2, r3
 800a2ec:	2b31      	cmp	r3, #49	; 0x31
 800a2ee:	dc24      	bgt.n	800a33a <__ieee754_rem_pio2+0x28a>
 800a2f0:	e9ca 0100 	strd	r0, r1, [sl]
 800a2f4:	4646      	mov	r6, r8
 800a2f6:	464f      	mov	r7, r9
 800a2f8:	e9da 8900 	ldrd	r8, r9, [sl]
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	4642      	mov	r2, r8
 800a300:	464b      	mov	r3, r9
 800a302:	4639      	mov	r1, r7
 800a304:	f7f5 ffc0 	bl	8000288 <__aeabi_dsub>
 800a308:	462b      	mov	r3, r5
 800a30a:	4622      	mov	r2, r4
 800a30c:	f7f5 ffbc 	bl	8000288 <__aeabi_dsub>
 800a310:	9b02      	ldr	r3, [sp, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a318:	f6bf af0a 	bge.w	800a130 <__ieee754_rem_pio2+0x80>
 800a31c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a320:	f8ca 3004 	str.w	r3, [sl, #4]
 800a324:	f8ca 8000 	str.w	r8, [sl]
 800a328:	f8ca 0008 	str.w	r0, [sl, #8]
 800a32c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a330:	f8ca 300c 	str.w	r3, [sl, #12]
 800a334:	f1cb 0b00 	rsb	fp, fp, #0
 800a338:	e6fa      	b.n	800a130 <__ieee754_rem_pio2+0x80>
 800a33a:	a327      	add	r3, pc, #156	; (adr r3, 800a3d8 <__ieee754_rem_pio2+0x328>)
 800a33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a340:	ec51 0b18 	vmov	r0, r1, d8
 800a344:	f7f6 f958 	bl	80005f8 <__aeabi_dmul>
 800a348:	4604      	mov	r4, r0
 800a34a:	460d      	mov	r5, r1
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4640      	mov	r0, r8
 800a352:	4649      	mov	r1, r9
 800a354:	f7f5 ff98 	bl	8000288 <__aeabi_dsub>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4606      	mov	r6, r0
 800a35e:	460f      	mov	r7, r1
 800a360:	4640      	mov	r0, r8
 800a362:	4649      	mov	r1, r9
 800a364:	f7f5 ff90 	bl	8000288 <__aeabi_dsub>
 800a368:	4622      	mov	r2, r4
 800a36a:	462b      	mov	r3, r5
 800a36c:	f7f5 ff8c 	bl	8000288 <__aeabi_dsub>
 800a370:	a31b      	add	r3, pc, #108	; (adr r3, 800a3e0 <__ieee754_rem_pio2+0x330>)
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	4604      	mov	r4, r0
 800a378:	460d      	mov	r5, r1
 800a37a:	ec51 0b18 	vmov	r0, r1, d8
 800a37e:	f7f6 f93b 	bl	80005f8 <__aeabi_dmul>
 800a382:	4622      	mov	r2, r4
 800a384:	462b      	mov	r3, r5
 800a386:	f7f5 ff7f 	bl	8000288 <__aeabi_dsub>
 800a38a:	4604      	mov	r4, r0
 800a38c:	460d      	mov	r5, r1
 800a38e:	e75f      	b.n	800a250 <__ieee754_rem_pio2+0x1a0>
 800a390:	4b1b      	ldr	r3, [pc, #108]	; (800a400 <__ieee754_rem_pio2+0x350>)
 800a392:	4598      	cmp	r8, r3
 800a394:	dd36      	ble.n	800a404 <__ieee754_rem_pio2+0x354>
 800a396:	ee10 2a10 	vmov	r2, s0
 800a39a:	462b      	mov	r3, r5
 800a39c:	4620      	mov	r0, r4
 800a39e:	4629      	mov	r1, r5
 800a3a0:	f7f5 ff72 	bl	8000288 <__aeabi_dsub>
 800a3a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a3a8:	e9ca 0100 	strd	r0, r1, [sl]
 800a3ac:	e694      	b.n	800a0d8 <__ieee754_rem_pio2+0x28>
 800a3ae:	bf00      	nop
 800a3b0:	54400000 	.word	0x54400000
 800a3b4:	3ff921fb 	.word	0x3ff921fb
 800a3b8:	1a626331 	.word	0x1a626331
 800a3bc:	3dd0b461 	.word	0x3dd0b461
 800a3c0:	1a600000 	.word	0x1a600000
 800a3c4:	3dd0b461 	.word	0x3dd0b461
 800a3c8:	2e037073 	.word	0x2e037073
 800a3cc:	3ba3198a 	.word	0x3ba3198a
 800a3d0:	6dc9c883 	.word	0x6dc9c883
 800a3d4:	3fe45f30 	.word	0x3fe45f30
 800a3d8:	2e000000 	.word	0x2e000000
 800a3dc:	3ba3198a 	.word	0x3ba3198a
 800a3e0:	252049c1 	.word	0x252049c1
 800a3e4:	397b839a 	.word	0x397b839a
 800a3e8:	3fe921fb 	.word	0x3fe921fb
 800a3ec:	4002d97b 	.word	0x4002d97b
 800a3f0:	3ff921fb 	.word	0x3ff921fb
 800a3f4:	413921fb 	.word	0x413921fb
 800a3f8:	3fe00000 	.word	0x3fe00000
 800a3fc:	0800b530 	.word	0x0800b530
 800a400:	7fefffff 	.word	0x7fefffff
 800a404:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a408:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a40c:	ee10 0a10 	vmov	r0, s0
 800a410:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a414:	ee10 6a10 	vmov	r6, s0
 800a418:	460f      	mov	r7, r1
 800a41a:	f7f6 fb9d 	bl	8000b58 <__aeabi_d2iz>
 800a41e:	f7f6 f881 	bl	8000524 <__aeabi_i2d>
 800a422:	4602      	mov	r2, r0
 800a424:	460b      	mov	r3, r1
 800a426:	4630      	mov	r0, r6
 800a428:	4639      	mov	r1, r7
 800a42a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a42e:	f7f5 ff2b 	bl	8000288 <__aeabi_dsub>
 800a432:	4b22      	ldr	r3, [pc, #136]	; (800a4bc <__ieee754_rem_pio2+0x40c>)
 800a434:	2200      	movs	r2, #0
 800a436:	f7f6 f8df 	bl	80005f8 <__aeabi_dmul>
 800a43a:	460f      	mov	r7, r1
 800a43c:	4606      	mov	r6, r0
 800a43e:	f7f6 fb8b 	bl	8000b58 <__aeabi_d2iz>
 800a442:	f7f6 f86f 	bl	8000524 <__aeabi_i2d>
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	4630      	mov	r0, r6
 800a44c:	4639      	mov	r1, r7
 800a44e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a452:	f7f5 ff19 	bl	8000288 <__aeabi_dsub>
 800a456:	4b19      	ldr	r3, [pc, #100]	; (800a4bc <__ieee754_rem_pio2+0x40c>)
 800a458:	2200      	movs	r2, #0
 800a45a:	f7f6 f8cd 	bl	80005f8 <__aeabi_dmul>
 800a45e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a462:	ad04      	add	r5, sp, #16
 800a464:	f04f 0803 	mov.w	r8, #3
 800a468:	46a9      	mov	r9, r5
 800a46a:	2600      	movs	r6, #0
 800a46c:	2700      	movs	r7, #0
 800a46e:	4632      	mov	r2, r6
 800a470:	463b      	mov	r3, r7
 800a472:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a476:	46c3      	mov	fp, r8
 800a478:	3d08      	subs	r5, #8
 800a47a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a47e:	f7f6 fb23 	bl	8000ac8 <__aeabi_dcmpeq>
 800a482:	2800      	cmp	r0, #0
 800a484:	d1f3      	bne.n	800a46e <__ieee754_rem_pio2+0x3be>
 800a486:	4b0e      	ldr	r3, [pc, #56]	; (800a4c0 <__ieee754_rem_pio2+0x410>)
 800a488:	9301      	str	r3, [sp, #4]
 800a48a:	2302      	movs	r3, #2
 800a48c:	9300      	str	r3, [sp, #0]
 800a48e:	4622      	mov	r2, r4
 800a490:	465b      	mov	r3, fp
 800a492:	4651      	mov	r1, sl
 800a494:	4648      	mov	r0, r9
 800a496:	f000 f8df 	bl	800a658 <__kernel_rem_pio2>
 800a49a:	9b02      	ldr	r3, [sp, #8]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	4683      	mov	fp, r0
 800a4a0:	f6bf ae46 	bge.w	800a130 <__ieee754_rem_pio2+0x80>
 800a4a4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a4a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a4ac:	f8ca 3004 	str.w	r3, [sl, #4]
 800a4b0:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a4b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a4b8:	e73a      	b.n	800a330 <__ieee754_rem_pio2+0x280>
 800a4ba:	bf00      	nop
 800a4bc:	41700000 	.word	0x41700000
 800a4c0:	0800b5b0 	.word	0x0800b5b0
 800a4c4:	00000000 	.word	0x00000000

0800a4c8 <__kernel_cos>:
 800a4c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4cc:	ec57 6b10 	vmov	r6, r7, d0
 800a4d0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a4d4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a4d8:	ed8d 1b00 	vstr	d1, [sp]
 800a4dc:	da07      	bge.n	800a4ee <__kernel_cos+0x26>
 800a4de:	ee10 0a10 	vmov	r0, s0
 800a4e2:	4639      	mov	r1, r7
 800a4e4:	f7f6 fb38 	bl	8000b58 <__aeabi_d2iz>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	f000 8088 	beq.w	800a5fe <__kernel_cos+0x136>
 800a4ee:	4632      	mov	r2, r6
 800a4f0:	463b      	mov	r3, r7
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	4639      	mov	r1, r7
 800a4f6:	f7f6 f87f 	bl	80005f8 <__aeabi_dmul>
 800a4fa:	4b51      	ldr	r3, [pc, #324]	; (800a640 <__kernel_cos+0x178>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	4604      	mov	r4, r0
 800a500:	460d      	mov	r5, r1
 800a502:	f7f6 f879 	bl	80005f8 <__aeabi_dmul>
 800a506:	a340      	add	r3, pc, #256	; (adr r3, 800a608 <__kernel_cos+0x140>)
 800a508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50c:	4682      	mov	sl, r0
 800a50e:	468b      	mov	fp, r1
 800a510:	4620      	mov	r0, r4
 800a512:	4629      	mov	r1, r5
 800a514:	f7f6 f870 	bl	80005f8 <__aeabi_dmul>
 800a518:	a33d      	add	r3, pc, #244	; (adr r3, 800a610 <__kernel_cos+0x148>)
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	f7f5 feb5 	bl	800028c <__adddf3>
 800a522:	4622      	mov	r2, r4
 800a524:	462b      	mov	r3, r5
 800a526:	f7f6 f867 	bl	80005f8 <__aeabi_dmul>
 800a52a:	a33b      	add	r3, pc, #236	; (adr r3, 800a618 <__kernel_cos+0x150>)
 800a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a530:	f7f5 feaa 	bl	8000288 <__aeabi_dsub>
 800a534:	4622      	mov	r2, r4
 800a536:	462b      	mov	r3, r5
 800a538:	f7f6 f85e 	bl	80005f8 <__aeabi_dmul>
 800a53c:	a338      	add	r3, pc, #224	; (adr r3, 800a620 <__kernel_cos+0x158>)
 800a53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a542:	f7f5 fea3 	bl	800028c <__adddf3>
 800a546:	4622      	mov	r2, r4
 800a548:	462b      	mov	r3, r5
 800a54a:	f7f6 f855 	bl	80005f8 <__aeabi_dmul>
 800a54e:	a336      	add	r3, pc, #216	; (adr r3, 800a628 <__kernel_cos+0x160>)
 800a550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a554:	f7f5 fe98 	bl	8000288 <__aeabi_dsub>
 800a558:	4622      	mov	r2, r4
 800a55a:	462b      	mov	r3, r5
 800a55c:	f7f6 f84c 	bl	80005f8 <__aeabi_dmul>
 800a560:	a333      	add	r3, pc, #204	; (adr r3, 800a630 <__kernel_cos+0x168>)
 800a562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a566:	f7f5 fe91 	bl	800028c <__adddf3>
 800a56a:	4622      	mov	r2, r4
 800a56c:	462b      	mov	r3, r5
 800a56e:	f7f6 f843 	bl	80005f8 <__aeabi_dmul>
 800a572:	4622      	mov	r2, r4
 800a574:	462b      	mov	r3, r5
 800a576:	f7f6 f83f 	bl	80005f8 <__aeabi_dmul>
 800a57a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a57e:	4604      	mov	r4, r0
 800a580:	460d      	mov	r5, r1
 800a582:	4630      	mov	r0, r6
 800a584:	4639      	mov	r1, r7
 800a586:	f7f6 f837 	bl	80005f8 <__aeabi_dmul>
 800a58a:	460b      	mov	r3, r1
 800a58c:	4602      	mov	r2, r0
 800a58e:	4629      	mov	r1, r5
 800a590:	4620      	mov	r0, r4
 800a592:	f7f5 fe79 	bl	8000288 <__aeabi_dsub>
 800a596:	4b2b      	ldr	r3, [pc, #172]	; (800a644 <__kernel_cos+0x17c>)
 800a598:	4598      	cmp	r8, r3
 800a59a:	4606      	mov	r6, r0
 800a59c:	460f      	mov	r7, r1
 800a59e:	dc10      	bgt.n	800a5c2 <__kernel_cos+0xfa>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	4650      	mov	r0, sl
 800a5a6:	4659      	mov	r1, fp
 800a5a8:	f7f5 fe6e 	bl	8000288 <__aeabi_dsub>
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	4926      	ldr	r1, [pc, #152]	; (800a648 <__kernel_cos+0x180>)
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	2000      	movs	r0, #0
 800a5b4:	f7f5 fe68 	bl	8000288 <__aeabi_dsub>
 800a5b8:	ec41 0b10 	vmov	d0, r0, r1
 800a5bc:	b003      	add	sp, #12
 800a5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c2:	4b22      	ldr	r3, [pc, #136]	; (800a64c <__kernel_cos+0x184>)
 800a5c4:	4920      	ldr	r1, [pc, #128]	; (800a648 <__kernel_cos+0x180>)
 800a5c6:	4598      	cmp	r8, r3
 800a5c8:	bfcc      	ite	gt
 800a5ca:	4d21      	ldrgt	r5, [pc, #132]	; (800a650 <__kernel_cos+0x188>)
 800a5cc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a5d0:	2400      	movs	r4, #0
 800a5d2:	4622      	mov	r2, r4
 800a5d4:	462b      	mov	r3, r5
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	f7f5 fe56 	bl	8000288 <__aeabi_dsub>
 800a5dc:	4622      	mov	r2, r4
 800a5de:	4680      	mov	r8, r0
 800a5e0:	4689      	mov	r9, r1
 800a5e2:	462b      	mov	r3, r5
 800a5e4:	4650      	mov	r0, sl
 800a5e6:	4659      	mov	r1, fp
 800a5e8:	f7f5 fe4e 	bl	8000288 <__aeabi_dsub>
 800a5ec:	4632      	mov	r2, r6
 800a5ee:	463b      	mov	r3, r7
 800a5f0:	f7f5 fe4a 	bl	8000288 <__aeabi_dsub>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	4640      	mov	r0, r8
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	e7da      	b.n	800a5b4 <__kernel_cos+0xec>
 800a5fe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a638 <__kernel_cos+0x170>
 800a602:	e7db      	b.n	800a5bc <__kernel_cos+0xf4>
 800a604:	f3af 8000 	nop.w
 800a608:	be8838d4 	.word	0xbe8838d4
 800a60c:	bda8fae9 	.word	0xbda8fae9
 800a610:	bdb4b1c4 	.word	0xbdb4b1c4
 800a614:	3e21ee9e 	.word	0x3e21ee9e
 800a618:	809c52ad 	.word	0x809c52ad
 800a61c:	3e927e4f 	.word	0x3e927e4f
 800a620:	19cb1590 	.word	0x19cb1590
 800a624:	3efa01a0 	.word	0x3efa01a0
 800a628:	16c15177 	.word	0x16c15177
 800a62c:	3f56c16c 	.word	0x3f56c16c
 800a630:	5555554c 	.word	0x5555554c
 800a634:	3fa55555 	.word	0x3fa55555
 800a638:	00000000 	.word	0x00000000
 800a63c:	3ff00000 	.word	0x3ff00000
 800a640:	3fe00000 	.word	0x3fe00000
 800a644:	3fd33332 	.word	0x3fd33332
 800a648:	3ff00000 	.word	0x3ff00000
 800a64c:	3fe90000 	.word	0x3fe90000
 800a650:	3fd20000 	.word	0x3fd20000
 800a654:	00000000 	.word	0x00000000

0800a658 <__kernel_rem_pio2>:
 800a658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65c:	ed2d 8b02 	vpush	{d8}
 800a660:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a664:	f112 0f14 	cmn.w	r2, #20
 800a668:	9308      	str	r3, [sp, #32]
 800a66a:	9101      	str	r1, [sp, #4]
 800a66c:	4bc6      	ldr	r3, [pc, #792]	; (800a988 <__kernel_rem_pio2+0x330>)
 800a66e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a670:	9009      	str	r0, [sp, #36]	; 0x24
 800a672:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a676:	9304      	str	r3, [sp, #16]
 800a678:	9b08      	ldr	r3, [sp, #32]
 800a67a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a67e:	bfa8      	it	ge
 800a680:	1ed4      	subge	r4, r2, #3
 800a682:	9306      	str	r3, [sp, #24]
 800a684:	bfb2      	itee	lt
 800a686:	2400      	movlt	r4, #0
 800a688:	2318      	movge	r3, #24
 800a68a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a68e:	f06f 0317 	mvn.w	r3, #23
 800a692:	fb04 3303 	mla	r3, r4, r3, r3
 800a696:	eb03 0a02 	add.w	sl, r3, r2
 800a69a:	9b04      	ldr	r3, [sp, #16]
 800a69c:	9a06      	ldr	r2, [sp, #24]
 800a69e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a978 <__kernel_rem_pio2+0x320>
 800a6a2:	eb03 0802 	add.w	r8, r3, r2
 800a6a6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a6a8:	1aa7      	subs	r7, r4, r2
 800a6aa:	ae20      	add	r6, sp, #128	; 0x80
 800a6ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a6b0:	2500      	movs	r5, #0
 800a6b2:	4545      	cmp	r5, r8
 800a6b4:	dd18      	ble.n	800a6e8 <__kernel_rem_pio2+0x90>
 800a6b6:	9b08      	ldr	r3, [sp, #32]
 800a6b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a6bc:	aa20      	add	r2, sp, #128	; 0x80
 800a6be:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800a978 <__kernel_rem_pio2+0x320>
 800a6c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a6c6:	f1c3 0301 	rsb	r3, r3, #1
 800a6ca:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a6ce:	9307      	str	r3, [sp, #28]
 800a6d0:	9b07      	ldr	r3, [sp, #28]
 800a6d2:	9a04      	ldr	r2, [sp, #16]
 800a6d4:	4443      	add	r3, r8
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	db2f      	blt.n	800a73a <__kernel_rem_pio2+0xe2>
 800a6da:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a6de:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a6e2:	462f      	mov	r7, r5
 800a6e4:	2600      	movs	r6, #0
 800a6e6:	e01b      	b.n	800a720 <__kernel_rem_pio2+0xc8>
 800a6e8:	42ef      	cmn	r7, r5
 800a6ea:	d407      	bmi.n	800a6fc <__kernel_rem_pio2+0xa4>
 800a6ec:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a6f0:	f7f5 ff18 	bl	8000524 <__aeabi_i2d>
 800a6f4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a6f8:	3501      	adds	r5, #1
 800a6fa:	e7da      	b.n	800a6b2 <__kernel_rem_pio2+0x5a>
 800a6fc:	ec51 0b18 	vmov	r0, r1, d8
 800a700:	e7f8      	b.n	800a6f4 <__kernel_rem_pio2+0x9c>
 800a702:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a706:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a70a:	f7f5 ff75 	bl	80005f8 <__aeabi_dmul>
 800a70e:	4602      	mov	r2, r0
 800a710:	460b      	mov	r3, r1
 800a712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a716:	f7f5 fdb9 	bl	800028c <__adddf3>
 800a71a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a71e:	3601      	adds	r6, #1
 800a720:	9b06      	ldr	r3, [sp, #24]
 800a722:	429e      	cmp	r6, r3
 800a724:	f1a7 0708 	sub.w	r7, r7, #8
 800a728:	ddeb      	ble.n	800a702 <__kernel_rem_pio2+0xaa>
 800a72a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a72e:	3508      	adds	r5, #8
 800a730:	ecab 7b02 	vstmia	fp!, {d7}
 800a734:	f108 0801 	add.w	r8, r8, #1
 800a738:	e7ca      	b.n	800a6d0 <__kernel_rem_pio2+0x78>
 800a73a:	9b04      	ldr	r3, [sp, #16]
 800a73c:	aa0c      	add	r2, sp, #48	; 0x30
 800a73e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a742:	930b      	str	r3, [sp, #44]	; 0x2c
 800a744:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a746:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a74a:	9c04      	ldr	r4, [sp, #16]
 800a74c:	930a      	str	r3, [sp, #40]	; 0x28
 800a74e:	ab98      	add	r3, sp, #608	; 0x260
 800a750:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a754:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a758:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800a75c:	f8cd b008 	str.w	fp, [sp, #8]
 800a760:	4625      	mov	r5, r4
 800a762:	2d00      	cmp	r5, #0
 800a764:	dc78      	bgt.n	800a858 <__kernel_rem_pio2+0x200>
 800a766:	ec47 6b10 	vmov	d0, r6, r7
 800a76a:	4650      	mov	r0, sl
 800a76c:	f000 fc08 	bl	800af80 <scalbn>
 800a770:	ec57 6b10 	vmov	r6, r7, d0
 800a774:	2200      	movs	r2, #0
 800a776:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a77a:	ee10 0a10 	vmov	r0, s0
 800a77e:	4639      	mov	r1, r7
 800a780:	f7f5 ff3a 	bl	80005f8 <__aeabi_dmul>
 800a784:	ec41 0b10 	vmov	d0, r0, r1
 800a788:	f000 fb7a 	bl	800ae80 <floor>
 800a78c:	4b7f      	ldr	r3, [pc, #508]	; (800a98c <__kernel_rem_pio2+0x334>)
 800a78e:	ec51 0b10 	vmov	r0, r1, d0
 800a792:	2200      	movs	r2, #0
 800a794:	f7f5 ff30 	bl	80005f8 <__aeabi_dmul>
 800a798:	4602      	mov	r2, r0
 800a79a:	460b      	mov	r3, r1
 800a79c:	4630      	mov	r0, r6
 800a79e:	4639      	mov	r1, r7
 800a7a0:	f7f5 fd72 	bl	8000288 <__aeabi_dsub>
 800a7a4:	460f      	mov	r7, r1
 800a7a6:	4606      	mov	r6, r0
 800a7a8:	f7f6 f9d6 	bl	8000b58 <__aeabi_d2iz>
 800a7ac:	9007      	str	r0, [sp, #28]
 800a7ae:	f7f5 feb9 	bl	8000524 <__aeabi_i2d>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	4639      	mov	r1, r7
 800a7ba:	f7f5 fd65 	bl	8000288 <__aeabi_dsub>
 800a7be:	f1ba 0f00 	cmp.w	sl, #0
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	460f      	mov	r7, r1
 800a7c6:	dd70      	ble.n	800a8aa <__kernel_rem_pio2+0x252>
 800a7c8:	1e62      	subs	r2, r4, #1
 800a7ca:	ab0c      	add	r3, sp, #48	; 0x30
 800a7cc:	9d07      	ldr	r5, [sp, #28]
 800a7ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a7d2:	f1ca 0118 	rsb	r1, sl, #24
 800a7d6:	fa40 f301 	asr.w	r3, r0, r1
 800a7da:	441d      	add	r5, r3
 800a7dc:	408b      	lsls	r3, r1
 800a7de:	1ac0      	subs	r0, r0, r3
 800a7e0:	ab0c      	add	r3, sp, #48	; 0x30
 800a7e2:	9507      	str	r5, [sp, #28]
 800a7e4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a7e8:	f1ca 0317 	rsb	r3, sl, #23
 800a7ec:	fa40 f303 	asr.w	r3, r0, r3
 800a7f0:	9302      	str	r3, [sp, #8]
 800a7f2:	9b02      	ldr	r3, [sp, #8]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	dd66      	ble.n	800a8c6 <__kernel_rem_pio2+0x26e>
 800a7f8:	9b07      	ldr	r3, [sp, #28]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	9307      	str	r3, [sp, #28]
 800a800:	4615      	mov	r5, r2
 800a802:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a806:	4294      	cmp	r4, r2
 800a808:	f300 8099 	bgt.w	800a93e <__kernel_rem_pio2+0x2e6>
 800a80c:	f1ba 0f00 	cmp.w	sl, #0
 800a810:	dd07      	ble.n	800a822 <__kernel_rem_pio2+0x1ca>
 800a812:	f1ba 0f01 	cmp.w	sl, #1
 800a816:	f000 80a5 	beq.w	800a964 <__kernel_rem_pio2+0x30c>
 800a81a:	f1ba 0f02 	cmp.w	sl, #2
 800a81e:	f000 80c1 	beq.w	800a9a4 <__kernel_rem_pio2+0x34c>
 800a822:	9b02      	ldr	r3, [sp, #8]
 800a824:	2b02      	cmp	r3, #2
 800a826:	d14e      	bne.n	800a8c6 <__kernel_rem_pio2+0x26e>
 800a828:	4632      	mov	r2, r6
 800a82a:	463b      	mov	r3, r7
 800a82c:	4958      	ldr	r1, [pc, #352]	; (800a990 <__kernel_rem_pio2+0x338>)
 800a82e:	2000      	movs	r0, #0
 800a830:	f7f5 fd2a 	bl	8000288 <__aeabi_dsub>
 800a834:	4606      	mov	r6, r0
 800a836:	460f      	mov	r7, r1
 800a838:	2d00      	cmp	r5, #0
 800a83a:	d044      	beq.n	800a8c6 <__kernel_rem_pio2+0x26e>
 800a83c:	4650      	mov	r0, sl
 800a83e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a980 <__kernel_rem_pio2+0x328>
 800a842:	f000 fb9d 	bl	800af80 <scalbn>
 800a846:	4630      	mov	r0, r6
 800a848:	4639      	mov	r1, r7
 800a84a:	ec53 2b10 	vmov	r2, r3, d0
 800a84e:	f7f5 fd1b 	bl	8000288 <__aeabi_dsub>
 800a852:	4606      	mov	r6, r0
 800a854:	460f      	mov	r7, r1
 800a856:	e036      	b.n	800a8c6 <__kernel_rem_pio2+0x26e>
 800a858:	4b4e      	ldr	r3, [pc, #312]	; (800a994 <__kernel_rem_pio2+0x33c>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	4630      	mov	r0, r6
 800a85e:	4639      	mov	r1, r7
 800a860:	f7f5 feca 	bl	80005f8 <__aeabi_dmul>
 800a864:	f7f6 f978 	bl	8000b58 <__aeabi_d2iz>
 800a868:	f7f5 fe5c 	bl	8000524 <__aeabi_i2d>
 800a86c:	4b4a      	ldr	r3, [pc, #296]	; (800a998 <__kernel_rem_pio2+0x340>)
 800a86e:	2200      	movs	r2, #0
 800a870:	4680      	mov	r8, r0
 800a872:	4689      	mov	r9, r1
 800a874:	f7f5 fec0 	bl	80005f8 <__aeabi_dmul>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	4630      	mov	r0, r6
 800a87e:	4639      	mov	r1, r7
 800a880:	f7f5 fd02 	bl	8000288 <__aeabi_dsub>
 800a884:	f7f6 f968 	bl	8000b58 <__aeabi_d2iz>
 800a888:	9b02      	ldr	r3, [sp, #8]
 800a88a:	f843 0b04 	str.w	r0, [r3], #4
 800a88e:	3d01      	subs	r5, #1
 800a890:	9302      	str	r3, [sp, #8]
 800a892:	ab70      	add	r3, sp, #448	; 0x1c0
 800a894:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89c:	4640      	mov	r0, r8
 800a89e:	4649      	mov	r1, r9
 800a8a0:	f7f5 fcf4 	bl	800028c <__adddf3>
 800a8a4:	4606      	mov	r6, r0
 800a8a6:	460f      	mov	r7, r1
 800a8a8:	e75b      	b.n	800a762 <__kernel_rem_pio2+0x10a>
 800a8aa:	d105      	bne.n	800a8b8 <__kernel_rem_pio2+0x260>
 800a8ac:	1e63      	subs	r3, r4, #1
 800a8ae:	aa0c      	add	r2, sp, #48	; 0x30
 800a8b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a8b4:	15c3      	asrs	r3, r0, #23
 800a8b6:	e79b      	b.n	800a7f0 <__kernel_rem_pio2+0x198>
 800a8b8:	4b38      	ldr	r3, [pc, #224]	; (800a99c <__kernel_rem_pio2+0x344>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f7f6 f922 	bl	8000b04 <__aeabi_dcmpge>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d139      	bne.n	800a938 <__kernel_rem_pio2+0x2e0>
 800a8c4:	9002      	str	r0, [sp, #8]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4630      	mov	r0, r6
 800a8cc:	4639      	mov	r1, r7
 800a8ce:	f7f6 f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	f000 80b4 	beq.w	800aa40 <__kernel_rem_pio2+0x3e8>
 800a8d8:	f104 3bff 	add.w	fp, r4, #4294967295
 800a8dc:	465b      	mov	r3, fp
 800a8de:	2200      	movs	r2, #0
 800a8e0:	9904      	ldr	r1, [sp, #16]
 800a8e2:	428b      	cmp	r3, r1
 800a8e4:	da65      	bge.n	800a9b2 <__kernel_rem_pio2+0x35a>
 800a8e6:	2a00      	cmp	r2, #0
 800a8e8:	d07b      	beq.n	800a9e2 <__kernel_rem_pio2+0x38a>
 800a8ea:	ab0c      	add	r3, sp, #48	; 0x30
 800a8ec:	f1aa 0a18 	sub.w	sl, sl, #24
 800a8f0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f000 80a0 	beq.w	800aa3a <__kernel_rem_pio2+0x3e2>
 800a8fa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800a980 <__kernel_rem_pio2+0x328>
 800a8fe:	4650      	mov	r0, sl
 800a900:	f000 fb3e 	bl	800af80 <scalbn>
 800a904:	4f23      	ldr	r7, [pc, #140]	; (800a994 <__kernel_rem_pio2+0x33c>)
 800a906:	ec55 4b10 	vmov	r4, r5, d0
 800a90a:	46d8      	mov	r8, fp
 800a90c:	2600      	movs	r6, #0
 800a90e:	f1b8 0f00 	cmp.w	r8, #0
 800a912:	f280 80cf 	bge.w	800aab4 <__kernel_rem_pio2+0x45c>
 800a916:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800a978 <__kernel_rem_pio2+0x320>
 800a91a:	465f      	mov	r7, fp
 800a91c:	f04f 0800 	mov.w	r8, #0
 800a920:	2f00      	cmp	r7, #0
 800a922:	f2c0 80fd 	blt.w	800ab20 <__kernel_rem_pio2+0x4c8>
 800a926:	ab70      	add	r3, sp, #448	; 0x1c0
 800a928:	f8df a074 	ldr.w	sl, [pc, #116]	; 800a9a0 <__kernel_rem_pio2+0x348>
 800a92c:	ec55 4b18 	vmov	r4, r5, d8
 800a930:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800a934:	2600      	movs	r6, #0
 800a936:	e0e5      	b.n	800ab04 <__kernel_rem_pio2+0x4ac>
 800a938:	2302      	movs	r3, #2
 800a93a:	9302      	str	r3, [sp, #8]
 800a93c:	e75c      	b.n	800a7f8 <__kernel_rem_pio2+0x1a0>
 800a93e:	f8db 3000 	ldr.w	r3, [fp]
 800a942:	b955      	cbnz	r5, 800a95a <__kernel_rem_pio2+0x302>
 800a944:	b123      	cbz	r3, 800a950 <__kernel_rem_pio2+0x2f8>
 800a946:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a94a:	f8cb 3000 	str.w	r3, [fp]
 800a94e:	2301      	movs	r3, #1
 800a950:	3201      	adds	r2, #1
 800a952:	f10b 0b04 	add.w	fp, fp, #4
 800a956:	461d      	mov	r5, r3
 800a958:	e755      	b.n	800a806 <__kernel_rem_pio2+0x1ae>
 800a95a:	1acb      	subs	r3, r1, r3
 800a95c:	f8cb 3000 	str.w	r3, [fp]
 800a960:	462b      	mov	r3, r5
 800a962:	e7f5      	b.n	800a950 <__kernel_rem_pio2+0x2f8>
 800a964:	1e62      	subs	r2, r4, #1
 800a966:	ab0c      	add	r3, sp, #48	; 0x30
 800a968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a96c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a970:	a90c      	add	r1, sp, #48	; 0x30
 800a972:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a976:	e754      	b.n	800a822 <__kernel_rem_pio2+0x1ca>
	...
 800a984:	3ff00000 	.word	0x3ff00000
 800a988:	0800b6f8 	.word	0x0800b6f8
 800a98c:	40200000 	.word	0x40200000
 800a990:	3ff00000 	.word	0x3ff00000
 800a994:	3e700000 	.word	0x3e700000
 800a998:	41700000 	.word	0x41700000
 800a99c:	3fe00000 	.word	0x3fe00000
 800a9a0:	0800b6b8 	.word	0x0800b6b8
 800a9a4:	1e62      	subs	r2, r4, #1
 800a9a6:	ab0c      	add	r3, sp, #48	; 0x30
 800a9a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a9b0:	e7de      	b.n	800a970 <__kernel_rem_pio2+0x318>
 800a9b2:	a90c      	add	r1, sp, #48	; 0x30
 800a9b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	430a      	orrs	r2, r1
 800a9bc:	e790      	b.n	800a8e0 <__kernel_rem_pio2+0x288>
 800a9be:	3301      	adds	r3, #1
 800a9c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a9c4:	2900      	cmp	r1, #0
 800a9c6:	d0fa      	beq.n	800a9be <__kernel_rem_pio2+0x366>
 800a9c8:	9a08      	ldr	r2, [sp, #32]
 800a9ca:	18e3      	adds	r3, r4, r3
 800a9cc:	18a6      	adds	r6, r4, r2
 800a9ce:	aa20      	add	r2, sp, #128	; 0x80
 800a9d0:	1c65      	adds	r5, r4, #1
 800a9d2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a9d6:	9302      	str	r3, [sp, #8]
 800a9d8:	9b02      	ldr	r3, [sp, #8]
 800a9da:	42ab      	cmp	r3, r5
 800a9dc:	da04      	bge.n	800a9e8 <__kernel_rem_pio2+0x390>
 800a9de:	461c      	mov	r4, r3
 800a9e0:	e6b5      	b.n	800a74e <__kernel_rem_pio2+0xf6>
 800a9e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e7eb      	b.n	800a9c0 <__kernel_rem_pio2+0x368>
 800a9e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a9ee:	f7f5 fd99 	bl	8000524 <__aeabi_i2d>
 800a9f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f8:	46b3      	mov	fp, r6
 800a9fa:	461c      	mov	r4, r3
 800a9fc:	2700      	movs	r7, #0
 800a9fe:	f04f 0800 	mov.w	r8, #0
 800aa02:	f04f 0900 	mov.w	r9, #0
 800aa06:	9b06      	ldr	r3, [sp, #24]
 800aa08:	429f      	cmp	r7, r3
 800aa0a:	dd06      	ble.n	800aa1a <__kernel_rem_pio2+0x3c2>
 800aa0c:	ab70      	add	r3, sp, #448	; 0x1c0
 800aa0e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aa12:	e9c3 8900 	strd	r8, r9, [r3]
 800aa16:	3501      	adds	r5, #1
 800aa18:	e7de      	b.n	800a9d8 <__kernel_rem_pio2+0x380>
 800aa1a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800aa1e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800aa22:	f7f5 fde9 	bl	80005f8 <__aeabi_dmul>
 800aa26:	4602      	mov	r2, r0
 800aa28:	460b      	mov	r3, r1
 800aa2a:	4640      	mov	r0, r8
 800aa2c:	4649      	mov	r1, r9
 800aa2e:	f7f5 fc2d 	bl	800028c <__adddf3>
 800aa32:	3701      	adds	r7, #1
 800aa34:	4680      	mov	r8, r0
 800aa36:	4689      	mov	r9, r1
 800aa38:	e7e5      	b.n	800aa06 <__kernel_rem_pio2+0x3ae>
 800aa3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa3e:	e754      	b.n	800a8ea <__kernel_rem_pio2+0x292>
 800aa40:	ec47 6b10 	vmov	d0, r6, r7
 800aa44:	f1ca 0000 	rsb	r0, sl, #0
 800aa48:	f000 fa9a 	bl	800af80 <scalbn>
 800aa4c:	ec57 6b10 	vmov	r6, r7, d0
 800aa50:	4b9f      	ldr	r3, [pc, #636]	; (800acd0 <__kernel_rem_pio2+0x678>)
 800aa52:	ee10 0a10 	vmov	r0, s0
 800aa56:	2200      	movs	r2, #0
 800aa58:	4639      	mov	r1, r7
 800aa5a:	f7f6 f853 	bl	8000b04 <__aeabi_dcmpge>
 800aa5e:	b300      	cbz	r0, 800aaa2 <__kernel_rem_pio2+0x44a>
 800aa60:	4b9c      	ldr	r3, [pc, #624]	; (800acd4 <__kernel_rem_pio2+0x67c>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	4630      	mov	r0, r6
 800aa66:	4639      	mov	r1, r7
 800aa68:	f7f5 fdc6 	bl	80005f8 <__aeabi_dmul>
 800aa6c:	f7f6 f874 	bl	8000b58 <__aeabi_d2iz>
 800aa70:	4605      	mov	r5, r0
 800aa72:	f7f5 fd57 	bl	8000524 <__aeabi_i2d>
 800aa76:	4b96      	ldr	r3, [pc, #600]	; (800acd0 <__kernel_rem_pio2+0x678>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f7f5 fdbd 	bl	80005f8 <__aeabi_dmul>
 800aa7e:	460b      	mov	r3, r1
 800aa80:	4602      	mov	r2, r0
 800aa82:	4639      	mov	r1, r7
 800aa84:	4630      	mov	r0, r6
 800aa86:	f7f5 fbff 	bl	8000288 <__aeabi_dsub>
 800aa8a:	f7f6 f865 	bl	8000b58 <__aeabi_d2iz>
 800aa8e:	f104 0b01 	add.w	fp, r4, #1
 800aa92:	ab0c      	add	r3, sp, #48	; 0x30
 800aa94:	f10a 0a18 	add.w	sl, sl, #24
 800aa98:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aa9c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800aaa0:	e72b      	b.n	800a8fa <__kernel_rem_pio2+0x2a2>
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	4639      	mov	r1, r7
 800aaa6:	f7f6 f857 	bl	8000b58 <__aeabi_d2iz>
 800aaaa:	ab0c      	add	r3, sp, #48	; 0x30
 800aaac:	46a3      	mov	fp, r4
 800aaae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aab2:	e722      	b.n	800a8fa <__kernel_rem_pio2+0x2a2>
 800aab4:	ab70      	add	r3, sp, #448	; 0x1c0
 800aab6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800aaba:	ab0c      	add	r3, sp, #48	; 0x30
 800aabc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800aac0:	f7f5 fd30 	bl	8000524 <__aeabi_i2d>
 800aac4:	4622      	mov	r2, r4
 800aac6:	462b      	mov	r3, r5
 800aac8:	f7f5 fd96 	bl	80005f8 <__aeabi_dmul>
 800aacc:	4632      	mov	r2, r6
 800aace:	e9c9 0100 	strd	r0, r1, [r9]
 800aad2:	463b      	mov	r3, r7
 800aad4:	4620      	mov	r0, r4
 800aad6:	4629      	mov	r1, r5
 800aad8:	f7f5 fd8e 	bl	80005f8 <__aeabi_dmul>
 800aadc:	f108 38ff 	add.w	r8, r8, #4294967295
 800aae0:	4604      	mov	r4, r0
 800aae2:	460d      	mov	r5, r1
 800aae4:	e713      	b.n	800a90e <__kernel_rem_pio2+0x2b6>
 800aae6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800aaea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800aaee:	f7f5 fd83 	bl	80005f8 <__aeabi_dmul>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	4629      	mov	r1, r5
 800aafa:	f7f5 fbc7 	bl	800028c <__adddf3>
 800aafe:	3601      	adds	r6, #1
 800ab00:	4604      	mov	r4, r0
 800ab02:	460d      	mov	r5, r1
 800ab04:	9b04      	ldr	r3, [sp, #16]
 800ab06:	429e      	cmp	r6, r3
 800ab08:	dc01      	bgt.n	800ab0e <__kernel_rem_pio2+0x4b6>
 800ab0a:	45b0      	cmp	r8, r6
 800ab0c:	daeb      	bge.n	800aae6 <__kernel_rem_pio2+0x48e>
 800ab0e:	ab48      	add	r3, sp, #288	; 0x120
 800ab10:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ab14:	e9c3 4500 	strd	r4, r5, [r3]
 800ab18:	3f01      	subs	r7, #1
 800ab1a:	f108 0801 	add.w	r8, r8, #1
 800ab1e:	e6ff      	b.n	800a920 <__kernel_rem_pio2+0x2c8>
 800ab20:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	dc0b      	bgt.n	800ab3e <__kernel_rem_pio2+0x4e6>
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	dc6e      	bgt.n	800ac08 <__kernel_rem_pio2+0x5b0>
 800ab2a:	d045      	beq.n	800abb8 <__kernel_rem_pio2+0x560>
 800ab2c:	9b07      	ldr	r3, [sp, #28]
 800ab2e:	f003 0007 	and.w	r0, r3, #7
 800ab32:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ab36:	ecbd 8b02 	vpop	{d8}
 800ab3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ab40:	2b03      	cmp	r3, #3
 800ab42:	d1f3      	bne.n	800ab2c <__kernel_rem_pio2+0x4d4>
 800ab44:	ab48      	add	r3, sp, #288	; 0x120
 800ab46:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800ab4a:	46d0      	mov	r8, sl
 800ab4c:	46d9      	mov	r9, fp
 800ab4e:	f1b9 0f00 	cmp.w	r9, #0
 800ab52:	f1a8 0808 	sub.w	r8, r8, #8
 800ab56:	dc64      	bgt.n	800ac22 <__kernel_rem_pio2+0x5ca>
 800ab58:	465c      	mov	r4, fp
 800ab5a:	2c01      	cmp	r4, #1
 800ab5c:	f1aa 0a08 	sub.w	sl, sl, #8
 800ab60:	dc7e      	bgt.n	800ac60 <__kernel_rem_pio2+0x608>
 800ab62:	2000      	movs	r0, #0
 800ab64:	2100      	movs	r1, #0
 800ab66:	f1bb 0f01 	cmp.w	fp, #1
 800ab6a:	f300 8097 	bgt.w	800ac9c <__kernel_rem_pio2+0x644>
 800ab6e:	9b02      	ldr	r3, [sp, #8]
 800ab70:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800ab74:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f040 8099 	bne.w	800acb0 <__kernel_rem_pio2+0x658>
 800ab7e:	9b01      	ldr	r3, [sp, #4]
 800ab80:	e9c3 5600 	strd	r5, r6, [r3]
 800ab84:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ab88:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ab8c:	e7ce      	b.n	800ab2c <__kernel_rem_pio2+0x4d4>
 800ab8e:	ab48      	add	r3, sp, #288	; 0x120
 800ab90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	f7f5 fb78 	bl	800028c <__adddf3>
 800ab9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aba0:	f1bb 0f00 	cmp.w	fp, #0
 800aba4:	daf3      	bge.n	800ab8e <__kernel_rem_pio2+0x536>
 800aba6:	9b02      	ldr	r3, [sp, #8]
 800aba8:	b113      	cbz	r3, 800abb0 <__kernel_rem_pio2+0x558>
 800abaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abae:	4619      	mov	r1, r3
 800abb0:	9b01      	ldr	r3, [sp, #4]
 800abb2:	e9c3 0100 	strd	r0, r1, [r3]
 800abb6:	e7b9      	b.n	800ab2c <__kernel_rem_pio2+0x4d4>
 800abb8:	2000      	movs	r0, #0
 800abba:	2100      	movs	r1, #0
 800abbc:	e7f0      	b.n	800aba0 <__kernel_rem_pio2+0x548>
 800abbe:	ab48      	add	r3, sp, #288	; 0x120
 800abc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800abc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc8:	f7f5 fb60 	bl	800028c <__adddf3>
 800abcc:	3c01      	subs	r4, #1
 800abce:	2c00      	cmp	r4, #0
 800abd0:	daf5      	bge.n	800abbe <__kernel_rem_pio2+0x566>
 800abd2:	9b02      	ldr	r3, [sp, #8]
 800abd4:	b1e3      	cbz	r3, 800ac10 <__kernel_rem_pio2+0x5b8>
 800abd6:	4602      	mov	r2, r0
 800abd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abdc:	9c01      	ldr	r4, [sp, #4]
 800abde:	e9c4 2300 	strd	r2, r3, [r4]
 800abe2:	4602      	mov	r2, r0
 800abe4:	460b      	mov	r3, r1
 800abe6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800abea:	f7f5 fb4d 	bl	8000288 <__aeabi_dsub>
 800abee:	ad4a      	add	r5, sp, #296	; 0x128
 800abf0:	2401      	movs	r4, #1
 800abf2:	45a3      	cmp	fp, r4
 800abf4:	da0f      	bge.n	800ac16 <__kernel_rem_pio2+0x5be>
 800abf6:	9b02      	ldr	r3, [sp, #8]
 800abf8:	b113      	cbz	r3, 800ac00 <__kernel_rem_pio2+0x5a8>
 800abfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abfe:	4619      	mov	r1, r3
 800ac00:	9b01      	ldr	r3, [sp, #4]
 800ac02:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ac06:	e791      	b.n	800ab2c <__kernel_rem_pio2+0x4d4>
 800ac08:	465c      	mov	r4, fp
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	e7de      	b.n	800abce <__kernel_rem_pio2+0x576>
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	e7e2      	b.n	800abdc <__kernel_rem_pio2+0x584>
 800ac16:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ac1a:	f7f5 fb37 	bl	800028c <__adddf3>
 800ac1e:	3401      	adds	r4, #1
 800ac20:	e7e7      	b.n	800abf2 <__kernel_rem_pio2+0x59a>
 800ac22:	e9d8 4500 	ldrd	r4, r5, [r8]
 800ac26:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	4632      	mov	r2, r6
 800ac2e:	463b      	mov	r3, r7
 800ac30:	4629      	mov	r1, r5
 800ac32:	f7f5 fb2b 	bl	800028c <__adddf3>
 800ac36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	4620      	mov	r0, r4
 800ac40:	4629      	mov	r1, r5
 800ac42:	f7f5 fb21 	bl	8000288 <__aeabi_dsub>
 800ac46:	4632      	mov	r2, r6
 800ac48:	463b      	mov	r3, r7
 800ac4a:	f7f5 fb1f 	bl	800028c <__adddf3>
 800ac4e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ac52:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800ac56:	ed88 7b00 	vstr	d7, [r8]
 800ac5a:	f109 39ff 	add.w	r9, r9, #4294967295
 800ac5e:	e776      	b.n	800ab4e <__kernel_rem_pio2+0x4f6>
 800ac60:	e9da 8900 	ldrd	r8, r9, [sl]
 800ac64:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ac68:	4640      	mov	r0, r8
 800ac6a:	4632      	mov	r2, r6
 800ac6c:	463b      	mov	r3, r7
 800ac6e:	4649      	mov	r1, r9
 800ac70:	f7f5 fb0c 	bl	800028c <__adddf3>
 800ac74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac78:	4602      	mov	r2, r0
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	4640      	mov	r0, r8
 800ac7e:	4649      	mov	r1, r9
 800ac80:	f7f5 fb02 	bl	8000288 <__aeabi_dsub>
 800ac84:	4632      	mov	r2, r6
 800ac86:	463b      	mov	r3, r7
 800ac88:	f7f5 fb00 	bl	800028c <__adddf3>
 800ac8c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ac90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ac94:	ed8a 7b00 	vstr	d7, [sl]
 800ac98:	3c01      	subs	r4, #1
 800ac9a:	e75e      	b.n	800ab5a <__kernel_rem_pio2+0x502>
 800ac9c:	ab48      	add	r3, sp, #288	; 0x120
 800ac9e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca6:	f7f5 faf1 	bl	800028c <__adddf3>
 800acaa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800acae:	e75a      	b.n	800ab66 <__kernel_rem_pio2+0x50e>
 800acb0:	9b01      	ldr	r3, [sp, #4]
 800acb2:	9a01      	ldr	r2, [sp, #4]
 800acb4:	601d      	str	r5, [r3, #0]
 800acb6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800acba:	605c      	str	r4, [r3, #4]
 800acbc:	609f      	str	r7, [r3, #8]
 800acbe:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800acc2:	60d3      	str	r3, [r2, #12]
 800acc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acc8:	6110      	str	r0, [r2, #16]
 800acca:	6153      	str	r3, [r2, #20]
 800accc:	e72e      	b.n	800ab2c <__kernel_rem_pio2+0x4d4>
 800acce:	bf00      	nop
 800acd0:	41700000 	.word	0x41700000
 800acd4:	3e700000 	.word	0x3e700000

0800acd8 <__kernel_sin>:
 800acd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acdc:	ed2d 8b04 	vpush	{d8-d9}
 800ace0:	eeb0 8a41 	vmov.f32	s16, s2
 800ace4:	eef0 8a61 	vmov.f32	s17, s3
 800ace8:	ec55 4b10 	vmov	r4, r5, d0
 800acec:	b083      	sub	sp, #12
 800acee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800acf2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800acf6:	9001      	str	r0, [sp, #4]
 800acf8:	da06      	bge.n	800ad08 <__kernel_sin+0x30>
 800acfa:	ee10 0a10 	vmov	r0, s0
 800acfe:	4629      	mov	r1, r5
 800ad00:	f7f5 ff2a 	bl	8000b58 <__aeabi_d2iz>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d051      	beq.n	800adac <__kernel_sin+0xd4>
 800ad08:	4622      	mov	r2, r4
 800ad0a:	462b      	mov	r3, r5
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	4629      	mov	r1, r5
 800ad10:	f7f5 fc72 	bl	80005f8 <__aeabi_dmul>
 800ad14:	4682      	mov	sl, r0
 800ad16:	468b      	mov	fp, r1
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	4629      	mov	r1, r5
 800ad20:	f7f5 fc6a 	bl	80005f8 <__aeabi_dmul>
 800ad24:	a341      	add	r3, pc, #260	; (adr r3, 800ae2c <__kernel_sin+0x154>)
 800ad26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2a:	4680      	mov	r8, r0
 800ad2c:	4689      	mov	r9, r1
 800ad2e:	4650      	mov	r0, sl
 800ad30:	4659      	mov	r1, fp
 800ad32:	f7f5 fc61 	bl	80005f8 <__aeabi_dmul>
 800ad36:	a33f      	add	r3, pc, #252	; (adr r3, 800ae34 <__kernel_sin+0x15c>)
 800ad38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3c:	f7f5 faa4 	bl	8000288 <__aeabi_dsub>
 800ad40:	4652      	mov	r2, sl
 800ad42:	465b      	mov	r3, fp
 800ad44:	f7f5 fc58 	bl	80005f8 <__aeabi_dmul>
 800ad48:	a33c      	add	r3, pc, #240	; (adr r3, 800ae3c <__kernel_sin+0x164>)
 800ad4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4e:	f7f5 fa9d 	bl	800028c <__adddf3>
 800ad52:	4652      	mov	r2, sl
 800ad54:	465b      	mov	r3, fp
 800ad56:	f7f5 fc4f 	bl	80005f8 <__aeabi_dmul>
 800ad5a:	a33a      	add	r3, pc, #232	; (adr r3, 800ae44 <__kernel_sin+0x16c>)
 800ad5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad60:	f7f5 fa92 	bl	8000288 <__aeabi_dsub>
 800ad64:	4652      	mov	r2, sl
 800ad66:	465b      	mov	r3, fp
 800ad68:	f7f5 fc46 	bl	80005f8 <__aeabi_dmul>
 800ad6c:	a337      	add	r3, pc, #220	; (adr r3, 800ae4c <__kernel_sin+0x174>)
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	f7f5 fa8b 	bl	800028c <__adddf3>
 800ad76:	9b01      	ldr	r3, [sp, #4]
 800ad78:	4606      	mov	r6, r0
 800ad7a:	460f      	mov	r7, r1
 800ad7c:	b9eb      	cbnz	r3, 800adba <__kernel_sin+0xe2>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	4650      	mov	r0, sl
 800ad84:	4659      	mov	r1, fp
 800ad86:	f7f5 fc37 	bl	80005f8 <__aeabi_dmul>
 800ad8a:	a325      	add	r3, pc, #148	; (adr r3, 800ae20 <__kernel_sin+0x148>)
 800ad8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad90:	f7f5 fa7a 	bl	8000288 <__aeabi_dsub>
 800ad94:	4642      	mov	r2, r8
 800ad96:	464b      	mov	r3, r9
 800ad98:	f7f5 fc2e 	bl	80005f8 <__aeabi_dmul>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	460b      	mov	r3, r1
 800ada0:	4620      	mov	r0, r4
 800ada2:	4629      	mov	r1, r5
 800ada4:	f7f5 fa72 	bl	800028c <__adddf3>
 800ada8:	4604      	mov	r4, r0
 800adaa:	460d      	mov	r5, r1
 800adac:	ec45 4b10 	vmov	d0, r4, r5
 800adb0:	b003      	add	sp, #12
 800adb2:	ecbd 8b04 	vpop	{d8-d9}
 800adb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adba:	4b1b      	ldr	r3, [pc, #108]	; (800ae28 <__kernel_sin+0x150>)
 800adbc:	ec51 0b18 	vmov	r0, r1, d8
 800adc0:	2200      	movs	r2, #0
 800adc2:	f7f5 fc19 	bl	80005f8 <__aeabi_dmul>
 800adc6:	4632      	mov	r2, r6
 800adc8:	ec41 0b19 	vmov	d9, r0, r1
 800adcc:	463b      	mov	r3, r7
 800adce:	4640      	mov	r0, r8
 800add0:	4649      	mov	r1, r9
 800add2:	f7f5 fc11 	bl	80005f8 <__aeabi_dmul>
 800add6:	4602      	mov	r2, r0
 800add8:	460b      	mov	r3, r1
 800adda:	ec51 0b19 	vmov	r0, r1, d9
 800adde:	f7f5 fa53 	bl	8000288 <__aeabi_dsub>
 800ade2:	4652      	mov	r2, sl
 800ade4:	465b      	mov	r3, fp
 800ade6:	f7f5 fc07 	bl	80005f8 <__aeabi_dmul>
 800adea:	ec53 2b18 	vmov	r2, r3, d8
 800adee:	f7f5 fa4b 	bl	8000288 <__aeabi_dsub>
 800adf2:	a30b      	add	r3, pc, #44	; (adr r3, 800ae20 <__kernel_sin+0x148>)
 800adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf8:	4606      	mov	r6, r0
 800adfa:	460f      	mov	r7, r1
 800adfc:	4640      	mov	r0, r8
 800adfe:	4649      	mov	r1, r9
 800ae00:	f7f5 fbfa 	bl	80005f8 <__aeabi_dmul>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	4630      	mov	r0, r6
 800ae0a:	4639      	mov	r1, r7
 800ae0c:	f7f5 fa3e 	bl	800028c <__adddf3>
 800ae10:	4602      	mov	r2, r0
 800ae12:	460b      	mov	r3, r1
 800ae14:	4620      	mov	r0, r4
 800ae16:	4629      	mov	r1, r5
 800ae18:	f7f5 fa36 	bl	8000288 <__aeabi_dsub>
 800ae1c:	e7c4      	b.n	800ada8 <__kernel_sin+0xd0>
 800ae1e:	bf00      	nop
 800ae20:	55555549 	.word	0x55555549
 800ae24:	3fc55555 	.word	0x3fc55555
 800ae28:	3fe00000 	.word	0x3fe00000
 800ae2c:	5acfd57c 	.word	0x5acfd57c
 800ae30:	3de5d93a 	.word	0x3de5d93a
 800ae34:	8a2b9ceb 	.word	0x8a2b9ceb
 800ae38:	3e5ae5e6 	.word	0x3e5ae5e6
 800ae3c:	57b1fe7d 	.word	0x57b1fe7d
 800ae40:	3ec71de3 	.word	0x3ec71de3
 800ae44:	19c161d5 	.word	0x19c161d5
 800ae48:	3f2a01a0 	.word	0x3f2a01a0
 800ae4c:	1110f8a6 	.word	0x1110f8a6
 800ae50:	3f811111 	.word	0x3f811111

0800ae54 <fabs>:
 800ae54:	ec51 0b10 	vmov	r0, r1, d0
 800ae58:	ee10 2a10 	vmov	r2, s0
 800ae5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae60:	ec43 2b10 	vmov	d0, r2, r3
 800ae64:	4770      	bx	lr

0800ae66 <finite>:
 800ae66:	b082      	sub	sp, #8
 800ae68:	ed8d 0b00 	vstr	d0, [sp]
 800ae6c:	9801      	ldr	r0, [sp, #4]
 800ae6e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ae72:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ae76:	0fc0      	lsrs	r0, r0, #31
 800ae78:	b002      	add	sp, #8
 800ae7a:	4770      	bx	lr
 800ae7c:	0000      	movs	r0, r0
	...

0800ae80 <floor>:
 800ae80:	ec51 0b10 	vmov	r0, r1, d0
 800ae84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ae8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ae90:	2e13      	cmp	r6, #19
 800ae92:	ee10 5a10 	vmov	r5, s0
 800ae96:	ee10 8a10 	vmov	r8, s0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	dc32      	bgt.n	800af04 <floor+0x84>
 800ae9e:	2e00      	cmp	r6, #0
 800aea0:	da14      	bge.n	800aecc <floor+0x4c>
 800aea2:	a333      	add	r3, pc, #204	; (adr r3, 800af70 <floor+0xf0>)
 800aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea8:	f7f5 f9f0 	bl	800028c <__adddf3>
 800aeac:	2200      	movs	r2, #0
 800aeae:	2300      	movs	r3, #0
 800aeb0:	f7f5 fe32 	bl	8000b18 <__aeabi_dcmpgt>
 800aeb4:	b138      	cbz	r0, 800aec6 <floor+0x46>
 800aeb6:	2c00      	cmp	r4, #0
 800aeb8:	da57      	bge.n	800af6a <floor+0xea>
 800aeba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800aebe:	431d      	orrs	r5, r3
 800aec0:	d001      	beq.n	800aec6 <floor+0x46>
 800aec2:	4c2d      	ldr	r4, [pc, #180]	; (800af78 <floor+0xf8>)
 800aec4:	2500      	movs	r5, #0
 800aec6:	4621      	mov	r1, r4
 800aec8:	4628      	mov	r0, r5
 800aeca:	e025      	b.n	800af18 <floor+0x98>
 800aecc:	4f2b      	ldr	r7, [pc, #172]	; (800af7c <floor+0xfc>)
 800aece:	4137      	asrs	r7, r6
 800aed0:	ea01 0307 	and.w	r3, r1, r7
 800aed4:	4303      	orrs	r3, r0
 800aed6:	d01f      	beq.n	800af18 <floor+0x98>
 800aed8:	a325      	add	r3, pc, #148	; (adr r3, 800af70 <floor+0xf0>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	f7f5 f9d5 	bl	800028c <__adddf3>
 800aee2:	2200      	movs	r2, #0
 800aee4:	2300      	movs	r3, #0
 800aee6:	f7f5 fe17 	bl	8000b18 <__aeabi_dcmpgt>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d0eb      	beq.n	800aec6 <floor+0x46>
 800aeee:	2c00      	cmp	r4, #0
 800aef0:	bfbe      	ittt	lt
 800aef2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800aef6:	fa43 f606 	asrlt.w	r6, r3, r6
 800aefa:	19a4      	addlt	r4, r4, r6
 800aefc:	ea24 0407 	bic.w	r4, r4, r7
 800af00:	2500      	movs	r5, #0
 800af02:	e7e0      	b.n	800aec6 <floor+0x46>
 800af04:	2e33      	cmp	r6, #51	; 0x33
 800af06:	dd0b      	ble.n	800af20 <floor+0xa0>
 800af08:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800af0c:	d104      	bne.n	800af18 <floor+0x98>
 800af0e:	ee10 2a10 	vmov	r2, s0
 800af12:	460b      	mov	r3, r1
 800af14:	f7f5 f9ba 	bl	800028c <__adddf3>
 800af18:	ec41 0b10 	vmov	d0, r0, r1
 800af1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af20:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800af24:	f04f 33ff 	mov.w	r3, #4294967295
 800af28:	fa23 f707 	lsr.w	r7, r3, r7
 800af2c:	4207      	tst	r7, r0
 800af2e:	d0f3      	beq.n	800af18 <floor+0x98>
 800af30:	a30f      	add	r3, pc, #60	; (adr r3, 800af70 <floor+0xf0>)
 800af32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af36:	f7f5 f9a9 	bl	800028c <__adddf3>
 800af3a:	2200      	movs	r2, #0
 800af3c:	2300      	movs	r3, #0
 800af3e:	f7f5 fdeb 	bl	8000b18 <__aeabi_dcmpgt>
 800af42:	2800      	cmp	r0, #0
 800af44:	d0bf      	beq.n	800aec6 <floor+0x46>
 800af46:	2c00      	cmp	r4, #0
 800af48:	da02      	bge.n	800af50 <floor+0xd0>
 800af4a:	2e14      	cmp	r6, #20
 800af4c:	d103      	bne.n	800af56 <floor+0xd6>
 800af4e:	3401      	adds	r4, #1
 800af50:	ea25 0507 	bic.w	r5, r5, r7
 800af54:	e7b7      	b.n	800aec6 <floor+0x46>
 800af56:	2301      	movs	r3, #1
 800af58:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800af5c:	fa03 f606 	lsl.w	r6, r3, r6
 800af60:	4435      	add	r5, r6
 800af62:	4545      	cmp	r5, r8
 800af64:	bf38      	it	cc
 800af66:	18e4      	addcc	r4, r4, r3
 800af68:	e7f2      	b.n	800af50 <floor+0xd0>
 800af6a:	2500      	movs	r5, #0
 800af6c:	462c      	mov	r4, r5
 800af6e:	e7aa      	b.n	800aec6 <floor+0x46>
 800af70:	8800759c 	.word	0x8800759c
 800af74:	7e37e43c 	.word	0x7e37e43c
 800af78:	bff00000 	.word	0xbff00000
 800af7c:	000fffff 	.word	0x000fffff

0800af80 <scalbn>:
 800af80:	b570      	push	{r4, r5, r6, lr}
 800af82:	ec55 4b10 	vmov	r4, r5, d0
 800af86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800af8a:	4606      	mov	r6, r0
 800af8c:	462b      	mov	r3, r5
 800af8e:	b99a      	cbnz	r2, 800afb8 <scalbn+0x38>
 800af90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800af94:	4323      	orrs	r3, r4
 800af96:	d036      	beq.n	800b006 <scalbn+0x86>
 800af98:	4b39      	ldr	r3, [pc, #228]	; (800b080 <scalbn+0x100>)
 800af9a:	4629      	mov	r1, r5
 800af9c:	ee10 0a10 	vmov	r0, s0
 800afa0:	2200      	movs	r2, #0
 800afa2:	f7f5 fb29 	bl	80005f8 <__aeabi_dmul>
 800afa6:	4b37      	ldr	r3, [pc, #220]	; (800b084 <scalbn+0x104>)
 800afa8:	429e      	cmp	r6, r3
 800afaa:	4604      	mov	r4, r0
 800afac:	460d      	mov	r5, r1
 800afae:	da10      	bge.n	800afd2 <scalbn+0x52>
 800afb0:	a32b      	add	r3, pc, #172	; (adr r3, 800b060 <scalbn+0xe0>)
 800afb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb6:	e03a      	b.n	800b02e <scalbn+0xae>
 800afb8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800afbc:	428a      	cmp	r2, r1
 800afbe:	d10c      	bne.n	800afda <scalbn+0x5a>
 800afc0:	ee10 2a10 	vmov	r2, s0
 800afc4:	4620      	mov	r0, r4
 800afc6:	4629      	mov	r1, r5
 800afc8:	f7f5 f960 	bl	800028c <__adddf3>
 800afcc:	4604      	mov	r4, r0
 800afce:	460d      	mov	r5, r1
 800afd0:	e019      	b.n	800b006 <scalbn+0x86>
 800afd2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800afd6:	460b      	mov	r3, r1
 800afd8:	3a36      	subs	r2, #54	; 0x36
 800afda:	4432      	add	r2, r6
 800afdc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800afe0:	428a      	cmp	r2, r1
 800afe2:	dd08      	ble.n	800aff6 <scalbn+0x76>
 800afe4:	2d00      	cmp	r5, #0
 800afe6:	a120      	add	r1, pc, #128	; (adr r1, 800b068 <scalbn+0xe8>)
 800afe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afec:	da1c      	bge.n	800b028 <scalbn+0xa8>
 800afee:	a120      	add	r1, pc, #128	; (adr r1, 800b070 <scalbn+0xf0>)
 800aff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aff4:	e018      	b.n	800b028 <scalbn+0xa8>
 800aff6:	2a00      	cmp	r2, #0
 800aff8:	dd08      	ble.n	800b00c <scalbn+0x8c>
 800affa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800affe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b002:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b006:	ec45 4b10 	vmov	d0, r4, r5
 800b00a:	bd70      	pop	{r4, r5, r6, pc}
 800b00c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b010:	da19      	bge.n	800b046 <scalbn+0xc6>
 800b012:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b016:	429e      	cmp	r6, r3
 800b018:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b01c:	dd0a      	ble.n	800b034 <scalbn+0xb4>
 800b01e:	a112      	add	r1, pc, #72	; (adr r1, 800b068 <scalbn+0xe8>)
 800b020:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d1e2      	bne.n	800afee <scalbn+0x6e>
 800b028:	a30f      	add	r3, pc, #60	; (adr r3, 800b068 <scalbn+0xe8>)
 800b02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02e:	f7f5 fae3 	bl	80005f8 <__aeabi_dmul>
 800b032:	e7cb      	b.n	800afcc <scalbn+0x4c>
 800b034:	a10a      	add	r1, pc, #40	; (adr r1, 800b060 <scalbn+0xe0>)
 800b036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d0b8      	beq.n	800afb0 <scalbn+0x30>
 800b03e:	a10e      	add	r1, pc, #56	; (adr r1, 800b078 <scalbn+0xf8>)
 800b040:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b044:	e7b4      	b.n	800afb0 <scalbn+0x30>
 800b046:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b04a:	3236      	adds	r2, #54	; 0x36
 800b04c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b050:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b054:	4620      	mov	r0, r4
 800b056:	4b0c      	ldr	r3, [pc, #48]	; (800b088 <scalbn+0x108>)
 800b058:	2200      	movs	r2, #0
 800b05a:	e7e8      	b.n	800b02e <scalbn+0xae>
 800b05c:	f3af 8000 	nop.w
 800b060:	c2f8f359 	.word	0xc2f8f359
 800b064:	01a56e1f 	.word	0x01a56e1f
 800b068:	8800759c 	.word	0x8800759c
 800b06c:	7e37e43c 	.word	0x7e37e43c
 800b070:	8800759c 	.word	0x8800759c
 800b074:	fe37e43c 	.word	0xfe37e43c
 800b078:	c2f8f359 	.word	0xc2f8f359
 800b07c:	81a56e1f 	.word	0x81a56e1f
 800b080:	43500000 	.word	0x43500000
 800b084:	ffff3cb0 	.word	0xffff3cb0
 800b088:	3c900000 	.word	0x3c900000

0800b08c <_init>:
 800b08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b08e:	bf00      	nop
 800b090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b092:	bc08      	pop	{r3}
 800b094:	469e      	mov	lr, r3
 800b096:	4770      	bx	lr

0800b098 <_fini>:
 800b098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09a:	bf00      	nop
 800b09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b09e:	bc08      	pop	{r3}
 800b0a0:	469e      	mov	lr, r3
 800b0a2:	4770      	bx	lr
