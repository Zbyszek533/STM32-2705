
Zegary.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003e9c  08003e9c  00013e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f54  08003f54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f54  08003f54  00013f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f5c  08003f5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f60  08003f60  00013f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000070  08003fd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08003fd4  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eab7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023fe  00000000  00000000  0002eb57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00030f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  00031a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028328  00000000  00000000  00032420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5b0  00000000  00000000  0005a748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f10b7  00000000  00000000  00067cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158daf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000307c  00000000  00000000  00158e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e84 	.word	0x08003e84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003e84 	.word	0x08003e84

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 030c 	add.w	r3, r7, #12
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <MX_GPIO_Init+0x94>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a1e      	ldr	r2, [pc, #120]	; (8000554 <MX_GPIO_Init+0x94>)
 80004dc:	f043 0304 	orr.w	r3, r3, #4
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <MX_GPIO_Init+0x94>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0304 	and.w	r3, r3, #4
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b19      	ldr	r3, [pc, #100]	; (8000554 <MX_GPIO_Init+0x94>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a18      	ldr	r2, [pc, #96]	; (8000554 <MX_GPIO_Init+0x94>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b16      	ldr	r3, [pc, #88]	; (8000554 <MX_GPIO_Init+0x94>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2120      	movs	r1, #32
 800050a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050e:	f000 fe47 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000512:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4619      	mov	r1, r3
 8000526:	480c      	ldr	r0, [pc, #48]	; (8000558 <MX_GPIO_Init+0x98>)
 8000528:	f000 fc78 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800052c:	2320      	movs	r3, #32
 800052e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	2301      	movs	r3, #1
 8000532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	2300      	movs	r3, #0
 800053a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	4619      	mov	r1, r3
 8000542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000546:	f000 fc69 	bl	8000e1c <HAL_GPIO_Init>

}
 800054a:	bf00      	nop
 800054c:	3720      	adds	r7, #32
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000
 8000558:	48000800 	.word	0x48000800

0800055c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <MX_IWDG_Init+0x34>)
 8000562:	4a0c      	ldr	r2, [pc, #48]	; (8000594 <MX_IWDG_Init+0x38>)
 8000564:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <MX_IWDG_Init+0x34>)
 8000568:	2203      	movs	r2, #3
 800056a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <MX_IWDG_Init+0x34>)
 800056e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000572:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MX_IWDG_Init+0x34>)
 8000576:	f640 72ff 	movw	r2, #4095	; 0xfff
 800057a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800057c:	4804      	ldr	r0, [pc, #16]	; (8000590 <MX_IWDG_Init+0x34>)
 800057e:	f000 fe41 	bl	8001204 <HAL_IWDG_Init>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000588:	f000 f8b4 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000098 	.word	0x20000098
 8000594:	40003000 	.word	0x40003000

08000598 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

	if(ch == '\n')
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b0a      	cmp	r3, #10
 80005a4:	d109      	bne.n	80005ba <__io_putchar+0x22>
	{
		uint8_t ch2 = '\r';
 80005a6:	230d      	movs	r3, #13
 80005a8:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)&ch2, 1, HAL_MAX_DELAY);
 80005aa:	f107 010f 	add.w	r1, r7, #15
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	2201      	movs	r2, #1
 80005b4:	4807      	ldr	r0, [pc, #28]	; (80005d4 <__io_putchar+0x3c>)
 80005b6:	f002 fae7 	bl	8002b88 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005ba:	1d39      	adds	r1, r7, #4
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	2201      	movs	r2, #1
 80005c2:	4804      	ldr	r0, [pc, #16]	; (80005d4 <__io_putchar+0x3c>)
 80005c4:	f002 fae0 	bl	8002b88 <HAL_UART_Transmit>
	return 1;
 80005c8:	2301      	movs	r3, #1
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000cc 	.word	0x200000cc

080005d8 <is_button_pressed>:


bool is_button_pressed(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80005dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e0:	4805      	ldr	r0, [pc, #20]	; (80005f8 <is_button_pressed+0x20>)
 80005e2:	f000 fdc5 	bl	8001170 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d101      	bne.n	80005f0 <is_button_pressed+0x18>
	{
		return true;
 80005ec:	2301      	movs	r3, #1
 80005ee:	e000      	b.n	80005f2 <is_button_pressed+0x1a>
	}else{
		return false;
 80005f0:	2300      	movs	r3, #0
	}
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	48000800 	.word	0x48000800

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fab0 	bl	8000b66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f82d 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f7ff ff59 	bl	80004c0 <MX_GPIO_Init>
  MX_RTC_Init();
 800060e:	f000 f877 	bl	8000700 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f9f3 	bl	80009fc <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8000616:	f7ff ffa1 	bl	800055c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
printf("Udalo sie!\n");
 800061a:	4810      	ldr	r0, [pc, #64]	; (800065c <main+0x60>)
 800061c:	f002 ffda 	bl	80035d4 <puts>
  /* USER CODE BEGIN WHILE */

RTC_TimeTypeDef time;
RTC_DateTypeDef date;

uint32_t last_ms = HAL_GetTick();
 8000620:	f000 fb0a 	bl	8000c38 <HAL_GetTick>
 8000624:	61f8      	str	r0, [r7, #28]

  while (1)
  {
	  uint32_t now = HAL_GetTick();
 8000626:	f000 fb07 	bl	8000c38 <HAL_GetTick>
 800062a:	61b8      	str	r0, [r7, #24]

	  if(is_button_pressed()){
 800062c:	f7ff ffd4 	bl	80005d8 <is_button_pressed>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d000      	beq.n	8000638 <main+0x3c>
		  while(1){
 8000636:	e7fe      	b.n	8000636 <main+0x3a>

		  }
	  }

	if(now - last_ms >= 500){
 8000638:	69ba      	ldr	r2, [r7, #24]
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000642:	d3f0      	bcc.n	8000626 <main+0x2a>

		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000644:	2120      	movs	r1, #32
 8000646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064a:	f000 fdc1 	bl	80011d0 <HAL_GPIO_TogglePin>
		last_ms = now;
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	61fb      	str	r3, [r7, #28]

		HAL_IWDG_Refresh(&hiwdg);
 8000652:	4803      	ldr	r0, [pc, #12]	; (8000660 <main+0x64>)
 8000654:	f000 fe1c 	bl	8001290 <HAL_IWDG_Refresh>
  {
 8000658:	e7e5      	b.n	8000626 <main+0x2a>
 800065a:	bf00      	nop
 800065c:	08003e9c 	.word	0x08003e9c
 8000660:	20000098 	.word	0x20000098

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b096      	sub	sp, #88	; 0x58
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	2244      	movs	r2, #68	; 0x44
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f002 ff38 	bl	80034e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	463b      	mov	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000686:	f44f 7000 	mov.w	r0, #512	; 0x200
 800068a:	f000 fe1f 	bl	80012cc <HAL_PWREx_ControlVoltageScaling>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000694:	f000 f82e 	bl	80006f4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000698:	2318      	movs	r3, #24
 800069a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006a8:	2360      	movs	r3, #96	; 0x60
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fe5f 	bl	8001378 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80006c0:	f000 f818 	bl	80006f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fa31 	bl	8001b44 <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006e8:	f000 f804 	bl	80006f4 <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3758      	adds	r7, #88	; 0x58
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000704:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_RTC_Init+0x48>)
 8000706:	4a11      	ldr	r2, [pc, #68]	; (800074c <MX_RTC_Init+0x4c>)
 8000708:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_RTC_Init+0x48>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MX_RTC_Init+0x48>)
 8000712:	227f      	movs	r2, #127	; 0x7f
 8000714:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_RTC_Init+0x48>)
 8000718:	22ff      	movs	r2, #255	; 0xff
 800071a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_RTC_Init+0x48>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_RTC_Init+0x48>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_RTC_Init+0x48>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_RTC_Init+0x48>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_RTC_Init+0x48>)
 8000736:	f002 f8c7 	bl	80028c8 <HAL_RTC_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000740:	f7ff ffd8 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000a8 	.word	0x200000a8
 800074c:	40002800 	.word	0x40002800

08000750 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b0a4      	sub	sp, #144	; 0x90
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2288      	movs	r2, #136	; 0x88
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fec1 	bl	80034e8 <memset>
  if(rtcHandle->Instance==RTC)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a10      	ldr	r2, [pc, #64]	; (80007ac <HAL_RTC_MspInit+0x5c>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d118      	bne.n	80007a2 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000770:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000774:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800077a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	4618      	mov	r0, r3
 8000784:	f001 fbe4 	bl	8001f50 <HAL_RCCEx_PeriphCLKConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800078e:	f7ff ffb1 	bl	80006f4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <HAL_RTC_MspInit+0x60>)
 8000794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000798:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <HAL_RTC_MspInit+0x60>)
 800079a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800079e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80007a2:	bf00      	nop
 80007a4:	3790      	adds	r7, #144	; 0x90
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40002800 	.word	0x40002800
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <HAL_MspInit+0x44>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007be:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <HAL_MspInit+0x44>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6613      	str	r3, [r2, #96]	; 0x60
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_MspInit+0x44>)
 80007c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_MspInit+0x44>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <HAL_MspInit+0x44>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	6593      	str	r3, [r2, #88]	; 0x58
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_MspInit+0x44>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <NMI_Handler+0x4>

08000802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <HardFault_Handler+0x4>

08000808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <MemManage_Handler+0x4>

0800080e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <BusFault_Handler+0x4>

08000814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <UsageFault_Handler+0x4>

0800081a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000848:	f000 f9e2 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	e00a      	b.n	8000878 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000862:	f3af 8000 	nop.w
 8000866:	4601      	mov	r1, r0
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	60ba      	str	r2, [r7, #8]
 800086e:	b2ca      	uxtb	r2, r1
 8000870:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	3301      	adds	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	429a      	cmp	r2, r3
 800087e:	dbf0      	blt.n	8000862 <_read+0x12>
	}

return len;
 8000880:	687b      	ldr	r3, [r7, #4]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	e009      	b.n	80008b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	60ba      	str	r2, [r7, #8]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fe77 	bl	8000598 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	3301      	adds	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	dbf1      	blt.n	800089c <_write+0x12>
	}
	return len;
 80008b8:	687b      	ldr	r3, [r7, #4]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <_close>:

int _close(int file)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
	return -1;
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ea:	605a      	str	r2, [r3, #4]
	return 0;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <_isatty>:

int _isatty(int file)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
	return 1;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
	return 0;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
	...

0800092c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <_sbrk+0x5c>)
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <_sbrk+0x60>)
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <_sbrk+0x64>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <_sbrk+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d207      	bcs.n	800096c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800095c:	f002 fd9a 	bl	8003494 <__errno>
 8000960:	4603      	mov	r3, r0
 8000962:	220c      	movs	r2, #12
 8000964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	e009      	b.n	8000980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <_sbrk+0x64>)
 800097c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20018000 	.word	0x20018000
 800098c:	00000400 	.word	0x00000400
 8000990:	2000008c 	.word	0x2000008c
 8000994:	20000168 	.word	0x20000168

08000998 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <SystemInit+0x5c>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <SystemInit+0x5c>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <SystemInit+0x60>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <SystemInit+0x60>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <SystemInit+0x60>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <SystemInit+0x60>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <SystemInit+0x60>)
 80009c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <SystemInit+0x60>)
 80009d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <SystemInit+0x60>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <SystemInit+0x60>)
 80009dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <SystemInit+0x60>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00
 80009f8:	40021000 	.word	0x40021000

080009fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a02:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <MX_USART2_UART_Init+0x5c>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a40:	f002 f854 	bl	8002aec <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a4a:	f7ff fe53 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000cc 	.word	0x200000cc
 8000a58:	40004400 	.word	0x40004400

08000a5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b0ac      	sub	sp, #176	; 0xb0
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2288      	movs	r2, #136	; 0x88
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 fd33 	bl	80034e8 <memset>
  if(uartHandle->Instance==USART2)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a21      	ldr	r2, [pc, #132]	; (8000b0c <HAL_UART_MspInit+0xb0>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d13b      	bne.n	8000b04 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fa59 	bl	8001f50 <HAL_RCCEx_PeriphCLKConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aa4:	f7ff fe26 	bl	80006f4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <HAL_UART_MspInit+0xb4>)
 8000aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aac:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <HAL_UART_MspInit+0xb4>)
 8000aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <HAL_UART_MspInit+0xb4>)
 8000ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <HAL_UART_MspInit+0xb4>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac4:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <HAL_UART_MspInit+0xb4>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_UART_MspInit+0xb4>)
 8000ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ad8:	230c      	movs	r3, #12
 8000ada:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af0:	2307      	movs	r3, #7
 8000af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000afa:	4619      	mov	r1, r3
 8000afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b00:	f000 f98c 	bl	8000e1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b04:	bf00      	nop
 8000b06:	37b0      	adds	r7, #176	; 0xb0
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40004400 	.word	0x40004400
 8000b10:	40021000 	.word	0x40021000

08000b14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b18:	f7ff ff3e 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b1e:	e003      	b.n	8000b28 <LoopCopyDataInit>

08000b20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b26:	3104      	adds	r1, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b28:	480a      	ldr	r0, [pc, #40]	; (8000b54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b30:	d3f6      	bcc.n	8000b20 <CopyDataInit>
	ldr	r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b34:	e002      	b.n	8000b3c <LoopFillZerobss>

08000b36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b38:	f842 3b04 	str.w	r3, [r2], #4

08000b3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <LoopForever+0x16>)
	cmp	r2, r3
 8000b3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b40:	d3f9      	bcc.n	8000b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b42:	f002 fcad 	bl	80034a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b46:	f7ff fd59 	bl	80005fc <main>

08000b4a <LoopForever>:

LoopForever:
    b LoopForever
 8000b4a:	e7fe      	b.n	8000b4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b4c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b50:	08003f64 	.word	0x08003f64
	ldr	r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b58:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000b5c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000b60:	20000164 	.word	0x20000164

08000b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC1_2_IRQHandler>

08000b66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f91f 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b76:	200f      	movs	r0, #15
 8000b78:	f000 f80e 	bl	8000b98 <HAL_InitTick>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d002      	beq.n	8000b88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	71fb      	strb	r3, [r7, #7]
 8000b86:	e001      	b.n	8000b8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b88:	f7ff fe14 	bl	80007b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <HAL_InitTick+0x6c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d023      	beq.n	8000bf4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_InitTick+0x70>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <HAL_InitTick+0x6c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f91d 	bl	8000e02 <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10f      	bne.n	8000bee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d809      	bhi.n	8000be8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 f8f5 	bl	8000dca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_InitTick+0x74>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e007      	b.n	8000bf8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e004      	b.n	8000bf8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e001      	b.n	8000bf8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000150 	.word	0x20000150

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000150 	.word	0x20000150

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff ff8e 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff47 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff5c 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff8e 	bl	8000d08 <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5d 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ffb0 	bl	8000d70 <SysTick_Config>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2a:	e17f      	b.n	800112c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	2101      	movs	r1, #1
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8171 	beq.w	8001126 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d00b      	beq.n	8000e64 <HAL_GPIO_Init+0x48>
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d007      	beq.n	8000e64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e58:	2b11      	cmp	r3, #17
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b12      	cmp	r3, #18
 8000e62:	d130      	bne.n	8000ec6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	f003 0201 	and.w	r2, r3, #1
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d118      	bne.n	8000f04 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	08db      	lsrs	r3, r3, #3
 8000eee:	f003 0201 	and.w	r2, r3, #1
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x128>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b12      	cmp	r3, #18
 8000f42:	d123      	bne.n	8000f8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	6939      	ldr	r1, [r7, #16]
 8000f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0203 	and.w	r2, r3, #3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80ac 	beq.w	8001126 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	4b5f      	ldr	r3, [pc, #380]	; (800114c <HAL_GPIO_Init+0x330>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd2:	4a5e      	ldr	r2, [pc, #376]	; (800114c <HAL_GPIO_Init+0x330>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fda:	4b5c      	ldr	r3, [pc, #368]	; (800114c <HAL_GPIO_Init+0x330>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fe6:	4a5a      	ldr	r2, [pc, #360]	; (8001150 <HAL_GPIO_Init+0x334>)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	3302      	adds	r3, #2
 8000fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001010:	d025      	beq.n	800105e <HAL_GPIO_Init+0x242>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4f      	ldr	r2, [pc, #316]	; (8001154 <HAL_GPIO_Init+0x338>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01f      	beq.n	800105a <HAL_GPIO_Init+0x23e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4e      	ldr	r2, [pc, #312]	; (8001158 <HAL_GPIO_Init+0x33c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x23a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4d      	ldr	r2, [pc, #308]	; (800115c <HAL_GPIO_Init+0x340>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x236>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4c      	ldr	r2, [pc, #304]	; (8001160 <HAL_GPIO_Init+0x344>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x232>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4b      	ldr	r2, [pc, #300]	; (8001164 <HAL_GPIO_Init+0x348>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x22e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4a      	ldr	r2, [pc, #296]	; (8001168 <HAL_GPIO_Init+0x34c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x22a>
 8001042:	2306      	movs	r3, #6
 8001044:	e00c      	b.n	8001060 <HAL_GPIO_Init+0x244>
 8001046:	2307      	movs	r3, #7
 8001048:	e00a      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800104a:	2305      	movs	r3, #5
 800104c:	e008      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800104e:	2304      	movs	r3, #4
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x244>
 8001052:	2303      	movs	r3, #3
 8001054:	e004      	b.n	8001060 <HAL_GPIO_Init+0x244>
 8001056:	2302      	movs	r3, #2
 8001058:	e002      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800105e:	2300      	movs	r3, #0
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	f002 0203 	and.w	r2, r2, #3
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4093      	lsls	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001070:	4937      	ldr	r1, [pc, #220]	; (8001150 <HAL_GPIO_Init+0x334>)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800107e:	4b3b      	ldr	r3, [pc, #236]	; (800116c <HAL_GPIO_Init+0x350>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010a2:	4a32      	ldr	r2, [pc, #200]	; (800116c <HAL_GPIO_Init+0x350>)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010a8:	4b30      	ldr	r3, [pc, #192]	; (800116c <HAL_GPIO_Init+0x350>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010cc:	4a27      	ldr	r2, [pc, #156]	; (800116c <HAL_GPIO_Init+0x350>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <HAL_GPIO_Init+0x350>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	43db      	mvns	r3, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010f6:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_GPIO_Init+0x350>)
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_GPIO_Init+0x350>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001120:	4a12      	ldr	r2, [pc, #72]	; (800116c <HAL_GPIO_Init+0x350>)
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa22 f303 	lsr.w	r3, r2, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	f47f ae78 	bne.w	8000e2c <HAL_GPIO_Init+0x10>
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	40010000 	.word	0x40010000
 8001154:	48000400 	.word	0x48000400
 8001158:	48000800 	.word	0x48000800
 800115c:	48000c00 	.word	0x48000c00
 8001160:	48001000 	.word	0x48001000
 8001164:	48001400 	.word	0x48001400
 8001168:	48001800 	.word	0x48001800
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	887b      	ldrh	r3, [r7, #2]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001188:	2301      	movs	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e001      	b.n	8001192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4013      	ands	r3, r2
 80011e8:	041a      	lsls	r2, r3, #16
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43d9      	mvns	r1, r3
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	400b      	ands	r3, r1
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e038      	b.n	8001288 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800121e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f245 5255 	movw	r2, #21845	; 0x5555
 8001228:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	6852      	ldr	r2, [r2, #4]
 8001232:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6892      	ldr	r2, [r2, #8]
 800123c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800123e:	f7ff fcfb 	bl	8000c38 <HAL_GetTick>
 8001242:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8001244:	e008      	b.n	8001258 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001246:	f7ff fcf7 	bl	8000c38 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b30      	cmp	r3, #48	; 0x30
 8001252:	d901      	bls.n	8001258 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e017      	b.n	8001288 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f1      	bne.n	8001246 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	691a      	ldr	r2, [r3, #16]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	429a      	cmp	r2, r3
 800126e:	d005      	beq.n	800127c <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	68d2      	ldr	r2, [r2, #12]
 8001278:	611a      	str	r2, [r3, #16]
 800127a:	e004      	b.n	8001286 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80012a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40007000 	.word	0x40007000

080012cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012da:	d130      	bne.n	800133e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012e8:	d038      	beq.n	800135c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ea:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012f2:	4a1e      	ldr	r2, [pc, #120]	; (800136c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2232      	movs	r2, #50	; 0x32
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	0c9b      	lsrs	r3, r3, #18
 800130c:	3301      	adds	r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001310:	e002      	b.n	8001318 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3b01      	subs	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001324:	d102      	bne.n	800132c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f2      	bne.n	8001312 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001338:	d110      	bne.n	800135c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e00f      	b.n	800135e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134a:	d007      	beq.n	800135c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001354:	4a05      	ldr	r2, [pc, #20]	; (800136c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40007000 	.word	0x40007000
 8001370:	20000000 	.word	0x20000000
 8001374:	431bde83 	.word	0x431bde83

08001378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e3d4      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800138a:	4ba1      	ldr	r3, [pc, #644]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001394:	4b9e      	ldr	r3, [pc, #632]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 80e4 	beq.w	8001574 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <HAL_RCC_OscConfig+0x4a>
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	2b0c      	cmp	r3, #12
 80013b6:	f040 808b 	bne.w	80014d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	f040 8087 	bne.w	80014d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013c2:	4b93      	ldr	r3, [pc, #588]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_RCC_OscConfig+0x62>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e3ac      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a1a      	ldr	r2, [r3, #32]
 80013de:	4b8c      	ldr	r3, [pc, #560]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d004      	beq.n	80013f4 <HAL_RCC_OscConfig+0x7c>
 80013ea:	4b89      	ldr	r3, [pc, #548]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013f2:	e005      	b.n	8001400 <HAL_RCC_OscConfig+0x88>
 80013f4:	4b86      	ldr	r3, [pc, #536]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80013f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001400:	4293      	cmp	r3, r2
 8001402:	d223      	bcs.n	800144c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4618      	mov	r0, r3
 800140a:	f000 fd41 	bl	8001e90 <RCC_SetFlashLatencyFromMSIRange>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e38d      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001418:	4b7d      	ldr	r3, [pc, #500]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a7c      	ldr	r2, [pc, #496]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800141e:	f043 0308 	orr.w	r3, r3, #8
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b7a      	ldr	r3, [pc, #488]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	4977      	ldr	r1, [pc, #476]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001432:	4313      	orrs	r3, r2
 8001434:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001436:	4b76      	ldr	r3, [pc, #472]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	4972      	ldr	r1, [pc, #456]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
 800144a:	e025      	b.n	8001498 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144c:	4b70      	ldr	r3, [pc, #448]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a6f      	ldr	r2, [pc, #444]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b6d      	ldr	r3, [pc, #436]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	496a      	ldr	r1, [pc, #424]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146a:	4b69      	ldr	r3, [pc, #420]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	4965      	ldr	r1, [pc, #404]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d109      	bne.n	8001498 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fd01 	bl	8001e90 <RCC_SetFlashLatencyFromMSIRange>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e34d      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001498:	f000 fc36 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 800149c:	4602      	mov	r2, r0
 800149e:	4b5c      	ldr	r3, [pc, #368]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	f003 030f 	and.w	r3, r3, #15
 80014a8:	495a      	ldr	r1, [pc, #360]	; (8001614 <HAL_RCC_OscConfig+0x29c>)
 80014aa:	5ccb      	ldrb	r3, [r1, r3]
 80014ac:	f003 031f 	and.w	r3, r3, #31
 80014b0:	fa22 f303 	lsr.w	r3, r2, r3
 80014b4:	4a58      	ldr	r2, [pc, #352]	; (8001618 <HAL_RCC_OscConfig+0x2a0>)
 80014b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014b8:	4b58      	ldr	r3, [pc, #352]	; (800161c <HAL_RCC_OscConfig+0x2a4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fb6b 	bl	8000b98 <HAL_InitTick>
 80014c2:	4603      	mov	r3, r0
 80014c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d052      	beq.n	8001572 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	e331      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d032      	beq.n	800153e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014d8:	4b4d      	ldr	r3, [pc, #308]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a4c      	ldr	r2, [pc, #304]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fba8 	bl	8000c38 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ec:	f7ff fba4 	bl	8000c38 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e31a      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014fe:	4b44      	ldr	r3, [pc, #272]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800150a:	4b41      	ldr	r3, [pc, #260]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a40      	ldr	r2, [pc, #256]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b3e      	ldr	r3, [pc, #248]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	493b      	ldr	r1, [pc, #236]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001528:	4b39      	ldr	r3, [pc, #228]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	4936      	ldr	r1, [pc, #216]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
 800153c:	e01a      	b.n	8001574 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800153e:	4b34      	ldr	r3, [pc, #208]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a33      	ldr	r2, [pc, #204]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800154a:	f7ff fb75 	bl	8000c38 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001552:	f7ff fb71 	bl	8000c38 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e2e7      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001564:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f0      	bne.n	8001552 <HAL_RCC_OscConfig+0x1da>
 8001570:	e000      	b.n	8001574 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001572:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d074      	beq.n	800166a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2b08      	cmp	r3, #8
 8001584:	d005      	beq.n	8001592 <HAL_RCC_OscConfig+0x21a>
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	2b0c      	cmp	r3, #12
 800158a:	d10e      	bne.n	80015aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d10b      	bne.n	80015aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d064      	beq.n	8001668 <HAL_RCC_OscConfig+0x2f0>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d160      	bne.n	8001668 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e2c4      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b2:	d106      	bne.n	80015c2 <HAL_RCC_OscConfig+0x24a>
 80015b4:	4b16      	ldr	r3, [pc, #88]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a15      	ldr	r2, [pc, #84]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	e01d      	b.n	80015fe <HAL_RCC_OscConfig+0x286>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ca:	d10c      	bne.n	80015e6 <HAL_RCC_OscConfig+0x26e>
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0f      	ldr	r2, [pc, #60]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	e00b      	b.n	80015fe <HAL_RCC_OscConfig+0x286>
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a09      	ldr	r2, [pc, #36]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a06      	ldr	r2, [pc, #24]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d01c      	beq.n	8001640 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001606:	f7ff fb17 	bl	8000c38 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800160c:	e011      	b.n	8001632 <HAL_RCC_OscConfig+0x2ba>
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000
 8001614:	08003ea8 	.word	0x08003ea8
 8001618:	20000000 	.word	0x20000000
 800161c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fb0a 	bl	8000c38 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	; 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e280      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001632:	4baf      	ldr	r3, [pc, #700]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x2a8>
 800163e:	e014      	b.n	800166a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff fafa 	bl	8000c38 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff faf6 	bl	8000c38 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e26c      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165a:	4ba5      	ldr	r3, [pc, #660]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x2d0>
 8001666:	e000      	b.n	800166a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d060      	beq.n	8001738 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	2b04      	cmp	r3, #4
 800167a:	d005      	beq.n	8001688 <HAL_RCC_OscConfig+0x310>
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2b0c      	cmp	r3, #12
 8001680:	d119      	bne.n	80016b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d116      	bne.n	80016b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001688:	4b99      	ldr	r3, [pc, #612]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_OscConfig+0x328>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e249      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4b93      	ldr	r3, [pc, #588]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	4990      	ldr	r1, [pc, #576]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b4:	e040      	b.n	8001738 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d023      	beq.n	8001706 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016be:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a8b      	ldr	r2, [pc, #556]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ca:	f7ff fab5 	bl	8000c38 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d2:	f7ff fab1 	bl	8000c38 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e227      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e4:	4b82      	ldr	r3, [pc, #520]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	4b7f      	ldr	r3, [pc, #508]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	061b      	lsls	r3, r3, #24
 80016fe:	497c      	ldr	r1, [pc, #496]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
 8001704:	e018      	b.n	8001738 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001706:	4b7a      	ldr	r3, [pc, #488]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a79      	ldr	r2, [pc, #484]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800170c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff fa91 	bl	8000c38 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171a:	f7ff fa8d 	bl	8000c38 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e203      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800172c:	4b70      	ldr	r3, [pc, #448]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d03c      	beq.n	80017be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d01c      	beq.n	8001786 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800174e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001752:	4a67      	ldr	r2, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fa6c 	bl	8000c38 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001764:	f7ff fa68 	bl	8000c38 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e1de      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001776:	4b5e      	ldr	r3, [pc, #376]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0ef      	beq.n	8001764 <HAL_RCC_OscConfig+0x3ec>
 8001784:	e01b      	b.n	80017be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001786:	4b5a      	ldr	r3, [pc, #360]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178c:	4a58      	ldr	r2, [pc, #352]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001796:	f7ff fa4f 	bl	8000c38 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff fa4b 	bl	8000c38 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1c1      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b0:	4b4f      	ldr	r3, [pc, #316]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80017b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1ef      	bne.n	800179e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80a6 	beq.w	8001918 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017d0:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10d      	bne.n	80017f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017dc:	4b44      	ldr	r3, [pc, #272]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e0:	4a43      	ldr	r2, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80017e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e6:	6593      	str	r3, [r2, #88]	; 0x58
 80017e8:	4b41      	ldr	r3, [pc, #260]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f4:	2301      	movs	r3, #1
 80017f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f8:	4b3e      	ldr	r3, [pc, #248]	; (80018f4 <HAL_RCC_OscConfig+0x57c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d118      	bne.n	8001836 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001804:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <HAL_RCC_OscConfig+0x57c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a3a      	ldr	r2, [pc, #232]	; (80018f4 <HAL_RCC_OscConfig+0x57c>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001810:	f7ff fa12 	bl	8000c38 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001818:	f7ff fa0e 	bl	8000c38 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e184      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182a:	4b32      	ldr	r3, [pc, #200]	; (80018f4 <HAL_RCC_OscConfig+0x57c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d108      	bne.n	8001850 <HAL_RCC_OscConfig+0x4d8>
 800183e:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001844:	4a2a      	ldr	r2, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800184e:	e024      	b.n	800189a <HAL_RCC_OscConfig+0x522>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b05      	cmp	r3, #5
 8001856:	d110      	bne.n	800187a <HAL_RCC_OscConfig+0x502>
 8001858:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185e:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001868:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800186a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186e:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001878:	e00f      	b.n	800189a <HAL_RCC_OscConfig+0x522>
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800187c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001880:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800188c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001890:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001892:	f023 0304 	bic.w	r3, r3, #4
 8001896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d016      	beq.n	80018d0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	f7ff f9c9 	bl	8000c38 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018aa:	f7ff f9c5 	bl	8000c38 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e139      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0ed      	beq.n	80018aa <HAL_RCC_OscConfig+0x532>
 80018ce:	e01a      	b.n	8001906 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d0:	f7ff f9b2 	bl	8000c38 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018d6:	e00f      	b.n	80018f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d8:	f7ff f9ae 	bl	8000c38 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d906      	bls.n	80018f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e122      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018f8:	4b90      	ldr	r3, [pc, #576]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1e8      	bne.n	80018d8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001906:	7ffb      	ldrb	r3, [r7, #31]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d105      	bne.n	8001918 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190c:	4b8b      	ldr	r3, [pc, #556]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	4a8a      	ldr	r2, [pc, #552]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001916:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 8108 	beq.w	8001b32 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	2b02      	cmp	r3, #2
 8001928:	f040 80d0 	bne.w	8001acc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800192c:	4b83      	ldr	r3, [pc, #524]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	429a      	cmp	r2, r3
 800193e:	d130      	bne.n	80019a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	3b01      	subs	r3, #1
 800194c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d127      	bne.n	80019a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d11f      	bne.n	80019a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800196c:	2a07      	cmp	r2, #7
 800196e:	bf14      	ite	ne
 8001970:	2201      	movne	r2, #1
 8001972:	2200      	moveq	r2, #0
 8001974:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001976:	4293      	cmp	r3, r2
 8001978:	d113      	bne.n	80019a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001984:	085b      	lsrs	r3, r3, #1
 8001986:	3b01      	subs	r3, #1
 8001988:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d109      	bne.n	80019a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	085b      	lsrs	r3, r3, #1
 800199a:	3b01      	subs	r3, #1
 800199c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d06e      	beq.n	8001a80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	2b0c      	cmp	r3, #12
 80019a6:	d069      	beq.n	8001a7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019a8:	4b64      	ldr	r3, [pc, #400]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d105      	bne.n	80019c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019b4:	4b61      	ldr	r3, [pc, #388]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0b7      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019c4:	4b5d      	ldr	r3, [pc, #372]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a5c      	ldr	r2, [pc, #368]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 80019ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019d0:	f7ff f932 	bl	8000c38 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff f92e 	bl	8000c38 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e0a4      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ea:	4b54      	ldr	r3, [pc, #336]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f6:	4b51      	ldr	r3, [pc, #324]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	4b51      	ldr	r3, [pc, #324]	; (8001b40 <HAL_RCC_OscConfig+0x7c8>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a06:	3a01      	subs	r2, #1
 8001a08:	0112      	lsls	r2, r2, #4
 8001a0a:	4311      	orrs	r1, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a10:	0212      	lsls	r2, r2, #8
 8001a12:	4311      	orrs	r1, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a18:	0852      	lsrs	r2, r2, #1
 8001a1a:	3a01      	subs	r2, #1
 8001a1c:	0552      	lsls	r2, r2, #21
 8001a1e:	4311      	orrs	r1, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a24:	0852      	lsrs	r2, r2, #1
 8001a26:	3a01      	subs	r2, #1
 8001a28:	0652      	lsls	r2, r2, #25
 8001a2a:	4311      	orrs	r1, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a30:	0912      	lsrs	r2, r2, #4
 8001a32:	0452      	lsls	r2, r2, #17
 8001a34:	430a      	orrs	r2, r1
 8001a36:	4941      	ldr	r1, [pc, #260]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a3c:	4b3f      	ldr	r3, [pc, #252]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a3e      	ldr	r2, [pc, #248]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a48:	4b3c      	ldr	r3, [pc, #240]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	4a3b      	ldr	r2, [pc, #236]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a54:	f7ff f8f0 	bl	8000c38 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7ff f8ec 	bl	8000c38 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e062      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6e:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a7a:	e05a      	b.n	8001b32 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e059      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a80:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d152      	bne.n	8001b32 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a8c:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a2a      	ldr	r2, [pc, #168]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a98:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4a27      	ldr	r2, [pc, #156]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001aa4:	f7ff f8c8 	bl	8000c38 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff f8c4 	bl	8000c38 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e03a      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x734>
 8001aca:	e032      	b.n	8001b32 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2b0c      	cmp	r3, #12
 8001ad0:	d02d      	beq.n	8001b2e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a19      	ldr	r2, [pc, #100]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001ad8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001adc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d105      	bne.n	8001af6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001af0:	f023 0303 	bic.w	r3, r3, #3
 8001af4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	4a10      	ldr	r2, [pc, #64]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001afc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b04:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7ff f897 	bl	8000c38 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7ff f893 	bl	8000c38 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e009      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_RCC_OscConfig+0x7c4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x796>
 8001b2c:	e001      	b.n	8001b32 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3720      	adds	r7, #32
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	f99d808c 	.word	0xf99d808c

08001b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0c8      	b.n	8001cea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b58:	4b66      	ldr	r3, [pc, #408]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d910      	bls.n	8001b88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b63      	ldr	r3, [pc, #396]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 0207 	bic.w	r2, r3, #7
 8001b6e:	4961      	ldr	r1, [pc, #388]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b5f      	ldr	r3, [pc, #380]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0b0      	b.n	8001cea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d04c      	beq.n	8001c2e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d107      	bne.n	8001bac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9c:	4b56      	ldr	r3, [pc, #344]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d121      	bne.n	8001bec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e09e      	b.n	8001cea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb4:	4b50      	ldr	r3, [pc, #320]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d115      	bne.n	8001bec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e092      	b.n	8001cea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d107      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bcc:	4b4a      	ldr	r3, [pc, #296]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d109      	bne.n	8001bec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e086      	b.n	8001cea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bdc:	4b46      	ldr	r3, [pc, #280]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e07e      	b.n	8001cea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bec:	4b42      	ldr	r3, [pc, #264]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f023 0203 	bic.w	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	493f      	ldr	r1, [pc, #252]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bfe:	f7ff f81b 	bl	8000c38 <HAL_GetTick>
 8001c02:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c06:	f7ff f817 	bl	8000c38 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e066      	b.n	8001cea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1c:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 020c 	and.w	r2, r3, #12
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d1eb      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d008      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3a:	4b2f      	ldr	r3, [pc, #188]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	492c      	ldr	r1, [pc, #176]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c4c:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d210      	bcs.n	8001c7c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5a:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 0207 	bic.w	r2, r3, #7
 8001c62:	4924      	ldr	r1, [pc, #144]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6a:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e036      	b.n	8001cea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4918      	ldr	r1, [pc, #96]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d009      	beq.n	8001cba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4910      	ldr	r1, [pc, #64]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cba:	f000 f825 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	490c      	ldr	r1, [pc, #48]	; (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001ccc:	5ccb      	ldrb	r3, [r1, r3]
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe ff5a 	bl	8000b98 <HAL_InitTick>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40022000 	.word	0x40022000
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08003ea8 	.word	0x08003ea8
 8001d00:	20000000 	.word	0x20000000
 8001d04:	20000004 	.word	0x20000004

08001d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d16:	4b3e      	ldr	r3, [pc, #248]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d20:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x34>
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2b0c      	cmp	r3, #12
 8001d34:	d121      	bne.n	8001d7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d11e      	bne.n	8001d7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d3c:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d48:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	e005      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d58:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d64:	4a2b      	ldr	r2, [pc, #172]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10d      	bne.n	8001d90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d78:	e00a      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d102      	bne.n	8001d86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d82:	61bb      	str	r3, [r7, #24]
 8001d84:	e004      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d8c:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x114>)
 8001d8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d134      	bne.n	8001e00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d96:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d003      	beq.n	8001dae <HAL_RCC_GetSysClockFreq+0xa6>
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d003      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0xac>
 8001dac:	e005      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dae:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x110>)
 8001db0:	617b      	str	r3, [r7, #20]
      break;
 8001db2:	e005      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x114>)
 8001db6:	617b      	str	r3, [r7, #20]
      break;
 8001db8:	e002      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	617b      	str	r3, [r7, #20]
      break;
 8001dbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	3301      	adds	r3, #1
 8001dcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	fb02 f203 	mul.w	r2, r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	0e5b      	lsrs	r3, r3, #25
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	3301      	adds	r3, #1
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e00:	69bb      	ldr	r3, [r7, #24]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3724      	adds	r7, #36	; 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	08003ec0 	.word	0x08003ec0
 8001e18:	00f42400 	.word	0x00f42400
 8001e1c:	007a1200 	.word	0x007a1200

08001e20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000000 	.word	0x20000000

08001e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e3c:	f7ff fff0 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	4904      	ldr	r1, [pc, #16]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	08003eb8 	.word	0x08003eb8

08001e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e68:	f7ff ffda 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0adb      	lsrs	r3, r3, #11
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4904      	ldr	r1, [pc, #16]	; (8001e8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	08003eb8 	.word	0x08003eb8

08001e90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ea8:	f7ff fa02 	bl	80012b0 <HAL_PWREx_GetVoltageRange>
 8001eac:	6178      	str	r0, [r7, #20]
 8001eae:	e014      	b.n	8001eda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	4a24      	ldr	r2, [pc, #144]	; (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eba:	6593      	str	r3, [r2, #88]	; 0x58
 8001ebc:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ec8:	f7ff f9f2 	bl	80012b0 <HAL_PWREx_GetVoltageRange>
 8001ecc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ece:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	4a1d      	ldr	r2, [pc, #116]	; (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee0:	d10b      	bne.n	8001efa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b80      	cmp	r3, #128	; 0x80
 8001ee6:	d919      	bls.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2ba0      	cmp	r3, #160	; 0xa0
 8001eec:	d902      	bls.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eee:	2302      	movs	r3, #2
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	e013      	b.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	e010      	b.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	d902      	bls.n	8001f06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f00:	2303      	movs	r3, #3
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	e00a      	b.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b80      	cmp	r3, #128	; 0x80
 8001f0a:	d102      	bne.n	8001f12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	e004      	b.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b70      	cmp	r3, #112	; 0x70
 8001f16:	d101      	bne.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f18:	2301      	movs	r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f023 0207 	bic.w	r2, r3, #7
 8001f24:	4909      	ldr	r1, [pc, #36]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f2c:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d001      	beq.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40022000 	.word	0x40022000

08001f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f58:	2300      	movs	r3, #0
 8001f5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d041      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f74:	d02a      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f7a:	d824      	bhi.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f80:	d008      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f86:	d81e      	bhi.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f90:	d010      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f92:	e018      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f94:	4b86      	ldr	r3, [pc, #536]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4a85      	ldr	r2, [pc, #532]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fa0:	e015      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 fabb 	bl	8002524 <RCCEx_PLLSAI1_Config>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fb2:	e00c      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3320      	adds	r3, #32
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fba6 	bl	800270c <RCCEx_PLLSAI2_Config>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fc4:	e003      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	74fb      	strb	r3, [r7, #19]
      break;
 8001fca:	e000      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fce:	7cfb      	ldrb	r3, [r7, #19]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10b      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fd4:	4b76      	ldr	r3, [pc, #472]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fe2:	4973      	ldr	r1, [pc, #460]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fea:	e001      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fec:	7cfb      	ldrb	r3, [r7, #19]
 8001fee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d041      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002000:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002004:	d02a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002006:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800200a:	d824      	bhi.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800200c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002010:	d008      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002016:	d81e      	bhi.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800201c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002020:	d010      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002022:	e018      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002024:	4b62      	ldr	r3, [pc, #392]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4a61      	ldr	r2, [pc, #388]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002030:	e015      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3304      	adds	r3, #4
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f000 fa73 	bl	8002524 <RCCEx_PLLSAI1_Config>
 800203e:	4603      	mov	r3, r0
 8002040:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002042:	e00c      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3320      	adds	r3, #32
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f000 fb5e 	bl	800270c <RCCEx_PLLSAI2_Config>
 8002050:	4603      	mov	r3, r0
 8002052:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002054:	e003      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	74fb      	strb	r3, [r7, #19]
      break;
 800205a:	e000      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800205c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800205e:	7cfb      	ldrb	r3, [r7, #19]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10b      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002064:	4b52      	ldr	r3, [pc, #328]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002072:	494f      	ldr	r1, [pc, #316]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800207a:	e001      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800207c:	7cfb      	ldrb	r3, [r7, #19]
 800207e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80a0 	beq.w	80021ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002092:	4b47      	ldr	r3, [pc, #284]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020a2:	2300      	movs	r3, #0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00d      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a8:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	4a40      	ldr	r2, [pc, #256]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b2:	6593      	str	r3, [r2, #88]	; 0x58
 80020b4:	4b3e      	ldr	r3, [pc, #248]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c0:	2301      	movs	r3, #1
 80020c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c4:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a3a      	ldr	r2, [pc, #232]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020d0:	f7fe fdb2 	bl	8000c38 <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020d6:	e009      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d8:	f7fe fdae 	bl	8000c38 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d902      	bls.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	74fb      	strb	r3, [r7, #19]
        break;
 80020ea:	e005      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020ec:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0ef      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020f8:	7cfb      	ldrb	r3, [r7, #19]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d15c      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020fe:	4b2c      	ldr	r3, [pc, #176]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002108:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01f      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	429a      	cmp	r2, r3
 800211a:	d019      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800211c:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002126:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212e:	4a20      	ldr	r2, [pc, #128]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002138:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213e:	4a1c      	ldr	r2, [pc, #112]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002148:	4a19      	ldr	r2, [pc, #100]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d016      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7fe fd6d 	bl	8000c38 <HAL_GetTick>
 800215e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002160:	e00b      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7fe fd69 	bl	8000c38 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002170:	4293      	cmp	r3, r2
 8002172:	d902      	bls.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	74fb      	strb	r3, [r7, #19]
            break;
 8002178:	e006      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ec      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002188:	7cfb      	ldrb	r3, [r7, #19]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10c      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800219e:	4904      	ldr	r1, [pc, #16]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021a6:	e009      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021a8:	7cfb      	ldrb	r3, [r7, #19]
 80021aa:	74bb      	strb	r3, [r7, #18]
 80021ac:	e006      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021b8:	7cfb      	ldrb	r3, [r7, #19]
 80021ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021bc:	7c7b      	ldrb	r3, [r7, #17]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d105      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c2:	4b9e      	ldr	r3, [pc, #632]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	4a9d      	ldr	r2, [pc, #628]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00a      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021da:	4b98      	ldr	r3, [pc, #608]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e0:	f023 0203 	bic.w	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e8:	4994      	ldr	r1, [pc, #592]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00a      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021fc:	4b8f      	ldr	r3, [pc, #572]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002202:	f023 020c 	bic.w	r2, r3, #12
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220a:	498c      	ldr	r1, [pc, #560]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800221e:	4b87      	ldr	r3, [pc, #540]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002224:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	4983      	ldr	r1, [pc, #524]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002240:	4b7e      	ldr	r3, [pc, #504]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	497b      	ldr	r1, [pc, #492]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002262:	4b76      	ldr	r3, [pc, #472]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002270:	4972      	ldr	r1, [pc, #456]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002284:	4b6d      	ldr	r3, [pc, #436]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	496a      	ldr	r1, [pc, #424]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022a6:	4b65      	ldr	r3, [pc, #404]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b4:	4961      	ldr	r1, [pc, #388]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022c8:	4b5c      	ldr	r3, [pc, #368]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d6:	4959      	ldr	r1, [pc, #356]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ea:	4b54      	ldr	r3, [pc, #336]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f8:	4950      	ldr	r1, [pc, #320]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800230c:	4b4b      	ldr	r3, [pc, #300]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002312:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	4948      	ldr	r1, [pc, #288]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800232e:	4b43      	ldr	r3, [pc, #268]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002334:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	493f      	ldr	r1, [pc, #252]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d028      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002350:	4b3a      	ldr	r3, [pc, #232]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800235e:	4937      	ldr	r1, [pc, #220]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800236a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800236e:	d106      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002370:	4b32      	ldr	r3, [pc, #200]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4a31      	ldr	r2, [pc, #196]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800237a:	60d3      	str	r3, [r2, #12]
 800237c:	e011      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002382:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002386:	d10c      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3304      	adds	r3, #4
 800238c:	2101      	movs	r1, #1
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f8c8 	bl	8002524 <RCCEx_PLLSAI1_Config>
 8002394:	4603      	mov	r3, r0
 8002396:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d028      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023ae:	4b23      	ldr	r3, [pc, #140]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	491f      	ldr	r1, [pc, #124]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023cc:	d106      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ce:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4a1a      	ldr	r2, [pc, #104]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023d8:	60d3      	str	r3, [r2, #12]
 80023da:	e011      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2101      	movs	r1, #1
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 f899 	bl	8002524 <RCCEx_PLLSAI1_Config>
 80023f2:	4603      	mov	r3, r0
 80023f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d02b      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800242a:	d109      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a02      	ldr	r2, [pc, #8]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002436:	60d3      	str	r3, [r2, #12]
 8002438:	e014      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002448:	d10c      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	2101      	movs	r1, #1
 8002450:	4618      	mov	r0, r3
 8002452:	f000 f867 	bl	8002524 <RCCEx_PLLSAI1_Config>
 8002456:	4603      	mov	r3, r0
 8002458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800245a:	7cfb      	ldrb	r3, [r7, #19]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d02f      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002470:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800247e:	4928      	ldr	r1, [pc, #160]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800248a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800248e:	d10d      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3304      	adds	r3, #4
 8002494:	2102      	movs	r1, #2
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f844 	bl	8002524 <RCCEx_PLLSAI1_Config>
 800249c:	4603      	mov	r3, r0
 800249e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024a0:	7cfb      	ldrb	r3, [r7, #19]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d014      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024a6:	7cfb      	ldrb	r3, [r7, #19]
 80024a8:	74bb      	strb	r3, [r7, #18]
 80024aa:	e011      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3320      	adds	r3, #32
 80024ba:	2102      	movs	r1, #2
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 f925 	bl	800270c <RCCEx_PLLSAI2_Config>
 80024c2:	4603      	mov	r3, r0
 80024c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024cc:	7cfb      	ldrb	r3, [r7, #19]
 80024ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ea:	490d      	ldr	r1, [pc, #52]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00b      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024fe:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002504:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800250e:	4904      	ldr	r1, [pc, #16]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002516:	7cbb      	ldrb	r3, [r7, #18]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40021000 	.word	0x40021000

08002524 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002532:	4b75      	ldr	r3, [pc, #468]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d018      	beq.n	8002570 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800253e:	4b72      	ldr	r3, [pc, #456]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0203 	and.w	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d10d      	bne.n	800256a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
       ||
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002556:	4b6c      	ldr	r3, [pc, #432]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
       ||
 8002566:	429a      	cmp	r2, r3
 8002568:	d047      	beq.n	80025fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
 800256e:	e044      	b.n	80025fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b03      	cmp	r3, #3
 8002576:	d018      	beq.n	80025aa <RCCEx_PLLSAI1_Config+0x86>
 8002578:	2b03      	cmp	r3, #3
 800257a:	d825      	bhi.n	80025c8 <RCCEx_PLLSAI1_Config+0xa4>
 800257c:	2b01      	cmp	r3, #1
 800257e:	d002      	beq.n	8002586 <RCCEx_PLLSAI1_Config+0x62>
 8002580:	2b02      	cmp	r3, #2
 8002582:	d009      	beq.n	8002598 <RCCEx_PLLSAI1_Config+0x74>
 8002584:	e020      	b.n	80025c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002586:	4b60      	ldr	r3, [pc, #384]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d11d      	bne.n	80025ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002596:	e01a      	b.n	80025ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002598:	4b5b      	ldr	r3, [pc, #364]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d116      	bne.n	80025d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a8:	e013      	b.n	80025d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025aa:	4b57      	ldr	r3, [pc, #348]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025b6:	4b54      	ldr	r3, [pc, #336]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025c6:	e006      	b.n	80025d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      break;
 80025cc:	e004      	b.n	80025d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ce:	bf00      	nop
 80025d0:	e002      	b.n	80025d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025d2:	bf00      	nop
 80025d4:	e000      	b.n	80025d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10d      	bne.n	80025fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025de:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6819      	ldr	r1, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	430b      	orrs	r3, r1
 80025f4:	4944      	ldr	r1, [pc, #272]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d17d      	bne.n	80026fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002600:	4b41      	ldr	r3, [pc, #260]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a40      	ldr	r2, [pc, #256]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002606:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800260a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800260c:	f7fe fb14 	bl	8000c38 <HAL_GetTick>
 8002610:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002612:	e009      	b.n	8002628 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002614:	f7fe fb10 	bl	8000c38 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d902      	bls.n	8002628 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	73fb      	strb	r3, [r7, #15]
        break;
 8002626:	e005      	b.n	8002634 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002628:	4b37      	ldr	r3, [pc, #220]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1ef      	bne.n	8002614 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d160      	bne.n	80026fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d111      	bne.n	8002664 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002640:	4b31      	ldr	r3, [pc, #196]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6892      	ldr	r2, [r2, #8]
 8002650:	0211      	lsls	r1, r2, #8
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68d2      	ldr	r2, [r2, #12]
 8002656:	0912      	lsrs	r2, r2, #4
 8002658:	0452      	lsls	r2, r2, #17
 800265a:	430a      	orrs	r2, r1
 800265c:	492a      	ldr	r1, [pc, #168]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	610b      	str	r3, [r1, #16]
 8002662:	e027      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d112      	bne.n	8002690 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800266a:	4b27      	ldr	r3, [pc, #156]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002672:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6892      	ldr	r2, [r2, #8]
 800267a:	0211      	lsls	r1, r2, #8
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6912      	ldr	r2, [r2, #16]
 8002680:	0852      	lsrs	r2, r2, #1
 8002682:	3a01      	subs	r2, #1
 8002684:	0552      	lsls	r2, r2, #21
 8002686:	430a      	orrs	r2, r1
 8002688:	491f      	ldr	r1, [pc, #124]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	610b      	str	r3, [r1, #16]
 800268e:	e011      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002698:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6892      	ldr	r2, [r2, #8]
 80026a0:	0211      	lsls	r1, r2, #8
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6952      	ldr	r2, [r2, #20]
 80026a6:	0852      	lsrs	r2, r2, #1
 80026a8:	3a01      	subs	r2, #1
 80026aa:	0652      	lsls	r2, r2, #25
 80026ac:	430a      	orrs	r2, r1
 80026ae:	4916      	ldr	r1, [pc, #88]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a13      	ldr	r2, [pc, #76]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7fe faba 	bl	8000c38 <HAL_GetTick>
 80026c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026c6:	e009      	b.n	80026dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026c8:	f7fe fab6 	bl	8000c38 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d902      	bls.n	80026dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	73fb      	strb	r3, [r7, #15]
          break;
 80026da:	e005      	b.n	80026e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ef      	beq.n	80026c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	4904      	ldr	r1, [pc, #16]	; (8002708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000

0800270c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800271a:	4b6a      	ldr	r3, [pc, #424]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d018      	beq.n	8002758 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002726:	4b67      	ldr	r3, [pc, #412]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 0203 	and.w	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d10d      	bne.n	8002752 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
       ||
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800273e:	4b61      	ldr	r3, [pc, #388]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
       ||
 800274e:	429a      	cmp	r2, r3
 8002750:	d047      	beq.n	80027e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
 8002756:	e044      	b.n	80027e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d018      	beq.n	8002792 <RCCEx_PLLSAI2_Config+0x86>
 8002760:	2b03      	cmp	r3, #3
 8002762:	d825      	bhi.n	80027b0 <RCCEx_PLLSAI2_Config+0xa4>
 8002764:	2b01      	cmp	r3, #1
 8002766:	d002      	beq.n	800276e <RCCEx_PLLSAI2_Config+0x62>
 8002768:	2b02      	cmp	r3, #2
 800276a:	d009      	beq.n	8002780 <RCCEx_PLLSAI2_Config+0x74>
 800276c:	e020      	b.n	80027b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800276e:	4b55      	ldr	r3, [pc, #340]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d11d      	bne.n	80027b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800277e:	e01a      	b.n	80027b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002780:	4b50      	ldr	r3, [pc, #320]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002788:	2b00      	cmp	r3, #0
 800278a:	d116      	bne.n	80027ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002790:	e013      	b.n	80027ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002792:	4b4c      	ldr	r3, [pc, #304]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10f      	bne.n	80027be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800279e:	4b49      	ldr	r3, [pc, #292]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027ae:	e006      	b.n	80027be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
      break;
 80027b4:	e004      	b.n	80027c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027b6:	bf00      	nop
 80027b8:	e002      	b.n	80027c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ba:	bf00      	nop
 80027bc:	e000      	b.n	80027c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027be:	bf00      	nop
    }

    if(status == HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10d      	bne.n	80027e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027c6:	4b3f      	ldr	r3, [pc, #252]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6819      	ldr	r1, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	430b      	orrs	r3, r1
 80027dc:	4939      	ldr	r1, [pc, #228]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d167      	bne.n	80028b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027e8:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a35      	ldr	r2, [pc, #212]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f4:	f7fe fa20 	bl	8000c38 <HAL_GetTick>
 80027f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027fa:	e009      	b.n	8002810 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027fc:	f7fe fa1c 	bl	8000c38 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d902      	bls.n	8002810 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	73fb      	strb	r3, [r7, #15]
        break;
 800280e:	e005      	b.n	800281c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002810:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1ef      	bne.n	80027fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d14a      	bne.n	80028b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d111      	bne.n	800284c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002828:	4b26      	ldr	r3, [pc, #152]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6892      	ldr	r2, [r2, #8]
 8002838:	0211      	lsls	r1, r2, #8
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68d2      	ldr	r2, [r2, #12]
 800283e:	0912      	lsrs	r2, r2, #4
 8002840:	0452      	lsls	r2, r2, #17
 8002842:	430a      	orrs	r2, r1
 8002844:	491f      	ldr	r1, [pc, #124]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002846:	4313      	orrs	r3, r2
 8002848:	614b      	str	r3, [r1, #20]
 800284a:	e011      	b.n	8002870 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002854:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6892      	ldr	r2, [r2, #8]
 800285c:	0211      	lsls	r1, r2, #8
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6912      	ldr	r2, [r2, #16]
 8002862:	0852      	lsrs	r2, r2, #1
 8002864:	3a01      	subs	r2, #1
 8002866:	0652      	lsls	r2, r2, #25
 8002868:	430a      	orrs	r2, r1
 800286a:	4916      	ldr	r1, [pc, #88]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800286c:	4313      	orrs	r3, r2
 800286e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a13      	ldr	r2, [pc, #76]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7fe f9dc 	bl	8000c38 <HAL_GetTick>
 8002880:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002882:	e009      	b.n	8002898 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002884:	f7fe f9d8 	bl	8000c38 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d902      	bls.n	8002898 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	73fb      	strb	r3, [r7, #15]
          break;
 8002896:	e005      	b.n	80028a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0ef      	beq.n	8002884 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	4904      	ldr	r1, [pc, #16]	; (80028c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000

080028c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d06c      	beq.n	80029b4 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fd ff2e 	bl	8000750 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	22ca      	movs	r2, #202	; 0xca
 8002902:	625a      	str	r2, [r3, #36]	; 0x24
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2253      	movs	r2, #83	; 0x53
 800290a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f87c 	bl	8002a0a <RTC_EnterInitMode>
 8002912:	4603      	mov	r3, r0
 8002914:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d14b      	bne.n	80029b4 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800292a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800292e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6899      	ldr	r1, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68d2      	ldr	r2, [r2, #12]
 8002956:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6919      	ldr	r1, [r3, #16]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	041a      	lsls	r2, r3, #16
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f87f 	bl	8002a70 <RTC_ExitInitMode>
 8002972:	4603      	mov	r3, r0
 8002974:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d11b      	bne.n	80029b4 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0203 	bic.w	r2, r2, #3
 800298a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69da      	ldr	r2, [r3, #28]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	22ff      	movs	r2, #255	; 0xff
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b084      	sub	sp, #16
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029d4:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80029d6:	f7fe f92f 	bl	8000c38 <HAL_GetTick>
 80029da:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80029dc:	e009      	b.n	80029f2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029de:	f7fe f92b 	bl	8000c38 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029ec:	d901      	bls.n	80029f2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e007      	b.n	8002a02 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0ee      	beq.n	80029de <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d120      	bne.n	8002a66 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002a2e:	f7fe f903 	bl	8000c38 <HAL_GetTick>
 8002a32:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002a34:	e00d      	b.n	8002a52 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002a36:	f7fe f8ff 	bl	8000c38 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a44:	d905      	bls.n	8002a52 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <RTC_EnterInitMode+0x5c>
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d1e7      	bne.n	8002a36 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002a7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <RTC_ExitInitMode+0x78>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <RTC_ExitInitMode+0x78>)
 8002a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a86:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002a88:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <RTC_ExitInitMode+0x78>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10c      	bne.n	8002aae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ff92 	bl	80029be <HAL_RTC_WaitForSynchro>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01e      	beq.n	8002ade <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	e017      	b.n	8002ade <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002aae:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <RTC_ExitInitMode+0x78>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <RTC_ExitInitMode+0x78>)
 8002ab4:	f023 0320 	bic.w	r3, r3, #32
 8002ab8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ff7f 	bl	80029be <HAL_RTC_WaitForSynchro>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2203      	movs	r2, #3
 8002aca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <RTC_ExitInitMode+0x78>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <RTC_ExitInitMode+0x78>)
 8002ad8:	f043 0320 	orr.w	r3, r3, #32
 8002adc:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40002800 	.word	0x40002800

08002aec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e040      	b.n	8002b80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fd ffa4 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2224      	movs	r2, #36	; 0x24
 8002b18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0201 	bic.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8c0 	bl	8002cb0 <UART_SetConfig>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e022      	b.n	8002b80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fb3e 	bl	80031c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fbc5 	bl	8003308 <UART_CheckIdleState>
 8002b7e:	4603      	mov	r3, r0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	f040 8082 	bne.w	8002ca6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <HAL_UART_Transmit+0x26>
 8002ba8:	88fb      	ldrh	r3, [r7, #6]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e07a      	b.n	8002ca8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_UART_Transmit+0x38>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e073      	b.n	8002ca8 <HAL_UART_Transmit+0x120>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2221      	movs	r2, #33	; 0x21
 8002bd4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bd6:	f7fe f82f 	bl	8000c38 <HAL_GetTick>
 8002bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	88fa      	ldrh	r2, [r7, #6]
 8002be0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	88fa      	ldrh	r2, [r7, #6]
 8002be8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf4:	d108      	bne.n	8002c08 <HAL_UART_Transmit+0x80>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d104      	bne.n	8002c08 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	e003      	b.n	8002c10 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002c18:	e02d      	b.n	8002c76 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2200      	movs	r2, #0
 8002c22:	2180      	movs	r1, #128	; 0x80
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 fbb8 	bl	800339a <UART_WaitOnFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e039      	b.n	8002ca8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10b      	bne.n	8002c52 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	881a      	ldrh	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c46:	b292      	uxth	r2, r2
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	3302      	adds	r3, #2
 8002c4e:	61bb      	str	r3, [r7, #24]
 8002c50:	e008      	b.n	8002c64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	781a      	ldrb	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	b292      	uxth	r2, r2
 8002c5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3301      	adds	r3, #1
 8002c62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1cb      	bne.n	8002c1a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2140      	movs	r1, #64	; 0x40
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 fb84 	bl	800339a <UART_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e005      	b.n	8002ca8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e000      	b.n	8002ca8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002ca6:	2302      	movs	r3, #2
  }
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cb0:	b5b0      	push	{r4, r5, r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	4bad      	ldr	r3, [pc, #692]	; (8002f90 <UART_SetConfig+0x2e0>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	69f9      	ldr	r1, [r7, #28]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4aa2      	ldr	r2, [pc, #648]	; (8002f94 <UART_SetConfig+0x2e4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d004      	beq.n	8002d18 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a99      	ldr	r2, [pc, #612]	; (8002f98 <UART_SetConfig+0x2e8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d121      	bne.n	8002d7a <UART_SetConfig+0xca>
 8002d36:	4b99      	ldr	r3, [pc, #612]	; (8002f9c <UART_SetConfig+0x2ec>)
 8002d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d817      	bhi.n	8002d74 <UART_SetConfig+0xc4>
 8002d44:	a201      	add	r2, pc, #4	; (adr r2, 8002d4c <UART_SetConfig+0x9c>)
 8002d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4a:	bf00      	nop
 8002d4c:	08002d5d 	.word	0x08002d5d
 8002d50:	08002d69 	.word	0x08002d69
 8002d54:	08002d63 	.word	0x08002d63
 8002d58:	08002d6f 	.word	0x08002d6f
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	76fb      	strb	r3, [r7, #27]
 8002d60:	e0e7      	b.n	8002f32 <UART_SetConfig+0x282>
 8002d62:	2302      	movs	r3, #2
 8002d64:	76fb      	strb	r3, [r7, #27]
 8002d66:	e0e4      	b.n	8002f32 <UART_SetConfig+0x282>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	76fb      	strb	r3, [r7, #27]
 8002d6c:	e0e1      	b.n	8002f32 <UART_SetConfig+0x282>
 8002d6e:	2308      	movs	r3, #8
 8002d70:	76fb      	strb	r3, [r7, #27]
 8002d72:	e0de      	b.n	8002f32 <UART_SetConfig+0x282>
 8002d74:	2310      	movs	r3, #16
 8002d76:	76fb      	strb	r3, [r7, #27]
 8002d78:	e0db      	b.n	8002f32 <UART_SetConfig+0x282>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a88      	ldr	r2, [pc, #544]	; (8002fa0 <UART_SetConfig+0x2f0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d132      	bne.n	8002dea <UART_SetConfig+0x13a>
 8002d84:	4b85      	ldr	r3, [pc, #532]	; (8002f9c <UART_SetConfig+0x2ec>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b0c      	cmp	r3, #12
 8002d90:	d828      	bhi.n	8002de4 <UART_SetConfig+0x134>
 8002d92:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <UART_SetConfig+0xe8>)
 8002d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d98:	08002dcd 	.word	0x08002dcd
 8002d9c:	08002de5 	.word	0x08002de5
 8002da0:	08002de5 	.word	0x08002de5
 8002da4:	08002de5 	.word	0x08002de5
 8002da8:	08002dd9 	.word	0x08002dd9
 8002dac:	08002de5 	.word	0x08002de5
 8002db0:	08002de5 	.word	0x08002de5
 8002db4:	08002de5 	.word	0x08002de5
 8002db8:	08002dd3 	.word	0x08002dd3
 8002dbc:	08002de5 	.word	0x08002de5
 8002dc0:	08002de5 	.word	0x08002de5
 8002dc4:	08002de5 	.word	0x08002de5
 8002dc8:	08002ddf 	.word	0x08002ddf
 8002dcc:	2300      	movs	r3, #0
 8002dce:	76fb      	strb	r3, [r7, #27]
 8002dd0:	e0af      	b.n	8002f32 <UART_SetConfig+0x282>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	76fb      	strb	r3, [r7, #27]
 8002dd6:	e0ac      	b.n	8002f32 <UART_SetConfig+0x282>
 8002dd8:	2304      	movs	r3, #4
 8002dda:	76fb      	strb	r3, [r7, #27]
 8002ddc:	e0a9      	b.n	8002f32 <UART_SetConfig+0x282>
 8002dde:	2308      	movs	r3, #8
 8002de0:	76fb      	strb	r3, [r7, #27]
 8002de2:	e0a6      	b.n	8002f32 <UART_SetConfig+0x282>
 8002de4:	2310      	movs	r3, #16
 8002de6:	76fb      	strb	r3, [r7, #27]
 8002de8:	e0a3      	b.n	8002f32 <UART_SetConfig+0x282>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a6d      	ldr	r2, [pc, #436]	; (8002fa4 <UART_SetConfig+0x2f4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d120      	bne.n	8002e36 <UART_SetConfig+0x186>
 8002df4:	4b69      	ldr	r3, [pc, #420]	; (8002f9c <UART_SetConfig+0x2ec>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002dfe:	2b30      	cmp	r3, #48	; 0x30
 8002e00:	d013      	beq.n	8002e2a <UART_SetConfig+0x17a>
 8002e02:	2b30      	cmp	r3, #48	; 0x30
 8002e04:	d814      	bhi.n	8002e30 <UART_SetConfig+0x180>
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d009      	beq.n	8002e1e <UART_SetConfig+0x16e>
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	d810      	bhi.n	8002e30 <UART_SetConfig+0x180>
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <UART_SetConfig+0x168>
 8002e12:	2b10      	cmp	r3, #16
 8002e14:	d006      	beq.n	8002e24 <UART_SetConfig+0x174>
 8002e16:	e00b      	b.n	8002e30 <UART_SetConfig+0x180>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	76fb      	strb	r3, [r7, #27]
 8002e1c:	e089      	b.n	8002f32 <UART_SetConfig+0x282>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	76fb      	strb	r3, [r7, #27]
 8002e22:	e086      	b.n	8002f32 <UART_SetConfig+0x282>
 8002e24:	2304      	movs	r3, #4
 8002e26:	76fb      	strb	r3, [r7, #27]
 8002e28:	e083      	b.n	8002f32 <UART_SetConfig+0x282>
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	76fb      	strb	r3, [r7, #27]
 8002e2e:	e080      	b.n	8002f32 <UART_SetConfig+0x282>
 8002e30:	2310      	movs	r3, #16
 8002e32:	76fb      	strb	r3, [r7, #27]
 8002e34:	e07d      	b.n	8002f32 <UART_SetConfig+0x282>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a5b      	ldr	r2, [pc, #364]	; (8002fa8 <UART_SetConfig+0x2f8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d120      	bne.n	8002e82 <UART_SetConfig+0x1d2>
 8002e40:	4b56      	ldr	r3, [pc, #344]	; (8002f9c <UART_SetConfig+0x2ec>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e4c:	d013      	beq.n	8002e76 <UART_SetConfig+0x1c6>
 8002e4e:	2bc0      	cmp	r3, #192	; 0xc0
 8002e50:	d814      	bhi.n	8002e7c <UART_SetConfig+0x1cc>
 8002e52:	2b80      	cmp	r3, #128	; 0x80
 8002e54:	d009      	beq.n	8002e6a <UART_SetConfig+0x1ba>
 8002e56:	2b80      	cmp	r3, #128	; 0x80
 8002e58:	d810      	bhi.n	8002e7c <UART_SetConfig+0x1cc>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <UART_SetConfig+0x1b4>
 8002e5e:	2b40      	cmp	r3, #64	; 0x40
 8002e60:	d006      	beq.n	8002e70 <UART_SetConfig+0x1c0>
 8002e62:	e00b      	b.n	8002e7c <UART_SetConfig+0x1cc>
 8002e64:	2300      	movs	r3, #0
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e063      	b.n	8002f32 <UART_SetConfig+0x282>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e060      	b.n	8002f32 <UART_SetConfig+0x282>
 8002e70:	2304      	movs	r3, #4
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e05d      	b.n	8002f32 <UART_SetConfig+0x282>
 8002e76:	2308      	movs	r3, #8
 8002e78:	76fb      	strb	r3, [r7, #27]
 8002e7a:	e05a      	b.n	8002f32 <UART_SetConfig+0x282>
 8002e7c:	2310      	movs	r3, #16
 8002e7e:	76fb      	strb	r3, [r7, #27]
 8002e80:	e057      	b.n	8002f32 <UART_SetConfig+0x282>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a49      	ldr	r2, [pc, #292]	; (8002fac <UART_SetConfig+0x2fc>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d125      	bne.n	8002ed8 <UART_SetConfig+0x228>
 8002e8c:	4b43      	ldr	r3, [pc, #268]	; (8002f9c <UART_SetConfig+0x2ec>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e9a:	d017      	beq.n	8002ecc <UART_SetConfig+0x21c>
 8002e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ea0:	d817      	bhi.n	8002ed2 <UART_SetConfig+0x222>
 8002ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea6:	d00b      	beq.n	8002ec0 <UART_SetConfig+0x210>
 8002ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eac:	d811      	bhi.n	8002ed2 <UART_SetConfig+0x222>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <UART_SetConfig+0x20a>
 8002eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb6:	d006      	beq.n	8002ec6 <UART_SetConfig+0x216>
 8002eb8:	e00b      	b.n	8002ed2 <UART_SetConfig+0x222>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	76fb      	strb	r3, [r7, #27]
 8002ebe:	e038      	b.n	8002f32 <UART_SetConfig+0x282>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	76fb      	strb	r3, [r7, #27]
 8002ec4:	e035      	b.n	8002f32 <UART_SetConfig+0x282>
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	76fb      	strb	r3, [r7, #27]
 8002eca:	e032      	b.n	8002f32 <UART_SetConfig+0x282>
 8002ecc:	2308      	movs	r3, #8
 8002ece:	76fb      	strb	r3, [r7, #27]
 8002ed0:	e02f      	b.n	8002f32 <UART_SetConfig+0x282>
 8002ed2:	2310      	movs	r3, #16
 8002ed4:	76fb      	strb	r3, [r7, #27]
 8002ed6:	e02c      	b.n	8002f32 <UART_SetConfig+0x282>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2d      	ldr	r2, [pc, #180]	; (8002f94 <UART_SetConfig+0x2e4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d125      	bne.n	8002f2e <UART_SetConfig+0x27e>
 8002ee2:	4b2e      	ldr	r3, [pc, #184]	; (8002f9c <UART_SetConfig+0x2ec>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002eec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ef0:	d017      	beq.n	8002f22 <UART_SetConfig+0x272>
 8002ef2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ef6:	d817      	bhi.n	8002f28 <UART_SetConfig+0x278>
 8002ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002efc:	d00b      	beq.n	8002f16 <UART_SetConfig+0x266>
 8002efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f02:	d811      	bhi.n	8002f28 <UART_SetConfig+0x278>
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <UART_SetConfig+0x260>
 8002f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0c:	d006      	beq.n	8002f1c <UART_SetConfig+0x26c>
 8002f0e:	e00b      	b.n	8002f28 <UART_SetConfig+0x278>
 8002f10:	2300      	movs	r3, #0
 8002f12:	76fb      	strb	r3, [r7, #27]
 8002f14:	e00d      	b.n	8002f32 <UART_SetConfig+0x282>
 8002f16:	2302      	movs	r3, #2
 8002f18:	76fb      	strb	r3, [r7, #27]
 8002f1a:	e00a      	b.n	8002f32 <UART_SetConfig+0x282>
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	76fb      	strb	r3, [r7, #27]
 8002f20:	e007      	b.n	8002f32 <UART_SetConfig+0x282>
 8002f22:	2308      	movs	r3, #8
 8002f24:	76fb      	strb	r3, [r7, #27]
 8002f26:	e004      	b.n	8002f32 <UART_SetConfig+0x282>
 8002f28:	2310      	movs	r3, #16
 8002f2a:	76fb      	strb	r3, [r7, #27]
 8002f2c:	e001      	b.n	8002f32 <UART_SetConfig+0x282>
 8002f2e:	2310      	movs	r3, #16
 8002f30:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <UART_SetConfig+0x2e4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	f040 8087 	bne.w	800304c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f3e:	7efb      	ldrb	r3, [r7, #27]
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d837      	bhi.n	8002fb4 <UART_SetConfig+0x304>
 8002f44:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <UART_SetConfig+0x29c>)
 8002f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4a:	bf00      	nop
 8002f4c:	08002f71 	.word	0x08002f71
 8002f50:	08002fb5 	.word	0x08002fb5
 8002f54:	08002f79 	.word	0x08002f79
 8002f58:	08002fb5 	.word	0x08002fb5
 8002f5c:	08002f7f 	.word	0x08002f7f
 8002f60:	08002fb5 	.word	0x08002fb5
 8002f64:	08002fb5 	.word	0x08002fb5
 8002f68:	08002fb5 	.word	0x08002fb5
 8002f6c:	08002f87 	.word	0x08002f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f70:	f7fe ff62 	bl	8001e38 <HAL_RCC_GetPCLK1Freq>
 8002f74:	6178      	str	r0, [r7, #20]
        break;
 8002f76:	e022      	b.n	8002fbe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f78:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <UART_SetConfig+0x300>)
 8002f7a:	617b      	str	r3, [r7, #20]
        break;
 8002f7c:	e01f      	b.n	8002fbe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f7e:	f7fe fec3 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8002f82:	6178      	str	r0, [r7, #20]
        break;
 8002f84:	e01b      	b.n	8002fbe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f8a:	617b      	str	r3, [r7, #20]
        break;
 8002f8c:	e017      	b.n	8002fbe <UART_SetConfig+0x30e>
 8002f8e:	bf00      	nop
 8002f90:	efff69f3 	.word	0xefff69f3
 8002f94:	40008000 	.word	0x40008000
 8002f98:	40013800 	.word	0x40013800
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40004400 	.word	0x40004400
 8002fa4:	40004800 	.word	0x40004800
 8002fa8:	40004c00 	.word	0x40004c00
 8002fac:	40005000 	.word	0x40005000
 8002fb0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	76bb      	strb	r3, [r7, #26]
        break;
 8002fbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80f1 	beq.w	80031a8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d305      	bcc.n	8002fe2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d902      	bls.n	8002fe8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	76bb      	strb	r3, [r7, #26]
 8002fe6:	e0df      	b.n	80031a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f04f 0100 	mov.w	r1, #0
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	020b      	lsls	r3, r1, #8
 8002ffa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002ffe:	0202      	lsls	r2, r0, #8
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	6849      	ldr	r1, [r1, #4]
 8003004:	0849      	lsrs	r1, r1, #1
 8003006:	4608      	mov	r0, r1
 8003008:	f04f 0100 	mov.w	r1, #0
 800300c:	1814      	adds	r4, r2, r0
 800300e:	eb43 0501 	adc.w	r5, r3, r1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	461a      	mov	r2, r3
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	4620      	mov	r0, r4
 800301e:	4629      	mov	r1, r5
 8003020:	f7fd f8d2 	bl	80001c8 <__aeabi_uldivmod>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4613      	mov	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003032:	d308      	bcc.n	8003046 <UART_SetConfig+0x396>
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800303a:	d204      	bcs.n	8003046 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	60da      	str	r2, [r3, #12]
 8003044:	e0b0      	b.n	80031a8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	76bb      	strb	r3, [r7, #26]
 800304a:	e0ad      	b.n	80031a8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003054:	d15c      	bne.n	8003110 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003056:	7efb      	ldrb	r3, [r7, #27]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d828      	bhi.n	80030ae <UART_SetConfig+0x3fe>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <UART_SetConfig+0x3b4>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003089 	.word	0x08003089
 8003068:	08003091 	.word	0x08003091
 800306c:	08003099 	.word	0x08003099
 8003070:	080030af 	.word	0x080030af
 8003074:	0800309f 	.word	0x0800309f
 8003078:	080030af 	.word	0x080030af
 800307c:	080030af 	.word	0x080030af
 8003080:	080030af 	.word	0x080030af
 8003084:	080030a7 	.word	0x080030a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003088:	f7fe fed6 	bl	8001e38 <HAL_RCC_GetPCLK1Freq>
 800308c:	6178      	str	r0, [r7, #20]
        break;
 800308e:	e013      	b.n	80030b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003090:	f7fe fee8 	bl	8001e64 <HAL_RCC_GetPCLK2Freq>
 8003094:	6178      	str	r0, [r7, #20]
        break;
 8003096:	e00f      	b.n	80030b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003098:	4b49      	ldr	r3, [pc, #292]	; (80031c0 <UART_SetConfig+0x510>)
 800309a:	617b      	str	r3, [r7, #20]
        break;
 800309c:	e00c      	b.n	80030b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800309e:	f7fe fe33 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 80030a2:	6178      	str	r0, [r7, #20]
        break;
 80030a4:	e008      	b.n	80030b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030aa:	617b      	str	r3, [r7, #20]
        break;
 80030ac:	e004      	b.n	80030b8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	76bb      	strb	r3, [r7, #26]
        break;
 80030b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d074      	beq.n	80031a8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	005a      	lsls	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	441a      	add	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	2b0f      	cmp	r3, #15
 80030da:	d916      	bls.n	800310a <UART_SetConfig+0x45a>
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e2:	d212      	bcs.n	800310a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	f023 030f 	bic.w	r3, r3, #15
 80030ec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	89fb      	ldrh	r3, [r7, #14]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	89fa      	ldrh	r2, [r7, #14]
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	e04e      	b.n	80031a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	76bb      	strb	r3, [r7, #26]
 800310e:	e04b      	b.n	80031a8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003110:	7efb      	ldrb	r3, [r7, #27]
 8003112:	2b08      	cmp	r3, #8
 8003114:	d827      	bhi.n	8003166 <UART_SetConfig+0x4b6>
 8003116:	a201      	add	r2, pc, #4	; (adr r2, 800311c <UART_SetConfig+0x46c>)
 8003118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311c:	08003141 	.word	0x08003141
 8003120:	08003149 	.word	0x08003149
 8003124:	08003151 	.word	0x08003151
 8003128:	08003167 	.word	0x08003167
 800312c:	08003157 	.word	0x08003157
 8003130:	08003167 	.word	0x08003167
 8003134:	08003167 	.word	0x08003167
 8003138:	08003167 	.word	0x08003167
 800313c:	0800315f 	.word	0x0800315f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003140:	f7fe fe7a 	bl	8001e38 <HAL_RCC_GetPCLK1Freq>
 8003144:	6178      	str	r0, [r7, #20]
        break;
 8003146:	e013      	b.n	8003170 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003148:	f7fe fe8c 	bl	8001e64 <HAL_RCC_GetPCLK2Freq>
 800314c:	6178      	str	r0, [r7, #20]
        break;
 800314e:	e00f      	b.n	8003170 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003150:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <UART_SetConfig+0x510>)
 8003152:	617b      	str	r3, [r7, #20]
        break;
 8003154:	e00c      	b.n	8003170 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003156:	f7fe fdd7 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 800315a:	6178      	str	r0, [r7, #20]
        break;
 800315c:	e008      	b.n	8003170 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800315e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003162:	617b      	str	r3, [r7, #20]
        break;
 8003164:	e004      	b.n	8003170 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	76bb      	strb	r3, [r7, #26]
        break;
 800316e:	bf00      	nop
    }

    if (pclk != 0U)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d018      	beq.n	80031a8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	085a      	lsrs	r2, r3, #1
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	441a      	add	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	b29b      	uxth	r3, r3
 800318a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	2b0f      	cmp	r3, #15
 8003190:	d908      	bls.n	80031a4 <UART_SetConfig+0x4f4>
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003198:	d204      	bcs.n	80031a4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	e001      	b.n	80031a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80031b4:	7ebb      	ldrb	r3, [r7, #26]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bdb0      	pop	{r4, r5, r7, pc}
 80031be:	bf00      	nop
 80031c0:	00f42400 	.word	0x00f42400

080031c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01a      	beq.n	80032da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c2:	d10a      	bne.n	80032da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]
  }
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af02      	add	r7, sp, #8
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003318:	f7fd fc8e 	bl	8000c38 <HAL_GetTick>
 800331c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b08      	cmp	r3, #8
 800332a:	d10e      	bne.n	800334a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800332c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f82d 	bl	800339a <UART_WaitOnFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e023      	b.n	8003392 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b04      	cmp	r3, #4
 8003356:	d10e      	bne.n	8003376 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003358:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f817 	bl	800339a <UART_WaitOnFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e00d      	b.n	8003392 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	4613      	mov	r3, r2
 80033a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033aa:	e05e      	b.n	800346a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	d05a      	beq.n	800346a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b4:	f7fd fc40 	bl	8000c38 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d302      	bcc.n	80033ca <UART_WaitOnFlagUntilTimeout+0x30>
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d11b      	bne.n	8003402 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033d8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0201 	bic.w	r2, r2, #1
 80033e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e043      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d02c      	beq.n	800346a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800341a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800341e:	d124      	bne.n	800346a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003428:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003438:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0201 	bic.w	r2, r2, #1
 8003448:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2220      	movs	r2, #32
 800344e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2220      	movs	r2, #32
 800345a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e00f      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4013      	ands	r3, r2
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	429a      	cmp	r2, r3
 8003478:	bf0c      	ite	eq
 800347a:	2301      	moveq	r3, #1
 800347c:	2300      	movne	r3, #0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	429a      	cmp	r2, r3
 8003486:	d091      	beq.n	80033ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <__errno>:
 8003494:	4b01      	ldr	r3, [pc, #4]	; (800349c <__errno+0x8>)
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	2000000c 	.word	0x2000000c

080034a0 <__libc_init_array>:
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	4d0d      	ldr	r5, [pc, #52]	; (80034d8 <__libc_init_array+0x38>)
 80034a4:	4c0d      	ldr	r4, [pc, #52]	; (80034dc <__libc_init_array+0x3c>)
 80034a6:	1b64      	subs	r4, r4, r5
 80034a8:	10a4      	asrs	r4, r4, #2
 80034aa:	2600      	movs	r6, #0
 80034ac:	42a6      	cmp	r6, r4
 80034ae:	d109      	bne.n	80034c4 <__libc_init_array+0x24>
 80034b0:	4d0b      	ldr	r5, [pc, #44]	; (80034e0 <__libc_init_array+0x40>)
 80034b2:	4c0c      	ldr	r4, [pc, #48]	; (80034e4 <__libc_init_array+0x44>)
 80034b4:	f000 fce6 	bl	8003e84 <_init>
 80034b8:	1b64      	subs	r4, r4, r5
 80034ba:	10a4      	asrs	r4, r4, #2
 80034bc:	2600      	movs	r6, #0
 80034be:	42a6      	cmp	r6, r4
 80034c0:	d105      	bne.n	80034ce <__libc_init_array+0x2e>
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
 80034c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034c8:	4798      	blx	r3
 80034ca:	3601      	adds	r6, #1
 80034cc:	e7ee      	b.n	80034ac <__libc_init_array+0xc>
 80034ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d2:	4798      	blx	r3
 80034d4:	3601      	adds	r6, #1
 80034d6:	e7f2      	b.n	80034be <__libc_init_array+0x1e>
 80034d8:	08003f5c 	.word	0x08003f5c
 80034dc:	08003f5c 	.word	0x08003f5c
 80034e0:	08003f5c 	.word	0x08003f5c
 80034e4:	08003f60 	.word	0x08003f60

080034e8 <memset>:
 80034e8:	4402      	add	r2, r0
 80034ea:	4603      	mov	r3, r0
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d100      	bne.n	80034f2 <memset+0xa>
 80034f0:	4770      	bx	lr
 80034f2:	f803 1b01 	strb.w	r1, [r3], #1
 80034f6:	e7f9      	b.n	80034ec <memset+0x4>

080034f8 <_puts_r>:
 80034f8:	b570      	push	{r4, r5, r6, lr}
 80034fa:	460e      	mov	r6, r1
 80034fc:	4605      	mov	r5, r0
 80034fe:	b118      	cbz	r0, 8003508 <_puts_r+0x10>
 8003500:	6983      	ldr	r3, [r0, #24]
 8003502:	b90b      	cbnz	r3, 8003508 <_puts_r+0x10>
 8003504:	f000 fa48 	bl	8003998 <__sinit>
 8003508:	69ab      	ldr	r3, [r5, #24]
 800350a:	68ac      	ldr	r4, [r5, #8]
 800350c:	b913      	cbnz	r3, 8003514 <_puts_r+0x1c>
 800350e:	4628      	mov	r0, r5
 8003510:	f000 fa42 	bl	8003998 <__sinit>
 8003514:	4b2c      	ldr	r3, [pc, #176]	; (80035c8 <_puts_r+0xd0>)
 8003516:	429c      	cmp	r4, r3
 8003518:	d120      	bne.n	800355c <_puts_r+0x64>
 800351a:	686c      	ldr	r4, [r5, #4]
 800351c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800351e:	07db      	lsls	r3, r3, #31
 8003520:	d405      	bmi.n	800352e <_puts_r+0x36>
 8003522:	89a3      	ldrh	r3, [r4, #12]
 8003524:	0598      	lsls	r0, r3, #22
 8003526:	d402      	bmi.n	800352e <_puts_r+0x36>
 8003528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800352a:	f000 fad3 	bl	8003ad4 <__retarget_lock_acquire_recursive>
 800352e:	89a3      	ldrh	r3, [r4, #12]
 8003530:	0719      	lsls	r1, r3, #28
 8003532:	d51d      	bpl.n	8003570 <_puts_r+0x78>
 8003534:	6923      	ldr	r3, [r4, #16]
 8003536:	b1db      	cbz	r3, 8003570 <_puts_r+0x78>
 8003538:	3e01      	subs	r6, #1
 800353a:	68a3      	ldr	r3, [r4, #8]
 800353c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003540:	3b01      	subs	r3, #1
 8003542:	60a3      	str	r3, [r4, #8]
 8003544:	bb39      	cbnz	r1, 8003596 <_puts_r+0x9e>
 8003546:	2b00      	cmp	r3, #0
 8003548:	da38      	bge.n	80035bc <_puts_r+0xc4>
 800354a:	4622      	mov	r2, r4
 800354c:	210a      	movs	r1, #10
 800354e:	4628      	mov	r0, r5
 8003550:	f000 f848 	bl	80035e4 <__swbuf_r>
 8003554:	3001      	adds	r0, #1
 8003556:	d011      	beq.n	800357c <_puts_r+0x84>
 8003558:	250a      	movs	r5, #10
 800355a:	e011      	b.n	8003580 <_puts_r+0x88>
 800355c:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <_puts_r+0xd4>)
 800355e:	429c      	cmp	r4, r3
 8003560:	d101      	bne.n	8003566 <_puts_r+0x6e>
 8003562:	68ac      	ldr	r4, [r5, #8]
 8003564:	e7da      	b.n	800351c <_puts_r+0x24>
 8003566:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <_puts_r+0xd8>)
 8003568:	429c      	cmp	r4, r3
 800356a:	bf08      	it	eq
 800356c:	68ec      	ldreq	r4, [r5, #12]
 800356e:	e7d5      	b.n	800351c <_puts_r+0x24>
 8003570:	4621      	mov	r1, r4
 8003572:	4628      	mov	r0, r5
 8003574:	f000 f888 	bl	8003688 <__swsetup_r>
 8003578:	2800      	cmp	r0, #0
 800357a:	d0dd      	beq.n	8003538 <_puts_r+0x40>
 800357c:	f04f 35ff 	mov.w	r5, #4294967295
 8003580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003582:	07da      	lsls	r2, r3, #31
 8003584:	d405      	bmi.n	8003592 <_puts_r+0x9a>
 8003586:	89a3      	ldrh	r3, [r4, #12]
 8003588:	059b      	lsls	r3, r3, #22
 800358a:	d402      	bmi.n	8003592 <_puts_r+0x9a>
 800358c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800358e:	f000 faa2 	bl	8003ad6 <__retarget_lock_release_recursive>
 8003592:	4628      	mov	r0, r5
 8003594:	bd70      	pop	{r4, r5, r6, pc}
 8003596:	2b00      	cmp	r3, #0
 8003598:	da04      	bge.n	80035a4 <_puts_r+0xac>
 800359a:	69a2      	ldr	r2, [r4, #24]
 800359c:	429a      	cmp	r2, r3
 800359e:	dc06      	bgt.n	80035ae <_puts_r+0xb6>
 80035a0:	290a      	cmp	r1, #10
 80035a2:	d004      	beq.n	80035ae <_puts_r+0xb6>
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	6022      	str	r2, [r4, #0]
 80035aa:	7019      	strb	r1, [r3, #0]
 80035ac:	e7c5      	b.n	800353a <_puts_r+0x42>
 80035ae:	4622      	mov	r2, r4
 80035b0:	4628      	mov	r0, r5
 80035b2:	f000 f817 	bl	80035e4 <__swbuf_r>
 80035b6:	3001      	adds	r0, #1
 80035b8:	d1bf      	bne.n	800353a <_puts_r+0x42>
 80035ba:	e7df      	b.n	800357c <_puts_r+0x84>
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	250a      	movs	r5, #10
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	6022      	str	r2, [r4, #0]
 80035c4:	701d      	strb	r5, [r3, #0]
 80035c6:	e7db      	b.n	8003580 <_puts_r+0x88>
 80035c8:	08003f14 	.word	0x08003f14
 80035cc:	08003f34 	.word	0x08003f34
 80035d0:	08003ef4 	.word	0x08003ef4

080035d4 <puts>:
 80035d4:	4b02      	ldr	r3, [pc, #8]	; (80035e0 <puts+0xc>)
 80035d6:	4601      	mov	r1, r0
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	f7ff bf8d 	b.w	80034f8 <_puts_r>
 80035de:	bf00      	nop
 80035e0:	2000000c 	.word	0x2000000c

080035e4 <__swbuf_r>:
 80035e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e6:	460e      	mov	r6, r1
 80035e8:	4614      	mov	r4, r2
 80035ea:	4605      	mov	r5, r0
 80035ec:	b118      	cbz	r0, 80035f6 <__swbuf_r+0x12>
 80035ee:	6983      	ldr	r3, [r0, #24]
 80035f0:	b90b      	cbnz	r3, 80035f6 <__swbuf_r+0x12>
 80035f2:	f000 f9d1 	bl	8003998 <__sinit>
 80035f6:	4b21      	ldr	r3, [pc, #132]	; (800367c <__swbuf_r+0x98>)
 80035f8:	429c      	cmp	r4, r3
 80035fa:	d12b      	bne.n	8003654 <__swbuf_r+0x70>
 80035fc:	686c      	ldr	r4, [r5, #4]
 80035fe:	69a3      	ldr	r3, [r4, #24]
 8003600:	60a3      	str	r3, [r4, #8]
 8003602:	89a3      	ldrh	r3, [r4, #12]
 8003604:	071a      	lsls	r2, r3, #28
 8003606:	d52f      	bpl.n	8003668 <__swbuf_r+0x84>
 8003608:	6923      	ldr	r3, [r4, #16]
 800360a:	b36b      	cbz	r3, 8003668 <__swbuf_r+0x84>
 800360c:	6923      	ldr	r3, [r4, #16]
 800360e:	6820      	ldr	r0, [r4, #0]
 8003610:	1ac0      	subs	r0, r0, r3
 8003612:	6963      	ldr	r3, [r4, #20]
 8003614:	b2f6      	uxtb	r6, r6
 8003616:	4283      	cmp	r3, r0
 8003618:	4637      	mov	r7, r6
 800361a:	dc04      	bgt.n	8003626 <__swbuf_r+0x42>
 800361c:	4621      	mov	r1, r4
 800361e:	4628      	mov	r0, r5
 8003620:	f000 f926 	bl	8003870 <_fflush_r>
 8003624:	bb30      	cbnz	r0, 8003674 <__swbuf_r+0x90>
 8003626:	68a3      	ldr	r3, [r4, #8]
 8003628:	3b01      	subs	r3, #1
 800362a:	60a3      	str	r3, [r4, #8]
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	6022      	str	r2, [r4, #0]
 8003632:	701e      	strb	r6, [r3, #0]
 8003634:	6963      	ldr	r3, [r4, #20]
 8003636:	3001      	adds	r0, #1
 8003638:	4283      	cmp	r3, r0
 800363a:	d004      	beq.n	8003646 <__swbuf_r+0x62>
 800363c:	89a3      	ldrh	r3, [r4, #12]
 800363e:	07db      	lsls	r3, r3, #31
 8003640:	d506      	bpl.n	8003650 <__swbuf_r+0x6c>
 8003642:	2e0a      	cmp	r6, #10
 8003644:	d104      	bne.n	8003650 <__swbuf_r+0x6c>
 8003646:	4621      	mov	r1, r4
 8003648:	4628      	mov	r0, r5
 800364a:	f000 f911 	bl	8003870 <_fflush_r>
 800364e:	b988      	cbnz	r0, 8003674 <__swbuf_r+0x90>
 8003650:	4638      	mov	r0, r7
 8003652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <__swbuf_r+0x9c>)
 8003656:	429c      	cmp	r4, r3
 8003658:	d101      	bne.n	800365e <__swbuf_r+0x7a>
 800365a:	68ac      	ldr	r4, [r5, #8]
 800365c:	e7cf      	b.n	80035fe <__swbuf_r+0x1a>
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <__swbuf_r+0xa0>)
 8003660:	429c      	cmp	r4, r3
 8003662:	bf08      	it	eq
 8003664:	68ec      	ldreq	r4, [r5, #12]
 8003666:	e7ca      	b.n	80035fe <__swbuf_r+0x1a>
 8003668:	4621      	mov	r1, r4
 800366a:	4628      	mov	r0, r5
 800366c:	f000 f80c 	bl	8003688 <__swsetup_r>
 8003670:	2800      	cmp	r0, #0
 8003672:	d0cb      	beq.n	800360c <__swbuf_r+0x28>
 8003674:	f04f 37ff 	mov.w	r7, #4294967295
 8003678:	e7ea      	b.n	8003650 <__swbuf_r+0x6c>
 800367a:	bf00      	nop
 800367c:	08003f14 	.word	0x08003f14
 8003680:	08003f34 	.word	0x08003f34
 8003684:	08003ef4 	.word	0x08003ef4

08003688 <__swsetup_r>:
 8003688:	4b32      	ldr	r3, [pc, #200]	; (8003754 <__swsetup_r+0xcc>)
 800368a:	b570      	push	{r4, r5, r6, lr}
 800368c:	681d      	ldr	r5, [r3, #0]
 800368e:	4606      	mov	r6, r0
 8003690:	460c      	mov	r4, r1
 8003692:	b125      	cbz	r5, 800369e <__swsetup_r+0x16>
 8003694:	69ab      	ldr	r3, [r5, #24]
 8003696:	b913      	cbnz	r3, 800369e <__swsetup_r+0x16>
 8003698:	4628      	mov	r0, r5
 800369a:	f000 f97d 	bl	8003998 <__sinit>
 800369e:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <__swsetup_r+0xd0>)
 80036a0:	429c      	cmp	r4, r3
 80036a2:	d10f      	bne.n	80036c4 <__swsetup_r+0x3c>
 80036a4:	686c      	ldr	r4, [r5, #4]
 80036a6:	89a3      	ldrh	r3, [r4, #12]
 80036a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036ac:	0719      	lsls	r1, r3, #28
 80036ae:	d42c      	bmi.n	800370a <__swsetup_r+0x82>
 80036b0:	06dd      	lsls	r5, r3, #27
 80036b2:	d411      	bmi.n	80036d8 <__swsetup_r+0x50>
 80036b4:	2309      	movs	r3, #9
 80036b6:	6033      	str	r3, [r6, #0]
 80036b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036bc:	81a3      	strh	r3, [r4, #12]
 80036be:	f04f 30ff 	mov.w	r0, #4294967295
 80036c2:	e03e      	b.n	8003742 <__swsetup_r+0xba>
 80036c4:	4b25      	ldr	r3, [pc, #148]	; (800375c <__swsetup_r+0xd4>)
 80036c6:	429c      	cmp	r4, r3
 80036c8:	d101      	bne.n	80036ce <__swsetup_r+0x46>
 80036ca:	68ac      	ldr	r4, [r5, #8]
 80036cc:	e7eb      	b.n	80036a6 <__swsetup_r+0x1e>
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <__swsetup_r+0xd8>)
 80036d0:	429c      	cmp	r4, r3
 80036d2:	bf08      	it	eq
 80036d4:	68ec      	ldreq	r4, [r5, #12]
 80036d6:	e7e6      	b.n	80036a6 <__swsetup_r+0x1e>
 80036d8:	0758      	lsls	r0, r3, #29
 80036da:	d512      	bpl.n	8003702 <__swsetup_r+0x7a>
 80036dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036de:	b141      	cbz	r1, 80036f2 <__swsetup_r+0x6a>
 80036e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036e4:	4299      	cmp	r1, r3
 80036e6:	d002      	beq.n	80036ee <__swsetup_r+0x66>
 80036e8:	4630      	mov	r0, r6
 80036ea:	f000 fa59 	bl	8003ba0 <_free_r>
 80036ee:	2300      	movs	r3, #0
 80036f0:	6363      	str	r3, [r4, #52]	; 0x34
 80036f2:	89a3      	ldrh	r3, [r4, #12]
 80036f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036f8:	81a3      	strh	r3, [r4, #12]
 80036fa:	2300      	movs	r3, #0
 80036fc:	6063      	str	r3, [r4, #4]
 80036fe:	6923      	ldr	r3, [r4, #16]
 8003700:	6023      	str	r3, [r4, #0]
 8003702:	89a3      	ldrh	r3, [r4, #12]
 8003704:	f043 0308 	orr.w	r3, r3, #8
 8003708:	81a3      	strh	r3, [r4, #12]
 800370a:	6923      	ldr	r3, [r4, #16]
 800370c:	b94b      	cbnz	r3, 8003722 <__swsetup_r+0x9a>
 800370e:	89a3      	ldrh	r3, [r4, #12]
 8003710:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003718:	d003      	beq.n	8003722 <__swsetup_r+0x9a>
 800371a:	4621      	mov	r1, r4
 800371c:	4630      	mov	r0, r6
 800371e:	f000 f9ff 	bl	8003b20 <__smakebuf_r>
 8003722:	89a0      	ldrh	r0, [r4, #12]
 8003724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003728:	f010 0301 	ands.w	r3, r0, #1
 800372c:	d00a      	beq.n	8003744 <__swsetup_r+0xbc>
 800372e:	2300      	movs	r3, #0
 8003730:	60a3      	str	r3, [r4, #8]
 8003732:	6963      	ldr	r3, [r4, #20]
 8003734:	425b      	negs	r3, r3
 8003736:	61a3      	str	r3, [r4, #24]
 8003738:	6923      	ldr	r3, [r4, #16]
 800373a:	b943      	cbnz	r3, 800374e <__swsetup_r+0xc6>
 800373c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003740:	d1ba      	bne.n	80036b8 <__swsetup_r+0x30>
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	0781      	lsls	r1, r0, #30
 8003746:	bf58      	it	pl
 8003748:	6963      	ldrpl	r3, [r4, #20]
 800374a:	60a3      	str	r3, [r4, #8]
 800374c:	e7f4      	b.n	8003738 <__swsetup_r+0xb0>
 800374e:	2000      	movs	r0, #0
 8003750:	e7f7      	b.n	8003742 <__swsetup_r+0xba>
 8003752:	bf00      	nop
 8003754:	2000000c 	.word	0x2000000c
 8003758:	08003f14 	.word	0x08003f14
 800375c:	08003f34 	.word	0x08003f34
 8003760:	08003ef4 	.word	0x08003ef4

08003764 <__sflush_r>:
 8003764:	898a      	ldrh	r2, [r1, #12]
 8003766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800376a:	4605      	mov	r5, r0
 800376c:	0710      	lsls	r0, r2, #28
 800376e:	460c      	mov	r4, r1
 8003770:	d458      	bmi.n	8003824 <__sflush_r+0xc0>
 8003772:	684b      	ldr	r3, [r1, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	dc05      	bgt.n	8003784 <__sflush_r+0x20>
 8003778:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	dc02      	bgt.n	8003784 <__sflush_r+0x20>
 800377e:	2000      	movs	r0, #0
 8003780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003786:	2e00      	cmp	r6, #0
 8003788:	d0f9      	beq.n	800377e <__sflush_r+0x1a>
 800378a:	2300      	movs	r3, #0
 800378c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003790:	682f      	ldr	r7, [r5, #0]
 8003792:	602b      	str	r3, [r5, #0]
 8003794:	d032      	beq.n	80037fc <__sflush_r+0x98>
 8003796:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	075a      	lsls	r2, r3, #29
 800379c:	d505      	bpl.n	80037aa <__sflush_r+0x46>
 800379e:	6863      	ldr	r3, [r4, #4]
 80037a0:	1ac0      	subs	r0, r0, r3
 80037a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037a4:	b10b      	cbz	r3, 80037aa <__sflush_r+0x46>
 80037a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037a8:	1ac0      	subs	r0, r0, r3
 80037aa:	2300      	movs	r3, #0
 80037ac:	4602      	mov	r2, r0
 80037ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037b0:	6a21      	ldr	r1, [r4, #32]
 80037b2:	4628      	mov	r0, r5
 80037b4:	47b0      	blx	r6
 80037b6:	1c43      	adds	r3, r0, #1
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	d106      	bne.n	80037ca <__sflush_r+0x66>
 80037bc:	6829      	ldr	r1, [r5, #0]
 80037be:	291d      	cmp	r1, #29
 80037c0:	d82c      	bhi.n	800381c <__sflush_r+0xb8>
 80037c2:	4a2a      	ldr	r2, [pc, #168]	; (800386c <__sflush_r+0x108>)
 80037c4:	40ca      	lsrs	r2, r1
 80037c6:	07d6      	lsls	r6, r2, #31
 80037c8:	d528      	bpl.n	800381c <__sflush_r+0xb8>
 80037ca:	2200      	movs	r2, #0
 80037cc:	6062      	str	r2, [r4, #4]
 80037ce:	04d9      	lsls	r1, r3, #19
 80037d0:	6922      	ldr	r2, [r4, #16]
 80037d2:	6022      	str	r2, [r4, #0]
 80037d4:	d504      	bpl.n	80037e0 <__sflush_r+0x7c>
 80037d6:	1c42      	adds	r2, r0, #1
 80037d8:	d101      	bne.n	80037de <__sflush_r+0x7a>
 80037da:	682b      	ldr	r3, [r5, #0]
 80037dc:	b903      	cbnz	r3, 80037e0 <__sflush_r+0x7c>
 80037de:	6560      	str	r0, [r4, #84]	; 0x54
 80037e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037e2:	602f      	str	r7, [r5, #0]
 80037e4:	2900      	cmp	r1, #0
 80037e6:	d0ca      	beq.n	800377e <__sflush_r+0x1a>
 80037e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037ec:	4299      	cmp	r1, r3
 80037ee:	d002      	beq.n	80037f6 <__sflush_r+0x92>
 80037f0:	4628      	mov	r0, r5
 80037f2:	f000 f9d5 	bl	8003ba0 <_free_r>
 80037f6:	2000      	movs	r0, #0
 80037f8:	6360      	str	r0, [r4, #52]	; 0x34
 80037fa:	e7c1      	b.n	8003780 <__sflush_r+0x1c>
 80037fc:	6a21      	ldr	r1, [r4, #32]
 80037fe:	2301      	movs	r3, #1
 8003800:	4628      	mov	r0, r5
 8003802:	47b0      	blx	r6
 8003804:	1c41      	adds	r1, r0, #1
 8003806:	d1c7      	bne.n	8003798 <__sflush_r+0x34>
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0c4      	beq.n	8003798 <__sflush_r+0x34>
 800380e:	2b1d      	cmp	r3, #29
 8003810:	d001      	beq.n	8003816 <__sflush_r+0xb2>
 8003812:	2b16      	cmp	r3, #22
 8003814:	d101      	bne.n	800381a <__sflush_r+0xb6>
 8003816:	602f      	str	r7, [r5, #0]
 8003818:	e7b1      	b.n	800377e <__sflush_r+0x1a>
 800381a:	89a3      	ldrh	r3, [r4, #12]
 800381c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003820:	81a3      	strh	r3, [r4, #12]
 8003822:	e7ad      	b.n	8003780 <__sflush_r+0x1c>
 8003824:	690f      	ldr	r7, [r1, #16]
 8003826:	2f00      	cmp	r7, #0
 8003828:	d0a9      	beq.n	800377e <__sflush_r+0x1a>
 800382a:	0793      	lsls	r3, r2, #30
 800382c:	680e      	ldr	r6, [r1, #0]
 800382e:	bf08      	it	eq
 8003830:	694b      	ldreq	r3, [r1, #20]
 8003832:	600f      	str	r7, [r1, #0]
 8003834:	bf18      	it	ne
 8003836:	2300      	movne	r3, #0
 8003838:	eba6 0807 	sub.w	r8, r6, r7
 800383c:	608b      	str	r3, [r1, #8]
 800383e:	f1b8 0f00 	cmp.w	r8, #0
 8003842:	dd9c      	ble.n	800377e <__sflush_r+0x1a>
 8003844:	6a21      	ldr	r1, [r4, #32]
 8003846:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003848:	4643      	mov	r3, r8
 800384a:	463a      	mov	r2, r7
 800384c:	4628      	mov	r0, r5
 800384e:	47b0      	blx	r6
 8003850:	2800      	cmp	r0, #0
 8003852:	dc06      	bgt.n	8003862 <__sflush_r+0xfe>
 8003854:	89a3      	ldrh	r3, [r4, #12]
 8003856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800385a:	81a3      	strh	r3, [r4, #12]
 800385c:	f04f 30ff 	mov.w	r0, #4294967295
 8003860:	e78e      	b.n	8003780 <__sflush_r+0x1c>
 8003862:	4407      	add	r7, r0
 8003864:	eba8 0800 	sub.w	r8, r8, r0
 8003868:	e7e9      	b.n	800383e <__sflush_r+0xda>
 800386a:	bf00      	nop
 800386c:	20400001 	.word	0x20400001

08003870 <_fflush_r>:
 8003870:	b538      	push	{r3, r4, r5, lr}
 8003872:	690b      	ldr	r3, [r1, #16]
 8003874:	4605      	mov	r5, r0
 8003876:	460c      	mov	r4, r1
 8003878:	b913      	cbnz	r3, 8003880 <_fflush_r+0x10>
 800387a:	2500      	movs	r5, #0
 800387c:	4628      	mov	r0, r5
 800387e:	bd38      	pop	{r3, r4, r5, pc}
 8003880:	b118      	cbz	r0, 800388a <_fflush_r+0x1a>
 8003882:	6983      	ldr	r3, [r0, #24]
 8003884:	b90b      	cbnz	r3, 800388a <_fflush_r+0x1a>
 8003886:	f000 f887 	bl	8003998 <__sinit>
 800388a:	4b14      	ldr	r3, [pc, #80]	; (80038dc <_fflush_r+0x6c>)
 800388c:	429c      	cmp	r4, r3
 800388e:	d11b      	bne.n	80038c8 <_fflush_r+0x58>
 8003890:	686c      	ldr	r4, [r5, #4]
 8003892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0ef      	beq.n	800387a <_fflush_r+0xa>
 800389a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800389c:	07d0      	lsls	r0, r2, #31
 800389e:	d404      	bmi.n	80038aa <_fflush_r+0x3a>
 80038a0:	0599      	lsls	r1, r3, #22
 80038a2:	d402      	bmi.n	80038aa <_fflush_r+0x3a>
 80038a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038a6:	f000 f915 	bl	8003ad4 <__retarget_lock_acquire_recursive>
 80038aa:	4628      	mov	r0, r5
 80038ac:	4621      	mov	r1, r4
 80038ae:	f7ff ff59 	bl	8003764 <__sflush_r>
 80038b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038b4:	07da      	lsls	r2, r3, #31
 80038b6:	4605      	mov	r5, r0
 80038b8:	d4e0      	bmi.n	800387c <_fflush_r+0xc>
 80038ba:	89a3      	ldrh	r3, [r4, #12]
 80038bc:	059b      	lsls	r3, r3, #22
 80038be:	d4dd      	bmi.n	800387c <_fflush_r+0xc>
 80038c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038c2:	f000 f908 	bl	8003ad6 <__retarget_lock_release_recursive>
 80038c6:	e7d9      	b.n	800387c <_fflush_r+0xc>
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <_fflush_r+0x70>)
 80038ca:	429c      	cmp	r4, r3
 80038cc:	d101      	bne.n	80038d2 <_fflush_r+0x62>
 80038ce:	68ac      	ldr	r4, [r5, #8]
 80038d0:	e7df      	b.n	8003892 <_fflush_r+0x22>
 80038d2:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <_fflush_r+0x74>)
 80038d4:	429c      	cmp	r4, r3
 80038d6:	bf08      	it	eq
 80038d8:	68ec      	ldreq	r4, [r5, #12]
 80038da:	e7da      	b.n	8003892 <_fflush_r+0x22>
 80038dc:	08003f14 	.word	0x08003f14
 80038e0:	08003f34 	.word	0x08003f34
 80038e4:	08003ef4 	.word	0x08003ef4

080038e8 <std>:
 80038e8:	2300      	movs	r3, #0
 80038ea:	b510      	push	{r4, lr}
 80038ec:	4604      	mov	r4, r0
 80038ee:	e9c0 3300 	strd	r3, r3, [r0]
 80038f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038f6:	6083      	str	r3, [r0, #8]
 80038f8:	8181      	strh	r1, [r0, #12]
 80038fa:	6643      	str	r3, [r0, #100]	; 0x64
 80038fc:	81c2      	strh	r2, [r0, #14]
 80038fe:	6183      	str	r3, [r0, #24]
 8003900:	4619      	mov	r1, r3
 8003902:	2208      	movs	r2, #8
 8003904:	305c      	adds	r0, #92	; 0x5c
 8003906:	f7ff fdef 	bl	80034e8 <memset>
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <std+0x38>)
 800390c:	6263      	str	r3, [r4, #36]	; 0x24
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <std+0x3c>)
 8003910:	62a3      	str	r3, [r4, #40]	; 0x28
 8003912:	4b05      	ldr	r3, [pc, #20]	; (8003928 <std+0x40>)
 8003914:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003916:	4b05      	ldr	r3, [pc, #20]	; (800392c <std+0x44>)
 8003918:	6224      	str	r4, [r4, #32]
 800391a:	6323      	str	r3, [r4, #48]	; 0x30
 800391c:	bd10      	pop	{r4, pc}
 800391e:	bf00      	nop
 8003920:	08003d15 	.word	0x08003d15
 8003924:	08003d37 	.word	0x08003d37
 8003928:	08003d6f 	.word	0x08003d6f
 800392c:	08003d93 	.word	0x08003d93

08003930 <_cleanup_r>:
 8003930:	4901      	ldr	r1, [pc, #4]	; (8003938 <_cleanup_r+0x8>)
 8003932:	f000 b8af 	b.w	8003a94 <_fwalk_reent>
 8003936:	bf00      	nop
 8003938:	08003871 	.word	0x08003871

0800393c <__sfmoreglue>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	1e4a      	subs	r2, r1, #1
 8003940:	2568      	movs	r5, #104	; 0x68
 8003942:	4355      	muls	r5, r2
 8003944:	460e      	mov	r6, r1
 8003946:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800394a:	f000 f979 	bl	8003c40 <_malloc_r>
 800394e:	4604      	mov	r4, r0
 8003950:	b140      	cbz	r0, 8003964 <__sfmoreglue+0x28>
 8003952:	2100      	movs	r1, #0
 8003954:	e9c0 1600 	strd	r1, r6, [r0]
 8003958:	300c      	adds	r0, #12
 800395a:	60a0      	str	r0, [r4, #8]
 800395c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003960:	f7ff fdc2 	bl	80034e8 <memset>
 8003964:	4620      	mov	r0, r4
 8003966:	bd70      	pop	{r4, r5, r6, pc}

08003968 <__sfp_lock_acquire>:
 8003968:	4801      	ldr	r0, [pc, #4]	; (8003970 <__sfp_lock_acquire+0x8>)
 800396a:	f000 b8b3 	b.w	8003ad4 <__retarget_lock_acquire_recursive>
 800396e:	bf00      	nop
 8003970:	2000015c 	.word	0x2000015c

08003974 <__sfp_lock_release>:
 8003974:	4801      	ldr	r0, [pc, #4]	; (800397c <__sfp_lock_release+0x8>)
 8003976:	f000 b8ae 	b.w	8003ad6 <__retarget_lock_release_recursive>
 800397a:	bf00      	nop
 800397c:	2000015c 	.word	0x2000015c

08003980 <__sinit_lock_acquire>:
 8003980:	4801      	ldr	r0, [pc, #4]	; (8003988 <__sinit_lock_acquire+0x8>)
 8003982:	f000 b8a7 	b.w	8003ad4 <__retarget_lock_acquire_recursive>
 8003986:	bf00      	nop
 8003988:	20000157 	.word	0x20000157

0800398c <__sinit_lock_release>:
 800398c:	4801      	ldr	r0, [pc, #4]	; (8003994 <__sinit_lock_release+0x8>)
 800398e:	f000 b8a2 	b.w	8003ad6 <__retarget_lock_release_recursive>
 8003992:	bf00      	nop
 8003994:	20000157 	.word	0x20000157

08003998 <__sinit>:
 8003998:	b510      	push	{r4, lr}
 800399a:	4604      	mov	r4, r0
 800399c:	f7ff fff0 	bl	8003980 <__sinit_lock_acquire>
 80039a0:	69a3      	ldr	r3, [r4, #24]
 80039a2:	b11b      	cbz	r3, 80039ac <__sinit+0x14>
 80039a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039a8:	f7ff bff0 	b.w	800398c <__sinit_lock_release>
 80039ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80039b0:	6523      	str	r3, [r4, #80]	; 0x50
 80039b2:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <__sinit+0x68>)
 80039b4:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <__sinit+0x6c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80039ba:	42a3      	cmp	r3, r4
 80039bc:	bf04      	itt	eq
 80039be:	2301      	moveq	r3, #1
 80039c0:	61a3      	streq	r3, [r4, #24]
 80039c2:	4620      	mov	r0, r4
 80039c4:	f000 f820 	bl	8003a08 <__sfp>
 80039c8:	6060      	str	r0, [r4, #4]
 80039ca:	4620      	mov	r0, r4
 80039cc:	f000 f81c 	bl	8003a08 <__sfp>
 80039d0:	60a0      	str	r0, [r4, #8]
 80039d2:	4620      	mov	r0, r4
 80039d4:	f000 f818 	bl	8003a08 <__sfp>
 80039d8:	2200      	movs	r2, #0
 80039da:	60e0      	str	r0, [r4, #12]
 80039dc:	2104      	movs	r1, #4
 80039de:	6860      	ldr	r0, [r4, #4]
 80039e0:	f7ff ff82 	bl	80038e8 <std>
 80039e4:	68a0      	ldr	r0, [r4, #8]
 80039e6:	2201      	movs	r2, #1
 80039e8:	2109      	movs	r1, #9
 80039ea:	f7ff ff7d 	bl	80038e8 <std>
 80039ee:	68e0      	ldr	r0, [r4, #12]
 80039f0:	2202      	movs	r2, #2
 80039f2:	2112      	movs	r1, #18
 80039f4:	f7ff ff78 	bl	80038e8 <std>
 80039f8:	2301      	movs	r3, #1
 80039fa:	61a3      	str	r3, [r4, #24]
 80039fc:	e7d2      	b.n	80039a4 <__sinit+0xc>
 80039fe:	bf00      	nop
 8003a00:	08003ef0 	.word	0x08003ef0
 8003a04:	08003931 	.word	0x08003931

08003a08 <__sfp>:
 8003a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0a:	4607      	mov	r7, r0
 8003a0c:	f7ff ffac 	bl	8003968 <__sfp_lock_acquire>
 8003a10:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <__sfp+0x84>)
 8003a12:	681e      	ldr	r6, [r3, #0]
 8003a14:	69b3      	ldr	r3, [r6, #24]
 8003a16:	b913      	cbnz	r3, 8003a1e <__sfp+0x16>
 8003a18:	4630      	mov	r0, r6
 8003a1a:	f7ff ffbd 	bl	8003998 <__sinit>
 8003a1e:	3648      	adds	r6, #72	; 0x48
 8003a20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	d503      	bpl.n	8003a30 <__sfp+0x28>
 8003a28:	6833      	ldr	r3, [r6, #0]
 8003a2a:	b30b      	cbz	r3, 8003a70 <__sfp+0x68>
 8003a2c:	6836      	ldr	r6, [r6, #0]
 8003a2e:	e7f7      	b.n	8003a20 <__sfp+0x18>
 8003a30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a34:	b9d5      	cbnz	r5, 8003a6c <__sfp+0x64>
 8003a36:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <__sfp+0x88>)
 8003a38:	60e3      	str	r3, [r4, #12]
 8003a3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a3e:	6665      	str	r5, [r4, #100]	; 0x64
 8003a40:	f000 f847 	bl	8003ad2 <__retarget_lock_init_recursive>
 8003a44:	f7ff ff96 	bl	8003974 <__sfp_lock_release>
 8003a48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a50:	6025      	str	r5, [r4, #0]
 8003a52:	61a5      	str	r5, [r4, #24]
 8003a54:	2208      	movs	r2, #8
 8003a56:	4629      	mov	r1, r5
 8003a58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a5c:	f7ff fd44 	bl	80034e8 <memset>
 8003a60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a68:	4620      	mov	r0, r4
 8003a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a6c:	3468      	adds	r4, #104	; 0x68
 8003a6e:	e7d9      	b.n	8003a24 <__sfp+0x1c>
 8003a70:	2104      	movs	r1, #4
 8003a72:	4638      	mov	r0, r7
 8003a74:	f7ff ff62 	bl	800393c <__sfmoreglue>
 8003a78:	4604      	mov	r4, r0
 8003a7a:	6030      	str	r0, [r6, #0]
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d1d5      	bne.n	8003a2c <__sfp+0x24>
 8003a80:	f7ff ff78 	bl	8003974 <__sfp_lock_release>
 8003a84:	230c      	movs	r3, #12
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	e7ee      	b.n	8003a68 <__sfp+0x60>
 8003a8a:	bf00      	nop
 8003a8c:	08003ef0 	.word	0x08003ef0
 8003a90:	ffff0001 	.word	0xffff0001

08003a94 <_fwalk_reent>:
 8003a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a98:	4606      	mov	r6, r0
 8003a9a:	4688      	mov	r8, r1
 8003a9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003aa0:	2700      	movs	r7, #0
 8003aa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003aa6:	f1b9 0901 	subs.w	r9, r9, #1
 8003aaa:	d505      	bpl.n	8003ab8 <_fwalk_reent+0x24>
 8003aac:	6824      	ldr	r4, [r4, #0]
 8003aae:	2c00      	cmp	r4, #0
 8003ab0:	d1f7      	bne.n	8003aa2 <_fwalk_reent+0xe>
 8003ab2:	4638      	mov	r0, r7
 8003ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ab8:	89ab      	ldrh	r3, [r5, #12]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d907      	bls.n	8003ace <_fwalk_reent+0x3a>
 8003abe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	d003      	beq.n	8003ace <_fwalk_reent+0x3a>
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	4630      	mov	r0, r6
 8003aca:	47c0      	blx	r8
 8003acc:	4307      	orrs	r7, r0
 8003ace:	3568      	adds	r5, #104	; 0x68
 8003ad0:	e7e9      	b.n	8003aa6 <_fwalk_reent+0x12>

08003ad2 <__retarget_lock_init_recursive>:
 8003ad2:	4770      	bx	lr

08003ad4 <__retarget_lock_acquire_recursive>:
 8003ad4:	4770      	bx	lr

08003ad6 <__retarget_lock_release_recursive>:
 8003ad6:	4770      	bx	lr

08003ad8 <__swhatbuf_r>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	460e      	mov	r6, r1
 8003adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ae0:	2900      	cmp	r1, #0
 8003ae2:	b096      	sub	sp, #88	; 0x58
 8003ae4:	4614      	mov	r4, r2
 8003ae6:	461d      	mov	r5, r3
 8003ae8:	da07      	bge.n	8003afa <__swhatbuf_r+0x22>
 8003aea:	2300      	movs	r3, #0
 8003aec:	602b      	str	r3, [r5, #0]
 8003aee:	89b3      	ldrh	r3, [r6, #12]
 8003af0:	061a      	lsls	r2, r3, #24
 8003af2:	d410      	bmi.n	8003b16 <__swhatbuf_r+0x3e>
 8003af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af8:	e00e      	b.n	8003b18 <__swhatbuf_r+0x40>
 8003afa:	466a      	mov	r2, sp
 8003afc:	f000 f970 	bl	8003de0 <_fstat_r>
 8003b00:	2800      	cmp	r0, #0
 8003b02:	dbf2      	blt.n	8003aea <__swhatbuf_r+0x12>
 8003b04:	9a01      	ldr	r2, [sp, #4]
 8003b06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b0e:	425a      	negs	r2, r3
 8003b10:	415a      	adcs	r2, r3
 8003b12:	602a      	str	r2, [r5, #0]
 8003b14:	e7ee      	b.n	8003af4 <__swhatbuf_r+0x1c>
 8003b16:	2340      	movs	r3, #64	; 0x40
 8003b18:	2000      	movs	r0, #0
 8003b1a:	6023      	str	r3, [r4, #0]
 8003b1c:	b016      	add	sp, #88	; 0x58
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}

08003b20 <__smakebuf_r>:
 8003b20:	898b      	ldrh	r3, [r1, #12]
 8003b22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b24:	079d      	lsls	r5, r3, #30
 8003b26:	4606      	mov	r6, r0
 8003b28:	460c      	mov	r4, r1
 8003b2a:	d507      	bpl.n	8003b3c <__smakebuf_r+0x1c>
 8003b2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b30:	6023      	str	r3, [r4, #0]
 8003b32:	6123      	str	r3, [r4, #16]
 8003b34:	2301      	movs	r3, #1
 8003b36:	6163      	str	r3, [r4, #20]
 8003b38:	b002      	add	sp, #8
 8003b3a:	bd70      	pop	{r4, r5, r6, pc}
 8003b3c:	ab01      	add	r3, sp, #4
 8003b3e:	466a      	mov	r2, sp
 8003b40:	f7ff ffca 	bl	8003ad8 <__swhatbuf_r>
 8003b44:	9900      	ldr	r1, [sp, #0]
 8003b46:	4605      	mov	r5, r0
 8003b48:	4630      	mov	r0, r6
 8003b4a:	f000 f879 	bl	8003c40 <_malloc_r>
 8003b4e:	b948      	cbnz	r0, 8003b64 <__smakebuf_r+0x44>
 8003b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b54:	059a      	lsls	r2, r3, #22
 8003b56:	d4ef      	bmi.n	8003b38 <__smakebuf_r+0x18>
 8003b58:	f023 0303 	bic.w	r3, r3, #3
 8003b5c:	f043 0302 	orr.w	r3, r3, #2
 8003b60:	81a3      	strh	r3, [r4, #12]
 8003b62:	e7e3      	b.n	8003b2c <__smakebuf_r+0xc>
 8003b64:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <__smakebuf_r+0x7c>)
 8003b66:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b68:	89a3      	ldrh	r3, [r4, #12]
 8003b6a:	6020      	str	r0, [r4, #0]
 8003b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b70:	81a3      	strh	r3, [r4, #12]
 8003b72:	9b00      	ldr	r3, [sp, #0]
 8003b74:	6163      	str	r3, [r4, #20]
 8003b76:	9b01      	ldr	r3, [sp, #4]
 8003b78:	6120      	str	r0, [r4, #16]
 8003b7a:	b15b      	cbz	r3, 8003b94 <__smakebuf_r+0x74>
 8003b7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b80:	4630      	mov	r0, r6
 8003b82:	f000 f93f 	bl	8003e04 <_isatty_r>
 8003b86:	b128      	cbz	r0, 8003b94 <__smakebuf_r+0x74>
 8003b88:	89a3      	ldrh	r3, [r4, #12]
 8003b8a:	f023 0303 	bic.w	r3, r3, #3
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	81a3      	strh	r3, [r4, #12]
 8003b94:	89a0      	ldrh	r0, [r4, #12]
 8003b96:	4305      	orrs	r5, r0
 8003b98:	81a5      	strh	r5, [r4, #12]
 8003b9a:	e7cd      	b.n	8003b38 <__smakebuf_r+0x18>
 8003b9c:	08003931 	.word	0x08003931

08003ba0 <_free_r>:
 8003ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ba2:	2900      	cmp	r1, #0
 8003ba4:	d048      	beq.n	8003c38 <_free_r+0x98>
 8003ba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003baa:	9001      	str	r0, [sp, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f1a1 0404 	sub.w	r4, r1, #4
 8003bb2:	bfb8      	it	lt
 8003bb4:	18e4      	addlt	r4, r4, r3
 8003bb6:	f000 f947 	bl	8003e48 <__malloc_lock>
 8003bba:	4a20      	ldr	r2, [pc, #128]	; (8003c3c <_free_r+0x9c>)
 8003bbc:	9801      	ldr	r0, [sp, #4]
 8003bbe:	6813      	ldr	r3, [r2, #0]
 8003bc0:	4615      	mov	r5, r2
 8003bc2:	b933      	cbnz	r3, 8003bd2 <_free_r+0x32>
 8003bc4:	6063      	str	r3, [r4, #4]
 8003bc6:	6014      	str	r4, [r2, #0]
 8003bc8:	b003      	add	sp, #12
 8003bca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bce:	f000 b941 	b.w	8003e54 <__malloc_unlock>
 8003bd2:	42a3      	cmp	r3, r4
 8003bd4:	d90b      	bls.n	8003bee <_free_r+0x4e>
 8003bd6:	6821      	ldr	r1, [r4, #0]
 8003bd8:	1862      	adds	r2, r4, r1
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	bf04      	itt	eq
 8003bde:	681a      	ldreq	r2, [r3, #0]
 8003be0:	685b      	ldreq	r3, [r3, #4]
 8003be2:	6063      	str	r3, [r4, #4]
 8003be4:	bf04      	itt	eq
 8003be6:	1852      	addeq	r2, r2, r1
 8003be8:	6022      	streq	r2, [r4, #0]
 8003bea:	602c      	str	r4, [r5, #0]
 8003bec:	e7ec      	b.n	8003bc8 <_free_r+0x28>
 8003bee:	461a      	mov	r2, r3
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	b10b      	cbz	r3, 8003bf8 <_free_r+0x58>
 8003bf4:	42a3      	cmp	r3, r4
 8003bf6:	d9fa      	bls.n	8003bee <_free_r+0x4e>
 8003bf8:	6811      	ldr	r1, [r2, #0]
 8003bfa:	1855      	adds	r5, r2, r1
 8003bfc:	42a5      	cmp	r5, r4
 8003bfe:	d10b      	bne.n	8003c18 <_free_r+0x78>
 8003c00:	6824      	ldr	r4, [r4, #0]
 8003c02:	4421      	add	r1, r4
 8003c04:	1854      	adds	r4, r2, r1
 8003c06:	42a3      	cmp	r3, r4
 8003c08:	6011      	str	r1, [r2, #0]
 8003c0a:	d1dd      	bne.n	8003bc8 <_free_r+0x28>
 8003c0c:	681c      	ldr	r4, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	6053      	str	r3, [r2, #4]
 8003c12:	4421      	add	r1, r4
 8003c14:	6011      	str	r1, [r2, #0]
 8003c16:	e7d7      	b.n	8003bc8 <_free_r+0x28>
 8003c18:	d902      	bls.n	8003c20 <_free_r+0x80>
 8003c1a:	230c      	movs	r3, #12
 8003c1c:	6003      	str	r3, [r0, #0]
 8003c1e:	e7d3      	b.n	8003bc8 <_free_r+0x28>
 8003c20:	6825      	ldr	r5, [r4, #0]
 8003c22:	1961      	adds	r1, r4, r5
 8003c24:	428b      	cmp	r3, r1
 8003c26:	bf04      	itt	eq
 8003c28:	6819      	ldreq	r1, [r3, #0]
 8003c2a:	685b      	ldreq	r3, [r3, #4]
 8003c2c:	6063      	str	r3, [r4, #4]
 8003c2e:	bf04      	itt	eq
 8003c30:	1949      	addeq	r1, r1, r5
 8003c32:	6021      	streq	r1, [r4, #0]
 8003c34:	6054      	str	r4, [r2, #4]
 8003c36:	e7c7      	b.n	8003bc8 <_free_r+0x28>
 8003c38:	b003      	add	sp, #12
 8003c3a:	bd30      	pop	{r4, r5, pc}
 8003c3c:	20000090 	.word	0x20000090

08003c40 <_malloc_r>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	1ccd      	adds	r5, r1, #3
 8003c44:	f025 0503 	bic.w	r5, r5, #3
 8003c48:	3508      	adds	r5, #8
 8003c4a:	2d0c      	cmp	r5, #12
 8003c4c:	bf38      	it	cc
 8003c4e:	250c      	movcc	r5, #12
 8003c50:	2d00      	cmp	r5, #0
 8003c52:	4606      	mov	r6, r0
 8003c54:	db01      	blt.n	8003c5a <_malloc_r+0x1a>
 8003c56:	42a9      	cmp	r1, r5
 8003c58:	d903      	bls.n	8003c62 <_malloc_r+0x22>
 8003c5a:	230c      	movs	r3, #12
 8003c5c:	6033      	str	r3, [r6, #0]
 8003c5e:	2000      	movs	r0, #0
 8003c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c62:	f000 f8f1 	bl	8003e48 <__malloc_lock>
 8003c66:	4921      	ldr	r1, [pc, #132]	; (8003cec <_malloc_r+0xac>)
 8003c68:	680a      	ldr	r2, [r1, #0]
 8003c6a:	4614      	mov	r4, r2
 8003c6c:	b99c      	cbnz	r4, 8003c96 <_malloc_r+0x56>
 8003c6e:	4f20      	ldr	r7, [pc, #128]	; (8003cf0 <_malloc_r+0xb0>)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	b923      	cbnz	r3, 8003c7e <_malloc_r+0x3e>
 8003c74:	4621      	mov	r1, r4
 8003c76:	4630      	mov	r0, r6
 8003c78:	f000 f83c 	bl	8003cf4 <_sbrk_r>
 8003c7c:	6038      	str	r0, [r7, #0]
 8003c7e:	4629      	mov	r1, r5
 8003c80:	4630      	mov	r0, r6
 8003c82:	f000 f837 	bl	8003cf4 <_sbrk_r>
 8003c86:	1c43      	adds	r3, r0, #1
 8003c88:	d123      	bne.n	8003cd2 <_malloc_r+0x92>
 8003c8a:	230c      	movs	r3, #12
 8003c8c:	6033      	str	r3, [r6, #0]
 8003c8e:	4630      	mov	r0, r6
 8003c90:	f000 f8e0 	bl	8003e54 <__malloc_unlock>
 8003c94:	e7e3      	b.n	8003c5e <_malloc_r+0x1e>
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	1b5b      	subs	r3, r3, r5
 8003c9a:	d417      	bmi.n	8003ccc <_malloc_r+0x8c>
 8003c9c:	2b0b      	cmp	r3, #11
 8003c9e:	d903      	bls.n	8003ca8 <_malloc_r+0x68>
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	441c      	add	r4, r3
 8003ca4:	6025      	str	r5, [r4, #0]
 8003ca6:	e004      	b.n	8003cb2 <_malloc_r+0x72>
 8003ca8:	6863      	ldr	r3, [r4, #4]
 8003caa:	42a2      	cmp	r2, r4
 8003cac:	bf0c      	ite	eq
 8003cae:	600b      	streq	r3, [r1, #0]
 8003cb0:	6053      	strne	r3, [r2, #4]
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	f000 f8ce 	bl	8003e54 <__malloc_unlock>
 8003cb8:	f104 000b 	add.w	r0, r4, #11
 8003cbc:	1d23      	adds	r3, r4, #4
 8003cbe:	f020 0007 	bic.w	r0, r0, #7
 8003cc2:	1ac2      	subs	r2, r0, r3
 8003cc4:	d0cc      	beq.n	8003c60 <_malloc_r+0x20>
 8003cc6:	1a1b      	subs	r3, r3, r0
 8003cc8:	50a3      	str	r3, [r4, r2]
 8003cca:	e7c9      	b.n	8003c60 <_malloc_r+0x20>
 8003ccc:	4622      	mov	r2, r4
 8003cce:	6864      	ldr	r4, [r4, #4]
 8003cd0:	e7cc      	b.n	8003c6c <_malloc_r+0x2c>
 8003cd2:	1cc4      	adds	r4, r0, #3
 8003cd4:	f024 0403 	bic.w	r4, r4, #3
 8003cd8:	42a0      	cmp	r0, r4
 8003cda:	d0e3      	beq.n	8003ca4 <_malloc_r+0x64>
 8003cdc:	1a21      	subs	r1, r4, r0
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f000 f808 	bl	8003cf4 <_sbrk_r>
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d1dd      	bne.n	8003ca4 <_malloc_r+0x64>
 8003ce8:	e7cf      	b.n	8003c8a <_malloc_r+0x4a>
 8003cea:	bf00      	nop
 8003cec:	20000090 	.word	0x20000090
 8003cf0:	20000094 	.word	0x20000094

08003cf4 <_sbrk_r>:
 8003cf4:	b538      	push	{r3, r4, r5, lr}
 8003cf6:	4d06      	ldr	r5, [pc, #24]	; (8003d10 <_sbrk_r+0x1c>)
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	4608      	mov	r0, r1
 8003cfe:	602b      	str	r3, [r5, #0]
 8003d00:	f7fc fe14 	bl	800092c <_sbrk>
 8003d04:	1c43      	adds	r3, r0, #1
 8003d06:	d102      	bne.n	8003d0e <_sbrk_r+0x1a>
 8003d08:	682b      	ldr	r3, [r5, #0]
 8003d0a:	b103      	cbz	r3, 8003d0e <_sbrk_r+0x1a>
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	bd38      	pop	{r3, r4, r5, pc}
 8003d10:	20000160 	.word	0x20000160

08003d14 <__sread>:
 8003d14:	b510      	push	{r4, lr}
 8003d16:	460c      	mov	r4, r1
 8003d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d1c:	f000 f8a0 	bl	8003e60 <_read_r>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	bfab      	itete	ge
 8003d24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d26:	89a3      	ldrhlt	r3, [r4, #12]
 8003d28:	181b      	addge	r3, r3, r0
 8003d2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d2e:	bfac      	ite	ge
 8003d30:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d32:	81a3      	strhlt	r3, [r4, #12]
 8003d34:	bd10      	pop	{r4, pc}

08003d36 <__swrite>:
 8003d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d3a:	461f      	mov	r7, r3
 8003d3c:	898b      	ldrh	r3, [r1, #12]
 8003d3e:	05db      	lsls	r3, r3, #23
 8003d40:	4605      	mov	r5, r0
 8003d42:	460c      	mov	r4, r1
 8003d44:	4616      	mov	r6, r2
 8003d46:	d505      	bpl.n	8003d54 <__swrite+0x1e>
 8003d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f000 f868 	bl	8003e24 <_lseek_r>
 8003d54:	89a3      	ldrh	r3, [r4, #12]
 8003d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d5e:	81a3      	strh	r3, [r4, #12]
 8003d60:	4632      	mov	r2, r6
 8003d62:	463b      	mov	r3, r7
 8003d64:	4628      	mov	r0, r5
 8003d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6a:	f000 b817 	b.w	8003d9c <_write_r>

08003d6e <__sseek>:
 8003d6e:	b510      	push	{r4, lr}
 8003d70:	460c      	mov	r4, r1
 8003d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d76:	f000 f855 	bl	8003e24 <_lseek_r>
 8003d7a:	1c43      	adds	r3, r0, #1
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	bf15      	itete	ne
 8003d80:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d8a:	81a3      	strheq	r3, [r4, #12]
 8003d8c:	bf18      	it	ne
 8003d8e:	81a3      	strhne	r3, [r4, #12]
 8003d90:	bd10      	pop	{r4, pc}

08003d92 <__sclose>:
 8003d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d96:	f000 b813 	b.w	8003dc0 <_close_r>
	...

08003d9c <_write_r>:
 8003d9c:	b538      	push	{r3, r4, r5, lr}
 8003d9e:	4d07      	ldr	r5, [pc, #28]	; (8003dbc <_write_r+0x20>)
 8003da0:	4604      	mov	r4, r0
 8003da2:	4608      	mov	r0, r1
 8003da4:	4611      	mov	r1, r2
 8003da6:	2200      	movs	r2, #0
 8003da8:	602a      	str	r2, [r5, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	f7fc fd6d 	bl	800088a <_write>
 8003db0:	1c43      	adds	r3, r0, #1
 8003db2:	d102      	bne.n	8003dba <_write_r+0x1e>
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	b103      	cbz	r3, 8003dba <_write_r+0x1e>
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	bd38      	pop	{r3, r4, r5, pc}
 8003dbc:	20000160 	.word	0x20000160

08003dc0 <_close_r>:
 8003dc0:	b538      	push	{r3, r4, r5, lr}
 8003dc2:	4d06      	ldr	r5, [pc, #24]	; (8003ddc <_close_r+0x1c>)
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	4604      	mov	r4, r0
 8003dc8:	4608      	mov	r0, r1
 8003dca:	602b      	str	r3, [r5, #0]
 8003dcc:	f7fc fd79 	bl	80008c2 <_close>
 8003dd0:	1c43      	adds	r3, r0, #1
 8003dd2:	d102      	bne.n	8003dda <_close_r+0x1a>
 8003dd4:	682b      	ldr	r3, [r5, #0]
 8003dd6:	b103      	cbz	r3, 8003dda <_close_r+0x1a>
 8003dd8:	6023      	str	r3, [r4, #0]
 8003dda:	bd38      	pop	{r3, r4, r5, pc}
 8003ddc:	20000160 	.word	0x20000160

08003de0 <_fstat_r>:
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	4d07      	ldr	r5, [pc, #28]	; (8003e00 <_fstat_r+0x20>)
 8003de4:	2300      	movs	r3, #0
 8003de6:	4604      	mov	r4, r0
 8003de8:	4608      	mov	r0, r1
 8003dea:	4611      	mov	r1, r2
 8003dec:	602b      	str	r3, [r5, #0]
 8003dee:	f7fc fd74 	bl	80008da <_fstat>
 8003df2:	1c43      	adds	r3, r0, #1
 8003df4:	d102      	bne.n	8003dfc <_fstat_r+0x1c>
 8003df6:	682b      	ldr	r3, [r5, #0]
 8003df8:	b103      	cbz	r3, 8003dfc <_fstat_r+0x1c>
 8003dfa:	6023      	str	r3, [r4, #0]
 8003dfc:	bd38      	pop	{r3, r4, r5, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000160 	.word	0x20000160

08003e04 <_isatty_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4d06      	ldr	r5, [pc, #24]	; (8003e20 <_isatty_r+0x1c>)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	f7fc fd73 	bl	80008fa <_isatty>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d102      	bne.n	8003e1e <_isatty_r+0x1a>
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	b103      	cbz	r3, 8003e1e <_isatty_r+0x1a>
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	20000160 	.word	0x20000160

08003e24 <_lseek_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4d07      	ldr	r5, [pc, #28]	; (8003e44 <_lseek_r+0x20>)
 8003e28:	4604      	mov	r4, r0
 8003e2a:	4608      	mov	r0, r1
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	2200      	movs	r2, #0
 8003e30:	602a      	str	r2, [r5, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f7fc fd6c 	bl	8000910 <_lseek>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d102      	bne.n	8003e42 <_lseek_r+0x1e>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	b103      	cbz	r3, 8003e42 <_lseek_r+0x1e>
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
 8003e44:	20000160 	.word	0x20000160

08003e48 <__malloc_lock>:
 8003e48:	4801      	ldr	r0, [pc, #4]	; (8003e50 <__malloc_lock+0x8>)
 8003e4a:	f7ff be43 	b.w	8003ad4 <__retarget_lock_acquire_recursive>
 8003e4e:	bf00      	nop
 8003e50:	20000158 	.word	0x20000158

08003e54 <__malloc_unlock>:
 8003e54:	4801      	ldr	r0, [pc, #4]	; (8003e5c <__malloc_unlock+0x8>)
 8003e56:	f7ff be3e 	b.w	8003ad6 <__retarget_lock_release_recursive>
 8003e5a:	bf00      	nop
 8003e5c:	20000158 	.word	0x20000158

08003e60 <_read_r>:
 8003e60:	b538      	push	{r3, r4, r5, lr}
 8003e62:	4d07      	ldr	r5, [pc, #28]	; (8003e80 <_read_r+0x20>)
 8003e64:	4604      	mov	r4, r0
 8003e66:	4608      	mov	r0, r1
 8003e68:	4611      	mov	r1, r2
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	602a      	str	r2, [r5, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f7fc fcee 	bl	8000850 <_read>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d102      	bne.n	8003e7e <_read_r+0x1e>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	b103      	cbz	r3, 8003e7e <_read_r+0x1e>
 8003e7c:	6023      	str	r3, [r4, #0]
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	20000160 	.word	0x20000160

08003e84 <_init>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	bf00      	nop
 8003e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8a:	bc08      	pop	{r3}
 8003e8c:	469e      	mov	lr, r3
 8003e8e:	4770      	bx	lr

08003e90 <_fini>:
 8003e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e92:	bf00      	nop
 8003e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e96:	bc08      	pop	{r3}
 8003e98:	469e      	mov	lr, r3
 8003e9a:	4770      	bx	lr
