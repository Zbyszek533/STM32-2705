
Test_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08004bd0  08004bd0  00014bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d40  08004d40  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d40  08004d40  00014d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d48  08004d48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d48  08004d48  00014d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d4c  08004d4c  00014d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000070  08004dc0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08004dc0  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012dba  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000282e  00000000  00000000  00032e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00035688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  00036240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ce1  00000000  00000000  00036cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd5d  00000000  00000000  0005f9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1d7e  00000000  00000000  0006f70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016148c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d4  00000000  00000000  001614e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004bb8 	.word	0x08004bb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004bb8 	.word	0x08004bb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	4b2f      	ldr	r3, [pc, #188]	; (800063c <MX_GPIO_Init+0xd4>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a2e      	ldr	r2, [pc, #184]	; (800063c <MX_GPIO_Init+0xd4>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b2c      	ldr	r3, [pc, #176]	; (800063c <MX_GPIO_Init+0xd4>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0304 	and.w	r3, r3, #4
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b29      	ldr	r3, [pc, #164]	; (800063c <MX_GPIO_Init+0xd4>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a28      	ldr	r2, [pc, #160]	; (800063c <MX_GPIO_Init+0xd4>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b26      	ldr	r3, [pc, #152]	; (800063c <MX_GPIO_Init+0xd4>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	4b23      	ldr	r3, [pc, #140]	; (800063c <MX_GPIO_Init+0xd4>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a22      	ldr	r2, [pc, #136]	; (800063c <MX_GPIO_Init+0xd4>)
 80005b4:	f043 0302 	orr.w	r3, r3, #2
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <MX_GPIO_Init+0xd4>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2120      	movs	r1, #32
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ce:	f000 feff 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED6_Pin|LED7_Pin|LED8_Pin|LED9_Pin
 80005d2:	2200      	movs	r2, #0
 80005d4:	f647 71e0 	movw	r1, #32736	; 0x7fe0
 80005d8:	4819      	ldr	r0, [pc, #100]	; (8000640 <MX_GPIO_Init+0xd8>)
 80005da:	f000 fef9 	bl	80013d0 <HAL_GPIO_WritePin>
                          |LED10_Pin|LED1_Pin|LED2_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Btn_Pin;
 80005de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Btn_GPIO_Port, &GPIO_InitStruct);
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	4619      	mov	r1, r3
 80005f2:	4814      	ldr	r0, [pc, #80]	; (8000644 <MX_GPIO_Init+0xdc>)
 80005f4:	f000 fd2a 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005f8:	2320      	movs	r3, #32
 80005fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	4619      	mov	r1, r3
 800060e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000612:	f000 fd1b 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LED6_Pin|LED7_Pin|LED8_Pin|LED9_Pin
 8000616:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 800061a:	60fb      	str	r3, [r7, #12]
                          |LED10_Pin|LED1_Pin|LED2_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061c:	2301      	movs	r3, #1
 800061e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	4619      	mov	r1, r3
 800062e:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_GPIO_Init+0xd8>)
 8000630:	f000 fd0c 	bl	800104c <HAL_GPIO_Init>

}
 8000634:	bf00      	nop
 8000636:	3720      	adds	r7, #32
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000
 8000640:	48000400 	.word	0x48000400
 8000644:	48000800 	.word	0x48000800

08000648 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_IWDG_Init+0x34>)
 800064e:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <MX_IWDG_Init+0x38>)
 8000650:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_IWDG_Init+0x34>)
 8000654:	2203      	movs	r2, #3
 8000656:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <MX_IWDG_Init+0x34>)
 800065a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800065e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_IWDG_Init+0x34>)
 8000662:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000666:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_IWDG_Init+0x34>)
 800066a:	f000 fee3 	bl	8001434 <HAL_IWDG_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000674:	f000 f93a 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000098 	.word	0x20000098
 8000680:	40003000 	.word	0x40003000

08000684 <led_set>:
};



void led_set(int led, bool turn_on)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	70fb      	strb	r3, [r7, #3]
	GPIO_PinState state;

	if(turn_on)
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d002      	beq.n	800069c <led_set+0x18>
	{
		state = GPIO_PIN_SET;
 8000696:	2301      	movs	r3, #1
 8000698:	73fb      	strb	r3, [r7, #15]
 800069a:	e001      	b.n	80006a0 <led_set+0x1c>
	}else{
		state = GPIO_PIN_RESET;
 800069c:	2300      	movs	r3, #0
 800069e:	73fb      	strb	r3, [r7, #15]
	}

	if(led >= 0 && led < 10)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db0f      	blt.n	80006c6 <led_set+0x42>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b09      	cmp	r3, #9
 80006aa:	dc0c      	bgt.n	80006c6 <led_set+0x42>
	{
		HAL_GPIO_WritePin(LED[led].port, LED[led].pin, state);
 80006ac:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <led_set+0x4c>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006b4:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <led_set+0x4c>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	4413      	add	r3, r2
 80006bc:	889b      	ldrh	r3, [r3, #4]
 80006be:	7bfa      	ldrb	r2, [r7, #15]
 80006c0:	4619      	mov	r1, r3
 80006c2:	f000 fe85 	bl	80013d0 <HAL_GPIO_WritePin>
		{
	//		printf("Zapalona dioda to: %d \n", LED[led].pin);
		}

	}
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	08004c10 	.word	0x08004c10

080006d4 <is_button_pressed>:


bool is_button_pressed(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(Btn_GPIO_Port, Btn_Pin) == GPIO_PIN_RESET)
 80006d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <is_button_pressed+0x20>)
 80006de:	f000 fe5f 	bl	80013a0 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d101      	bne.n	80006ec <is_button_pressed+0x18>
	{
		return true;
 80006e8:	2301      	movs	r3, #1
 80006ea:	e000      	b.n	80006ee <is_button_pressed+0x1a>
	}else{
		return false;
 80006ec:	2300      	movs	r3, #0
	}
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	48000800 	.word	0x48000800

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b5b0      	push	{r4, r5, r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fe:	f000 fb26 	bl	8000d4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000702:	f000 f89b 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000706:	f7ff ff2f 	bl	8000568 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800070a:	f000 fa6b 	bl	8000be4 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800070e:	f000 f90b 	bl	8000928 <MX_RTC_Init>
  MX_IWDG_Init();
 8000712:	f7ff ff99 	bl	8000648 <MX_IWDG_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint dioda = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	637b      	str	r3, [r7, #52]	; 0x34
  led_set(dioda, true);
 800071a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800071c:	2101      	movs	r1, #1
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ffb0 	bl	8000684 <led_set>
  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;
  RTC_DateTypeDef today;

  today.Year = 22;
 8000724:	2316      	movs	r3, #22
 8000726:	75fb      	strb	r3, [r7, #23]
  today.Month = 5;
 8000728:	2305      	movs	r3, #5
 800072a:	757b      	strb	r3, [r7, #21]
  today.Date = 22;
 800072c:	2316      	movs	r3, #22
 800072e:	75bb      	strb	r3, [r7, #22]

HAL_RTC_SetDate(&hrtc, &today, RTC_FORMAT_BIN);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	2200      	movs	r2, #0
 8000736:	4619      	mov	r1, r3
 8000738:	483c      	ldr	r0, [pc, #240]	; (800082c <main+0x134>)
 800073a:	f002 fb7d 	bl	8002e38 <HAL_RTC_SetDate>

int i;

for (i = 0; i < 10; ++i)
 800073e:	2300      	movs	r3, #0
 8000740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000742:	e00a      	b.n	800075a <main+0x62>
{
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000744:	2120      	movs	r1, #32
 8000746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074a:	f000 fe59 	bl	8001400 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800074e:	2064      	movs	r0, #100	; 0x64
 8000750:	f000 fb72 	bl	8000e38 <HAL_Delay>
for (i = 0; i < 10; ++i)
 8000754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000756:	3301      	adds	r3, #1
 8000758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800075a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800075c:	2b09      	cmp	r3, #9
 800075e:	ddf1      	ble.n	8000744 <main+0x4c>
}

uint32_t czas_prev = HAL_GetTick();
 8000760:	f000 fb5e 	bl	8000e20 <HAL_GetTick>
 8000764:	63b8      	str	r0, [r7, #56]	; 0x38
uint32_t czas;

  while (1)
  {
	  czas = HAL_GetTick();
 8000766:	f000 fb5b 	bl	8000e20 <HAL_GetTick>
 800076a:	6338      	str	r0, [r7, #48]	; 0x30
	  if(is_button_pressed())
 800076c:	f7ff ffb2 	bl	80006d4 <is_button_pressed>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d000      	beq.n	8000778 <main+0x80>
	 	  {
		  	  while(1)
 8000776:	e7fe      	b.n	8000776 <main+0x7e>
		  	  {

		  	  }
	 	  }

	  if(czas >=  czas_prev+1000)
 8000778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800077a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800077e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000780:	429a      	cmp	r2, r3
 8000782:	d309      	bcc.n	8000798 <main+0xa0>
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000784:	2120      	movs	r1, #32
 8000786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078a:	f000 fe39 	bl	8001400 <HAL_GPIO_TogglePin>
		  czas_prev = czas;
 800078e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000790:	63bb      	str	r3, [r7, #56]	; 0x38

		  HAL_IWDG_Init(&hiwdg);
 8000792:	4827      	ldr	r0, [pc, #156]	; (8000830 <main+0x138>)
 8000794:	f000 fe4e 	bl	8001434 <HAL_IWDG_Init>
	  }else{
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	  }
 */

	  if(is_button_pressed())
 8000798:	f7ff ff9c 	bl	80006d4 <is_button_pressed>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d01f      	beq.n	80007e2 <main+0xea>
	  {

		 RTC_TimeTypeDef new_time = {0};
 80007a2:	463b      	mov	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
		 while(is_button_pressed()){}
 80007b0:	bf00      	nop
 80007b2:	f7ff ff8f 	bl	80006d4 <is_button_pressed>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1fa      	bne.n	80007b2 <main+0xba>
		 printf("Zmiana   \n");
 80007bc:	481d      	ldr	r0, [pc, #116]	; (8000834 <main+0x13c>)
 80007be:	f003 fab5 	bl	8003d2c <puts>
		 new_time.Hours = 7;
 80007c2:	2307      	movs	r3, #7
 80007c4:	703b      	strb	r3, [r7, #0]
		 new_time.Minutes = 32;
 80007c6:	2320      	movs	r3, #32
 80007c8:	707b      	strb	r3, [r7, #1]
		 new_time.Seconds = 12;
 80007ca:	230c      	movs	r3, #12
 80007cc:	70bb      	strb	r3, [r7, #2]
		 HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	4619      	mov	r1, r3
 80007d4:	4815      	ldr	r0, [pc, #84]	; (800082c <main+0x134>)
 80007d6:	f002 fa36 	bl	8002c46 <HAL_RTC_SetTime>
			  }else{
				  dioda = 0;
			  }

		  led_set(dioda, true);
	*/	  HAL_Delay(500);
 80007da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007de:	f000 fb2b 	bl	8000e38 <HAL_Delay>
	  }

HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	2200      	movs	r2, #0
 80007e8:	4619      	mov	r1, r3
 80007ea:	4810      	ldr	r0, [pc, #64]	; (800082c <main+0x134>)
 80007ec:	f002 fac8 	bl	8002d80 <HAL_RTC_GetTime>
HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80007f0:	f107 0318 	add.w	r3, r7, #24
 80007f4:	2200      	movs	r2, #0
 80007f6:	4619      	mov	r1, r3
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <main+0x134>)
 80007fa:	f002 fba4 	bl	8002f46 <HAL_RTC_GetDate>

printf("Aktualny czas: %02d:%02d:%02d,   %02d:%02d:%02d \n", time.Hours, time.Minutes, time.Seconds, date.Year, date.Month, date.Date);
 80007fe:	7f3b      	ldrb	r3, [r7, #28]
 8000800:	4618      	mov	r0, r3
 8000802:	7f7b      	ldrb	r3, [r7, #29]
 8000804:	461c      	mov	r4, r3
 8000806:	7fbb      	ldrb	r3, [r7, #30]
 8000808:	461d      	mov	r5, r3
 800080a:	7efb      	ldrb	r3, [r7, #27]
 800080c:	7e7a      	ldrb	r2, [r7, #25]
 800080e:	7eb9      	ldrb	r1, [r7, #26]
 8000810:	9102      	str	r1, [sp, #8]
 8000812:	9201      	str	r2, [sp, #4]
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	462b      	mov	r3, r5
 8000818:	4622      	mov	r2, r4
 800081a:	4601      	mov	r1, r0
 800081c:	4806      	ldr	r0, [pc, #24]	; (8000838 <main+0x140>)
 800081e:	f003 f9ff 	bl	8003c20 <iprintf>
HAL_Delay(1000);
 8000822:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000826:	f000 fb07 	bl	8000e38 <HAL_Delay>
	  czas = HAL_GetTick();
 800082a:	e79c      	b.n	8000766 <main+0x6e>
 800082c:	200000a8 	.word	0x200000a8
 8000830:	20000098 	.word	0x20000098
 8000834:	08004bd0 	.word	0x08004bd0
 8000838:	08004bdc 	.word	0x08004bdc

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b096      	sub	sp, #88	; 0x58
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	2244      	movs	r2, #68	; 0x44
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f003 f9e0 	bl	8003c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800085e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000862:	f000 fe55 	bl	8001510 <HAL_PWREx_ControlVoltageScaling>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800086c:	f000 f83e 	bl	80008ec <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000870:	f000 fe30 	bl	80014d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <SystemClock_Config+0xac>)
 8000876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800087a:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <SystemClock_Config+0xac>)
 800087c:	f023 0318 	bic.w	r3, r3, #24
 8000880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000884:	231c      	movs	r3, #28
 8000886:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000888:	2301      	movs	r3, #1
 800088a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800088c:	2301      	movs	r3, #1
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000898:	2360      	movs	r3, #96	; 0x60
 800089a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800089c:	2300      	movs	r3, #0
 800089e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fe89 	bl	80015bc <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80008b0:	f000 f81c 	bl	80008ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b4:	230f      	movs	r3, #15
 80008b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 fa4f 	bl	8001d70 <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80008d8:	f000 f808 	bl	80008ec <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008dc:	f001 ff56 	bl	800278c <HAL_RCCEx_EnableMSIPLLMode>
}
 80008e0:	bf00      	nop
 80008e2:	3758      	adds	r7, #88	; 0x58
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40021000 	.word	0x40021000

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>
	...

080008f8 <__io_putchar>:
#include <stdio.h>
#include <printf_uart.h>
#include "usart.h"

int __io_putchar(int ch)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b0a      	cmp	r3, #10
 8000904:	d102      	bne.n	800090c <__io_putchar+0x14>
    __io_putchar('\r');
 8000906:	200d      	movs	r0, #13
 8000908:	f7ff fff6 	bl	80008f8 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800090c:	1d39      	adds	r1, r7, #4
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	2201      	movs	r2, #1
 8000914:	4803      	ldr	r0, [pc, #12]	; (8000924 <__io_putchar+0x2c>)
 8000916:	f002 fc83 	bl	8003220 <HAL_UART_Transmit>

  return 1;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200000cc 	.word	0x200000cc

08000928 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_RTC_Init+0x48>)
 800092e:	4a11      	ldr	r2, [pc, #68]	; (8000974 <MX_RTC_Init+0x4c>)
 8000930:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_RTC_Init+0x48>)
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <MX_RTC_Init+0x48>)
 800093a:	227f      	movs	r2, #127	; 0x7f
 800093c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_RTC_Init+0x48>)
 8000940:	22ff      	movs	r2, #255	; 0xff
 8000942:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_RTC_Init+0x48>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_RTC_Init+0x48>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <MX_RTC_Init+0x48>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_RTC_Init+0x48>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_RTC_Init+0x48>)
 800095e:	f002 f8f7 	bl	8002b50 <HAL_RTC_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000968:	f7ff ffc0 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200000a8 	.word	0x200000a8
 8000974:	40002800 	.word	0x40002800

08000978 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b0a4      	sub	sp, #144	; 0x90
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	2288      	movs	r2, #136	; 0x88
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f003 f941 	bl	8003c10 <memset>
  if(rtcHandle->Instance==RTC)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <HAL_RTC_MspInit+0x5c>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d118      	bne.n	80009ca <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000998:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800099c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800099e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fc04 	bl	80021b8 <HAL_RCCEx_PeriphCLKConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80009b6:	f7ff ff99 	bl	80008ec <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <HAL_RTC_MspInit+0x60>)
 80009bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009c0:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <HAL_RTC_MspInit+0x60>)
 80009c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80009ca:	bf00      	nop
 80009cc:	3790      	adds	r7, #144	; 0x90
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40002800 	.word	0x40002800
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_MspInit+0x44>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <HAL_MspInit+0x44>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6613      	str	r3, [r2, #96]	; 0x60
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_MspInit+0x44>)
 80009f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_MspInit+0x44>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <HAL_MspInit+0x44>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	6593      	str	r3, [r2, #88]	; 0x58
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_MspInit+0x44>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a70:	f000 f9c2 	bl	8000df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	e00a      	b.n	8000aa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a8a:	f3af 8000 	nop.w
 8000a8e:	4601      	mov	r1, r0
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	60ba      	str	r2, [r7, #8]
 8000a96:	b2ca      	uxtb	r2, r1
 8000a98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697a      	ldr	r2, [r7, #20]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	dbf0      	blt.n	8000a8a <_read+0x12>
	}

return len;
 8000aa8:	687b      	ldr	r3, [r7, #4]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b086      	sub	sp, #24
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	e009      	b.n	8000ad8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	60ba      	str	r2, [r7, #8]
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff13 	bl	80008f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	dbf1      	blt.n	8000ac4 <_write+0x12>
	}
	return len;
 8000ae0:	687b      	ldr	r3, [r7, #4]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <_close>:

int _close(int file)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
	return -1;
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b12:	605a      	str	r2, [r3, #4]
	return 0;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <_isatty>:

int _isatty(int file)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
	return 1;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
	return 0;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b5c:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <_sbrk+0x5c>)
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <_sbrk+0x60>)
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <_sbrk+0x64>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <_sbrk+0x68>)
 8000b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d207      	bcs.n	8000b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b84:	f003 f81a 	bl	8003bbc <__errno>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	e009      	b.n	8000ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <_sbrk+0x64>)
 8000ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20018000 	.word	0x20018000
 8000bb4:	00000400 	.word	0x00000400
 8000bb8:	2000008c 	.word	0x2000008c
 8000bbc:	20000168 	.word	0x20000168

08000bc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <SystemInit+0x20>)
 8000bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <SystemInit+0x20>)
 8000bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000bea:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <MX_USART2_UART_Init+0x5c>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000c28:	f002 faac 	bl	8003184 <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c32:	f7ff fe5b 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200000cc 	.word	0x200000cc
 8000c40:	40004400 	.word	0x40004400

08000c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0ac      	sub	sp, #176	; 0xb0
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2288      	movs	r2, #136	; 0x88
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 ffd3 	bl	8003c10 <memset>
  if(uartHandle->Instance==USART2)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a21      	ldr	r2, [pc, #132]	; (8000cf4 <HAL_UART_MspInit+0xb0>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d13b      	bne.n	8000cec <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 fa99 	bl	80021b8 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c8c:	f7ff fe2e 	bl	80008ec <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c94:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cc0:	230c      	movs	r3, #12
 8000cc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f000 f9b0 	bl	800104c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cec:	bf00      	nop
 8000cee:	37b0      	adds	r7, #176	; 0xb0
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40004400 	.word	0x40004400
 8000cf8:	40021000 	.word	0x40021000

08000cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d00:	f7ff ff5e 	bl	8000bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d06:	490d      	ldr	r1, [pc, #52]	; (8000d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <LoopForever+0xe>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d1c:	4c0a      	ldr	r4, [pc, #40]	; (8000d48 <LoopForever+0x16>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f002 ff4d 	bl	8003bc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d2e:	f7ff fce3 	bl	80006f8 <main>

08000d32 <LoopForever>:

LoopForever:
    b LoopForever
 8000d32:	e7fe      	b.n	8000d32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d40:	08004d50 	.word	0x08004d50
  ldr r2, =_sbss
 8000d44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d48:	20000164 	.word	0x20000164

08000d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC1_2_IRQHandler>

08000d4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f943 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f80e 	bl	8000d80 <HAL_InitTick>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	71fb      	strb	r3, [r7, #7]
 8000d6e:	e001      	b.n	8000d74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d70:	f7ff fe34 	bl	80009dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d74:	79fb      	ldrb	r3, [r7, #7]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d8c:	4b17      	ldr	r3, [pc, #92]	; (8000dec <HAL_InitTick+0x6c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d023      	beq.n	8000ddc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <HAL_InitTick+0x70>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <HAL_InitTick+0x6c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f941 	bl	8001032 <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10f      	bne.n	8000dd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b0f      	cmp	r3, #15
 8000dba:	d809      	bhi.n	8000dd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f000 f919 	bl	8000ffa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <HAL_InitTick+0x74>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e007      	b.n	8000de0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
 8000dd4:	e004      	b.n	8000de0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	73fb      	strb	r3, [r7, #15]
 8000dda:	e001      	b.n	8000de0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000004 	.word	0x20000004

08000df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x20>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x24>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_IncTick+0x24>)
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000150 	.word	0x20000150

08000e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <HAL_GetTick+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000150 	.word	0x20000150

08000e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e40:	f7ff ffee 	bl	8000e20 <HAL_GetTick>
 8000e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e50:	d005      	beq.n	8000e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_Delay+0x44>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e5e:	bf00      	nop
 8000e60:	f7ff ffde 	bl	8000e20 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d8f7      	bhi.n	8000e60 <HAL_Delay+0x28>
  {
  }
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008

08000e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	60d3      	str	r3, [r2, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f7ff ff8e 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff47 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff5c 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff8e 	bl	8000f38 <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5d 	bl	8000ee4 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffb0 	bl	8000fa0 <SysTick_Config>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105a:	e17f      	b.n	800135c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	2101      	movs	r1, #1
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	4013      	ands	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 8171 	beq.w	8001356 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b01      	cmp	r3, #1
 800107e:	d005      	beq.n	800108c <HAL_GPIO_Init+0x40>
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d130      	bne.n	80010ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010c2:	2201      	movs	r2, #1
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	091b      	lsrs	r3, r3, #4
 80010d8:	f003 0201 	and.w	r2, r3, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d118      	bne.n	800112c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001100:	2201      	movs	r2, #1
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	08db      	lsrs	r3, r3, #3
 8001116:	f003 0201 	and.w	r2, r3, #1
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b03      	cmp	r3, #3
 8001136:	d017      	beq.n	8001168 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d123      	bne.n	80011bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	08da      	lsrs	r2, r3, #3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3208      	adds	r2, #8
 800117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	08da      	lsrs	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	6939      	ldr	r1, [r7, #16]
 80011b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0203 	and.w	r2, r3, #3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80ac 	beq.w	8001356 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	4b5f      	ldr	r3, [pc, #380]	; (800137c <HAL_GPIO_Init+0x330>)
 8001200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001202:	4a5e      	ldr	r2, [pc, #376]	; (800137c <HAL_GPIO_Init+0x330>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6613      	str	r3, [r2, #96]	; 0x60
 800120a:	4b5c      	ldr	r3, [pc, #368]	; (800137c <HAL_GPIO_Init+0x330>)
 800120c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001216:	4a5a      	ldr	r2, [pc, #360]	; (8001380 <HAL_GPIO_Init+0x334>)
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001240:	d025      	beq.n	800128e <HAL_GPIO_Init+0x242>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4f      	ldr	r2, [pc, #316]	; (8001384 <HAL_GPIO_Init+0x338>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d01f      	beq.n	800128a <HAL_GPIO_Init+0x23e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4e      	ldr	r2, [pc, #312]	; (8001388 <HAL_GPIO_Init+0x33c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d019      	beq.n	8001286 <HAL_GPIO_Init+0x23a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4d      	ldr	r2, [pc, #308]	; (800138c <HAL_GPIO_Init+0x340>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x236>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4c      	ldr	r2, [pc, #304]	; (8001390 <HAL_GPIO_Init+0x344>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x232>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4b      	ldr	r2, [pc, #300]	; (8001394 <HAL_GPIO_Init+0x348>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x22e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4a      	ldr	r2, [pc, #296]	; (8001398 <HAL_GPIO_Init+0x34c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x22a>
 8001272:	2306      	movs	r3, #6
 8001274:	e00c      	b.n	8001290 <HAL_GPIO_Init+0x244>
 8001276:	2307      	movs	r3, #7
 8001278:	e00a      	b.n	8001290 <HAL_GPIO_Init+0x244>
 800127a:	2305      	movs	r3, #5
 800127c:	e008      	b.n	8001290 <HAL_GPIO_Init+0x244>
 800127e:	2304      	movs	r3, #4
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x244>
 8001282:	2303      	movs	r3, #3
 8001284:	e004      	b.n	8001290 <HAL_GPIO_Init+0x244>
 8001286:	2302      	movs	r3, #2
 8001288:	e002      	b.n	8001290 <HAL_GPIO_Init+0x244>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x244>
 800128e:	2300      	movs	r3, #0
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	f002 0203 	and.w	r2, r2, #3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4093      	lsls	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012a0:	4937      	ldr	r1, [pc, #220]	; (8001380 <HAL_GPIO_Init+0x334>)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012ae:	4b3b      	ldr	r3, [pc, #236]	; (800139c <HAL_GPIO_Init+0x350>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012d2:	4a32      	ldr	r2, [pc, #200]	; (800139c <HAL_GPIO_Init+0x350>)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012d8:	4b30      	ldr	r3, [pc, #192]	; (800139c <HAL_GPIO_Init+0x350>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012fc:	4a27      	ldr	r2, [pc, #156]	; (800139c <HAL_GPIO_Init+0x350>)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_GPIO_Init+0x350>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001326:	4a1d      	ldr	r2, [pc, #116]	; (800139c <HAL_GPIO_Init+0x350>)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <HAL_GPIO_Init+0x350>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001350:	4a12      	ldr	r2, [pc, #72]	; (800139c <HAL_GPIO_Init+0x350>)
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa22 f303 	lsr.w	r3, r2, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	f47f ae78 	bne.w	800105c <HAL_GPIO_Init+0x10>
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000
 8001380:	40010000 	.word	0x40010000
 8001384:	48000400 	.word	0x48000400
 8001388:	48000800 	.word	0x48000800
 800138c:	48000c00 	.word	0x48000c00
 8001390:	48001000 	.word	0x48001000
 8001394:	48001400 	.word	0x48001400
 8001398:	48001800 	.word	0x48001800
 800139c:	40010400 	.word	0x40010400

080013a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	e001      	b.n	80013c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e0:	787b      	ldrb	r3, [r7, #1]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013ec:	e002      	b.n	80013f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4013      	ands	r3, r2
 8001418:	041a      	lsls	r2, r3, #16
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43d9      	mvns	r1, r3
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	400b      	ands	r3, r1
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e041      	b.n	80014ca <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800144e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f245 5255 	movw	r2, #21845	; 0x5555
 8001458:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6852      	ldr	r2, [r2, #4]
 8001462:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6892      	ldr	r2, [r2, #8]
 800146c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800146e:	f7ff fcd7 	bl	8000e20 <HAL_GetTick>
 8001472:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001474:	e00f      	b.n	8001496 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001476:	f7ff fcd3 	bl	8000e20 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b31      	cmp	r3, #49	; 0x31
 8001482:	d908      	bls.n	8001496 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e019      	b.n	80014ca <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1e8      	bne.n	8001476 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d005      	beq.n	80014be <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68d2      	ldr	r2, [r2, #12]
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	e004      	b.n	80014c8 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80014c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40007000 	.word	0x40007000

080014f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <HAL_PWREx_GetVoltageRange+0x18>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40007000 	.word	0x40007000

08001510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151e:	d130      	bne.n	8001582 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800152c:	d038      	beq.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001536:	4a1e      	ldr	r2, [pc, #120]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001538:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2232      	movs	r2, #50	; 0x32
 8001544:	fb02 f303 	mul.w	r3, r2, r3
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0c9b      	lsrs	r3, r3, #18
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001554:	e002      	b.n	800155c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3b01      	subs	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001568:	d102      	bne.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x60>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f2      	bne.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157c:	d110      	bne.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e00f      	b.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800158a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158e:	d007      	beq.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40007000 	.word	0x40007000
 80015b4:	20000000 	.word	0x20000000
 80015b8:	431bde83 	.word	0x431bde83

080015bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e3c6      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ce:	4ba1      	ldr	r3, [pc, #644]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d8:	4b9e      	ldr	r3, [pc, #632]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80e4 	beq.w	80017b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d007      	beq.n	8001606 <HAL_RCC_OscConfig+0x4a>
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b0c      	cmp	r3, #12
 80015fa:	f040 808b 	bne.w	8001714 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b01      	cmp	r3, #1
 8001602:	f040 8087 	bne.w	8001714 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001606:	4b93      	ldr	r3, [pc, #588]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x62>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e39e      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1a      	ldr	r2, [r3, #32]
 8001622:	4b8c      	ldr	r3, [pc, #560]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <HAL_RCC_OscConfig+0x7c>
 800162e:	4b89      	ldr	r3, [pc, #548]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001636:	e005      	b.n	8001644 <HAL_RCC_OscConfig+0x88>
 8001638:	4b86      	ldr	r3, [pc, #536]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 800163a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163e:	091b      	lsrs	r3, r3, #4
 8001640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001644:	4293      	cmp	r3, r2
 8001646:	d223      	bcs.n	8001690 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fd53 	bl	80020f8 <RCC_SetFlashLatencyFromMSIRange>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e37f      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800165c:	4b7d      	ldr	r3, [pc, #500]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a7c      	ldr	r2, [pc, #496]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001662:	f043 0308 	orr.w	r3, r3, #8
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b7a      	ldr	r3, [pc, #488]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4977      	ldr	r1, [pc, #476]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167a:	4b76      	ldr	r3, [pc, #472]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	4972      	ldr	r1, [pc, #456]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 800168a:	4313      	orrs	r3, r2
 800168c:	604b      	str	r3, [r1, #4]
 800168e:	e025      	b.n	80016dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001690:	4b70      	ldr	r3, [pc, #448]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a6f      	ldr	r2, [pc, #444]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b6d      	ldr	r3, [pc, #436]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	496a      	ldr	r1, [pc, #424]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ae:	4b69      	ldr	r3, [pc, #420]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	4965      	ldr	r1, [pc, #404]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d109      	bne.n	80016dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fd13 	bl	80020f8 <RCC_SetFlashLatencyFromMSIRange>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e33f      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016dc:	f000 fc48 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 80016e0:	4602      	mov	r2, r0
 80016e2:	4b5c      	ldr	r3, [pc, #368]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	495a      	ldr	r1, [pc, #360]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 80016ee:	5ccb      	ldrb	r3, [r1, r3]
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
 80016f8:	4a58      	ldr	r2, [pc, #352]	; (800185c <HAL_RCC_OscConfig+0x2a0>)
 80016fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016fc:	4b58      	ldr	r3, [pc, #352]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fb3d 	bl	8000d80 <HAL_InitTick>
 8001706:	4603      	mov	r3, r0
 8001708:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d052      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	e323      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d032      	beq.n	8001782 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800171c:	4b4d      	ldr	r3, [pc, #308]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a4c      	ldr	r2, [pc, #304]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001728:	f7ff fb7a 	bl	8000e20 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001730:	f7ff fb76 	bl	8000e20 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e30c      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001742:	4b44      	ldr	r3, [pc, #272]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800174e:	4b41      	ldr	r3, [pc, #260]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a40      	ldr	r2, [pc, #256]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b3e      	ldr	r3, [pc, #248]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	493b      	ldr	r1, [pc, #236]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800176c:	4b39      	ldr	r3, [pc, #228]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	4936      	ldr	r1, [pc, #216]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
 8001780:	e01a      	b.n	80017b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001782:	4b34      	ldr	r3, [pc, #208]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a33      	ldr	r2, [pc, #204]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800178e:	f7ff fb47 	bl	8000e20 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001796:	f7ff fb43 	bl	8000e20 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e2d9      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017a8:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_OscConfig+0x1da>
 80017b4:	e000      	b.n	80017b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d074      	beq.n	80018ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d005      	beq.n	80017d6 <HAL_RCC_OscConfig+0x21a>
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b0c      	cmp	r3, #12
 80017ce:	d10e      	bne.n	80017ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d10b      	bne.n	80017ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d6:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d064      	beq.n	80018ac <HAL_RCC_OscConfig+0x2f0>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d160      	bne.n	80018ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e2b6      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f6:	d106      	bne.n	8001806 <HAL_RCC_OscConfig+0x24a>
 80017f8:	4b16      	ldr	r3, [pc, #88]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a15      	ldr	r2, [pc, #84]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 80017fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e01d      	b.n	8001842 <HAL_RCC_OscConfig+0x286>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180e:	d10c      	bne.n	800182a <HAL_RCC_OscConfig+0x26e>
 8001810:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0f      	ldr	r2, [pc, #60]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001816:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0c      	ldr	r2, [pc, #48]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	e00b      	b.n	8001842 <HAL_RCC_OscConfig+0x286>
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a09      	ldr	r2, [pc, #36]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b07      	ldr	r3, [pc, #28]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a06      	ldr	r2, [pc, #24]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 800183c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001840:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d01c      	beq.n	8001884 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7ff fae9 	bl	8000e20 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001850:	e011      	b.n	8001876 <HAL_RCC_OscConfig+0x2ba>
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	08004c60 	.word	0x08004c60
 800185c:	20000000 	.word	0x20000000
 8001860:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001864:	f7ff fadc 	bl	8000e20 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e272      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001876:	4baf      	ldr	r3, [pc, #700]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x2a8>
 8001882:	e014      	b.n	80018ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff facc 	bl	8000e20 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fac8 	bl	8000e20 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e25e      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189e:	4ba5      	ldr	r3, [pc, #660]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x2d0>
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d060      	beq.n	800197c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d005      	beq.n	80018cc <HAL_RCC_OscConfig+0x310>
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b0c      	cmp	r3, #12
 80018c4:	d119      	bne.n	80018fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d116      	bne.n	80018fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018cc:	4b99      	ldr	r3, [pc, #612]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_OscConfig+0x328>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e23b      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e4:	4b93      	ldr	r3, [pc, #588]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	061b      	lsls	r3, r3, #24
 80018f2:	4990      	ldr	r1, [pc, #576]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f8:	e040      	b.n	800197c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d023      	beq.n	800194a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001902:	4b8c      	ldr	r3, [pc, #560]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a8b      	ldr	r2, [pc, #556]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7ff fa87 	bl	8000e20 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001916:	f7ff fa83 	bl	8000e20 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e219      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001928:	4b82      	ldr	r3, [pc, #520]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001934:	4b7f      	ldr	r3, [pc, #508]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	061b      	lsls	r3, r3, #24
 8001942:	497c      	ldr	r1, [pc, #496]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
 8001948:	e018      	b.n	800197c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194a:	4b7a      	ldr	r3, [pc, #488]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a79      	ldr	r2, [pc, #484]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001956:	f7ff fa63 	bl	8000e20 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195e:	f7ff fa5f 	bl	8000e20 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1f5      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001970:	4b70      	ldr	r3, [pc, #448]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d03c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01c      	beq.n	80019ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001990:	4b68      	ldr	r3, [pc, #416]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001996:	4a67      	ldr	r2, [pc, #412]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a0:	f7ff fa3e 	bl	8000e20 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a8:	f7ff fa3a 	bl	8000e20 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e1d0      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ba:	4b5e      	ldr	r3, [pc, #376]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 80019bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ef      	beq.n	80019a8 <HAL_RCC_OscConfig+0x3ec>
 80019c8:	e01b      	b.n	8001a02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ca:	4b5a      	ldr	r3, [pc, #360]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 80019cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d0:	4a58      	ldr	r2, [pc, #352]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7ff fa21 	bl	8000e20 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e2:	f7ff fa1d 	bl	8000e20 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1b3      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f4:	4b4f      	ldr	r3, [pc, #316]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 80019f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ef      	bne.n	80019e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80a6 	beq.w	8001b5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a14:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10d      	bne.n	8001a3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a20:	4b44      	ldr	r3, [pc, #272]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	4a43      	ldr	r2, [pc, #268]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2c:	4b41      	ldr	r3, [pc, #260]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a3c:	4b3e      	ldr	r3, [pc, #248]	; (8001b38 <HAL_RCC_OscConfig+0x57c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d118      	bne.n	8001a7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a48:	4b3b      	ldr	r3, [pc, #236]	; (8001b38 <HAL_RCC_OscConfig+0x57c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a3a      	ldr	r2, [pc, #232]	; (8001b38 <HAL_RCC_OscConfig+0x57c>)
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a54:	f7ff f9e4 	bl	8000e20 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5c:	f7ff f9e0 	bl	8000e20 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e176      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6e:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_RCC_OscConfig+0x57c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d108      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4d8>
 8001a82:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a88:	4a2a      	ldr	r2, [pc, #168]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a92:	e024      	b.n	8001ade <HAL_RCC_OscConfig+0x522>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b05      	cmp	r3, #5
 8001a9a:	d110      	bne.n	8001abe <HAL_RCC_OscConfig+0x502>
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa2:	4a24      	ldr	r2, [pc, #144]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aac:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab2:	4a20      	ldr	r2, [pc, #128]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001abc:	e00f      	b.n	8001ade <HAL_RCC_OscConfig+0x522>
 8001abe:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac4:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad4:	4a17      	ldr	r2, [pc, #92]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001ad6:	f023 0304 	bic.w	r3, r3, #4
 8001ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d016      	beq.n	8001b14 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae6:	f7ff f99b 	bl	8000e20 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff f997 	bl	8000e20 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e12b      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_OscConfig+0x578>)
 8001b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0ed      	beq.n	8001aee <HAL_RCC_OscConfig+0x532>
 8001b12:	e01a      	b.n	8001b4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b14:	f7ff f984 	bl	8000e20 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b1a:	e00f      	b.n	8001b3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1c:	f7ff f980 	bl	8000e20 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d906      	bls.n	8001b3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e114      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b3c:	4b89      	ldr	r3, [pc, #548]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1e8      	bne.n	8001b1c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b4a:	7ffb      	ldrb	r3, [r7, #31]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b50:	4b84      	ldr	r3, [pc, #528]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	4a83      	ldr	r2, [pc, #524]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80fa 	beq.w	8001d5a <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	f040 80d0 	bne.w	8001d10 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b70:	4b7c      	ldr	r3, [pc, #496]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 0203 	and.w	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d130      	bne.n	8001be6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d127      	bne.n	8001be6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d11f      	bne.n	8001be6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bb0:	2a07      	cmp	r2, #7
 8001bb2:	bf14      	ite	ne
 8001bb4:	2201      	movne	r2, #1
 8001bb6:	2200      	moveq	r2, #0
 8001bb8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d113      	bne.n	8001be6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d109      	bne.n	8001be6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	085b      	lsrs	r3, r3, #1
 8001bde:	3b01      	subs	r3, #1
 8001be0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d06e      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	2b0c      	cmp	r3, #12
 8001bea:	d069      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bec:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bf8:	4b5a      	ldr	r3, [pc, #360]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0a9      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c08:	4b56      	ldr	r3, [pc, #344]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a55      	ldr	r2, [pc, #340]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c12:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c14:	f7ff f904 	bl	8000e20 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f900 	bl	8000e20 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e096      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2e:	4b4d      	ldr	r3, [pc, #308]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c3a:	4b4a      	ldr	r3, [pc, #296]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	4b4a      	ldr	r3, [pc, #296]	; (8001d68 <HAL_RCC_OscConfig+0x7ac>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c4a:	3a01      	subs	r2, #1
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	4311      	orrs	r1, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c54:	0212      	lsls	r2, r2, #8
 8001c56:	4311      	orrs	r1, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c5c:	0852      	lsrs	r2, r2, #1
 8001c5e:	3a01      	subs	r2, #1
 8001c60:	0552      	lsls	r2, r2, #21
 8001c62:	4311      	orrs	r1, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c68:	0852      	lsrs	r2, r2, #1
 8001c6a:	3a01      	subs	r2, #1
 8001c6c:	0652      	lsls	r2, r2, #25
 8001c6e:	4311      	orrs	r1, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c74:	0912      	lsrs	r2, r2, #4
 8001c76:	0452      	lsls	r2, r2, #17
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	493a      	ldr	r1, [pc, #232]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c80:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a37      	ldr	r2, [pc, #220]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c8c:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4a34      	ldr	r2, [pc, #208]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c98:	f7ff f8c2 	bl	8000e20 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff f8be 	bl	8000e20 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e054      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb2:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cbe:	e04c      	b.n	8001d5a <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e04b      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d144      	bne.n	8001d5a <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cd0:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cdc:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4a20      	ldr	r2, [pc, #128]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ce8:	f7ff f89a 	bl	8000e20 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff f896 	bl	8000e20 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e02c      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x734>
 8001d0e:	e024      	b.n	8001d5a <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d01f      	beq.n	8001d56 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001d1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d22:	f7ff f87d 	bl	8000e20 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7ff f879 	bl	8000e20 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e00f      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f0      	bne.n	8001d2a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	4905      	ldr	r1, [pc, #20]	; (8001d64 <HAL_RCC_OscConfig+0x7a8>)
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <HAL_RCC_OscConfig+0x7b0>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	60cb      	str	r3, [r1, #12]
 8001d54:	e001      	b.n	8001d5a <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3720      	adds	r7, #32
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	f99d808c 	.word	0xf99d808c
 8001d6c:	feeefffc 	.word	0xfeeefffc

08001d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0e7      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d84:	4b75      	ldr	r3, [pc, #468]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d910      	bls.n	8001db4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d92:	4b72      	ldr	r3, [pc, #456]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 0207 	bic.w	r2, r3, #7
 8001d9a:	4970      	ldr	r1, [pc, #448]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	4b6e      	ldr	r3, [pc, #440]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0cf      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d010      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	4b66      	ldr	r3, [pc, #408]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d908      	bls.n	8001de2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4960      	ldr	r1, [pc, #384]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d04c      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df6:	4b5a      	ldr	r3, [pc, #360]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d121      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0a6      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0e:	4b54      	ldr	r3, [pc, #336]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d115      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e09a      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e26:	4b4e      	ldr	r3, [pc, #312]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d109      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e08e      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e36:	4b4a      	ldr	r3, [pc, #296]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e086      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e46:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f023 0203 	bic.w	r2, r3, #3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4943      	ldr	r1, [pc, #268]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e58:	f7fe ffe2 	bl	8000e20 <HAL_GetTick>
 8001e5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e60:	f7fe ffde 	bl	8000e20 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e06e      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 020c 	and.w	r2, r3, #12
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d1eb      	bne.n	8001e60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d010      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d208      	bcs.n	8001eb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea4:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	492b      	ldr	r1, [pc, #172]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d210      	bcs.n	8001ee6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 0207 	bic.w	r2, r3, #7
 8001ecc:	4923      	ldr	r1, [pc, #140]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed4:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e036      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	4918      	ldr	r1, [pc, #96]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d009      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4910      	ldr	r1, [pc, #64]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f24:	f000 f824 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	490b      	ldr	r1, [pc, #44]	; (8001f64 <HAL_RCC_ClockConfig+0x1f4>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f40:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <HAL_RCC_ClockConfig+0x1f8>)
 8001f42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_RCC_ClockConfig+0x1fc>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe ff19 	bl	8000d80 <HAL_InitTick>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f52:	7afb      	ldrb	r3, [r7, #11]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40022000 	.word	0x40022000
 8001f60:	40021000 	.word	0x40021000
 8001f64:	08004c60 	.word	0x08004c60
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000004 	.word	0x20000004

08001f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7e:	4b3e      	ldr	r3, [pc, #248]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f88:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b0c      	cmp	r3, #12
 8001f9c:	d121      	bne.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d11e      	bne.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fa4:	4b34      	ldr	r3, [pc, #208]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fb0:	4b31      	ldr	r3, [pc, #196]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	e005      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fc0:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fcc:	4a2b      	ldr	r2, [pc, #172]	; (800207c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10d      	bne.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d102      	bne.n	8001fee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	e004      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ff4:	4b23      	ldr	r3, [pc, #140]	; (8002084 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ff6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d134      	bne.n	8002068 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d003      	beq.n	8002016 <HAL_RCC_GetSysClockFreq+0xa6>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d003      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0xac>
 8002014:	e005      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <HAL_RCC_GetSysClockFreq+0x110>)
 8002018:	617b      	str	r3, [r7, #20]
      break;
 800201a:	e005      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_RCC_GetSysClockFreq+0x114>)
 800201e:	617b      	str	r3, [r7, #20]
      break;
 8002020:	e002      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	617b      	str	r3, [r7, #20]
      break;
 8002026:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	3301      	adds	r3, #1
 8002034:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	fb02 f203 	mul.w	r2, r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	fbb2 f3f3 	udiv	r3, r2, r3
 800204c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	0e5b      	lsrs	r3, r3, #25
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	3301      	adds	r3, #1
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	fbb2 f3f3 	udiv	r3, r2, r3
 8002066:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002068:	69bb      	ldr	r3, [r7, #24]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	08004c78 	.word	0x08004c78
 8002080:	00f42400 	.word	0x00f42400
 8002084:	007a1200 	.word	0x007a1200

08002088 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_RCC_GetHCLKFreq+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000000 	.word	0x20000000

080020a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020a4:	f7ff fff0 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	4904      	ldr	r1, [pc, #16]	; (80020c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020b6:	5ccb      	ldrb	r3, [r1, r3]
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	08004c70 	.word	0x08004c70

080020cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020d0:	f7ff ffda 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020d4:	4602      	mov	r2, r0
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	0adb      	lsrs	r3, r3, #11
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	4904      	ldr	r1, [pc, #16]	; (80020f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020e2:	5ccb      	ldrb	r3, [r1, r3]
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	08004c70 	.word	0x08004c70

080020f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002104:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002110:	f7ff f9f0 	bl	80014f4 <HAL_PWREx_GetVoltageRange>
 8002114:	6178      	str	r0, [r7, #20]
 8002116:	e014      	b.n	8002142 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211c:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002122:	6593      	str	r3, [r2, #88]	; 0x58
 8002124:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002130:	f7ff f9e0 	bl	80014f4 <HAL_PWREx_GetVoltageRange>
 8002134:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800213c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002140:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002148:	d10b      	bne.n	8002162 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b80      	cmp	r3, #128	; 0x80
 800214e:	d919      	bls.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2ba0      	cmp	r3, #160	; 0xa0
 8002154:	d902      	bls.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002156:	2302      	movs	r3, #2
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	e013      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800215c:	2301      	movs	r3, #1
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	e010      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b80      	cmp	r3, #128	; 0x80
 8002166:	d902      	bls.n	800216e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002168:	2303      	movs	r3, #3
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	e00a      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d102      	bne.n	800217a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002174:	2302      	movs	r3, #2
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	e004      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b70      	cmp	r3, #112	; 0x70
 800217e:	d101      	bne.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002180:	2301      	movs	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 0207 	bic.w	r2, r3, #7
 800218c:	4909      	ldr	r1, [pc, #36]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d001      	beq.n	80021a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40022000 	.word	0x40022000

080021b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021c0:	2300      	movs	r3, #0
 80021c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021c4:	2300      	movs	r3, #0
 80021c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d041      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021dc:	d02a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021e2:	d824      	bhi.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021e8:	d008      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021ee:	d81e      	bhi.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021f8:	d010      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021fa:	e018      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021fc:	4b86      	ldr	r3, [pc, #536]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a85      	ldr	r2, [pc, #532]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002206:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002208:	e015      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3304      	adds	r3, #4
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f000 facb 	bl	80027ac <RCCEx_PLLSAI1_Config>
 8002216:	4603      	mov	r3, r0
 8002218:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800221a:	e00c      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3320      	adds	r3, #32
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fbb6 	bl	8002994 <RCCEx_PLLSAI2_Config>
 8002228:	4603      	mov	r3, r0
 800222a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800222c:	e003      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	74fb      	strb	r3, [r7, #19]
      break;
 8002232:	e000      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002236:	7cfb      	ldrb	r3, [r7, #19]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10b      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800223c:	4b76      	ldr	r3, [pc, #472]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800224a:	4973      	ldr	r1, [pc, #460]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002252:	e001      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d041      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002268:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800226c:	d02a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800226e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002272:	d824      	bhi.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002274:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002278:	d008      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800227a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800227e:	d81e      	bhi.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002288:	d010      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800228a:	e018      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800228c:	4b62      	ldr	r3, [pc, #392]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a61      	ldr	r2, [pc, #388]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002296:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002298:	e015      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3304      	adds	r3, #4
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 fa83 	bl	80027ac <RCCEx_PLLSAI1_Config>
 80022a6:	4603      	mov	r3, r0
 80022a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022aa:	e00c      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3320      	adds	r3, #32
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fb6e 	bl	8002994 <RCCEx_PLLSAI2_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022bc:	e003      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	74fb      	strb	r3, [r7, #19]
      break;
 80022c2:	e000      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022c6:	7cfb      	ldrb	r3, [r7, #19]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10b      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022cc:	4b52      	ldr	r3, [pc, #328]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022da:	494f      	ldr	r1, [pc, #316]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022e2:	e001      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e4:	7cfb      	ldrb	r3, [r7, #19]
 80022e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80a0 	beq.w	8002436 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800230a:	2300      	movs	r3, #0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00d      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002310:	4b41      	ldr	r3, [pc, #260]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002314:	4a40      	ldr	r2, [pc, #256]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231a:	6593      	str	r3, [r2, #88]	; 0x58
 800231c:	4b3e      	ldr	r3, [pc, #248]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002328:	2301      	movs	r3, #1
 800232a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800232c:	4b3b      	ldr	r3, [pc, #236]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a3a      	ldr	r2, [pc, #232]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002336:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002338:	f7fe fd72 	bl	8000e20 <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800233e:	e009      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002340:	f7fe fd6e 	bl	8000e20 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d902      	bls.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	74fb      	strb	r3, [r7, #19]
        break;
 8002352:	e005      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002354:	4b31      	ldr	r3, [pc, #196]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0ef      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d15c      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002366:	4b2c      	ldr	r3, [pc, #176]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002370:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01f      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	429a      	cmp	r2, r3
 8002382:	d019      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002384:	4b24      	ldr	r3, [pc, #144]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002390:	4b21      	ldr	r3, [pc, #132]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002396:	4a20      	ldr	r2, [pc, #128]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023a0:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a6:	4a1c      	ldr	r2, [pc, #112]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023b0:	4a19      	ldr	r2, [pc, #100]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d016      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c2:	f7fe fd2d 	bl	8000e20 <HAL_GetTick>
 80023c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c8:	e00b      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7fe fd29 	bl	8000e20 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d902      	bls.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	74fb      	strb	r3, [r7, #19]
            break;
 80023e0:	e006      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0ec      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10c      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002406:	4904      	ldr	r1, [pc, #16]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800240e:	e009      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002410:	7cfb      	ldrb	r3, [r7, #19]
 8002412:	74bb      	strb	r3, [r7, #18]
 8002414:	e006      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002424:	7c7b      	ldrb	r3, [r7, #17]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d105      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242a:	4b9e      	ldr	r3, [pc, #632]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242e:	4a9d      	ldr	r2, [pc, #628]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002434:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002442:	4b98      	ldr	r3, [pc, #608]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	f023 0203 	bic.w	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	4994      	ldr	r1, [pc, #592]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002464:	4b8f      	ldr	r3, [pc, #572]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f023 020c 	bic.w	r2, r3, #12
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002472:	498c      	ldr	r1, [pc, #560]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002486:	4b87      	ldr	r3, [pc, #540]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	4983      	ldr	r1, [pc, #524]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024a8:	4b7e      	ldr	r3, [pc, #504]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	497b      	ldr	r1, [pc, #492]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024ca:	4b76      	ldr	r3, [pc, #472]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d8:	4972      	ldr	r1, [pc, #456]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024ec:	4b6d      	ldr	r3, [pc, #436]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	496a      	ldr	r1, [pc, #424]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800250e:	4b65      	ldr	r3, [pc, #404]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251c:	4961      	ldr	r1, [pc, #388]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002530:	4b5c      	ldr	r3, [pc, #368]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253e:	4959      	ldr	r1, [pc, #356]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002552:	4b54      	ldr	r3, [pc, #336]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002560:	4950      	ldr	r1, [pc, #320]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002574:	4b4b      	ldr	r3, [pc, #300]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	4948      	ldr	r1, [pc, #288]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002596:	4b43      	ldr	r3, [pc, #268]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	493f      	ldr	r1, [pc, #252]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d028      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025b8:	4b3a      	ldr	r3, [pc, #232]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025c6:	4937      	ldr	r1, [pc, #220]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025d6:	d106      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025d8:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4a31      	ldr	r2, [pc, #196]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025e2:	60d3      	str	r3, [r2, #12]
 80025e4:	e011      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025ee:	d10c      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	2101      	movs	r1, #1
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 f8d8 	bl	80027ac <RCCEx_PLLSAI1_Config>
 80025fc:	4603      	mov	r3, r0
 80025fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002600:	7cfb      	ldrb	r3, [r7, #19]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d028      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002616:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	491f      	ldr	r1, [pc, #124]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002634:	d106      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002636:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	4a1a      	ldr	r2, [pc, #104]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002640:	60d3      	str	r3, [r2, #12]
 8002642:	e011      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002648:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800264c:	d10c      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3304      	adds	r3, #4
 8002652:	2101      	movs	r1, #1
 8002654:	4618      	mov	r0, r3
 8002656:	f000 f8a9 	bl	80027ac <RCCEx_PLLSAI1_Config>
 800265a:	4603      	mov	r3, r0
 800265c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800265e:	7cfb      	ldrb	r3, [r7, #19]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002664:	7cfb      	ldrb	r3, [r7, #19]
 8002666:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d02b      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002682:	4908      	ldr	r1, [pc, #32]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002692:	d109      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4a02      	ldr	r2, [pc, #8]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800269e:	60d3      	str	r3, [r2, #12]
 80026a0:	e014      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026b0:	d10c      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2101      	movs	r1, #1
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 f877 	bl	80027ac <RCCEx_PLLSAI1_Config>
 80026be:	4603      	mov	r3, r0
 80026c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d02f      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026d8:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026e6:	4928      	ldr	r1, [pc, #160]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026f6:	d10d      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3304      	adds	r3, #4
 80026fc:	2102      	movs	r1, #2
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f854 	bl	80027ac <RCCEx_PLLSAI1_Config>
 8002704:	4603      	mov	r3, r0
 8002706:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d014      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	74bb      	strb	r3, [r7, #18]
 8002712:	e011      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800271c:	d10c      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3320      	adds	r3, #32
 8002722:	2102      	movs	r1, #2
 8002724:	4618      	mov	r0, r3
 8002726:	f000 f935 	bl	8002994 <RCCEx_PLLSAI2_Config>
 800272a:	4603      	mov	r3, r0
 800272c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800272e:	7cfb      	ldrb	r3, [r7, #19]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002744:	4b10      	ldr	r3, [pc, #64]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002752:	490d      	ldr	r1, [pc, #52]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002776:	4904      	ldr	r1, [pc, #16]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800277e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000

0800278c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000

080027ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027ba:	4b75      	ldr	r3, [pc, #468]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d018      	beq.n	80027f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027c6:	4b72      	ldr	r3, [pc, #456]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 0203 	and.w	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d10d      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
       ||
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027de:	4b6c      	ldr	r3, [pc, #432]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
       ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d047      	beq.n	8002882 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	e044      	b.n	8002882 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d018      	beq.n	8002832 <RCCEx_PLLSAI1_Config+0x86>
 8002800:	2b03      	cmp	r3, #3
 8002802:	d825      	bhi.n	8002850 <RCCEx_PLLSAI1_Config+0xa4>
 8002804:	2b01      	cmp	r3, #1
 8002806:	d002      	beq.n	800280e <RCCEx_PLLSAI1_Config+0x62>
 8002808:	2b02      	cmp	r3, #2
 800280a:	d009      	beq.n	8002820 <RCCEx_PLLSAI1_Config+0x74>
 800280c:	e020      	b.n	8002850 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800280e:	4b60      	ldr	r3, [pc, #384]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d11d      	bne.n	8002856 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281e:	e01a      	b.n	8002856 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002820:	4b5b      	ldr	r3, [pc, #364]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002828:	2b00      	cmp	r3, #0
 800282a:	d116      	bne.n	800285a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002830:	e013      	b.n	800285a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002832:	4b57      	ldr	r3, [pc, #348]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10f      	bne.n	800285e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800283e:	4b54      	ldr	r3, [pc, #336]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800284e:	e006      	b.n	800285e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
      break;
 8002854:	e004      	b.n	8002860 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002856:	bf00      	nop
 8002858:	e002      	b.n	8002860 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800285a:	bf00      	nop
 800285c:	e000      	b.n	8002860 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800285e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10d      	bne.n	8002882 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002866:	4b4a      	ldr	r3, [pc, #296]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6819      	ldr	r1, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	430b      	orrs	r3, r1
 800287c:	4944      	ldr	r1, [pc, #272]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d17d      	bne.n	8002984 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002888:	4b41      	ldr	r3, [pc, #260]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a40      	ldr	r2, [pc, #256]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002894:	f7fe fac4 	bl	8000e20 <HAL_GetTick>
 8002898:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800289a:	e009      	b.n	80028b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800289c:	f7fe fac0 	bl	8000e20 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d902      	bls.n	80028b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	73fb      	strb	r3, [r7, #15]
        break;
 80028ae:	e005      	b.n	80028bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028b0:	4b37      	ldr	r3, [pc, #220]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1ef      	bne.n	800289c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d160      	bne.n	8002984 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d111      	bne.n	80028ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028c8:	4b31      	ldr	r3, [pc, #196]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6892      	ldr	r2, [r2, #8]
 80028d8:	0211      	lsls	r1, r2, #8
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68d2      	ldr	r2, [r2, #12]
 80028de:	0912      	lsrs	r2, r2, #4
 80028e0:	0452      	lsls	r2, r2, #17
 80028e2:	430a      	orrs	r2, r1
 80028e4:	492a      	ldr	r1, [pc, #168]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	610b      	str	r3, [r1, #16]
 80028ea:	e027      	b.n	800293c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d112      	bne.n	8002918 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028f2:	4b27      	ldr	r3, [pc, #156]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6892      	ldr	r2, [r2, #8]
 8002902:	0211      	lsls	r1, r2, #8
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6912      	ldr	r2, [r2, #16]
 8002908:	0852      	lsrs	r2, r2, #1
 800290a:	3a01      	subs	r2, #1
 800290c:	0552      	lsls	r2, r2, #21
 800290e:	430a      	orrs	r2, r1
 8002910:	491f      	ldr	r1, [pc, #124]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	610b      	str	r3, [r1, #16]
 8002916:	e011      	b.n	800293c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002918:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002920:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6892      	ldr	r2, [r2, #8]
 8002928:	0211      	lsls	r1, r2, #8
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6952      	ldr	r2, [r2, #20]
 800292e:	0852      	lsrs	r2, r2, #1
 8002930:	3a01      	subs	r2, #1
 8002932:	0652      	lsls	r2, r2, #25
 8002934:	430a      	orrs	r2, r1
 8002936:	4916      	ldr	r1, [pc, #88]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800293c:	4b14      	ldr	r3, [pc, #80]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a13      	ldr	r2, [pc, #76]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002942:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002946:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe fa6a 	bl	8000e20 <HAL_GetTick>
 800294c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800294e:	e009      	b.n	8002964 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002950:	f7fe fa66 	bl	8000e20 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d902      	bls.n	8002964 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	73fb      	strb	r3, [r7, #15]
          break;
 8002962:	e005      	b.n	8002970 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0ef      	beq.n	8002950 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	4904      	ldr	r1, [pc, #16]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002980:	4313      	orrs	r3, r2
 8002982:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002984:	7bfb      	ldrb	r3, [r7, #15]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000

08002994 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029a2:	4b6a      	ldr	r3, [pc, #424]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d018      	beq.n	80029e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029ae:	4b67      	ldr	r3, [pc, #412]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0203 	and.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d10d      	bne.n	80029da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
       ||
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029c6:	4b61      	ldr	r3, [pc, #388]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
       ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d047      	beq.n	8002a6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
 80029de:	e044      	b.n	8002a6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d018      	beq.n	8002a1a <RCCEx_PLLSAI2_Config+0x86>
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d825      	bhi.n	8002a38 <RCCEx_PLLSAI2_Config+0xa4>
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d002      	beq.n	80029f6 <RCCEx_PLLSAI2_Config+0x62>
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d009      	beq.n	8002a08 <RCCEx_PLLSAI2_Config+0x74>
 80029f4:	e020      	b.n	8002a38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029f6:	4b55      	ldr	r3, [pc, #340]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d11d      	bne.n	8002a3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a06:	e01a      	b.n	8002a3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a08:	4b50      	ldr	r3, [pc, #320]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d116      	bne.n	8002a42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a18:	e013      	b.n	8002a42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a1a:	4b4c      	ldr	r3, [pc, #304]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10f      	bne.n	8002a46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a26:	4b49      	ldr	r3, [pc, #292]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a36:	e006      	b.n	8002a46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a3c:	e004      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a3e:	bf00      	nop
 8002a40:	e002      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a42:	bf00      	nop
 8002a44:	e000      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10d      	bne.n	8002a6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a4e:	4b3f      	ldr	r3, [pc, #252]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6819      	ldr	r1, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	430b      	orrs	r3, r1
 8002a64:	4939      	ldr	r1, [pc, #228]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d167      	bne.n	8002b40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a70:	4b36      	ldr	r3, [pc, #216]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a35      	ldr	r2, [pc, #212]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a7c:	f7fe f9d0 	bl	8000e20 <HAL_GetTick>
 8002a80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a82:	e009      	b.n	8002a98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a84:	f7fe f9cc 	bl	8000e20 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d902      	bls.n	8002a98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	73fb      	strb	r3, [r7, #15]
        break;
 8002a96:	e005      	b.n	8002aa4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a98:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1ef      	bne.n	8002a84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d14a      	bne.n	8002b40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d111      	bne.n	8002ad4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ab0:	4b26      	ldr	r3, [pc, #152]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6892      	ldr	r2, [r2, #8]
 8002ac0:	0211      	lsls	r1, r2, #8
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68d2      	ldr	r2, [r2, #12]
 8002ac6:	0912      	lsrs	r2, r2, #4
 8002ac8:	0452      	lsls	r2, r2, #17
 8002aca:	430a      	orrs	r2, r1
 8002acc:	491f      	ldr	r1, [pc, #124]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	614b      	str	r3, [r1, #20]
 8002ad2:	e011      	b.n	8002af8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002adc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6892      	ldr	r2, [r2, #8]
 8002ae4:	0211      	lsls	r1, r2, #8
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6912      	ldr	r2, [r2, #16]
 8002aea:	0852      	lsrs	r2, r2, #1
 8002aec:	3a01      	subs	r2, #1
 8002aee:	0652      	lsls	r2, r2, #25
 8002af0:	430a      	orrs	r2, r1
 8002af2:	4916      	ldr	r1, [pc, #88]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002af8:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b04:	f7fe f98c 	bl	8000e20 <HAL_GetTick>
 8002b08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b0a:	e009      	b.n	8002b20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b0c:	f7fe f988 	bl	8000e20 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d902      	bls.n	8002b20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	73fb      	strb	r3, [r7, #15]
          break;
 8002b1e:	e005      	b.n	8002b2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ef      	beq.n	8002b0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	4904      	ldr	r1, [pc, #16]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d06c      	beq.n	8002c3c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fd fefe 	bl	8000978 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	22ca      	movs	r2, #202	; 0xca
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2253      	movs	r2, #83	; 0x53
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fa49 	bl	800302c <RTC_EnterInitMode>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d14b      	bne.n	8002c3c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bb6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6899      	ldr	r1, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68d2      	ldr	r2, [r2, #12]
 8002bde:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6919      	ldr	r1, [r3, #16]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	041a      	lsls	r2, r3, #16
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fa4d 	bl	8003094 <RTC_ExitInitMode>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d11b      	bne.n	8002c3c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0203 	bic.w	r2, r2, #3
 8002c12:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69da      	ldr	r2, [r3, #28]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	22ff      	movs	r2, #255	; 0xff
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c46:	b590      	push	{r4, r7, lr}
 8002c48:	b087      	sub	sp, #28
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_RTC_SetTime+0x1a>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e08b      	b.n	8002d78 <HAL_RTC_SetTime+0x132>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	22ca      	movs	r2, #202	; 0xca
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2253      	movs	r2, #83	; 0x53
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f9d3 	bl	800302c <RTC_EnterInitMode>
 8002c86:	4603      	mov	r3, r0
 8002c88:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002c8a:	7cfb      	ldrb	r3, [r7, #19]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d163      	bne.n	8002d58 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d126      	bne.n	8002ce4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d102      	bne.n	8002caa <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fa2e 	bl	8003110 <RTC_ByteToBcd2>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	785b      	ldrb	r3, [r3, #1]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fa27 	bl	8003110 <RTC_ByteToBcd2>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002cc6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	789b      	ldrb	r3, [r3, #2]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fa1f 	bl	8003110 <RTC_ByteToBcd2>
 8002cd2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002cd4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	78db      	ldrb	r3, [r3, #3]
 8002cdc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	e018      	b.n	8002d16 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d102      	bne.n	8002cf8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	785b      	ldrb	r3, [r3, #1]
 8002d02:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002d04:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d0a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	78db      	ldrb	r3, [r3, #3]
 8002d10:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002d20:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d24:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d34:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6899      	ldr	r1, [r3, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f9a0 	bl	8003094 <RTC_ExitInitMode>
 8002d54:	4603      	mov	r3, r0
 8002d56:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	22ff      	movs	r2, #255	; 0xff
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002d60:	7cfb      	ldrb	r3, [r7, #19]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d103      	bne.n	8002d6e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	371c      	adds	r7, #28
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd90      	pop	{r4, r7, pc}

08002d80 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002dae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002db2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	0c1b      	lsrs	r3, r3, #16
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	0d9b      	lsrs	r3, r3, #22
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d11a      	bne.n	8002e2e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 f9a7 	bl	8003150 <RTC_Bcd2ToByte>
 8002e02:	4603      	mov	r3, r0
 8002e04:	461a      	mov	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	785b      	ldrb	r3, [r3, #1]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 f99e 	bl	8003150 <RTC_Bcd2ToByte>
 8002e14:	4603      	mov	r3, r0
 8002e16:	461a      	mov	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	789b      	ldrb	r3, [r3, #2]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f995 	bl	8003150 <RTC_Bcd2ToByte>
 8002e26:	4603      	mov	r3, r0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_RTC_SetDate+0x1a>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e075      	b.n	8002f3e <HAL_RTC_SetDate+0x106>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10e      	bne.n	8002e86 <HAL_RTC_SetDate+0x4e>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	785b      	ldrb	r3, [r3, #1]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	f023 0310 	bic.w	r3, r3, #16
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	330a      	adds	r3, #10
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d11c      	bne.n	8002ec6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	78db      	ldrb	r3, [r3, #3]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 f93d 	bl	8003110 <RTC_ByteToBcd2>
 8002e96:	4603      	mov	r3, r0
 8002e98:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	785b      	ldrb	r3, [r3, #1]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f936 	bl	8003110 <RTC_ByteToBcd2>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002ea8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	789b      	ldrb	r3, [r3, #2]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f92e 	bl	8003110 <RTC_ByteToBcd2>
 8002eb4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002eb6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	e00e      	b.n	8002ee4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	78db      	ldrb	r3, [r3, #3]
 8002eca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	785b      	ldrb	r3, [r3, #1]
 8002ed0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ed2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ed8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	22ca      	movs	r2, #202	; 0xca
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2253      	movs	r2, #83	; 0x53
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f899 	bl	800302c <RTC_EnterInitMode>
 8002efa:	4603      	mov	r3, r0
 8002efc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002efe:	7cfb      	ldrb	r3, [r7, #19]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10c      	bne.n	8002f1e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f0e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f12:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f8bd 	bl	8003094 <RTC_ExitInitMode>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	22ff      	movs	r2, #255	; 0xff
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002f26:	7cfb      	ldrb	r3, [r7, #19]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d103      	bne.n	8002f34 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002f3c:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	371c      	adds	r7, #28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd90      	pop	{r4, r7, pc}

08002f46 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f5c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f60:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	0a1b      	lsrs	r3, r3, #8
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	0b5b      	lsrs	r3, r3, #13
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d11a      	bne.n	8002fd6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	78db      	ldrb	r3, [r3, #3]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 f8d3 	bl	8003150 <RTC_Bcd2ToByte>
 8002faa:	4603      	mov	r3, r0
 8002fac:	461a      	mov	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	785b      	ldrb	r3, [r3, #1]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f8ca 	bl	8003150 <RTC_Bcd2ToByte>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	789b      	ldrb	r3, [r3, #2]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 f8c1 	bl	8003150 <RTC_Bcd2ToByte>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ff6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002ff8:	f7fd ff12 	bl	8000e20 <HAL_GetTick>
 8002ffc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ffe:	e009      	b.n	8003014 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003000:	f7fd ff0e 	bl	8000e20 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800300e:	d901      	bls.n	8003014 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e007      	b.n	8003024 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0ee      	beq.n	8003000 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d120      	bne.n	8003088 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f04f 32ff 	mov.w	r2, #4294967295
 800304e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003050:	f7fd fee6 	bl	8000e20 <HAL_GetTick>
 8003054:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003056:	e00d      	b.n	8003074 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003058:	f7fd fee2 	bl	8000e20 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003066:	d905      	bls.n	8003074 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2203      	movs	r2, #3
 8003070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d102      	bne.n	8003088 <RTC_EnterInitMode+0x5c>
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d1e7      	bne.n	8003058 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003088:	7bfb      	ldrb	r3, [r7, #15]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80030a0:	4b1a      	ldr	r3, [pc, #104]	; (800310c <RTC_ExitInitMode+0x78>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4a19      	ldr	r2, [pc, #100]	; (800310c <RTC_ExitInitMode+0x78>)
 80030a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030aa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80030ac:	4b17      	ldr	r3, [pc, #92]	; (800310c <RTC_ExitInitMode+0x78>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10c      	bne.n	80030d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff ff91 	bl	8002fe0 <HAL_RTC_WaitForSynchro>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01e      	beq.n	8003102 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2203      	movs	r2, #3
 80030c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	73fb      	strb	r3, [r7, #15]
 80030d0:	e017      	b.n	8003102 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80030d2:	4b0e      	ldr	r3, [pc, #56]	; (800310c <RTC_ExitInitMode+0x78>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	4a0d      	ldr	r2, [pc, #52]	; (800310c <RTC_ExitInitMode+0x78>)
 80030d8:	f023 0320 	bic.w	r3, r3, #32
 80030dc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7ff ff7e 	bl	8002fe0 <HAL_RTC_WaitForSynchro>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2203      	movs	r2, #3
 80030ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80030f6:	4b05      	ldr	r3, [pc, #20]	; (800310c <RTC_ExitInitMode+0x78>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	4a04      	ldr	r2, [pc, #16]	; (800310c <RTC_ExitInitMode+0x78>)
 80030fc:	f043 0320 	orr.w	r3, r3, #32
 8003100:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003102:	7bfb      	ldrb	r3, [r7, #15]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40002800 	.word	0x40002800

08003110 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003122:	e005      	b.n	8003130 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3301      	adds	r3, #1
 8003128:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800312a:	7afb      	ldrb	r3, [r7, #11]
 800312c:	3b0a      	subs	r3, #10
 800312e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003130:	7afb      	ldrb	r3, [r7, #11]
 8003132:	2b09      	cmp	r3, #9
 8003134:	d8f6      	bhi.n	8003124 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	b2da      	uxtb	r2, r3
 800313e:	7afb      	ldrb	r3, [r7, #11]
 8003140:	4313      	orrs	r3, r2
 8003142:	b2db      	uxtb	r3, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	b2db      	uxtb	r3, r3
 8003160:	461a      	mov	r2, r3
 8003162:	0092      	lsls	r2, r2, #2
 8003164:	4413      	add	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	b2da      	uxtb	r2, r3
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	4413      	add	r3, r2
 8003176:	b2db      	uxtb	r3, r3
}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e040      	b.n	8003218 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fd fd4c 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2224      	movs	r2, #36	; 0x24
 80031b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f8c0 	bl	8003348 <UART_SetConfig>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e022      	b.n	8003218 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fb3e 	bl	800385c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fbc5 	bl	80039a0 <UART_CheckIdleState>
 8003216:	4603      	mov	r3, r0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08a      	sub	sp, #40	; 0x28
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	4613      	mov	r3, r2
 800322e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003234:	2b20      	cmp	r3, #32
 8003236:	f040 8082 	bne.w	800333e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HAL_UART_Transmit+0x26>
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e07a      	b.n	8003340 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_UART_Transmit+0x38>
 8003254:	2302      	movs	r3, #2
 8003256:	e073      	b.n	8003340 <HAL_UART_Transmit+0x120>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2221      	movs	r2, #33	; 0x21
 800326c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800326e:	f7fd fdd7 	bl	8000e20 <HAL_GetTick>
 8003272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	88fa      	ldrh	r2, [r7, #6]
 8003278:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	88fa      	ldrh	r2, [r7, #6]
 8003280:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328c:	d108      	bne.n	80032a0 <HAL_UART_Transmit+0x80>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d104      	bne.n	80032a0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	e003      	b.n	80032a8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80032b0:	e02d      	b.n	800330e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2200      	movs	r2, #0
 80032ba:	2180      	movs	r1, #128	; 0x80
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fbb8 	bl	8003a32 <UART_WaitOnFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e039      	b.n	8003340 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10b      	bne.n	80032ea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	881a      	ldrh	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032de:	b292      	uxth	r2, r2
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	3302      	adds	r3, #2
 80032e6:	61bb      	str	r3, [r7, #24]
 80032e8:	e008      	b.n	80032fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	781a      	ldrb	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	b292      	uxth	r2, r2
 80032f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3301      	adds	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1cb      	bne.n	80032b2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2200      	movs	r2, #0
 8003322:	2140      	movs	r1, #64	; 0x40
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 fb84 	bl	8003a32 <UART_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e005      	b.n	8003340 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	e000      	b.n	8003340 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800333e:	2302      	movs	r3, #2
  }
}
 8003340:	4618      	mov	r0, r3
 8003342:	3720      	adds	r7, #32
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003348:	b5b0      	push	{r4, r5, r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	4313      	orrs	r3, r2
 800336a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4bad      	ldr	r3, [pc, #692]	; (8003628 <UART_SetConfig+0x2e0>)
 8003374:	4013      	ands	r3, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	69f9      	ldr	r1, [r7, #28]
 800337c:	430b      	orrs	r3, r1
 800337e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4aa2      	ldr	r2, [pc, #648]	; (800362c <UART_SetConfig+0x2e4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d004      	beq.n	80033b0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a99      	ldr	r2, [pc, #612]	; (8003630 <UART_SetConfig+0x2e8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d121      	bne.n	8003412 <UART_SetConfig+0xca>
 80033ce:	4b99      	ldr	r3, [pc, #612]	; (8003634 <UART_SetConfig+0x2ec>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d817      	bhi.n	800340c <UART_SetConfig+0xc4>
 80033dc:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <UART_SetConfig+0x9c>)
 80033de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e2:	bf00      	nop
 80033e4:	080033f5 	.word	0x080033f5
 80033e8:	08003401 	.word	0x08003401
 80033ec:	080033fb 	.word	0x080033fb
 80033f0:	08003407 	.word	0x08003407
 80033f4:	2301      	movs	r3, #1
 80033f6:	76fb      	strb	r3, [r7, #27]
 80033f8:	e0e7      	b.n	80035ca <UART_SetConfig+0x282>
 80033fa:	2302      	movs	r3, #2
 80033fc:	76fb      	strb	r3, [r7, #27]
 80033fe:	e0e4      	b.n	80035ca <UART_SetConfig+0x282>
 8003400:	2304      	movs	r3, #4
 8003402:	76fb      	strb	r3, [r7, #27]
 8003404:	e0e1      	b.n	80035ca <UART_SetConfig+0x282>
 8003406:	2308      	movs	r3, #8
 8003408:	76fb      	strb	r3, [r7, #27]
 800340a:	e0de      	b.n	80035ca <UART_SetConfig+0x282>
 800340c:	2310      	movs	r3, #16
 800340e:	76fb      	strb	r3, [r7, #27]
 8003410:	e0db      	b.n	80035ca <UART_SetConfig+0x282>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a88      	ldr	r2, [pc, #544]	; (8003638 <UART_SetConfig+0x2f0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d132      	bne.n	8003482 <UART_SetConfig+0x13a>
 800341c:	4b85      	ldr	r3, [pc, #532]	; (8003634 <UART_SetConfig+0x2ec>)
 800341e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b0c      	cmp	r3, #12
 8003428:	d828      	bhi.n	800347c <UART_SetConfig+0x134>
 800342a:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <UART_SetConfig+0xe8>)
 800342c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003430:	08003465 	.word	0x08003465
 8003434:	0800347d 	.word	0x0800347d
 8003438:	0800347d 	.word	0x0800347d
 800343c:	0800347d 	.word	0x0800347d
 8003440:	08003471 	.word	0x08003471
 8003444:	0800347d 	.word	0x0800347d
 8003448:	0800347d 	.word	0x0800347d
 800344c:	0800347d 	.word	0x0800347d
 8003450:	0800346b 	.word	0x0800346b
 8003454:	0800347d 	.word	0x0800347d
 8003458:	0800347d 	.word	0x0800347d
 800345c:	0800347d 	.word	0x0800347d
 8003460:	08003477 	.word	0x08003477
 8003464:	2300      	movs	r3, #0
 8003466:	76fb      	strb	r3, [r7, #27]
 8003468:	e0af      	b.n	80035ca <UART_SetConfig+0x282>
 800346a:	2302      	movs	r3, #2
 800346c:	76fb      	strb	r3, [r7, #27]
 800346e:	e0ac      	b.n	80035ca <UART_SetConfig+0x282>
 8003470:	2304      	movs	r3, #4
 8003472:	76fb      	strb	r3, [r7, #27]
 8003474:	e0a9      	b.n	80035ca <UART_SetConfig+0x282>
 8003476:	2308      	movs	r3, #8
 8003478:	76fb      	strb	r3, [r7, #27]
 800347a:	e0a6      	b.n	80035ca <UART_SetConfig+0x282>
 800347c:	2310      	movs	r3, #16
 800347e:	76fb      	strb	r3, [r7, #27]
 8003480:	e0a3      	b.n	80035ca <UART_SetConfig+0x282>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a6d      	ldr	r2, [pc, #436]	; (800363c <UART_SetConfig+0x2f4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d120      	bne.n	80034ce <UART_SetConfig+0x186>
 800348c:	4b69      	ldr	r3, [pc, #420]	; (8003634 <UART_SetConfig+0x2ec>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003496:	2b30      	cmp	r3, #48	; 0x30
 8003498:	d013      	beq.n	80034c2 <UART_SetConfig+0x17a>
 800349a:	2b30      	cmp	r3, #48	; 0x30
 800349c:	d814      	bhi.n	80034c8 <UART_SetConfig+0x180>
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d009      	beq.n	80034b6 <UART_SetConfig+0x16e>
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d810      	bhi.n	80034c8 <UART_SetConfig+0x180>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <UART_SetConfig+0x168>
 80034aa:	2b10      	cmp	r3, #16
 80034ac:	d006      	beq.n	80034bc <UART_SetConfig+0x174>
 80034ae:	e00b      	b.n	80034c8 <UART_SetConfig+0x180>
 80034b0:	2300      	movs	r3, #0
 80034b2:	76fb      	strb	r3, [r7, #27]
 80034b4:	e089      	b.n	80035ca <UART_SetConfig+0x282>
 80034b6:	2302      	movs	r3, #2
 80034b8:	76fb      	strb	r3, [r7, #27]
 80034ba:	e086      	b.n	80035ca <UART_SetConfig+0x282>
 80034bc:	2304      	movs	r3, #4
 80034be:	76fb      	strb	r3, [r7, #27]
 80034c0:	e083      	b.n	80035ca <UART_SetConfig+0x282>
 80034c2:	2308      	movs	r3, #8
 80034c4:	76fb      	strb	r3, [r7, #27]
 80034c6:	e080      	b.n	80035ca <UART_SetConfig+0x282>
 80034c8:	2310      	movs	r3, #16
 80034ca:	76fb      	strb	r3, [r7, #27]
 80034cc:	e07d      	b.n	80035ca <UART_SetConfig+0x282>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a5b      	ldr	r2, [pc, #364]	; (8003640 <UART_SetConfig+0x2f8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d120      	bne.n	800351a <UART_SetConfig+0x1d2>
 80034d8:	4b56      	ldr	r3, [pc, #344]	; (8003634 <UART_SetConfig+0x2ec>)
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034e2:	2bc0      	cmp	r3, #192	; 0xc0
 80034e4:	d013      	beq.n	800350e <UART_SetConfig+0x1c6>
 80034e6:	2bc0      	cmp	r3, #192	; 0xc0
 80034e8:	d814      	bhi.n	8003514 <UART_SetConfig+0x1cc>
 80034ea:	2b80      	cmp	r3, #128	; 0x80
 80034ec:	d009      	beq.n	8003502 <UART_SetConfig+0x1ba>
 80034ee:	2b80      	cmp	r3, #128	; 0x80
 80034f0:	d810      	bhi.n	8003514 <UART_SetConfig+0x1cc>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <UART_SetConfig+0x1b4>
 80034f6:	2b40      	cmp	r3, #64	; 0x40
 80034f8:	d006      	beq.n	8003508 <UART_SetConfig+0x1c0>
 80034fa:	e00b      	b.n	8003514 <UART_SetConfig+0x1cc>
 80034fc:	2300      	movs	r3, #0
 80034fe:	76fb      	strb	r3, [r7, #27]
 8003500:	e063      	b.n	80035ca <UART_SetConfig+0x282>
 8003502:	2302      	movs	r3, #2
 8003504:	76fb      	strb	r3, [r7, #27]
 8003506:	e060      	b.n	80035ca <UART_SetConfig+0x282>
 8003508:	2304      	movs	r3, #4
 800350a:	76fb      	strb	r3, [r7, #27]
 800350c:	e05d      	b.n	80035ca <UART_SetConfig+0x282>
 800350e:	2308      	movs	r3, #8
 8003510:	76fb      	strb	r3, [r7, #27]
 8003512:	e05a      	b.n	80035ca <UART_SetConfig+0x282>
 8003514:	2310      	movs	r3, #16
 8003516:	76fb      	strb	r3, [r7, #27]
 8003518:	e057      	b.n	80035ca <UART_SetConfig+0x282>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a49      	ldr	r2, [pc, #292]	; (8003644 <UART_SetConfig+0x2fc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d125      	bne.n	8003570 <UART_SetConfig+0x228>
 8003524:	4b43      	ldr	r3, [pc, #268]	; (8003634 <UART_SetConfig+0x2ec>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003532:	d017      	beq.n	8003564 <UART_SetConfig+0x21c>
 8003534:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003538:	d817      	bhi.n	800356a <UART_SetConfig+0x222>
 800353a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800353e:	d00b      	beq.n	8003558 <UART_SetConfig+0x210>
 8003540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003544:	d811      	bhi.n	800356a <UART_SetConfig+0x222>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <UART_SetConfig+0x20a>
 800354a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354e:	d006      	beq.n	800355e <UART_SetConfig+0x216>
 8003550:	e00b      	b.n	800356a <UART_SetConfig+0x222>
 8003552:	2300      	movs	r3, #0
 8003554:	76fb      	strb	r3, [r7, #27]
 8003556:	e038      	b.n	80035ca <UART_SetConfig+0x282>
 8003558:	2302      	movs	r3, #2
 800355a:	76fb      	strb	r3, [r7, #27]
 800355c:	e035      	b.n	80035ca <UART_SetConfig+0x282>
 800355e:	2304      	movs	r3, #4
 8003560:	76fb      	strb	r3, [r7, #27]
 8003562:	e032      	b.n	80035ca <UART_SetConfig+0x282>
 8003564:	2308      	movs	r3, #8
 8003566:	76fb      	strb	r3, [r7, #27]
 8003568:	e02f      	b.n	80035ca <UART_SetConfig+0x282>
 800356a:	2310      	movs	r3, #16
 800356c:	76fb      	strb	r3, [r7, #27]
 800356e:	e02c      	b.n	80035ca <UART_SetConfig+0x282>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a2d      	ldr	r2, [pc, #180]	; (800362c <UART_SetConfig+0x2e4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d125      	bne.n	80035c6 <UART_SetConfig+0x27e>
 800357a:	4b2e      	ldr	r3, [pc, #184]	; (8003634 <UART_SetConfig+0x2ec>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003580:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003584:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003588:	d017      	beq.n	80035ba <UART_SetConfig+0x272>
 800358a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800358e:	d817      	bhi.n	80035c0 <UART_SetConfig+0x278>
 8003590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003594:	d00b      	beq.n	80035ae <UART_SetConfig+0x266>
 8003596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800359a:	d811      	bhi.n	80035c0 <UART_SetConfig+0x278>
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <UART_SetConfig+0x260>
 80035a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a4:	d006      	beq.n	80035b4 <UART_SetConfig+0x26c>
 80035a6:	e00b      	b.n	80035c0 <UART_SetConfig+0x278>
 80035a8:	2300      	movs	r3, #0
 80035aa:	76fb      	strb	r3, [r7, #27]
 80035ac:	e00d      	b.n	80035ca <UART_SetConfig+0x282>
 80035ae:	2302      	movs	r3, #2
 80035b0:	76fb      	strb	r3, [r7, #27]
 80035b2:	e00a      	b.n	80035ca <UART_SetConfig+0x282>
 80035b4:	2304      	movs	r3, #4
 80035b6:	76fb      	strb	r3, [r7, #27]
 80035b8:	e007      	b.n	80035ca <UART_SetConfig+0x282>
 80035ba:	2308      	movs	r3, #8
 80035bc:	76fb      	strb	r3, [r7, #27]
 80035be:	e004      	b.n	80035ca <UART_SetConfig+0x282>
 80035c0:	2310      	movs	r3, #16
 80035c2:	76fb      	strb	r3, [r7, #27]
 80035c4:	e001      	b.n	80035ca <UART_SetConfig+0x282>
 80035c6:	2310      	movs	r3, #16
 80035c8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a17      	ldr	r2, [pc, #92]	; (800362c <UART_SetConfig+0x2e4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	f040 8087 	bne.w	80036e4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035d6:	7efb      	ldrb	r3, [r7, #27]
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d837      	bhi.n	800364c <UART_SetConfig+0x304>
 80035dc:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <UART_SetConfig+0x29c>)
 80035de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e2:	bf00      	nop
 80035e4:	08003609 	.word	0x08003609
 80035e8:	0800364d 	.word	0x0800364d
 80035ec:	08003611 	.word	0x08003611
 80035f0:	0800364d 	.word	0x0800364d
 80035f4:	08003617 	.word	0x08003617
 80035f8:	0800364d 	.word	0x0800364d
 80035fc:	0800364d 	.word	0x0800364d
 8003600:	0800364d 	.word	0x0800364d
 8003604:	0800361f 	.word	0x0800361f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003608:	f7fe fd4a 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 800360c:	6178      	str	r0, [r7, #20]
        break;
 800360e:	e022      	b.n	8003656 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003610:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <UART_SetConfig+0x300>)
 8003612:	617b      	str	r3, [r7, #20]
        break;
 8003614:	e01f      	b.n	8003656 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003616:	f7fe fcab 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 800361a:	6178      	str	r0, [r7, #20]
        break;
 800361c:	e01b      	b.n	8003656 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800361e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003622:	617b      	str	r3, [r7, #20]
        break;
 8003624:	e017      	b.n	8003656 <UART_SetConfig+0x30e>
 8003626:	bf00      	nop
 8003628:	efff69f3 	.word	0xefff69f3
 800362c:	40008000 	.word	0x40008000
 8003630:	40013800 	.word	0x40013800
 8003634:	40021000 	.word	0x40021000
 8003638:	40004400 	.word	0x40004400
 800363c:	40004800 	.word	0x40004800
 8003640:	40004c00 	.word	0x40004c00
 8003644:	40005000 	.word	0x40005000
 8003648:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	76bb      	strb	r3, [r7, #26]
        break;
 8003654:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80f1 	beq.w	8003840 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4413      	add	r3, r2
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	429a      	cmp	r2, r3
 800366c:	d305      	bcc.n	800367a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	429a      	cmp	r2, r3
 8003678:	d902      	bls.n	8003680 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	76bb      	strb	r3, [r7, #26]
 800367e:	e0df      	b.n	8003840 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	4618      	mov	r0, r3
 8003684:	f04f 0100 	mov.w	r1, #0
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	020b      	lsls	r3, r1, #8
 8003692:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003696:	0202      	lsls	r2, r0, #8
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	6849      	ldr	r1, [r1, #4]
 800369c:	0849      	lsrs	r1, r1, #1
 800369e:	4608      	mov	r0, r1
 80036a0:	f04f 0100 	mov.w	r1, #0
 80036a4:	1814      	adds	r4, r2, r0
 80036a6:	eb43 0501 	adc.w	r5, r3, r1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	461a      	mov	r2, r3
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	4620      	mov	r0, r4
 80036b6:	4629      	mov	r1, r5
 80036b8:	f7fc fdda 	bl	8000270 <__aeabi_uldivmod>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4613      	mov	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ca:	d308      	bcc.n	80036de <UART_SetConfig+0x396>
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036d2:	d204      	bcs.n	80036de <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	60da      	str	r2, [r3, #12]
 80036dc:	e0b0      	b.n	8003840 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	76bb      	strb	r3, [r7, #26]
 80036e2:	e0ad      	b.n	8003840 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ec:	d15b      	bne.n	80037a6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80036ee:	7efb      	ldrb	r3, [r7, #27]
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d828      	bhi.n	8003746 <UART_SetConfig+0x3fe>
 80036f4:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <UART_SetConfig+0x3b4>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	08003721 	.word	0x08003721
 8003700:	08003729 	.word	0x08003729
 8003704:	08003731 	.word	0x08003731
 8003708:	08003747 	.word	0x08003747
 800370c:	08003737 	.word	0x08003737
 8003710:	08003747 	.word	0x08003747
 8003714:	08003747 	.word	0x08003747
 8003718:	08003747 	.word	0x08003747
 800371c:	0800373f 	.word	0x0800373f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003720:	f7fe fcbe 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8003724:	6178      	str	r0, [r7, #20]
        break;
 8003726:	e013      	b.n	8003750 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003728:	f7fe fcd0 	bl	80020cc <HAL_RCC_GetPCLK2Freq>
 800372c:	6178      	str	r0, [r7, #20]
        break;
 800372e:	e00f      	b.n	8003750 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003730:	4b49      	ldr	r3, [pc, #292]	; (8003858 <UART_SetConfig+0x510>)
 8003732:	617b      	str	r3, [r7, #20]
        break;
 8003734:	e00c      	b.n	8003750 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003736:	f7fe fc1b 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 800373a:	6178      	str	r0, [r7, #20]
        break;
 800373c:	e008      	b.n	8003750 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800373e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003742:	617b      	str	r3, [r7, #20]
        break;
 8003744:	e004      	b.n	8003750 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	76bb      	strb	r3, [r7, #26]
        break;
 800374e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d074      	beq.n	8003840 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	005a      	lsls	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	085b      	lsrs	r3, r3, #1
 8003760:	441a      	add	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	fbb2 f3f3 	udiv	r3, r2, r3
 800376a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b0f      	cmp	r3, #15
 8003770:	d916      	bls.n	80037a0 <UART_SetConfig+0x458>
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003778:	d212      	bcs.n	80037a0 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	b29b      	uxth	r3, r3
 800377e:	f023 030f 	bic.w	r3, r3, #15
 8003782:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	085b      	lsrs	r3, r3, #1
 8003788:	b29b      	uxth	r3, r3
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	b29a      	uxth	r2, r3
 8003790:	89fb      	ldrh	r3, [r7, #14]
 8003792:	4313      	orrs	r3, r2
 8003794:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	89fa      	ldrh	r2, [r7, #14]
 800379c:	60da      	str	r2, [r3, #12]
 800379e:	e04f      	b.n	8003840 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	76bb      	strb	r3, [r7, #26]
 80037a4:	e04c      	b.n	8003840 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037a6:	7efb      	ldrb	r3, [r7, #27]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d828      	bhi.n	80037fe <UART_SetConfig+0x4b6>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <UART_SetConfig+0x46c>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037d9 	.word	0x080037d9
 80037b8:	080037e1 	.word	0x080037e1
 80037bc:	080037e9 	.word	0x080037e9
 80037c0:	080037ff 	.word	0x080037ff
 80037c4:	080037ef 	.word	0x080037ef
 80037c8:	080037ff 	.word	0x080037ff
 80037cc:	080037ff 	.word	0x080037ff
 80037d0:	080037ff 	.word	0x080037ff
 80037d4:	080037f7 	.word	0x080037f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d8:	f7fe fc62 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 80037dc:	6178      	str	r0, [r7, #20]
        break;
 80037de:	e013      	b.n	8003808 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037e0:	f7fe fc74 	bl	80020cc <HAL_RCC_GetPCLK2Freq>
 80037e4:	6178      	str	r0, [r7, #20]
        break;
 80037e6:	e00f      	b.n	8003808 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037e8:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <UART_SetConfig+0x510>)
 80037ea:	617b      	str	r3, [r7, #20]
        break;
 80037ec:	e00c      	b.n	8003808 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ee:	f7fe fbbf 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 80037f2:	6178      	str	r0, [r7, #20]
        break;
 80037f4:	e008      	b.n	8003808 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037fa:	617b      	str	r3, [r7, #20]
        break;
 80037fc:	e004      	b.n	8003808 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	76bb      	strb	r3, [r7, #26]
        break;
 8003806:	bf00      	nop
    }

    if (pclk != 0U)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d018      	beq.n	8003840 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	085a      	lsrs	r2, r3, #1
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	441a      	add	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	2b0f      	cmp	r3, #15
 8003826:	d909      	bls.n	800383c <UART_SetConfig+0x4f4>
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382e:	d205      	bcs.n	800383c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	b29a      	uxth	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	e001      	b.n	8003840 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800384c:	7ebb      	ldrb	r3, [r7, #26]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bdb0      	pop	{r4, r5, r7, pc}
 8003856:	bf00      	nop
 8003858:	00f42400 	.word	0x00f42400

0800385c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01a      	beq.n	8003972 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800395a:	d10a      	bne.n	8003972 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	605a      	str	r2, [r3, #4]
  }
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039b0:	f7fd fa36 	bl	8000e20 <HAL_GetTick>
 80039b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d10e      	bne.n	80039e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f82d 	bl	8003a32 <UART_WaitOnFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e023      	b.n	8003a2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d10e      	bne.n	8003a0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f817 	bl	8003a32 <UART_WaitOnFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e00d      	b.n	8003a2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b09c      	sub	sp, #112	; 0x70
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	603b      	str	r3, [r7, #0]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a42:	e0a5      	b.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4a:	f000 80a1 	beq.w	8003b90 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4e:	f7fd f9e7 	bl	8000e20 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d302      	bcc.n	8003a64 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d13e      	bne.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a78:	667b      	str	r3, [r7, #100]	; 0x64
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a84:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e6      	bne.n	8003a64 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	663b      	str	r3, [r7, #96]	; 0x60
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ab6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ab8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003abc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e5      	bne.n	8003a96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2220      	movs	r2, #32
 8003ace:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e067      	b.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d04f      	beq.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003afe:	d147      	bne.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b08:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	e853 3f00 	ldrex	r3, [r3]
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b28:	637b      	str	r3, [r7, #52]	; 0x34
 8003b2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b30:	e841 2300 	strex	r3, r2, [r1]
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e6      	bne.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3308      	adds	r3, #8
 8003b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	e853 3f00 	ldrex	r3, [r3]
 8003b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3308      	adds	r3, #8
 8003b5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b5c:	623a      	str	r2, [r7, #32]
 8003b5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b60:	69f9      	ldr	r1, [r7, #28]
 8003b62:	6a3a      	ldr	r2, [r7, #32]
 8003b64:	e841 2300 	strex	r3, r2, [r1]
 8003b68:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e5      	bne.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e010      	b.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69da      	ldr	r2, [r3, #28]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	bf0c      	ite	eq
 8003ba0:	2301      	moveq	r3, #1
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	f43f af4a 	beq.w	8003a44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3770      	adds	r7, #112	; 0x70
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <__errno>:
 8003bbc:	4b01      	ldr	r3, [pc, #4]	; (8003bc4 <__errno+0x8>)
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	2000000c 	.word	0x2000000c

08003bc8 <__libc_init_array>:
 8003bc8:	b570      	push	{r4, r5, r6, lr}
 8003bca:	4d0d      	ldr	r5, [pc, #52]	; (8003c00 <__libc_init_array+0x38>)
 8003bcc:	4c0d      	ldr	r4, [pc, #52]	; (8003c04 <__libc_init_array+0x3c>)
 8003bce:	1b64      	subs	r4, r4, r5
 8003bd0:	10a4      	asrs	r4, r4, #2
 8003bd2:	2600      	movs	r6, #0
 8003bd4:	42a6      	cmp	r6, r4
 8003bd6:	d109      	bne.n	8003bec <__libc_init_array+0x24>
 8003bd8:	4d0b      	ldr	r5, [pc, #44]	; (8003c08 <__libc_init_array+0x40>)
 8003bda:	4c0c      	ldr	r4, [pc, #48]	; (8003c0c <__libc_init_array+0x44>)
 8003bdc:	f000 ffec 	bl	8004bb8 <_init>
 8003be0:	1b64      	subs	r4, r4, r5
 8003be2:	10a4      	asrs	r4, r4, #2
 8003be4:	2600      	movs	r6, #0
 8003be6:	42a6      	cmp	r6, r4
 8003be8:	d105      	bne.n	8003bf6 <__libc_init_array+0x2e>
 8003bea:	bd70      	pop	{r4, r5, r6, pc}
 8003bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf0:	4798      	blx	r3
 8003bf2:	3601      	adds	r6, #1
 8003bf4:	e7ee      	b.n	8003bd4 <__libc_init_array+0xc>
 8003bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bfa:	4798      	blx	r3
 8003bfc:	3601      	adds	r6, #1
 8003bfe:	e7f2      	b.n	8003be6 <__libc_init_array+0x1e>
 8003c00:	08004d48 	.word	0x08004d48
 8003c04:	08004d48 	.word	0x08004d48
 8003c08:	08004d48 	.word	0x08004d48
 8003c0c:	08004d4c 	.word	0x08004d4c

08003c10 <memset>:
 8003c10:	4402      	add	r2, r0
 8003c12:	4603      	mov	r3, r0
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d100      	bne.n	8003c1a <memset+0xa>
 8003c18:	4770      	bx	lr
 8003c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c1e:	e7f9      	b.n	8003c14 <memset+0x4>

08003c20 <iprintf>:
 8003c20:	b40f      	push	{r0, r1, r2, r3}
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <iprintf+0x2c>)
 8003c24:	b513      	push	{r0, r1, r4, lr}
 8003c26:	681c      	ldr	r4, [r3, #0]
 8003c28:	b124      	cbz	r4, 8003c34 <iprintf+0x14>
 8003c2a:	69a3      	ldr	r3, [r4, #24]
 8003c2c:	b913      	cbnz	r3, 8003c34 <iprintf+0x14>
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f000 fa5e 	bl	80040f0 <__sinit>
 8003c34:	ab05      	add	r3, sp, #20
 8003c36:	9a04      	ldr	r2, [sp, #16]
 8003c38:	68a1      	ldr	r1, [r4, #8]
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f000 fc2f 	bl	80044a0 <_vfiprintf_r>
 8003c42:	b002      	add	sp, #8
 8003c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c48:	b004      	add	sp, #16
 8003c4a:	4770      	bx	lr
 8003c4c:	2000000c 	.word	0x2000000c

08003c50 <_puts_r>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	460e      	mov	r6, r1
 8003c54:	4605      	mov	r5, r0
 8003c56:	b118      	cbz	r0, 8003c60 <_puts_r+0x10>
 8003c58:	6983      	ldr	r3, [r0, #24]
 8003c5a:	b90b      	cbnz	r3, 8003c60 <_puts_r+0x10>
 8003c5c:	f000 fa48 	bl	80040f0 <__sinit>
 8003c60:	69ab      	ldr	r3, [r5, #24]
 8003c62:	68ac      	ldr	r4, [r5, #8]
 8003c64:	b913      	cbnz	r3, 8003c6c <_puts_r+0x1c>
 8003c66:	4628      	mov	r0, r5
 8003c68:	f000 fa42 	bl	80040f0 <__sinit>
 8003c6c:	4b2c      	ldr	r3, [pc, #176]	; (8003d20 <_puts_r+0xd0>)
 8003c6e:	429c      	cmp	r4, r3
 8003c70:	d120      	bne.n	8003cb4 <_puts_r+0x64>
 8003c72:	686c      	ldr	r4, [r5, #4]
 8003c74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c76:	07db      	lsls	r3, r3, #31
 8003c78:	d405      	bmi.n	8003c86 <_puts_r+0x36>
 8003c7a:	89a3      	ldrh	r3, [r4, #12]
 8003c7c:	0598      	lsls	r0, r3, #22
 8003c7e:	d402      	bmi.n	8003c86 <_puts_r+0x36>
 8003c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c82:	f000 fad3 	bl	800422c <__retarget_lock_acquire_recursive>
 8003c86:	89a3      	ldrh	r3, [r4, #12]
 8003c88:	0719      	lsls	r1, r3, #28
 8003c8a:	d51d      	bpl.n	8003cc8 <_puts_r+0x78>
 8003c8c:	6923      	ldr	r3, [r4, #16]
 8003c8e:	b1db      	cbz	r3, 8003cc8 <_puts_r+0x78>
 8003c90:	3e01      	subs	r6, #1
 8003c92:	68a3      	ldr	r3, [r4, #8]
 8003c94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	60a3      	str	r3, [r4, #8]
 8003c9c:	bb39      	cbnz	r1, 8003cee <_puts_r+0x9e>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	da38      	bge.n	8003d14 <_puts_r+0xc4>
 8003ca2:	4622      	mov	r2, r4
 8003ca4:	210a      	movs	r1, #10
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	f000 f848 	bl	8003d3c <__swbuf_r>
 8003cac:	3001      	adds	r0, #1
 8003cae:	d011      	beq.n	8003cd4 <_puts_r+0x84>
 8003cb0:	250a      	movs	r5, #10
 8003cb2:	e011      	b.n	8003cd8 <_puts_r+0x88>
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <_puts_r+0xd4>)
 8003cb6:	429c      	cmp	r4, r3
 8003cb8:	d101      	bne.n	8003cbe <_puts_r+0x6e>
 8003cba:	68ac      	ldr	r4, [r5, #8]
 8003cbc:	e7da      	b.n	8003c74 <_puts_r+0x24>
 8003cbe:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <_puts_r+0xd8>)
 8003cc0:	429c      	cmp	r4, r3
 8003cc2:	bf08      	it	eq
 8003cc4:	68ec      	ldreq	r4, [r5, #12]
 8003cc6:	e7d5      	b.n	8003c74 <_puts_r+0x24>
 8003cc8:	4621      	mov	r1, r4
 8003cca:	4628      	mov	r0, r5
 8003ccc:	f000 f888 	bl	8003de0 <__swsetup_r>
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	d0dd      	beq.n	8003c90 <_puts_r+0x40>
 8003cd4:	f04f 35ff 	mov.w	r5, #4294967295
 8003cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cda:	07da      	lsls	r2, r3, #31
 8003cdc:	d405      	bmi.n	8003cea <_puts_r+0x9a>
 8003cde:	89a3      	ldrh	r3, [r4, #12]
 8003ce0:	059b      	lsls	r3, r3, #22
 8003ce2:	d402      	bmi.n	8003cea <_puts_r+0x9a>
 8003ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ce6:	f000 faa2 	bl	800422e <__retarget_lock_release_recursive>
 8003cea:	4628      	mov	r0, r5
 8003cec:	bd70      	pop	{r4, r5, r6, pc}
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	da04      	bge.n	8003cfc <_puts_r+0xac>
 8003cf2:	69a2      	ldr	r2, [r4, #24]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	dc06      	bgt.n	8003d06 <_puts_r+0xb6>
 8003cf8:	290a      	cmp	r1, #10
 8003cfa:	d004      	beq.n	8003d06 <_puts_r+0xb6>
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	6022      	str	r2, [r4, #0]
 8003d02:	7019      	strb	r1, [r3, #0]
 8003d04:	e7c5      	b.n	8003c92 <_puts_r+0x42>
 8003d06:	4622      	mov	r2, r4
 8003d08:	4628      	mov	r0, r5
 8003d0a:	f000 f817 	bl	8003d3c <__swbuf_r>
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d1bf      	bne.n	8003c92 <_puts_r+0x42>
 8003d12:	e7df      	b.n	8003cd4 <_puts_r+0x84>
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	250a      	movs	r5, #10
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	6022      	str	r2, [r4, #0]
 8003d1c:	701d      	strb	r5, [r3, #0]
 8003d1e:	e7db      	b.n	8003cd8 <_puts_r+0x88>
 8003d20:	08004ccc 	.word	0x08004ccc
 8003d24:	08004cec 	.word	0x08004cec
 8003d28:	08004cac 	.word	0x08004cac

08003d2c <puts>:
 8003d2c:	4b02      	ldr	r3, [pc, #8]	; (8003d38 <puts+0xc>)
 8003d2e:	4601      	mov	r1, r0
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	f7ff bf8d 	b.w	8003c50 <_puts_r>
 8003d36:	bf00      	nop
 8003d38:	2000000c 	.word	0x2000000c

08003d3c <__swbuf_r>:
 8003d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3e:	460e      	mov	r6, r1
 8003d40:	4614      	mov	r4, r2
 8003d42:	4605      	mov	r5, r0
 8003d44:	b118      	cbz	r0, 8003d4e <__swbuf_r+0x12>
 8003d46:	6983      	ldr	r3, [r0, #24]
 8003d48:	b90b      	cbnz	r3, 8003d4e <__swbuf_r+0x12>
 8003d4a:	f000 f9d1 	bl	80040f0 <__sinit>
 8003d4e:	4b21      	ldr	r3, [pc, #132]	; (8003dd4 <__swbuf_r+0x98>)
 8003d50:	429c      	cmp	r4, r3
 8003d52:	d12b      	bne.n	8003dac <__swbuf_r+0x70>
 8003d54:	686c      	ldr	r4, [r5, #4]
 8003d56:	69a3      	ldr	r3, [r4, #24]
 8003d58:	60a3      	str	r3, [r4, #8]
 8003d5a:	89a3      	ldrh	r3, [r4, #12]
 8003d5c:	071a      	lsls	r2, r3, #28
 8003d5e:	d52f      	bpl.n	8003dc0 <__swbuf_r+0x84>
 8003d60:	6923      	ldr	r3, [r4, #16]
 8003d62:	b36b      	cbz	r3, 8003dc0 <__swbuf_r+0x84>
 8003d64:	6923      	ldr	r3, [r4, #16]
 8003d66:	6820      	ldr	r0, [r4, #0]
 8003d68:	1ac0      	subs	r0, r0, r3
 8003d6a:	6963      	ldr	r3, [r4, #20]
 8003d6c:	b2f6      	uxtb	r6, r6
 8003d6e:	4283      	cmp	r3, r0
 8003d70:	4637      	mov	r7, r6
 8003d72:	dc04      	bgt.n	8003d7e <__swbuf_r+0x42>
 8003d74:	4621      	mov	r1, r4
 8003d76:	4628      	mov	r0, r5
 8003d78:	f000 f926 	bl	8003fc8 <_fflush_r>
 8003d7c:	bb30      	cbnz	r0, 8003dcc <__swbuf_r+0x90>
 8003d7e:	68a3      	ldr	r3, [r4, #8]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	60a3      	str	r3, [r4, #8]
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	6022      	str	r2, [r4, #0]
 8003d8a:	701e      	strb	r6, [r3, #0]
 8003d8c:	6963      	ldr	r3, [r4, #20]
 8003d8e:	3001      	adds	r0, #1
 8003d90:	4283      	cmp	r3, r0
 8003d92:	d004      	beq.n	8003d9e <__swbuf_r+0x62>
 8003d94:	89a3      	ldrh	r3, [r4, #12]
 8003d96:	07db      	lsls	r3, r3, #31
 8003d98:	d506      	bpl.n	8003da8 <__swbuf_r+0x6c>
 8003d9a:	2e0a      	cmp	r6, #10
 8003d9c:	d104      	bne.n	8003da8 <__swbuf_r+0x6c>
 8003d9e:	4621      	mov	r1, r4
 8003da0:	4628      	mov	r0, r5
 8003da2:	f000 f911 	bl	8003fc8 <_fflush_r>
 8003da6:	b988      	cbnz	r0, 8003dcc <__swbuf_r+0x90>
 8003da8:	4638      	mov	r0, r7
 8003daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dac:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <__swbuf_r+0x9c>)
 8003dae:	429c      	cmp	r4, r3
 8003db0:	d101      	bne.n	8003db6 <__swbuf_r+0x7a>
 8003db2:	68ac      	ldr	r4, [r5, #8]
 8003db4:	e7cf      	b.n	8003d56 <__swbuf_r+0x1a>
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <__swbuf_r+0xa0>)
 8003db8:	429c      	cmp	r4, r3
 8003dba:	bf08      	it	eq
 8003dbc:	68ec      	ldreq	r4, [r5, #12]
 8003dbe:	e7ca      	b.n	8003d56 <__swbuf_r+0x1a>
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	f000 f80c 	bl	8003de0 <__swsetup_r>
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d0cb      	beq.n	8003d64 <__swbuf_r+0x28>
 8003dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8003dd0:	e7ea      	b.n	8003da8 <__swbuf_r+0x6c>
 8003dd2:	bf00      	nop
 8003dd4:	08004ccc 	.word	0x08004ccc
 8003dd8:	08004cec 	.word	0x08004cec
 8003ddc:	08004cac 	.word	0x08004cac

08003de0 <__swsetup_r>:
 8003de0:	4b32      	ldr	r3, [pc, #200]	; (8003eac <__swsetup_r+0xcc>)
 8003de2:	b570      	push	{r4, r5, r6, lr}
 8003de4:	681d      	ldr	r5, [r3, #0]
 8003de6:	4606      	mov	r6, r0
 8003de8:	460c      	mov	r4, r1
 8003dea:	b125      	cbz	r5, 8003df6 <__swsetup_r+0x16>
 8003dec:	69ab      	ldr	r3, [r5, #24]
 8003dee:	b913      	cbnz	r3, 8003df6 <__swsetup_r+0x16>
 8003df0:	4628      	mov	r0, r5
 8003df2:	f000 f97d 	bl	80040f0 <__sinit>
 8003df6:	4b2e      	ldr	r3, [pc, #184]	; (8003eb0 <__swsetup_r+0xd0>)
 8003df8:	429c      	cmp	r4, r3
 8003dfa:	d10f      	bne.n	8003e1c <__swsetup_r+0x3c>
 8003dfc:	686c      	ldr	r4, [r5, #4]
 8003dfe:	89a3      	ldrh	r3, [r4, #12]
 8003e00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e04:	0719      	lsls	r1, r3, #28
 8003e06:	d42c      	bmi.n	8003e62 <__swsetup_r+0x82>
 8003e08:	06dd      	lsls	r5, r3, #27
 8003e0a:	d411      	bmi.n	8003e30 <__swsetup_r+0x50>
 8003e0c:	2309      	movs	r3, #9
 8003e0e:	6033      	str	r3, [r6, #0]
 8003e10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e14:	81a3      	strh	r3, [r4, #12]
 8003e16:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1a:	e03e      	b.n	8003e9a <__swsetup_r+0xba>
 8003e1c:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <__swsetup_r+0xd4>)
 8003e1e:	429c      	cmp	r4, r3
 8003e20:	d101      	bne.n	8003e26 <__swsetup_r+0x46>
 8003e22:	68ac      	ldr	r4, [r5, #8]
 8003e24:	e7eb      	b.n	8003dfe <__swsetup_r+0x1e>
 8003e26:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <__swsetup_r+0xd8>)
 8003e28:	429c      	cmp	r4, r3
 8003e2a:	bf08      	it	eq
 8003e2c:	68ec      	ldreq	r4, [r5, #12]
 8003e2e:	e7e6      	b.n	8003dfe <__swsetup_r+0x1e>
 8003e30:	0758      	lsls	r0, r3, #29
 8003e32:	d512      	bpl.n	8003e5a <__swsetup_r+0x7a>
 8003e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e36:	b141      	cbz	r1, 8003e4a <__swsetup_r+0x6a>
 8003e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e3c:	4299      	cmp	r1, r3
 8003e3e:	d002      	beq.n	8003e46 <__swsetup_r+0x66>
 8003e40:	4630      	mov	r0, r6
 8003e42:	f000 fa59 	bl	80042f8 <_free_r>
 8003e46:	2300      	movs	r3, #0
 8003e48:	6363      	str	r3, [r4, #52]	; 0x34
 8003e4a:	89a3      	ldrh	r3, [r4, #12]
 8003e4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e50:	81a3      	strh	r3, [r4, #12]
 8003e52:	2300      	movs	r3, #0
 8003e54:	6063      	str	r3, [r4, #4]
 8003e56:	6923      	ldr	r3, [r4, #16]
 8003e58:	6023      	str	r3, [r4, #0]
 8003e5a:	89a3      	ldrh	r3, [r4, #12]
 8003e5c:	f043 0308 	orr.w	r3, r3, #8
 8003e60:	81a3      	strh	r3, [r4, #12]
 8003e62:	6923      	ldr	r3, [r4, #16]
 8003e64:	b94b      	cbnz	r3, 8003e7a <__swsetup_r+0x9a>
 8003e66:	89a3      	ldrh	r3, [r4, #12]
 8003e68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e70:	d003      	beq.n	8003e7a <__swsetup_r+0x9a>
 8003e72:	4621      	mov	r1, r4
 8003e74:	4630      	mov	r0, r6
 8003e76:	f000 f9ff 	bl	8004278 <__smakebuf_r>
 8003e7a:	89a0      	ldrh	r0, [r4, #12]
 8003e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e80:	f010 0301 	ands.w	r3, r0, #1
 8003e84:	d00a      	beq.n	8003e9c <__swsetup_r+0xbc>
 8003e86:	2300      	movs	r3, #0
 8003e88:	60a3      	str	r3, [r4, #8]
 8003e8a:	6963      	ldr	r3, [r4, #20]
 8003e8c:	425b      	negs	r3, r3
 8003e8e:	61a3      	str	r3, [r4, #24]
 8003e90:	6923      	ldr	r3, [r4, #16]
 8003e92:	b943      	cbnz	r3, 8003ea6 <__swsetup_r+0xc6>
 8003e94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e98:	d1ba      	bne.n	8003e10 <__swsetup_r+0x30>
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
 8003e9c:	0781      	lsls	r1, r0, #30
 8003e9e:	bf58      	it	pl
 8003ea0:	6963      	ldrpl	r3, [r4, #20]
 8003ea2:	60a3      	str	r3, [r4, #8]
 8003ea4:	e7f4      	b.n	8003e90 <__swsetup_r+0xb0>
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	e7f7      	b.n	8003e9a <__swsetup_r+0xba>
 8003eaa:	bf00      	nop
 8003eac:	2000000c 	.word	0x2000000c
 8003eb0:	08004ccc 	.word	0x08004ccc
 8003eb4:	08004cec 	.word	0x08004cec
 8003eb8:	08004cac 	.word	0x08004cac

08003ebc <__sflush_r>:
 8003ebc:	898a      	ldrh	r2, [r1, #12]
 8003ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ec2:	4605      	mov	r5, r0
 8003ec4:	0710      	lsls	r0, r2, #28
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	d458      	bmi.n	8003f7c <__sflush_r+0xc0>
 8003eca:	684b      	ldr	r3, [r1, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	dc05      	bgt.n	8003edc <__sflush_r+0x20>
 8003ed0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	dc02      	bgt.n	8003edc <__sflush_r+0x20>
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003edc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ede:	2e00      	cmp	r6, #0
 8003ee0:	d0f9      	beq.n	8003ed6 <__sflush_r+0x1a>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ee8:	682f      	ldr	r7, [r5, #0]
 8003eea:	602b      	str	r3, [r5, #0]
 8003eec:	d032      	beq.n	8003f54 <__sflush_r+0x98>
 8003eee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ef0:	89a3      	ldrh	r3, [r4, #12]
 8003ef2:	075a      	lsls	r2, r3, #29
 8003ef4:	d505      	bpl.n	8003f02 <__sflush_r+0x46>
 8003ef6:	6863      	ldr	r3, [r4, #4]
 8003ef8:	1ac0      	subs	r0, r0, r3
 8003efa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003efc:	b10b      	cbz	r3, 8003f02 <__sflush_r+0x46>
 8003efe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f00:	1ac0      	subs	r0, r0, r3
 8003f02:	2300      	movs	r3, #0
 8003f04:	4602      	mov	r2, r0
 8003f06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f08:	6a21      	ldr	r1, [r4, #32]
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	47b0      	blx	r6
 8003f0e:	1c43      	adds	r3, r0, #1
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	d106      	bne.n	8003f22 <__sflush_r+0x66>
 8003f14:	6829      	ldr	r1, [r5, #0]
 8003f16:	291d      	cmp	r1, #29
 8003f18:	d82c      	bhi.n	8003f74 <__sflush_r+0xb8>
 8003f1a:	4a2a      	ldr	r2, [pc, #168]	; (8003fc4 <__sflush_r+0x108>)
 8003f1c:	40ca      	lsrs	r2, r1
 8003f1e:	07d6      	lsls	r6, r2, #31
 8003f20:	d528      	bpl.n	8003f74 <__sflush_r+0xb8>
 8003f22:	2200      	movs	r2, #0
 8003f24:	6062      	str	r2, [r4, #4]
 8003f26:	04d9      	lsls	r1, r3, #19
 8003f28:	6922      	ldr	r2, [r4, #16]
 8003f2a:	6022      	str	r2, [r4, #0]
 8003f2c:	d504      	bpl.n	8003f38 <__sflush_r+0x7c>
 8003f2e:	1c42      	adds	r2, r0, #1
 8003f30:	d101      	bne.n	8003f36 <__sflush_r+0x7a>
 8003f32:	682b      	ldr	r3, [r5, #0]
 8003f34:	b903      	cbnz	r3, 8003f38 <__sflush_r+0x7c>
 8003f36:	6560      	str	r0, [r4, #84]	; 0x54
 8003f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f3a:	602f      	str	r7, [r5, #0]
 8003f3c:	2900      	cmp	r1, #0
 8003f3e:	d0ca      	beq.n	8003ed6 <__sflush_r+0x1a>
 8003f40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f44:	4299      	cmp	r1, r3
 8003f46:	d002      	beq.n	8003f4e <__sflush_r+0x92>
 8003f48:	4628      	mov	r0, r5
 8003f4a:	f000 f9d5 	bl	80042f8 <_free_r>
 8003f4e:	2000      	movs	r0, #0
 8003f50:	6360      	str	r0, [r4, #52]	; 0x34
 8003f52:	e7c1      	b.n	8003ed8 <__sflush_r+0x1c>
 8003f54:	6a21      	ldr	r1, [r4, #32]
 8003f56:	2301      	movs	r3, #1
 8003f58:	4628      	mov	r0, r5
 8003f5a:	47b0      	blx	r6
 8003f5c:	1c41      	adds	r1, r0, #1
 8003f5e:	d1c7      	bne.n	8003ef0 <__sflush_r+0x34>
 8003f60:	682b      	ldr	r3, [r5, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0c4      	beq.n	8003ef0 <__sflush_r+0x34>
 8003f66:	2b1d      	cmp	r3, #29
 8003f68:	d001      	beq.n	8003f6e <__sflush_r+0xb2>
 8003f6a:	2b16      	cmp	r3, #22
 8003f6c:	d101      	bne.n	8003f72 <__sflush_r+0xb6>
 8003f6e:	602f      	str	r7, [r5, #0]
 8003f70:	e7b1      	b.n	8003ed6 <__sflush_r+0x1a>
 8003f72:	89a3      	ldrh	r3, [r4, #12]
 8003f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f78:	81a3      	strh	r3, [r4, #12]
 8003f7a:	e7ad      	b.n	8003ed8 <__sflush_r+0x1c>
 8003f7c:	690f      	ldr	r7, [r1, #16]
 8003f7e:	2f00      	cmp	r7, #0
 8003f80:	d0a9      	beq.n	8003ed6 <__sflush_r+0x1a>
 8003f82:	0793      	lsls	r3, r2, #30
 8003f84:	680e      	ldr	r6, [r1, #0]
 8003f86:	bf08      	it	eq
 8003f88:	694b      	ldreq	r3, [r1, #20]
 8003f8a:	600f      	str	r7, [r1, #0]
 8003f8c:	bf18      	it	ne
 8003f8e:	2300      	movne	r3, #0
 8003f90:	eba6 0807 	sub.w	r8, r6, r7
 8003f94:	608b      	str	r3, [r1, #8]
 8003f96:	f1b8 0f00 	cmp.w	r8, #0
 8003f9a:	dd9c      	ble.n	8003ed6 <__sflush_r+0x1a>
 8003f9c:	6a21      	ldr	r1, [r4, #32]
 8003f9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003fa0:	4643      	mov	r3, r8
 8003fa2:	463a      	mov	r2, r7
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	47b0      	blx	r6
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	dc06      	bgt.n	8003fba <__sflush_r+0xfe>
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb2:	81a3      	strh	r3, [r4, #12]
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb8:	e78e      	b.n	8003ed8 <__sflush_r+0x1c>
 8003fba:	4407      	add	r7, r0
 8003fbc:	eba8 0800 	sub.w	r8, r8, r0
 8003fc0:	e7e9      	b.n	8003f96 <__sflush_r+0xda>
 8003fc2:	bf00      	nop
 8003fc4:	20400001 	.word	0x20400001

08003fc8 <_fflush_r>:
 8003fc8:	b538      	push	{r3, r4, r5, lr}
 8003fca:	690b      	ldr	r3, [r1, #16]
 8003fcc:	4605      	mov	r5, r0
 8003fce:	460c      	mov	r4, r1
 8003fd0:	b913      	cbnz	r3, 8003fd8 <_fflush_r+0x10>
 8003fd2:	2500      	movs	r5, #0
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	bd38      	pop	{r3, r4, r5, pc}
 8003fd8:	b118      	cbz	r0, 8003fe2 <_fflush_r+0x1a>
 8003fda:	6983      	ldr	r3, [r0, #24]
 8003fdc:	b90b      	cbnz	r3, 8003fe2 <_fflush_r+0x1a>
 8003fde:	f000 f887 	bl	80040f0 <__sinit>
 8003fe2:	4b14      	ldr	r3, [pc, #80]	; (8004034 <_fflush_r+0x6c>)
 8003fe4:	429c      	cmp	r4, r3
 8003fe6:	d11b      	bne.n	8004020 <_fflush_r+0x58>
 8003fe8:	686c      	ldr	r4, [r5, #4]
 8003fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0ef      	beq.n	8003fd2 <_fflush_r+0xa>
 8003ff2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ff4:	07d0      	lsls	r0, r2, #31
 8003ff6:	d404      	bmi.n	8004002 <_fflush_r+0x3a>
 8003ff8:	0599      	lsls	r1, r3, #22
 8003ffa:	d402      	bmi.n	8004002 <_fflush_r+0x3a>
 8003ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ffe:	f000 f915 	bl	800422c <__retarget_lock_acquire_recursive>
 8004002:	4628      	mov	r0, r5
 8004004:	4621      	mov	r1, r4
 8004006:	f7ff ff59 	bl	8003ebc <__sflush_r>
 800400a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800400c:	07da      	lsls	r2, r3, #31
 800400e:	4605      	mov	r5, r0
 8004010:	d4e0      	bmi.n	8003fd4 <_fflush_r+0xc>
 8004012:	89a3      	ldrh	r3, [r4, #12]
 8004014:	059b      	lsls	r3, r3, #22
 8004016:	d4dd      	bmi.n	8003fd4 <_fflush_r+0xc>
 8004018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800401a:	f000 f908 	bl	800422e <__retarget_lock_release_recursive>
 800401e:	e7d9      	b.n	8003fd4 <_fflush_r+0xc>
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <_fflush_r+0x70>)
 8004022:	429c      	cmp	r4, r3
 8004024:	d101      	bne.n	800402a <_fflush_r+0x62>
 8004026:	68ac      	ldr	r4, [r5, #8]
 8004028:	e7df      	b.n	8003fea <_fflush_r+0x22>
 800402a:	4b04      	ldr	r3, [pc, #16]	; (800403c <_fflush_r+0x74>)
 800402c:	429c      	cmp	r4, r3
 800402e:	bf08      	it	eq
 8004030:	68ec      	ldreq	r4, [r5, #12]
 8004032:	e7da      	b.n	8003fea <_fflush_r+0x22>
 8004034:	08004ccc 	.word	0x08004ccc
 8004038:	08004cec 	.word	0x08004cec
 800403c:	08004cac 	.word	0x08004cac

08004040 <std>:
 8004040:	2300      	movs	r3, #0
 8004042:	b510      	push	{r4, lr}
 8004044:	4604      	mov	r4, r0
 8004046:	e9c0 3300 	strd	r3, r3, [r0]
 800404a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800404e:	6083      	str	r3, [r0, #8]
 8004050:	8181      	strh	r1, [r0, #12]
 8004052:	6643      	str	r3, [r0, #100]	; 0x64
 8004054:	81c2      	strh	r2, [r0, #14]
 8004056:	6183      	str	r3, [r0, #24]
 8004058:	4619      	mov	r1, r3
 800405a:	2208      	movs	r2, #8
 800405c:	305c      	adds	r0, #92	; 0x5c
 800405e:	f7ff fdd7 	bl	8003c10 <memset>
 8004062:	4b05      	ldr	r3, [pc, #20]	; (8004078 <std+0x38>)
 8004064:	6263      	str	r3, [r4, #36]	; 0x24
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <std+0x3c>)
 8004068:	62a3      	str	r3, [r4, #40]	; 0x28
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <std+0x40>)
 800406c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <std+0x44>)
 8004070:	6224      	str	r4, [r4, #32]
 8004072:	6323      	str	r3, [r4, #48]	; 0x30
 8004074:	bd10      	pop	{r4, pc}
 8004076:	bf00      	nop
 8004078:	08004a49 	.word	0x08004a49
 800407c:	08004a6b 	.word	0x08004a6b
 8004080:	08004aa3 	.word	0x08004aa3
 8004084:	08004ac7 	.word	0x08004ac7

08004088 <_cleanup_r>:
 8004088:	4901      	ldr	r1, [pc, #4]	; (8004090 <_cleanup_r+0x8>)
 800408a:	f000 b8af 	b.w	80041ec <_fwalk_reent>
 800408e:	bf00      	nop
 8004090:	08003fc9 	.word	0x08003fc9

08004094 <__sfmoreglue>:
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	1e4a      	subs	r2, r1, #1
 8004098:	2568      	movs	r5, #104	; 0x68
 800409a:	4355      	muls	r5, r2
 800409c:	460e      	mov	r6, r1
 800409e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80040a2:	f000 f979 	bl	8004398 <_malloc_r>
 80040a6:	4604      	mov	r4, r0
 80040a8:	b140      	cbz	r0, 80040bc <__sfmoreglue+0x28>
 80040aa:	2100      	movs	r1, #0
 80040ac:	e9c0 1600 	strd	r1, r6, [r0]
 80040b0:	300c      	adds	r0, #12
 80040b2:	60a0      	str	r0, [r4, #8]
 80040b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80040b8:	f7ff fdaa 	bl	8003c10 <memset>
 80040bc:	4620      	mov	r0, r4
 80040be:	bd70      	pop	{r4, r5, r6, pc}

080040c0 <__sfp_lock_acquire>:
 80040c0:	4801      	ldr	r0, [pc, #4]	; (80040c8 <__sfp_lock_acquire+0x8>)
 80040c2:	f000 b8b3 	b.w	800422c <__retarget_lock_acquire_recursive>
 80040c6:	bf00      	nop
 80040c8:	2000015c 	.word	0x2000015c

080040cc <__sfp_lock_release>:
 80040cc:	4801      	ldr	r0, [pc, #4]	; (80040d4 <__sfp_lock_release+0x8>)
 80040ce:	f000 b8ae 	b.w	800422e <__retarget_lock_release_recursive>
 80040d2:	bf00      	nop
 80040d4:	2000015c 	.word	0x2000015c

080040d8 <__sinit_lock_acquire>:
 80040d8:	4801      	ldr	r0, [pc, #4]	; (80040e0 <__sinit_lock_acquire+0x8>)
 80040da:	f000 b8a7 	b.w	800422c <__retarget_lock_acquire_recursive>
 80040de:	bf00      	nop
 80040e0:	20000157 	.word	0x20000157

080040e4 <__sinit_lock_release>:
 80040e4:	4801      	ldr	r0, [pc, #4]	; (80040ec <__sinit_lock_release+0x8>)
 80040e6:	f000 b8a2 	b.w	800422e <__retarget_lock_release_recursive>
 80040ea:	bf00      	nop
 80040ec:	20000157 	.word	0x20000157

080040f0 <__sinit>:
 80040f0:	b510      	push	{r4, lr}
 80040f2:	4604      	mov	r4, r0
 80040f4:	f7ff fff0 	bl	80040d8 <__sinit_lock_acquire>
 80040f8:	69a3      	ldr	r3, [r4, #24]
 80040fa:	b11b      	cbz	r3, 8004104 <__sinit+0x14>
 80040fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004100:	f7ff bff0 	b.w	80040e4 <__sinit_lock_release>
 8004104:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004108:	6523      	str	r3, [r4, #80]	; 0x50
 800410a:	4b13      	ldr	r3, [pc, #76]	; (8004158 <__sinit+0x68>)
 800410c:	4a13      	ldr	r2, [pc, #76]	; (800415c <__sinit+0x6c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	62a2      	str	r2, [r4, #40]	; 0x28
 8004112:	42a3      	cmp	r3, r4
 8004114:	bf04      	itt	eq
 8004116:	2301      	moveq	r3, #1
 8004118:	61a3      	streq	r3, [r4, #24]
 800411a:	4620      	mov	r0, r4
 800411c:	f000 f820 	bl	8004160 <__sfp>
 8004120:	6060      	str	r0, [r4, #4]
 8004122:	4620      	mov	r0, r4
 8004124:	f000 f81c 	bl	8004160 <__sfp>
 8004128:	60a0      	str	r0, [r4, #8]
 800412a:	4620      	mov	r0, r4
 800412c:	f000 f818 	bl	8004160 <__sfp>
 8004130:	2200      	movs	r2, #0
 8004132:	60e0      	str	r0, [r4, #12]
 8004134:	2104      	movs	r1, #4
 8004136:	6860      	ldr	r0, [r4, #4]
 8004138:	f7ff ff82 	bl	8004040 <std>
 800413c:	68a0      	ldr	r0, [r4, #8]
 800413e:	2201      	movs	r2, #1
 8004140:	2109      	movs	r1, #9
 8004142:	f7ff ff7d 	bl	8004040 <std>
 8004146:	68e0      	ldr	r0, [r4, #12]
 8004148:	2202      	movs	r2, #2
 800414a:	2112      	movs	r1, #18
 800414c:	f7ff ff78 	bl	8004040 <std>
 8004150:	2301      	movs	r3, #1
 8004152:	61a3      	str	r3, [r4, #24]
 8004154:	e7d2      	b.n	80040fc <__sinit+0xc>
 8004156:	bf00      	nop
 8004158:	08004ca8 	.word	0x08004ca8
 800415c:	08004089 	.word	0x08004089

08004160 <__sfp>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	4607      	mov	r7, r0
 8004164:	f7ff ffac 	bl	80040c0 <__sfp_lock_acquire>
 8004168:	4b1e      	ldr	r3, [pc, #120]	; (80041e4 <__sfp+0x84>)
 800416a:	681e      	ldr	r6, [r3, #0]
 800416c:	69b3      	ldr	r3, [r6, #24]
 800416e:	b913      	cbnz	r3, 8004176 <__sfp+0x16>
 8004170:	4630      	mov	r0, r6
 8004172:	f7ff ffbd 	bl	80040f0 <__sinit>
 8004176:	3648      	adds	r6, #72	; 0x48
 8004178:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800417c:	3b01      	subs	r3, #1
 800417e:	d503      	bpl.n	8004188 <__sfp+0x28>
 8004180:	6833      	ldr	r3, [r6, #0]
 8004182:	b30b      	cbz	r3, 80041c8 <__sfp+0x68>
 8004184:	6836      	ldr	r6, [r6, #0]
 8004186:	e7f7      	b.n	8004178 <__sfp+0x18>
 8004188:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800418c:	b9d5      	cbnz	r5, 80041c4 <__sfp+0x64>
 800418e:	4b16      	ldr	r3, [pc, #88]	; (80041e8 <__sfp+0x88>)
 8004190:	60e3      	str	r3, [r4, #12]
 8004192:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004196:	6665      	str	r5, [r4, #100]	; 0x64
 8004198:	f000 f847 	bl	800422a <__retarget_lock_init_recursive>
 800419c:	f7ff ff96 	bl	80040cc <__sfp_lock_release>
 80041a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80041a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80041a8:	6025      	str	r5, [r4, #0]
 80041aa:	61a5      	str	r5, [r4, #24]
 80041ac:	2208      	movs	r2, #8
 80041ae:	4629      	mov	r1, r5
 80041b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80041b4:	f7ff fd2c 	bl	8003c10 <memset>
 80041b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80041bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80041c0:	4620      	mov	r0, r4
 80041c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041c4:	3468      	adds	r4, #104	; 0x68
 80041c6:	e7d9      	b.n	800417c <__sfp+0x1c>
 80041c8:	2104      	movs	r1, #4
 80041ca:	4638      	mov	r0, r7
 80041cc:	f7ff ff62 	bl	8004094 <__sfmoreglue>
 80041d0:	4604      	mov	r4, r0
 80041d2:	6030      	str	r0, [r6, #0]
 80041d4:	2800      	cmp	r0, #0
 80041d6:	d1d5      	bne.n	8004184 <__sfp+0x24>
 80041d8:	f7ff ff78 	bl	80040cc <__sfp_lock_release>
 80041dc:	230c      	movs	r3, #12
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	e7ee      	b.n	80041c0 <__sfp+0x60>
 80041e2:	bf00      	nop
 80041e4:	08004ca8 	.word	0x08004ca8
 80041e8:	ffff0001 	.word	0xffff0001

080041ec <_fwalk_reent>:
 80041ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041f0:	4606      	mov	r6, r0
 80041f2:	4688      	mov	r8, r1
 80041f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80041f8:	2700      	movs	r7, #0
 80041fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041fe:	f1b9 0901 	subs.w	r9, r9, #1
 8004202:	d505      	bpl.n	8004210 <_fwalk_reent+0x24>
 8004204:	6824      	ldr	r4, [r4, #0]
 8004206:	2c00      	cmp	r4, #0
 8004208:	d1f7      	bne.n	80041fa <_fwalk_reent+0xe>
 800420a:	4638      	mov	r0, r7
 800420c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004210:	89ab      	ldrh	r3, [r5, #12]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d907      	bls.n	8004226 <_fwalk_reent+0x3a>
 8004216:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800421a:	3301      	adds	r3, #1
 800421c:	d003      	beq.n	8004226 <_fwalk_reent+0x3a>
 800421e:	4629      	mov	r1, r5
 8004220:	4630      	mov	r0, r6
 8004222:	47c0      	blx	r8
 8004224:	4307      	orrs	r7, r0
 8004226:	3568      	adds	r5, #104	; 0x68
 8004228:	e7e9      	b.n	80041fe <_fwalk_reent+0x12>

0800422a <__retarget_lock_init_recursive>:
 800422a:	4770      	bx	lr

0800422c <__retarget_lock_acquire_recursive>:
 800422c:	4770      	bx	lr

0800422e <__retarget_lock_release_recursive>:
 800422e:	4770      	bx	lr

08004230 <__swhatbuf_r>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	460e      	mov	r6, r1
 8004234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004238:	2900      	cmp	r1, #0
 800423a:	b096      	sub	sp, #88	; 0x58
 800423c:	4614      	mov	r4, r2
 800423e:	461d      	mov	r5, r3
 8004240:	da07      	bge.n	8004252 <__swhatbuf_r+0x22>
 8004242:	2300      	movs	r3, #0
 8004244:	602b      	str	r3, [r5, #0]
 8004246:	89b3      	ldrh	r3, [r6, #12]
 8004248:	061a      	lsls	r2, r3, #24
 800424a:	d410      	bmi.n	800426e <__swhatbuf_r+0x3e>
 800424c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004250:	e00e      	b.n	8004270 <__swhatbuf_r+0x40>
 8004252:	466a      	mov	r2, sp
 8004254:	f000 fc5e 	bl	8004b14 <_fstat_r>
 8004258:	2800      	cmp	r0, #0
 800425a:	dbf2      	blt.n	8004242 <__swhatbuf_r+0x12>
 800425c:	9a01      	ldr	r2, [sp, #4]
 800425e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004262:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004266:	425a      	negs	r2, r3
 8004268:	415a      	adcs	r2, r3
 800426a:	602a      	str	r2, [r5, #0]
 800426c:	e7ee      	b.n	800424c <__swhatbuf_r+0x1c>
 800426e:	2340      	movs	r3, #64	; 0x40
 8004270:	2000      	movs	r0, #0
 8004272:	6023      	str	r3, [r4, #0]
 8004274:	b016      	add	sp, #88	; 0x58
 8004276:	bd70      	pop	{r4, r5, r6, pc}

08004278 <__smakebuf_r>:
 8004278:	898b      	ldrh	r3, [r1, #12]
 800427a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800427c:	079d      	lsls	r5, r3, #30
 800427e:	4606      	mov	r6, r0
 8004280:	460c      	mov	r4, r1
 8004282:	d507      	bpl.n	8004294 <__smakebuf_r+0x1c>
 8004284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004288:	6023      	str	r3, [r4, #0]
 800428a:	6123      	str	r3, [r4, #16]
 800428c:	2301      	movs	r3, #1
 800428e:	6163      	str	r3, [r4, #20]
 8004290:	b002      	add	sp, #8
 8004292:	bd70      	pop	{r4, r5, r6, pc}
 8004294:	ab01      	add	r3, sp, #4
 8004296:	466a      	mov	r2, sp
 8004298:	f7ff ffca 	bl	8004230 <__swhatbuf_r>
 800429c:	9900      	ldr	r1, [sp, #0]
 800429e:	4605      	mov	r5, r0
 80042a0:	4630      	mov	r0, r6
 80042a2:	f000 f879 	bl	8004398 <_malloc_r>
 80042a6:	b948      	cbnz	r0, 80042bc <__smakebuf_r+0x44>
 80042a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ac:	059a      	lsls	r2, r3, #22
 80042ae:	d4ef      	bmi.n	8004290 <__smakebuf_r+0x18>
 80042b0:	f023 0303 	bic.w	r3, r3, #3
 80042b4:	f043 0302 	orr.w	r3, r3, #2
 80042b8:	81a3      	strh	r3, [r4, #12]
 80042ba:	e7e3      	b.n	8004284 <__smakebuf_r+0xc>
 80042bc:	4b0d      	ldr	r3, [pc, #52]	; (80042f4 <__smakebuf_r+0x7c>)
 80042be:	62b3      	str	r3, [r6, #40]	; 0x28
 80042c0:	89a3      	ldrh	r3, [r4, #12]
 80042c2:	6020      	str	r0, [r4, #0]
 80042c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c8:	81a3      	strh	r3, [r4, #12]
 80042ca:	9b00      	ldr	r3, [sp, #0]
 80042cc:	6163      	str	r3, [r4, #20]
 80042ce:	9b01      	ldr	r3, [sp, #4]
 80042d0:	6120      	str	r0, [r4, #16]
 80042d2:	b15b      	cbz	r3, 80042ec <__smakebuf_r+0x74>
 80042d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042d8:	4630      	mov	r0, r6
 80042da:	f000 fc2d 	bl	8004b38 <_isatty_r>
 80042de:	b128      	cbz	r0, 80042ec <__smakebuf_r+0x74>
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	f023 0303 	bic.w	r3, r3, #3
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	81a3      	strh	r3, [r4, #12]
 80042ec:	89a0      	ldrh	r0, [r4, #12]
 80042ee:	4305      	orrs	r5, r0
 80042f0:	81a5      	strh	r5, [r4, #12]
 80042f2:	e7cd      	b.n	8004290 <__smakebuf_r+0x18>
 80042f4:	08004089 	.word	0x08004089

080042f8 <_free_r>:
 80042f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042fa:	2900      	cmp	r1, #0
 80042fc:	d048      	beq.n	8004390 <_free_r+0x98>
 80042fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004302:	9001      	str	r0, [sp, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	f1a1 0404 	sub.w	r4, r1, #4
 800430a:	bfb8      	it	lt
 800430c:	18e4      	addlt	r4, r4, r3
 800430e:	f000 fc35 	bl	8004b7c <__malloc_lock>
 8004312:	4a20      	ldr	r2, [pc, #128]	; (8004394 <_free_r+0x9c>)
 8004314:	9801      	ldr	r0, [sp, #4]
 8004316:	6813      	ldr	r3, [r2, #0]
 8004318:	4615      	mov	r5, r2
 800431a:	b933      	cbnz	r3, 800432a <_free_r+0x32>
 800431c:	6063      	str	r3, [r4, #4]
 800431e:	6014      	str	r4, [r2, #0]
 8004320:	b003      	add	sp, #12
 8004322:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004326:	f000 bc2f 	b.w	8004b88 <__malloc_unlock>
 800432a:	42a3      	cmp	r3, r4
 800432c:	d90b      	bls.n	8004346 <_free_r+0x4e>
 800432e:	6821      	ldr	r1, [r4, #0]
 8004330:	1862      	adds	r2, r4, r1
 8004332:	4293      	cmp	r3, r2
 8004334:	bf04      	itt	eq
 8004336:	681a      	ldreq	r2, [r3, #0]
 8004338:	685b      	ldreq	r3, [r3, #4]
 800433a:	6063      	str	r3, [r4, #4]
 800433c:	bf04      	itt	eq
 800433e:	1852      	addeq	r2, r2, r1
 8004340:	6022      	streq	r2, [r4, #0]
 8004342:	602c      	str	r4, [r5, #0]
 8004344:	e7ec      	b.n	8004320 <_free_r+0x28>
 8004346:	461a      	mov	r2, r3
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	b10b      	cbz	r3, 8004350 <_free_r+0x58>
 800434c:	42a3      	cmp	r3, r4
 800434e:	d9fa      	bls.n	8004346 <_free_r+0x4e>
 8004350:	6811      	ldr	r1, [r2, #0]
 8004352:	1855      	adds	r5, r2, r1
 8004354:	42a5      	cmp	r5, r4
 8004356:	d10b      	bne.n	8004370 <_free_r+0x78>
 8004358:	6824      	ldr	r4, [r4, #0]
 800435a:	4421      	add	r1, r4
 800435c:	1854      	adds	r4, r2, r1
 800435e:	42a3      	cmp	r3, r4
 8004360:	6011      	str	r1, [r2, #0]
 8004362:	d1dd      	bne.n	8004320 <_free_r+0x28>
 8004364:	681c      	ldr	r4, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	6053      	str	r3, [r2, #4]
 800436a:	4421      	add	r1, r4
 800436c:	6011      	str	r1, [r2, #0]
 800436e:	e7d7      	b.n	8004320 <_free_r+0x28>
 8004370:	d902      	bls.n	8004378 <_free_r+0x80>
 8004372:	230c      	movs	r3, #12
 8004374:	6003      	str	r3, [r0, #0]
 8004376:	e7d3      	b.n	8004320 <_free_r+0x28>
 8004378:	6825      	ldr	r5, [r4, #0]
 800437a:	1961      	adds	r1, r4, r5
 800437c:	428b      	cmp	r3, r1
 800437e:	bf04      	itt	eq
 8004380:	6819      	ldreq	r1, [r3, #0]
 8004382:	685b      	ldreq	r3, [r3, #4]
 8004384:	6063      	str	r3, [r4, #4]
 8004386:	bf04      	itt	eq
 8004388:	1949      	addeq	r1, r1, r5
 800438a:	6021      	streq	r1, [r4, #0]
 800438c:	6054      	str	r4, [r2, #4]
 800438e:	e7c7      	b.n	8004320 <_free_r+0x28>
 8004390:	b003      	add	sp, #12
 8004392:	bd30      	pop	{r4, r5, pc}
 8004394:	20000090 	.word	0x20000090

08004398 <_malloc_r>:
 8004398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439a:	1ccd      	adds	r5, r1, #3
 800439c:	f025 0503 	bic.w	r5, r5, #3
 80043a0:	3508      	adds	r5, #8
 80043a2:	2d0c      	cmp	r5, #12
 80043a4:	bf38      	it	cc
 80043a6:	250c      	movcc	r5, #12
 80043a8:	2d00      	cmp	r5, #0
 80043aa:	4606      	mov	r6, r0
 80043ac:	db01      	blt.n	80043b2 <_malloc_r+0x1a>
 80043ae:	42a9      	cmp	r1, r5
 80043b0:	d903      	bls.n	80043ba <_malloc_r+0x22>
 80043b2:	230c      	movs	r3, #12
 80043b4:	6033      	str	r3, [r6, #0]
 80043b6:	2000      	movs	r0, #0
 80043b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ba:	f000 fbdf 	bl	8004b7c <__malloc_lock>
 80043be:	4921      	ldr	r1, [pc, #132]	; (8004444 <_malloc_r+0xac>)
 80043c0:	680a      	ldr	r2, [r1, #0]
 80043c2:	4614      	mov	r4, r2
 80043c4:	b99c      	cbnz	r4, 80043ee <_malloc_r+0x56>
 80043c6:	4f20      	ldr	r7, [pc, #128]	; (8004448 <_malloc_r+0xb0>)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	b923      	cbnz	r3, 80043d6 <_malloc_r+0x3e>
 80043cc:	4621      	mov	r1, r4
 80043ce:	4630      	mov	r0, r6
 80043d0:	f000 fb2a 	bl	8004a28 <_sbrk_r>
 80043d4:	6038      	str	r0, [r7, #0]
 80043d6:	4629      	mov	r1, r5
 80043d8:	4630      	mov	r0, r6
 80043da:	f000 fb25 	bl	8004a28 <_sbrk_r>
 80043de:	1c43      	adds	r3, r0, #1
 80043e0:	d123      	bne.n	800442a <_malloc_r+0x92>
 80043e2:	230c      	movs	r3, #12
 80043e4:	6033      	str	r3, [r6, #0]
 80043e6:	4630      	mov	r0, r6
 80043e8:	f000 fbce 	bl	8004b88 <__malloc_unlock>
 80043ec:	e7e3      	b.n	80043b6 <_malloc_r+0x1e>
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	1b5b      	subs	r3, r3, r5
 80043f2:	d417      	bmi.n	8004424 <_malloc_r+0x8c>
 80043f4:	2b0b      	cmp	r3, #11
 80043f6:	d903      	bls.n	8004400 <_malloc_r+0x68>
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	441c      	add	r4, r3
 80043fc:	6025      	str	r5, [r4, #0]
 80043fe:	e004      	b.n	800440a <_malloc_r+0x72>
 8004400:	6863      	ldr	r3, [r4, #4]
 8004402:	42a2      	cmp	r2, r4
 8004404:	bf0c      	ite	eq
 8004406:	600b      	streq	r3, [r1, #0]
 8004408:	6053      	strne	r3, [r2, #4]
 800440a:	4630      	mov	r0, r6
 800440c:	f000 fbbc 	bl	8004b88 <__malloc_unlock>
 8004410:	f104 000b 	add.w	r0, r4, #11
 8004414:	1d23      	adds	r3, r4, #4
 8004416:	f020 0007 	bic.w	r0, r0, #7
 800441a:	1ac2      	subs	r2, r0, r3
 800441c:	d0cc      	beq.n	80043b8 <_malloc_r+0x20>
 800441e:	1a1b      	subs	r3, r3, r0
 8004420:	50a3      	str	r3, [r4, r2]
 8004422:	e7c9      	b.n	80043b8 <_malloc_r+0x20>
 8004424:	4622      	mov	r2, r4
 8004426:	6864      	ldr	r4, [r4, #4]
 8004428:	e7cc      	b.n	80043c4 <_malloc_r+0x2c>
 800442a:	1cc4      	adds	r4, r0, #3
 800442c:	f024 0403 	bic.w	r4, r4, #3
 8004430:	42a0      	cmp	r0, r4
 8004432:	d0e3      	beq.n	80043fc <_malloc_r+0x64>
 8004434:	1a21      	subs	r1, r4, r0
 8004436:	4630      	mov	r0, r6
 8004438:	f000 faf6 	bl	8004a28 <_sbrk_r>
 800443c:	3001      	adds	r0, #1
 800443e:	d1dd      	bne.n	80043fc <_malloc_r+0x64>
 8004440:	e7cf      	b.n	80043e2 <_malloc_r+0x4a>
 8004442:	bf00      	nop
 8004444:	20000090 	.word	0x20000090
 8004448:	20000094 	.word	0x20000094

0800444c <__sfputc_r>:
 800444c:	6893      	ldr	r3, [r2, #8]
 800444e:	3b01      	subs	r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	b410      	push	{r4}
 8004454:	6093      	str	r3, [r2, #8]
 8004456:	da08      	bge.n	800446a <__sfputc_r+0x1e>
 8004458:	6994      	ldr	r4, [r2, #24]
 800445a:	42a3      	cmp	r3, r4
 800445c:	db01      	blt.n	8004462 <__sfputc_r+0x16>
 800445e:	290a      	cmp	r1, #10
 8004460:	d103      	bne.n	800446a <__sfputc_r+0x1e>
 8004462:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004466:	f7ff bc69 	b.w	8003d3c <__swbuf_r>
 800446a:	6813      	ldr	r3, [r2, #0]
 800446c:	1c58      	adds	r0, r3, #1
 800446e:	6010      	str	r0, [r2, #0]
 8004470:	7019      	strb	r1, [r3, #0]
 8004472:	4608      	mov	r0, r1
 8004474:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004478:	4770      	bx	lr

0800447a <__sfputs_r>:
 800447a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447c:	4606      	mov	r6, r0
 800447e:	460f      	mov	r7, r1
 8004480:	4614      	mov	r4, r2
 8004482:	18d5      	adds	r5, r2, r3
 8004484:	42ac      	cmp	r4, r5
 8004486:	d101      	bne.n	800448c <__sfputs_r+0x12>
 8004488:	2000      	movs	r0, #0
 800448a:	e007      	b.n	800449c <__sfputs_r+0x22>
 800448c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004490:	463a      	mov	r2, r7
 8004492:	4630      	mov	r0, r6
 8004494:	f7ff ffda 	bl	800444c <__sfputc_r>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d1f3      	bne.n	8004484 <__sfputs_r+0xa>
 800449c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044a0 <_vfiprintf_r>:
 80044a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a4:	460d      	mov	r5, r1
 80044a6:	b09d      	sub	sp, #116	; 0x74
 80044a8:	4614      	mov	r4, r2
 80044aa:	4698      	mov	r8, r3
 80044ac:	4606      	mov	r6, r0
 80044ae:	b118      	cbz	r0, 80044b8 <_vfiprintf_r+0x18>
 80044b0:	6983      	ldr	r3, [r0, #24]
 80044b2:	b90b      	cbnz	r3, 80044b8 <_vfiprintf_r+0x18>
 80044b4:	f7ff fe1c 	bl	80040f0 <__sinit>
 80044b8:	4b89      	ldr	r3, [pc, #548]	; (80046e0 <_vfiprintf_r+0x240>)
 80044ba:	429d      	cmp	r5, r3
 80044bc:	d11b      	bne.n	80044f6 <_vfiprintf_r+0x56>
 80044be:	6875      	ldr	r5, [r6, #4]
 80044c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044c2:	07d9      	lsls	r1, r3, #31
 80044c4:	d405      	bmi.n	80044d2 <_vfiprintf_r+0x32>
 80044c6:	89ab      	ldrh	r3, [r5, #12]
 80044c8:	059a      	lsls	r2, r3, #22
 80044ca:	d402      	bmi.n	80044d2 <_vfiprintf_r+0x32>
 80044cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044ce:	f7ff fead 	bl	800422c <__retarget_lock_acquire_recursive>
 80044d2:	89ab      	ldrh	r3, [r5, #12]
 80044d4:	071b      	lsls	r3, r3, #28
 80044d6:	d501      	bpl.n	80044dc <_vfiprintf_r+0x3c>
 80044d8:	692b      	ldr	r3, [r5, #16]
 80044da:	b9eb      	cbnz	r3, 8004518 <_vfiprintf_r+0x78>
 80044dc:	4629      	mov	r1, r5
 80044de:	4630      	mov	r0, r6
 80044e0:	f7ff fc7e 	bl	8003de0 <__swsetup_r>
 80044e4:	b1c0      	cbz	r0, 8004518 <_vfiprintf_r+0x78>
 80044e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044e8:	07dc      	lsls	r4, r3, #31
 80044ea:	d50e      	bpl.n	800450a <_vfiprintf_r+0x6a>
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295
 80044f0:	b01d      	add	sp, #116	; 0x74
 80044f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044f6:	4b7b      	ldr	r3, [pc, #492]	; (80046e4 <_vfiprintf_r+0x244>)
 80044f8:	429d      	cmp	r5, r3
 80044fa:	d101      	bne.n	8004500 <_vfiprintf_r+0x60>
 80044fc:	68b5      	ldr	r5, [r6, #8]
 80044fe:	e7df      	b.n	80044c0 <_vfiprintf_r+0x20>
 8004500:	4b79      	ldr	r3, [pc, #484]	; (80046e8 <_vfiprintf_r+0x248>)
 8004502:	429d      	cmp	r5, r3
 8004504:	bf08      	it	eq
 8004506:	68f5      	ldreq	r5, [r6, #12]
 8004508:	e7da      	b.n	80044c0 <_vfiprintf_r+0x20>
 800450a:	89ab      	ldrh	r3, [r5, #12]
 800450c:	0598      	lsls	r0, r3, #22
 800450e:	d4ed      	bmi.n	80044ec <_vfiprintf_r+0x4c>
 8004510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004512:	f7ff fe8c 	bl	800422e <__retarget_lock_release_recursive>
 8004516:	e7e9      	b.n	80044ec <_vfiprintf_r+0x4c>
 8004518:	2300      	movs	r3, #0
 800451a:	9309      	str	r3, [sp, #36]	; 0x24
 800451c:	2320      	movs	r3, #32
 800451e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004522:	f8cd 800c 	str.w	r8, [sp, #12]
 8004526:	2330      	movs	r3, #48	; 0x30
 8004528:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80046ec <_vfiprintf_r+0x24c>
 800452c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004530:	f04f 0901 	mov.w	r9, #1
 8004534:	4623      	mov	r3, r4
 8004536:	469a      	mov	sl, r3
 8004538:	f813 2b01 	ldrb.w	r2, [r3], #1
 800453c:	b10a      	cbz	r2, 8004542 <_vfiprintf_r+0xa2>
 800453e:	2a25      	cmp	r2, #37	; 0x25
 8004540:	d1f9      	bne.n	8004536 <_vfiprintf_r+0x96>
 8004542:	ebba 0b04 	subs.w	fp, sl, r4
 8004546:	d00b      	beq.n	8004560 <_vfiprintf_r+0xc0>
 8004548:	465b      	mov	r3, fp
 800454a:	4622      	mov	r2, r4
 800454c:	4629      	mov	r1, r5
 800454e:	4630      	mov	r0, r6
 8004550:	f7ff ff93 	bl	800447a <__sfputs_r>
 8004554:	3001      	adds	r0, #1
 8004556:	f000 80aa 	beq.w	80046ae <_vfiprintf_r+0x20e>
 800455a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800455c:	445a      	add	r2, fp
 800455e:	9209      	str	r2, [sp, #36]	; 0x24
 8004560:	f89a 3000 	ldrb.w	r3, [sl]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80a2 	beq.w	80046ae <_vfiprintf_r+0x20e>
 800456a:	2300      	movs	r3, #0
 800456c:	f04f 32ff 	mov.w	r2, #4294967295
 8004570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004574:	f10a 0a01 	add.w	sl, sl, #1
 8004578:	9304      	str	r3, [sp, #16]
 800457a:	9307      	str	r3, [sp, #28]
 800457c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004580:	931a      	str	r3, [sp, #104]	; 0x68
 8004582:	4654      	mov	r4, sl
 8004584:	2205      	movs	r2, #5
 8004586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800458a:	4858      	ldr	r0, [pc, #352]	; (80046ec <_vfiprintf_r+0x24c>)
 800458c:	f7fb fe20 	bl	80001d0 <memchr>
 8004590:	9a04      	ldr	r2, [sp, #16]
 8004592:	b9d8      	cbnz	r0, 80045cc <_vfiprintf_r+0x12c>
 8004594:	06d1      	lsls	r1, r2, #27
 8004596:	bf44      	itt	mi
 8004598:	2320      	movmi	r3, #32
 800459a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800459e:	0713      	lsls	r3, r2, #28
 80045a0:	bf44      	itt	mi
 80045a2:	232b      	movmi	r3, #43	; 0x2b
 80045a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045a8:	f89a 3000 	ldrb.w	r3, [sl]
 80045ac:	2b2a      	cmp	r3, #42	; 0x2a
 80045ae:	d015      	beq.n	80045dc <_vfiprintf_r+0x13c>
 80045b0:	9a07      	ldr	r2, [sp, #28]
 80045b2:	4654      	mov	r4, sl
 80045b4:	2000      	movs	r0, #0
 80045b6:	f04f 0c0a 	mov.w	ip, #10
 80045ba:	4621      	mov	r1, r4
 80045bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045c0:	3b30      	subs	r3, #48	; 0x30
 80045c2:	2b09      	cmp	r3, #9
 80045c4:	d94e      	bls.n	8004664 <_vfiprintf_r+0x1c4>
 80045c6:	b1b0      	cbz	r0, 80045f6 <_vfiprintf_r+0x156>
 80045c8:	9207      	str	r2, [sp, #28]
 80045ca:	e014      	b.n	80045f6 <_vfiprintf_r+0x156>
 80045cc:	eba0 0308 	sub.w	r3, r0, r8
 80045d0:	fa09 f303 	lsl.w	r3, r9, r3
 80045d4:	4313      	orrs	r3, r2
 80045d6:	9304      	str	r3, [sp, #16]
 80045d8:	46a2      	mov	sl, r4
 80045da:	e7d2      	b.n	8004582 <_vfiprintf_r+0xe2>
 80045dc:	9b03      	ldr	r3, [sp, #12]
 80045de:	1d19      	adds	r1, r3, #4
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	9103      	str	r1, [sp, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bfbb      	ittet	lt
 80045e8:	425b      	neglt	r3, r3
 80045ea:	f042 0202 	orrlt.w	r2, r2, #2
 80045ee:	9307      	strge	r3, [sp, #28]
 80045f0:	9307      	strlt	r3, [sp, #28]
 80045f2:	bfb8      	it	lt
 80045f4:	9204      	strlt	r2, [sp, #16]
 80045f6:	7823      	ldrb	r3, [r4, #0]
 80045f8:	2b2e      	cmp	r3, #46	; 0x2e
 80045fa:	d10c      	bne.n	8004616 <_vfiprintf_r+0x176>
 80045fc:	7863      	ldrb	r3, [r4, #1]
 80045fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004600:	d135      	bne.n	800466e <_vfiprintf_r+0x1ce>
 8004602:	9b03      	ldr	r3, [sp, #12]
 8004604:	1d1a      	adds	r2, r3, #4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	9203      	str	r2, [sp, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	bfb8      	it	lt
 800460e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004612:	3402      	adds	r4, #2
 8004614:	9305      	str	r3, [sp, #20]
 8004616:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80046fc <_vfiprintf_r+0x25c>
 800461a:	7821      	ldrb	r1, [r4, #0]
 800461c:	2203      	movs	r2, #3
 800461e:	4650      	mov	r0, sl
 8004620:	f7fb fdd6 	bl	80001d0 <memchr>
 8004624:	b140      	cbz	r0, 8004638 <_vfiprintf_r+0x198>
 8004626:	2340      	movs	r3, #64	; 0x40
 8004628:	eba0 000a 	sub.w	r0, r0, sl
 800462c:	fa03 f000 	lsl.w	r0, r3, r0
 8004630:	9b04      	ldr	r3, [sp, #16]
 8004632:	4303      	orrs	r3, r0
 8004634:	3401      	adds	r4, #1
 8004636:	9304      	str	r3, [sp, #16]
 8004638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800463c:	482c      	ldr	r0, [pc, #176]	; (80046f0 <_vfiprintf_r+0x250>)
 800463e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004642:	2206      	movs	r2, #6
 8004644:	f7fb fdc4 	bl	80001d0 <memchr>
 8004648:	2800      	cmp	r0, #0
 800464a:	d03f      	beq.n	80046cc <_vfiprintf_r+0x22c>
 800464c:	4b29      	ldr	r3, [pc, #164]	; (80046f4 <_vfiprintf_r+0x254>)
 800464e:	bb1b      	cbnz	r3, 8004698 <_vfiprintf_r+0x1f8>
 8004650:	9b03      	ldr	r3, [sp, #12]
 8004652:	3307      	adds	r3, #7
 8004654:	f023 0307 	bic.w	r3, r3, #7
 8004658:	3308      	adds	r3, #8
 800465a:	9303      	str	r3, [sp, #12]
 800465c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800465e:	443b      	add	r3, r7
 8004660:	9309      	str	r3, [sp, #36]	; 0x24
 8004662:	e767      	b.n	8004534 <_vfiprintf_r+0x94>
 8004664:	fb0c 3202 	mla	r2, ip, r2, r3
 8004668:	460c      	mov	r4, r1
 800466a:	2001      	movs	r0, #1
 800466c:	e7a5      	b.n	80045ba <_vfiprintf_r+0x11a>
 800466e:	2300      	movs	r3, #0
 8004670:	3401      	adds	r4, #1
 8004672:	9305      	str	r3, [sp, #20]
 8004674:	4619      	mov	r1, r3
 8004676:	f04f 0c0a 	mov.w	ip, #10
 800467a:	4620      	mov	r0, r4
 800467c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004680:	3a30      	subs	r2, #48	; 0x30
 8004682:	2a09      	cmp	r2, #9
 8004684:	d903      	bls.n	800468e <_vfiprintf_r+0x1ee>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0c5      	beq.n	8004616 <_vfiprintf_r+0x176>
 800468a:	9105      	str	r1, [sp, #20]
 800468c:	e7c3      	b.n	8004616 <_vfiprintf_r+0x176>
 800468e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004692:	4604      	mov	r4, r0
 8004694:	2301      	movs	r3, #1
 8004696:	e7f0      	b.n	800467a <_vfiprintf_r+0x1da>
 8004698:	ab03      	add	r3, sp, #12
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	462a      	mov	r2, r5
 800469e:	4b16      	ldr	r3, [pc, #88]	; (80046f8 <_vfiprintf_r+0x258>)
 80046a0:	a904      	add	r1, sp, #16
 80046a2:	4630      	mov	r0, r6
 80046a4:	f3af 8000 	nop.w
 80046a8:	4607      	mov	r7, r0
 80046aa:	1c78      	adds	r0, r7, #1
 80046ac:	d1d6      	bne.n	800465c <_vfiprintf_r+0x1bc>
 80046ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046b0:	07d9      	lsls	r1, r3, #31
 80046b2:	d405      	bmi.n	80046c0 <_vfiprintf_r+0x220>
 80046b4:	89ab      	ldrh	r3, [r5, #12]
 80046b6:	059a      	lsls	r2, r3, #22
 80046b8:	d402      	bmi.n	80046c0 <_vfiprintf_r+0x220>
 80046ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046bc:	f7ff fdb7 	bl	800422e <__retarget_lock_release_recursive>
 80046c0:	89ab      	ldrh	r3, [r5, #12]
 80046c2:	065b      	lsls	r3, r3, #25
 80046c4:	f53f af12 	bmi.w	80044ec <_vfiprintf_r+0x4c>
 80046c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046ca:	e711      	b.n	80044f0 <_vfiprintf_r+0x50>
 80046cc:	ab03      	add	r3, sp, #12
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	462a      	mov	r2, r5
 80046d2:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <_vfiprintf_r+0x258>)
 80046d4:	a904      	add	r1, sp, #16
 80046d6:	4630      	mov	r0, r6
 80046d8:	f000 f880 	bl	80047dc <_printf_i>
 80046dc:	e7e4      	b.n	80046a8 <_vfiprintf_r+0x208>
 80046de:	bf00      	nop
 80046e0:	08004ccc 	.word	0x08004ccc
 80046e4:	08004cec 	.word	0x08004cec
 80046e8:	08004cac 	.word	0x08004cac
 80046ec:	08004d0c 	.word	0x08004d0c
 80046f0:	08004d16 	.word	0x08004d16
 80046f4:	00000000 	.word	0x00000000
 80046f8:	0800447b 	.word	0x0800447b
 80046fc:	08004d12 	.word	0x08004d12

08004700 <_printf_common>:
 8004700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004704:	4616      	mov	r6, r2
 8004706:	4699      	mov	r9, r3
 8004708:	688a      	ldr	r2, [r1, #8]
 800470a:	690b      	ldr	r3, [r1, #16]
 800470c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004710:	4293      	cmp	r3, r2
 8004712:	bfb8      	it	lt
 8004714:	4613      	movlt	r3, r2
 8004716:	6033      	str	r3, [r6, #0]
 8004718:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800471c:	4607      	mov	r7, r0
 800471e:	460c      	mov	r4, r1
 8004720:	b10a      	cbz	r2, 8004726 <_printf_common+0x26>
 8004722:	3301      	adds	r3, #1
 8004724:	6033      	str	r3, [r6, #0]
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	0699      	lsls	r1, r3, #26
 800472a:	bf42      	ittt	mi
 800472c:	6833      	ldrmi	r3, [r6, #0]
 800472e:	3302      	addmi	r3, #2
 8004730:	6033      	strmi	r3, [r6, #0]
 8004732:	6825      	ldr	r5, [r4, #0]
 8004734:	f015 0506 	ands.w	r5, r5, #6
 8004738:	d106      	bne.n	8004748 <_printf_common+0x48>
 800473a:	f104 0a19 	add.w	sl, r4, #25
 800473e:	68e3      	ldr	r3, [r4, #12]
 8004740:	6832      	ldr	r2, [r6, #0]
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	42ab      	cmp	r3, r5
 8004746:	dc26      	bgt.n	8004796 <_printf_common+0x96>
 8004748:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800474c:	1e13      	subs	r3, r2, #0
 800474e:	6822      	ldr	r2, [r4, #0]
 8004750:	bf18      	it	ne
 8004752:	2301      	movne	r3, #1
 8004754:	0692      	lsls	r2, r2, #26
 8004756:	d42b      	bmi.n	80047b0 <_printf_common+0xb0>
 8004758:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800475c:	4649      	mov	r1, r9
 800475e:	4638      	mov	r0, r7
 8004760:	47c0      	blx	r8
 8004762:	3001      	adds	r0, #1
 8004764:	d01e      	beq.n	80047a4 <_printf_common+0xa4>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	68e5      	ldr	r5, [r4, #12]
 800476a:	6832      	ldr	r2, [r6, #0]
 800476c:	f003 0306 	and.w	r3, r3, #6
 8004770:	2b04      	cmp	r3, #4
 8004772:	bf08      	it	eq
 8004774:	1aad      	subeq	r5, r5, r2
 8004776:	68a3      	ldr	r3, [r4, #8]
 8004778:	6922      	ldr	r2, [r4, #16]
 800477a:	bf0c      	ite	eq
 800477c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004780:	2500      	movne	r5, #0
 8004782:	4293      	cmp	r3, r2
 8004784:	bfc4      	itt	gt
 8004786:	1a9b      	subgt	r3, r3, r2
 8004788:	18ed      	addgt	r5, r5, r3
 800478a:	2600      	movs	r6, #0
 800478c:	341a      	adds	r4, #26
 800478e:	42b5      	cmp	r5, r6
 8004790:	d11a      	bne.n	80047c8 <_printf_common+0xc8>
 8004792:	2000      	movs	r0, #0
 8004794:	e008      	b.n	80047a8 <_printf_common+0xa8>
 8004796:	2301      	movs	r3, #1
 8004798:	4652      	mov	r2, sl
 800479a:	4649      	mov	r1, r9
 800479c:	4638      	mov	r0, r7
 800479e:	47c0      	blx	r8
 80047a0:	3001      	adds	r0, #1
 80047a2:	d103      	bne.n	80047ac <_printf_common+0xac>
 80047a4:	f04f 30ff 	mov.w	r0, #4294967295
 80047a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ac:	3501      	adds	r5, #1
 80047ae:	e7c6      	b.n	800473e <_printf_common+0x3e>
 80047b0:	18e1      	adds	r1, r4, r3
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	2030      	movs	r0, #48	; 0x30
 80047b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047ba:	4422      	add	r2, r4
 80047bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047c4:	3302      	adds	r3, #2
 80047c6:	e7c7      	b.n	8004758 <_printf_common+0x58>
 80047c8:	2301      	movs	r3, #1
 80047ca:	4622      	mov	r2, r4
 80047cc:	4649      	mov	r1, r9
 80047ce:	4638      	mov	r0, r7
 80047d0:	47c0      	blx	r8
 80047d2:	3001      	adds	r0, #1
 80047d4:	d0e6      	beq.n	80047a4 <_printf_common+0xa4>
 80047d6:	3601      	adds	r6, #1
 80047d8:	e7d9      	b.n	800478e <_printf_common+0x8e>
	...

080047dc <_printf_i>:
 80047dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047e0:	460c      	mov	r4, r1
 80047e2:	4691      	mov	r9, r2
 80047e4:	7e27      	ldrb	r7, [r4, #24]
 80047e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80047e8:	2f78      	cmp	r7, #120	; 0x78
 80047ea:	4680      	mov	r8, r0
 80047ec:	469a      	mov	sl, r3
 80047ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047f2:	d807      	bhi.n	8004804 <_printf_i+0x28>
 80047f4:	2f62      	cmp	r7, #98	; 0x62
 80047f6:	d80a      	bhi.n	800480e <_printf_i+0x32>
 80047f8:	2f00      	cmp	r7, #0
 80047fa:	f000 80d8 	beq.w	80049ae <_printf_i+0x1d2>
 80047fe:	2f58      	cmp	r7, #88	; 0x58
 8004800:	f000 80a3 	beq.w	800494a <_printf_i+0x16e>
 8004804:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004808:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800480c:	e03a      	b.n	8004884 <_printf_i+0xa8>
 800480e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004812:	2b15      	cmp	r3, #21
 8004814:	d8f6      	bhi.n	8004804 <_printf_i+0x28>
 8004816:	a001      	add	r0, pc, #4	; (adr r0, 800481c <_printf_i+0x40>)
 8004818:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800481c:	08004875 	.word	0x08004875
 8004820:	08004889 	.word	0x08004889
 8004824:	08004805 	.word	0x08004805
 8004828:	08004805 	.word	0x08004805
 800482c:	08004805 	.word	0x08004805
 8004830:	08004805 	.word	0x08004805
 8004834:	08004889 	.word	0x08004889
 8004838:	08004805 	.word	0x08004805
 800483c:	08004805 	.word	0x08004805
 8004840:	08004805 	.word	0x08004805
 8004844:	08004805 	.word	0x08004805
 8004848:	08004995 	.word	0x08004995
 800484c:	080048b9 	.word	0x080048b9
 8004850:	08004977 	.word	0x08004977
 8004854:	08004805 	.word	0x08004805
 8004858:	08004805 	.word	0x08004805
 800485c:	080049b7 	.word	0x080049b7
 8004860:	08004805 	.word	0x08004805
 8004864:	080048b9 	.word	0x080048b9
 8004868:	08004805 	.word	0x08004805
 800486c:	08004805 	.word	0x08004805
 8004870:	0800497f 	.word	0x0800497f
 8004874:	680b      	ldr	r3, [r1, #0]
 8004876:	1d1a      	adds	r2, r3, #4
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	600a      	str	r2, [r1, #0]
 800487c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004884:	2301      	movs	r3, #1
 8004886:	e0a3      	b.n	80049d0 <_printf_i+0x1f4>
 8004888:	6825      	ldr	r5, [r4, #0]
 800488a:	6808      	ldr	r0, [r1, #0]
 800488c:	062e      	lsls	r6, r5, #24
 800488e:	f100 0304 	add.w	r3, r0, #4
 8004892:	d50a      	bpl.n	80048aa <_printf_i+0xce>
 8004894:	6805      	ldr	r5, [r0, #0]
 8004896:	600b      	str	r3, [r1, #0]
 8004898:	2d00      	cmp	r5, #0
 800489a:	da03      	bge.n	80048a4 <_printf_i+0xc8>
 800489c:	232d      	movs	r3, #45	; 0x2d
 800489e:	426d      	negs	r5, r5
 80048a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048a4:	485e      	ldr	r0, [pc, #376]	; (8004a20 <_printf_i+0x244>)
 80048a6:	230a      	movs	r3, #10
 80048a8:	e019      	b.n	80048de <_printf_i+0x102>
 80048aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80048ae:	6805      	ldr	r5, [r0, #0]
 80048b0:	600b      	str	r3, [r1, #0]
 80048b2:	bf18      	it	ne
 80048b4:	b22d      	sxthne	r5, r5
 80048b6:	e7ef      	b.n	8004898 <_printf_i+0xbc>
 80048b8:	680b      	ldr	r3, [r1, #0]
 80048ba:	6825      	ldr	r5, [r4, #0]
 80048bc:	1d18      	adds	r0, r3, #4
 80048be:	6008      	str	r0, [r1, #0]
 80048c0:	0628      	lsls	r0, r5, #24
 80048c2:	d501      	bpl.n	80048c8 <_printf_i+0xec>
 80048c4:	681d      	ldr	r5, [r3, #0]
 80048c6:	e002      	b.n	80048ce <_printf_i+0xf2>
 80048c8:	0669      	lsls	r1, r5, #25
 80048ca:	d5fb      	bpl.n	80048c4 <_printf_i+0xe8>
 80048cc:	881d      	ldrh	r5, [r3, #0]
 80048ce:	4854      	ldr	r0, [pc, #336]	; (8004a20 <_printf_i+0x244>)
 80048d0:	2f6f      	cmp	r7, #111	; 0x6f
 80048d2:	bf0c      	ite	eq
 80048d4:	2308      	moveq	r3, #8
 80048d6:	230a      	movne	r3, #10
 80048d8:	2100      	movs	r1, #0
 80048da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048de:	6866      	ldr	r6, [r4, #4]
 80048e0:	60a6      	str	r6, [r4, #8]
 80048e2:	2e00      	cmp	r6, #0
 80048e4:	bfa2      	ittt	ge
 80048e6:	6821      	ldrge	r1, [r4, #0]
 80048e8:	f021 0104 	bicge.w	r1, r1, #4
 80048ec:	6021      	strge	r1, [r4, #0]
 80048ee:	b90d      	cbnz	r5, 80048f4 <_printf_i+0x118>
 80048f0:	2e00      	cmp	r6, #0
 80048f2:	d04d      	beq.n	8004990 <_printf_i+0x1b4>
 80048f4:	4616      	mov	r6, r2
 80048f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80048fa:	fb03 5711 	mls	r7, r3, r1, r5
 80048fe:	5dc7      	ldrb	r7, [r0, r7]
 8004900:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004904:	462f      	mov	r7, r5
 8004906:	42bb      	cmp	r3, r7
 8004908:	460d      	mov	r5, r1
 800490a:	d9f4      	bls.n	80048f6 <_printf_i+0x11a>
 800490c:	2b08      	cmp	r3, #8
 800490e:	d10b      	bne.n	8004928 <_printf_i+0x14c>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	07df      	lsls	r7, r3, #31
 8004914:	d508      	bpl.n	8004928 <_printf_i+0x14c>
 8004916:	6923      	ldr	r3, [r4, #16]
 8004918:	6861      	ldr	r1, [r4, #4]
 800491a:	4299      	cmp	r1, r3
 800491c:	bfde      	ittt	le
 800491e:	2330      	movle	r3, #48	; 0x30
 8004920:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004924:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004928:	1b92      	subs	r2, r2, r6
 800492a:	6122      	str	r2, [r4, #16]
 800492c:	f8cd a000 	str.w	sl, [sp]
 8004930:	464b      	mov	r3, r9
 8004932:	aa03      	add	r2, sp, #12
 8004934:	4621      	mov	r1, r4
 8004936:	4640      	mov	r0, r8
 8004938:	f7ff fee2 	bl	8004700 <_printf_common>
 800493c:	3001      	adds	r0, #1
 800493e:	d14c      	bne.n	80049da <_printf_i+0x1fe>
 8004940:	f04f 30ff 	mov.w	r0, #4294967295
 8004944:	b004      	add	sp, #16
 8004946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494a:	4835      	ldr	r0, [pc, #212]	; (8004a20 <_printf_i+0x244>)
 800494c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	680e      	ldr	r6, [r1, #0]
 8004954:	061f      	lsls	r7, r3, #24
 8004956:	f856 5b04 	ldr.w	r5, [r6], #4
 800495a:	600e      	str	r6, [r1, #0]
 800495c:	d514      	bpl.n	8004988 <_printf_i+0x1ac>
 800495e:	07d9      	lsls	r1, r3, #31
 8004960:	bf44      	itt	mi
 8004962:	f043 0320 	orrmi.w	r3, r3, #32
 8004966:	6023      	strmi	r3, [r4, #0]
 8004968:	b91d      	cbnz	r5, 8004972 <_printf_i+0x196>
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	f023 0320 	bic.w	r3, r3, #32
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	2310      	movs	r3, #16
 8004974:	e7b0      	b.n	80048d8 <_printf_i+0xfc>
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	f043 0320 	orr.w	r3, r3, #32
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	2378      	movs	r3, #120	; 0x78
 8004980:	4828      	ldr	r0, [pc, #160]	; (8004a24 <_printf_i+0x248>)
 8004982:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004986:	e7e3      	b.n	8004950 <_printf_i+0x174>
 8004988:	065e      	lsls	r6, r3, #25
 800498a:	bf48      	it	mi
 800498c:	b2ad      	uxthmi	r5, r5
 800498e:	e7e6      	b.n	800495e <_printf_i+0x182>
 8004990:	4616      	mov	r6, r2
 8004992:	e7bb      	b.n	800490c <_printf_i+0x130>
 8004994:	680b      	ldr	r3, [r1, #0]
 8004996:	6826      	ldr	r6, [r4, #0]
 8004998:	6960      	ldr	r0, [r4, #20]
 800499a:	1d1d      	adds	r5, r3, #4
 800499c:	600d      	str	r5, [r1, #0]
 800499e:	0635      	lsls	r5, r6, #24
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	d501      	bpl.n	80049a8 <_printf_i+0x1cc>
 80049a4:	6018      	str	r0, [r3, #0]
 80049a6:	e002      	b.n	80049ae <_printf_i+0x1d2>
 80049a8:	0671      	lsls	r1, r6, #25
 80049aa:	d5fb      	bpl.n	80049a4 <_printf_i+0x1c8>
 80049ac:	8018      	strh	r0, [r3, #0]
 80049ae:	2300      	movs	r3, #0
 80049b0:	6123      	str	r3, [r4, #16]
 80049b2:	4616      	mov	r6, r2
 80049b4:	e7ba      	b.n	800492c <_printf_i+0x150>
 80049b6:	680b      	ldr	r3, [r1, #0]
 80049b8:	1d1a      	adds	r2, r3, #4
 80049ba:	600a      	str	r2, [r1, #0]
 80049bc:	681e      	ldr	r6, [r3, #0]
 80049be:	6862      	ldr	r2, [r4, #4]
 80049c0:	2100      	movs	r1, #0
 80049c2:	4630      	mov	r0, r6
 80049c4:	f7fb fc04 	bl	80001d0 <memchr>
 80049c8:	b108      	cbz	r0, 80049ce <_printf_i+0x1f2>
 80049ca:	1b80      	subs	r0, r0, r6
 80049cc:	6060      	str	r0, [r4, #4]
 80049ce:	6863      	ldr	r3, [r4, #4]
 80049d0:	6123      	str	r3, [r4, #16]
 80049d2:	2300      	movs	r3, #0
 80049d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049d8:	e7a8      	b.n	800492c <_printf_i+0x150>
 80049da:	6923      	ldr	r3, [r4, #16]
 80049dc:	4632      	mov	r2, r6
 80049de:	4649      	mov	r1, r9
 80049e0:	4640      	mov	r0, r8
 80049e2:	47d0      	blx	sl
 80049e4:	3001      	adds	r0, #1
 80049e6:	d0ab      	beq.n	8004940 <_printf_i+0x164>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	079b      	lsls	r3, r3, #30
 80049ec:	d413      	bmi.n	8004a16 <_printf_i+0x23a>
 80049ee:	68e0      	ldr	r0, [r4, #12]
 80049f0:	9b03      	ldr	r3, [sp, #12]
 80049f2:	4298      	cmp	r0, r3
 80049f4:	bfb8      	it	lt
 80049f6:	4618      	movlt	r0, r3
 80049f8:	e7a4      	b.n	8004944 <_printf_i+0x168>
 80049fa:	2301      	movs	r3, #1
 80049fc:	4632      	mov	r2, r6
 80049fe:	4649      	mov	r1, r9
 8004a00:	4640      	mov	r0, r8
 8004a02:	47d0      	blx	sl
 8004a04:	3001      	adds	r0, #1
 8004a06:	d09b      	beq.n	8004940 <_printf_i+0x164>
 8004a08:	3501      	adds	r5, #1
 8004a0a:	68e3      	ldr	r3, [r4, #12]
 8004a0c:	9903      	ldr	r1, [sp, #12]
 8004a0e:	1a5b      	subs	r3, r3, r1
 8004a10:	42ab      	cmp	r3, r5
 8004a12:	dcf2      	bgt.n	80049fa <_printf_i+0x21e>
 8004a14:	e7eb      	b.n	80049ee <_printf_i+0x212>
 8004a16:	2500      	movs	r5, #0
 8004a18:	f104 0619 	add.w	r6, r4, #25
 8004a1c:	e7f5      	b.n	8004a0a <_printf_i+0x22e>
 8004a1e:	bf00      	nop
 8004a20:	08004d1d 	.word	0x08004d1d
 8004a24:	08004d2e 	.word	0x08004d2e

08004a28 <_sbrk_r>:
 8004a28:	b538      	push	{r3, r4, r5, lr}
 8004a2a:	4d06      	ldr	r5, [pc, #24]	; (8004a44 <_sbrk_r+0x1c>)
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	4604      	mov	r4, r0
 8004a30:	4608      	mov	r0, r1
 8004a32:	602b      	str	r3, [r5, #0]
 8004a34:	f7fc f88e 	bl	8000b54 <_sbrk>
 8004a38:	1c43      	adds	r3, r0, #1
 8004a3a:	d102      	bne.n	8004a42 <_sbrk_r+0x1a>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	b103      	cbz	r3, 8004a42 <_sbrk_r+0x1a>
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	bd38      	pop	{r3, r4, r5, pc}
 8004a44:	20000160 	.word	0x20000160

08004a48 <__sread>:
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a50:	f000 f8a0 	bl	8004b94 <_read_r>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	bfab      	itete	ge
 8004a58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a5a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a5c:	181b      	addge	r3, r3, r0
 8004a5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a62:	bfac      	ite	ge
 8004a64:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a66:	81a3      	strhlt	r3, [r4, #12]
 8004a68:	bd10      	pop	{r4, pc}

08004a6a <__swrite>:
 8004a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a6e:	461f      	mov	r7, r3
 8004a70:	898b      	ldrh	r3, [r1, #12]
 8004a72:	05db      	lsls	r3, r3, #23
 8004a74:	4605      	mov	r5, r0
 8004a76:	460c      	mov	r4, r1
 8004a78:	4616      	mov	r6, r2
 8004a7a:	d505      	bpl.n	8004a88 <__swrite+0x1e>
 8004a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a80:	2302      	movs	r3, #2
 8004a82:	2200      	movs	r2, #0
 8004a84:	f000 f868 	bl	8004b58 <_lseek_r>
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a92:	81a3      	strh	r3, [r4, #12]
 8004a94:	4632      	mov	r2, r6
 8004a96:	463b      	mov	r3, r7
 8004a98:	4628      	mov	r0, r5
 8004a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9e:	f000 b817 	b.w	8004ad0 <_write_r>

08004aa2 <__sseek>:
 8004aa2:	b510      	push	{r4, lr}
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aaa:	f000 f855 	bl	8004b58 <_lseek_r>
 8004aae:	1c43      	adds	r3, r0, #1
 8004ab0:	89a3      	ldrh	r3, [r4, #12]
 8004ab2:	bf15      	itete	ne
 8004ab4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004aba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004abe:	81a3      	strheq	r3, [r4, #12]
 8004ac0:	bf18      	it	ne
 8004ac2:	81a3      	strhne	r3, [r4, #12]
 8004ac4:	bd10      	pop	{r4, pc}

08004ac6 <__sclose>:
 8004ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aca:	f000 b813 	b.w	8004af4 <_close_r>
	...

08004ad0 <_write_r>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	4d07      	ldr	r5, [pc, #28]	; (8004af0 <_write_r+0x20>)
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	4608      	mov	r0, r1
 8004ad8:	4611      	mov	r1, r2
 8004ada:	2200      	movs	r2, #0
 8004adc:	602a      	str	r2, [r5, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f7fb ffe7 	bl	8000ab2 <_write>
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	d102      	bne.n	8004aee <_write_r+0x1e>
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	b103      	cbz	r3, 8004aee <_write_r+0x1e>
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	20000160 	.word	0x20000160

08004af4 <_close_r>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4d06      	ldr	r5, [pc, #24]	; (8004b10 <_close_r+0x1c>)
 8004af8:	2300      	movs	r3, #0
 8004afa:	4604      	mov	r4, r0
 8004afc:	4608      	mov	r0, r1
 8004afe:	602b      	str	r3, [r5, #0]
 8004b00:	f7fb fff3 	bl	8000aea <_close>
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	d102      	bne.n	8004b0e <_close_r+0x1a>
 8004b08:	682b      	ldr	r3, [r5, #0]
 8004b0a:	b103      	cbz	r3, 8004b0e <_close_r+0x1a>
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
 8004b10:	20000160 	.word	0x20000160

08004b14 <_fstat_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	4d07      	ldr	r5, [pc, #28]	; (8004b34 <_fstat_r+0x20>)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	4611      	mov	r1, r2
 8004b20:	602b      	str	r3, [r5, #0]
 8004b22:	f7fb ffee 	bl	8000b02 <_fstat>
 8004b26:	1c43      	adds	r3, r0, #1
 8004b28:	d102      	bne.n	8004b30 <_fstat_r+0x1c>
 8004b2a:	682b      	ldr	r3, [r5, #0]
 8004b2c:	b103      	cbz	r3, 8004b30 <_fstat_r+0x1c>
 8004b2e:	6023      	str	r3, [r4, #0]
 8004b30:	bd38      	pop	{r3, r4, r5, pc}
 8004b32:	bf00      	nop
 8004b34:	20000160 	.word	0x20000160

08004b38 <_isatty_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4d06      	ldr	r5, [pc, #24]	; (8004b54 <_isatty_r+0x1c>)
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	4604      	mov	r4, r0
 8004b40:	4608      	mov	r0, r1
 8004b42:	602b      	str	r3, [r5, #0]
 8004b44:	f7fb ffed 	bl	8000b22 <_isatty>
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	d102      	bne.n	8004b52 <_isatty_r+0x1a>
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	b103      	cbz	r3, 8004b52 <_isatty_r+0x1a>
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
 8004b54:	20000160 	.word	0x20000160

08004b58 <_lseek_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4d07      	ldr	r5, [pc, #28]	; (8004b78 <_lseek_r+0x20>)
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	4608      	mov	r0, r1
 8004b60:	4611      	mov	r1, r2
 8004b62:	2200      	movs	r2, #0
 8004b64:	602a      	str	r2, [r5, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f7fb ffe6 	bl	8000b38 <_lseek>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d102      	bne.n	8004b76 <_lseek_r+0x1e>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	b103      	cbz	r3, 8004b76 <_lseek_r+0x1e>
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	20000160 	.word	0x20000160

08004b7c <__malloc_lock>:
 8004b7c:	4801      	ldr	r0, [pc, #4]	; (8004b84 <__malloc_lock+0x8>)
 8004b7e:	f7ff bb55 	b.w	800422c <__retarget_lock_acquire_recursive>
 8004b82:	bf00      	nop
 8004b84:	20000158 	.word	0x20000158

08004b88 <__malloc_unlock>:
 8004b88:	4801      	ldr	r0, [pc, #4]	; (8004b90 <__malloc_unlock+0x8>)
 8004b8a:	f7ff bb50 	b.w	800422e <__retarget_lock_release_recursive>
 8004b8e:	bf00      	nop
 8004b90:	20000158 	.word	0x20000158

08004b94 <_read_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4d07      	ldr	r5, [pc, #28]	; (8004bb4 <_read_r+0x20>)
 8004b98:	4604      	mov	r4, r0
 8004b9a:	4608      	mov	r0, r1
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	602a      	str	r2, [r5, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f7fb ff68 	bl	8000a78 <_read>
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	d102      	bne.n	8004bb2 <_read_r+0x1e>
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	b103      	cbz	r3, 8004bb2 <_read_r+0x1e>
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
 8004bb4:	20000160 	.word	0x20000160

08004bb8 <_init>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	bf00      	nop
 8004bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bbe:	bc08      	pop	{r3}
 8004bc0:	469e      	mov	lr, r3
 8004bc2:	4770      	bx	lr

08004bc4 <_fini>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	bf00      	nop
 8004bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bca:	bc08      	pop	{r3}
 8004bcc:	469e      	mov	lr, r3
 8004bce:	4770      	bx	lr
